
usbcan_fw_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800933c  0800933c  0001933c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093bc  080093bc  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  080093bc  080093bc  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093bc  080093bc  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093bc  080093bc  000193bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093c0  080093c0  000193c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080093c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  20000184  08009548  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200013a0  08009548  000213a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001230c  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e1  00000000  00000000  000324c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  000358a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  000364a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e0c  00000000  00000000  00036f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001177c  00000000  00000000  00057d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abb52  00000000  00000000  000694c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011501a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ec8  00000000  00000000  0011506c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009324 	.word	0x08009324

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	08009324 	.word	0x08009324

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fb97 	bl	8000900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f81b 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8ab 	bl	8000330 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001da:	f008 fb3d 	bl	8008858 <MX_USB_DEVICE_Init>
  MX_CAN_Init();
 80001de:	f000 f871 	bl	80002c4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buffer[] = "Hello\n";
 80001e2:	4a07      	ldr	r2, [pc, #28]	; (8000200 <main+0x38>)
 80001e4:	463b      	mov	r3, r7
 80001e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001ea:	6018      	str	r0, [r3, #0]
 80001ec:	3304      	adds	r3, #4
 80001ee:	8019      	strh	r1, [r3, #0]
 80001f0:	3302      	adds	r3, #2
 80001f2:	0c0a      	lsrs	r2, r1, #16
 80001f4:	701a      	strb	r2, [r3, #0]
  main_cpp(&hcan,&hUsbDeviceFS);
 80001f6:	4903      	ldr	r1, [pc, #12]	; (8000204 <main+0x3c>)
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <main+0x40>)
 80001fa:	f000 fab9 	bl	8000770 <main_cpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fe:	e7fe      	b.n	80001fe <main+0x36>
 8000200:	0800933c 	.word	0x0800933c
 8000204:	200001d0 	.word	0x200001d0
 8000208:	200001a0 	.word	0x200001a0

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b09c      	sub	sp, #112	; 0x70
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f009 f87a 	bl	8009314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000230:	463b      	mov	r3, r7
 8000232:	2234      	movs	r2, #52	; 0x34
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f009 f86c 	bl	8009314 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023c:	2301      	movs	r3, #1
 800023e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000244:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000256:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000258:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800025c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000262:	4618      	mov	r0, r3
 8000264:	f003 f928 	bl	80034b8 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800026e:	f000 f8c1 	bl	80003f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	2302      	movs	r3, #2
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000282:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000288:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800028c:	2102      	movs	r1, #2
 800028e:	4618      	mov	r0, r3
 8000290:	f004 f950 	bl	8004534 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800029a:	f000 f8ab 	bl	80003f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800029e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002a2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002a4:	2300      	movs	r3, #0
 80002a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a8:	463b      	mov	r3, r7
 80002aa:	4618      	mov	r0, r3
 80002ac:	f004 fb28 	bl	8004900 <HAL_RCCEx_PeriphCLKConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002b6:	f000 f89d 	bl	80003f4 <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3770      	adds	r7, #112	; 0x70
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80002c8:	4b17      	ldr	r3, [pc, #92]	; (8000328 <MX_CAN_Init+0x64>)
 80002ca:	4a18      	ldr	r2, [pc, #96]	; (800032c <MX_CAN_Init+0x68>)
 80002cc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80002ce:	4b16      	ldr	r3, [pc, #88]	; (8000328 <MX_CAN_Init+0x64>)
 80002d0:	2202      	movs	r2, #2
 80002d2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <MX_CAN_Init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <MX_CAN_Init+0x64>)
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_CAN_Init+0x64>)
 80002e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002e6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <MX_CAN_Init+0x64>)
 80002ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80002ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002f0:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <MX_CAN_Init+0x64>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80002f6:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <MX_CAN_Init+0x64>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <MX_CAN_Init+0x64>)
 80002fe:	2200      	movs	r2, #0
 8000300:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <MX_CAN_Init+0x64>)
 8000304:	2200      	movs	r2, #0
 8000306:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <MX_CAN_Init+0x64>)
 800030a:	2200      	movs	r2, #0
 800030c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <MX_CAN_Init+0x64>)
 8000310:	2200      	movs	r2, #0
 8000312:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000314:	4804      	ldr	r0, [pc, #16]	; (8000328 <MX_CAN_Init+0x64>)
 8000316:	f000 fb7d 	bl	8000a14 <HAL_CAN_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000320:	f000 f868 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200001a0 	.word	0x200001a0
 800032c:	40006400 	.word	0x40006400

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000346:	4b29      	ldr	r3, [pc, #164]	; (80003ec <MX_GPIO_Init+0xbc>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a28      	ldr	r2, [pc, #160]	; (80003ec <MX_GPIO_Init+0xbc>)
 800034c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b26      	ldr	r3, [pc, #152]	; (80003ec <MX_GPIO_Init+0xbc>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800035a:	60bb      	str	r3, [r7, #8]
 800035c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035e:	4b23      	ldr	r3, [pc, #140]	; (80003ec <MX_GPIO_Init+0xbc>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <MX_GPIO_Init+0xbc>)
 8000364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000368:	6153      	str	r3, [r2, #20]
 800036a:	4b20      	ldr	r3, [pc, #128]	; (80003ec <MX_GPIO_Init+0xbc>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000376:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <MX_GPIO_Init+0xbc>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <MX_GPIO_Init+0xbc>)
 800037c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <MX_GPIO_Init+0xbc>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800038a:	603b      	str	r3, [r7, #0]
 800038c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000398:	f001 fb8a 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_CAN_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	21f0      	movs	r1, #240	; 0xf0
 80003a0:	4813      	ldr	r0, [pc, #76]	; (80003f0 <MX_GPIO_Init+0xc0>)
 80003a2:	f001 fb85 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USB_PULLUP_Pin */
  GPIO_InitStruct.Pin = USB_PULLUP_Pin;
 80003a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	2300      	movs	r3, #0
 80003b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	2300      	movs	r3, #0
 80003b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USB_PULLUP_GPIO_Port, &GPIO_InitStruct);
 80003b8:	f107 030c 	add.w	r3, r7, #12
 80003bc:	4619      	mov	r1, r3
 80003be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c2:	f001 f9fb 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin LED_GREEN_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 80003c6:	23f0      	movs	r3, #240	; 0xf0
 80003c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d6:	f107 030c 	add.w	r3, r7, #12
 80003da:	4619      	mov	r1, r3
 80003dc:	4804      	ldr	r0, [pc, #16]	; (80003f0 <MX_GPIO_Init+0xc0>)
 80003de:	f001 f9ed 	bl	80017bc <HAL_GPIO_Init>

}
 80003e2:	bf00      	nop
 80003e4:	3720      	adds	r7, #32
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000
 80003f0:	48000400 	.word	0x48000400

080003f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f8:	b672      	cpsid	i
}
 80003fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003fc:	e7fe      	b.n	80003fc <Error_Handler+0x8>
	...

08000400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <HAL_MspInit+0x44>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <HAL_MspInit+0x44>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6193      	str	r3, [r2, #24]
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <HAL_MspInit+0x44>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041e:	4b09      	ldr	r3, [pc, #36]	; (8000444 <HAL_MspInit+0x44>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	4a08      	ldr	r2, [pc, #32]	; (8000444 <HAL_MspInit+0x44>)
 8000424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000428:	61d3      	str	r3, [r2, #28]
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <HAL_MspInit+0x44>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	; 0x28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <HAL_CAN_MspInit+0x8c>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d130      	bne.n	80004cc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800046a:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a1a      	ldr	r2, [pc, #104]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000470:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800047e:	613b      	str	r3, [r7, #16]
 8000480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800049a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800049e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a0:	2302      	movs	r3, #2
 80004a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a8:	2303      	movs	r3, #3
 80004aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80004ac:	2309      	movs	r3, #9
 80004ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	4619      	mov	r1, r3
 80004b6:	4809      	ldr	r0, [pc, #36]	; (80004dc <HAL_CAN_MspInit+0x94>)
 80004b8:	f001 f980 	bl	80017bc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	2015      	movs	r0, #21
 80004c2:	f001 f944 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80004c6:	2015      	movs	r0, #21
 80004c8:	f001 f95d 	bl	8001786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80004cc:	bf00      	nop
 80004ce:	3728      	adds	r7, #40	; 0x28
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40006400 	.word	0x40006400
 80004d8:	40021000 	.word	0x40021000
 80004dc:	48000400 	.word	0x48000400

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <NMI_Handler+0x4>

080004e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <HardFault_Handler+0x4>

080004ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <MemManage_Handler+0x4>

080004f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <UsageFault_Handler+0x4>

080004fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052c:	f000 fa2e 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <CAN_RX1_IRQHandler+0x10>)
 800053a:	f000 fdf4 	bl	8001126 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200001a0 	.word	0x200001a0

08000548 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800054c:	4802      	ldr	r0, [pc, #8]	; (8000558 <USB_LP_IRQHandler+0x10>)
 800054e:	f001 fbcb 	bl	8001ce8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000e94 	.word	0x20000e94

0800055c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <SystemInit+0x20>)
 8000562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <SystemInit+0x20>)
 8000568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800056c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <_ZN6CRSLib3Can6RM03659PillarboxC1EP19__CAN_HandleTypeDef>:
	class Pillarbox final
	{
		CAN_HandleTypeDef * hcan;

	public:
		Pillarbox(CAN_HandleTypeDef *const hcan) noexcept:
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
			hcan{hcan}
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	601a      	str	r2, [r3, #0]
		{}
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <_ZN6CRSLib3Can6RM03659Pillarbox4postEmRNS1_7TxFrameE>:

		void post(const u32 id, TxFrame& frame) noexcept
 800059e:	b590      	push	{r4, r7, lr}
 80005a0:	b08d      	sub	sp, #52	; 0x34
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	60f8      	str	r0, [r7, #12]
 80005a6:	60b9      	str	r1, [r7, #8]
 80005a8:	607a      	str	r2, [r7, #4]
		{
			CAN_TxHeaderTypeDef tx_header
			{
				.StdId = id & max_std_id,
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
				.ExtId = id >> (u32)11,
				.IDE = (id >> (u32)11) ? CAN_ID_EXT : CAN_ID_STD,
				.RTR = frame.header.rtr ? CAN_RTR_REMOTE : CAN_RTR_DATA,
				.DLC = frame.header.dlc,
				.TransmitGlobalTime = frame.header.transmit_global_time ? ENABLE : DISABLE
			};
 80005b0:	61bb      	str	r3, [r7, #24]
				.ExtId = id >> (u32)11,
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	0adb      	lsrs	r3, r3, #11
			};
 80005b6:	61fb      	str	r3, [r7, #28]
				.IDE = (id >> (u32)11) ? CAN_ID_EXT : CAN_ID_STD,
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	0adb      	lsrs	r3, r3, #11
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <_ZN6CRSLib3Can6RM03659Pillarbox4postEmRNS1_7TxFrameE+0x26>
 80005c0:	2304      	movs	r3, #4
 80005c2:	e000      	b.n	80005c6 <_ZN6CRSLib3Can6RM03659Pillarbox4postEmRNS1_7TxFrameE+0x28>
 80005c4:	2300      	movs	r3, #0
			};
 80005c6:	623b      	str	r3, [r7, #32]
				.RTR = frame.header.rtr ? CAN_RTR_REMOTE : CAN_RTR_DATA,
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	785b      	ldrb	r3, [r3, #1]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <_ZN6CRSLib3Can6RM03659Pillarbox4postEmRNS1_7TxFrameE+0x36>
 80005d0:	2302      	movs	r3, #2
 80005d2:	e000      	b.n	80005d6 <_ZN6CRSLib3Can6RM03659Pillarbox4postEmRNS1_7TxFrameE+0x38>
 80005d4:	2300      	movs	r3, #0
			};
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
				.DLC = frame.header.dlc,
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	781b      	ldrb	r3, [r3, #0]
			};
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
				.TransmitGlobalTime = frame.header.transmit_global_time ? ENABLE : DISABLE
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	789b      	ldrb	r3, [r3, #2]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <_ZN6CRSLib3Can6RM03659Pillarbox4postEmRNS1_7TxFrameE+0x4c>
 80005e6:	2301      	movs	r3, #1
 80005e8:	e000      	b.n	80005ec <_ZN6CRSLib3Can6RM03659Pillarbox4postEmRNS1_7TxFrameE+0x4e>
 80005ea:	2300      	movs	r3, #0
			};
 80005ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

			u32 mailbox{};
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]

			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	681c      	ldr	r4, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3303      	adds	r3, #3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f93d 	bl	800087c <_ZNSt5arrayIhLj8EE4dataEv>
 8000602:	4602      	mov	r2, r0
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	f107 0118 	add.w	r1, r7, #24
 800060c:	4620      	mov	r0, r4
 800060e:	f000 fb40 	bl	8000c92 <HAL_CAN_AddTxMessage>
		}
 8000612:	bf00      	nop
 8000614:	3734      	adds	r7, #52	; 0x34
 8000616:	46bd      	mov	sp, r7
 8000618:	bd90      	pop	{r4, r7, pc}

0800061a <_ZNK6CRSLib3Can6RM03659Pillarbox8not_fullEv>:

		bool not_full() const noexcept
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
		{
			return HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 0;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fc0e 	bl	8000e48 <HAL_CAN_GetTxMailboxesFreeLevel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	bf14      	ite	ne
 8000632:	2301      	movne	r3, #1
 8000634:	2300      	moveq	r3, #0
 8000636:	b2db      	uxtb	r3, r3
		}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <_ZN6CRSLib3Can6RM03659LetterboxC1EP19__CAN_HandleTypeDefNS1_9FifoIndexE>:
	{
		CAN_HandleTypeDef * hcan;
		FifoIndex fifo_index;

	public:
		Letterbox(CAN_HandleTypeDef *const hcan, const FifoIndex fifo_index) noexcept:
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
			hcan{hcan},
			fifo_index{fifo_index}
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	605a      	str	r2, [r3, #4]
		{}
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4618      	mov	r0, r3
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <_ZN6CRSLib13to_underlyingINS_3Can6RM03659FifoIndexEEEDaT_>:

namespace CRSLib
{
	template<class Enum>
	requires std::is_enum_v<Enum>
	constexpr auto to_underlying(const Enum x) noexcept
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
	{
		return static_cast<std::underlying_type_t<Enum>>(x);
 800066e:	687b      	ldr	r3, [r7, #4]
	}
 8000670:	4618      	mov	r0, r3
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <_ZN6CRSLib3Can6RM03659Letterbox7receiveERNS1_7RxFrameE>:

		void receive(RxFrame& frame) noexcept
 800067c:	b5b0      	push	{r4, r5, r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
		{
			CAN_RxHeaderTypeDef rx_header{};
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]
 8000696:	615a      	str	r2, [r3, #20]
 8000698:	619a      	str	r2, [r3, #24]

			HAL_CAN_GetRxMessage(hcan, to_underlying(fifo_index), &rx_header, frame.data.data());
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681c      	ldr	r4, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ffdf 	bl	8000666 <_ZN6CRSLib13to_underlyingINS_3Can6RM03659FifoIndexEEEDaT_>
 80006a8:	4605      	mov	r5, r0
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	3310      	adds	r3, #16
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f8e4 	bl	800087c <_ZNSt5arrayIhLj8EE4dataEv>
 80006b4:	4603      	mov	r3, r0
 80006b6:	f107 020c 	add.w	r2, r7, #12
 80006ba:	4629      	mov	r1, r5
 80006bc:	4620      	mov	r0, r4
 80006be:	f000 fbf8 	bl	8000eb2 <HAL_CAN_GetRxMessage>

			frame.header =
			{
				.id = (rx_header.ExtId << (u32)11) | rx_header.StdId,
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	02da      	lsls	r2, r3, #11
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	ea42 0003 	orr.w	r0, r2, r3
				.time_stamp = rx_header.Timestamp,
 80006cc:	6a39      	ldr	r1, [r7, #32]
				.filter_match_index = rx_header.FilterMatchIndex,
 80006ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
				.dlc = static_cast<u8>(rx_header.DLC),
 80006d0:	69fb      	ldr	r3, [r7, #28]
			frame.header =
 80006d2:	b2dd      	uxtb	r5, r3
				.rtr = rx_header.RTR == CAN_RTR_REMOTE
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	bf0c      	ite	eq
 80006da:	2301      	moveq	r3, #1
 80006dc:	2300      	movne	r3, #0
 80006de:	b2dc      	uxtb	r4, r3
			frame.header =
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	6018      	str	r0, [r3, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	6059      	str	r1, [r3, #4]
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	462a      	mov	r2, r5
 80006f0:	731a      	strb	r2, [r3, #12]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	4622      	mov	r2, r4
 80006f6:	735a      	strb	r2, [r3, #13]
			};
		}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	; 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bdb0      	pop	{r4, r5, r7, pc}

08000700 <_ZNK6CRSLib3Can6RM03659Letterbox5emptyEv>:

		bool empty() const noexcept
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
		{
			return HAL_CAN_GetRxFifoFillLevel(hcan, to_underlying(fifo_index)) == 0;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681c      	ldr	r4, [r3, #0]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ffa8 	bl	8000666 <_ZN6CRSLib13to_underlyingINS_3Can6RM03659FifoIndexEEEDaT_>
 8000716:	4603      	mov	r3, r0
 8000718:	4619      	mov	r1, r3
 800071a:	4620      	mov	r0, r4
 800071c:	f000 fcdb 	bl	80010d6 <HAL_CAN_GetRxFifoFillLevel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	bf0c      	ite	eq
 8000726:	2301      	moveq	r3, #1
 8000728:	2300      	movne	r3, #0
 800072a:	b2db      	uxtb	r3, r3
		}
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bd90      	pop	{r4, r7, pc}

08000734 <_ZN6CRSLib3Can6RM036510CanManagerC1EP19__CAN_HandleTypeDef>:
	{
		Pillarbox pillarbox;
		Letterbox letterbox0;
		Letterbox letterbox1;

		CanManager(CAN_HandleTypeDef *const hcan) noexcept:
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
			pillarbox{hcan},
			letterbox0{hcan, FifoIndex::fifo0},
			letterbox1{hcan, FifoIndex::fifo1}
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6839      	ldr	r1, [r7, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff1c 	bl	8000580 <_ZN6CRSLib3Can6RM03659PillarboxC1EP19__CAN_HandleTypeDef>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3304      	adds	r3, #4
 800074c:	2200      	movs	r2, #0
 800074e:	6839      	ldr	r1, [r7, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff75 	bl	8000640 <_ZN6CRSLib3Can6RM03659LetterboxC1EP19__CAN_HandleTypeDefNS1_9FifoIndexE>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	330c      	adds	r3, #12
 800075a:	2201      	movs	r2, #1
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff6e 	bl	8000640 <_ZN6CRSLib3Can6RM03659LetterboxC1EP19__CAN_HandleTypeDefNS1_9FifoIndexE>
		{}
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <main_cpp>:
extern CAN_HandleTypeDef hcan;
extern USBD_HandleTypeDef hUsbDeviceFS;


void main_cpp()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08e      	sub	sp, #56	; 0x38
 8000774:	af00      	add	r7, sp, #0
    CanManager can_manager{&hcan};
 8000776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077a:	493d      	ldr	r1, [pc, #244]	; (8000870 <main_cpp+0x100>)
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ffd9 	bl	8000734 <_ZN6CRSLib3Can6RM036510CanManagerC1EP19__CAN_HandleTypeDef>
//    };
//
//    FilterManager::config_filter_bank(15, filter_arg);
//    [[maybe_unused]] const u32 fmi = filter_arg.filter_match_index;

    HAL_CAN_Start(&hcan);
 8000782:	483b      	ldr	r0, [pc, #236]	; (8000870 <main_cpp+0x100>)
 8000784:	f000 fa41 	bl	8000c0a <HAL_CAN_Start>

    while(true)
    {
        RxFrame rx_frame{};
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]
        if(!can_manager.letterbox0.empty())
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	3304      	adds	r3, #4
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ffad 	bl	8000700 <_ZNK6CRSLib3Can6RM03659Letterbox5emptyEv>
 80007a6:	4603      	mov	r3, r0
 80007a8:	f083 0301 	eor.w	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d026      	beq.n	8000800 <main_cpp+0x90>
        {
            can_manager.letterbox0.receive(rx_frame);
 80007b2:	f107 020c 	add.w	r2, r7, #12
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	3304      	adds	r3, #4
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff5c 	bl	800067c <_ZN6CRSLib3Can6RM03659Letterbox7receiveERNS1_7RxFrameE>

            TxFrame tx_frame{{rx_frame.header.dlc}, rx_frame.data};
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	f8c3 2007 	str.w	r2, [r3, #7]
 80007d0:	7e3b      	ldrb	r3, [r7, #24]
 80007d2:	703b      	strb	r3, [r7, #0]
 80007d4:	1cfa      	adds	r2, r7, #3
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	cb03      	ldmia	r3!, {r0, r1}
 80007dc:	6010      	str	r0, [r2, #0]
 80007de:	6051      	str	r1, [r2, #4]

            if(can_manager.pillarbox.not_full()) can_manager.pillarbox.post(0x100, tx_frame);
 80007e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff18 	bl	800061a <_ZNK6CRSLib3Can6RM03659Pillarbox8not_fullEv>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d007      	beq.n	8000800 <main_cpp+0x90>
 80007f0:	463a      	mov	r2, r7
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fecf 	bl	800059e <_ZN6CRSLib3Can6RM03659Pillarbox4postEmRNS1_7TxFrameE>
        }
        switch(hUsbDeviceFS.dev_state){
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <main_cpp+0x104>)
 8000802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000806:	3b01      	subs	r3, #1
 8000808:	2b03      	cmp	r3, #3
 800080a:	d828      	bhi.n	800085e <main_cpp+0xee>
 800080c:	a201      	add	r2, pc, #4	; (adr r2, 8000814 <main_cpp+0xa4>)
 800080e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000812:	bf00      	nop
 8000814:	08000825 	.word	0x08000825
 8000818:	08000831 	.word	0x08000831
 800081c:	08000853 	.word	0x08000853
 8000820:	0800083d 	.word	0x0800083d
        case USBD_STATE_DEFAULT:
            HAL_GPIO_WritePin(GPIOB,LED_RED_Pin,GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	4813      	ldr	r0, [pc, #76]	; (8000878 <main_cpp+0x108>)
 800082a:	f001 f941 	bl	8001ab0 <HAL_GPIO_WritePin>
            break;
 800082e:	e016      	b.n	800085e <main_cpp+0xee>
        case USBD_STATE_ADDRESSED :
            HAL_GPIO_WritePin(GPIOB,LED_YELLOW_Pin,GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2140      	movs	r1, #64	; 0x40
 8000834:	4810      	ldr	r0, [pc, #64]	; (8000878 <main_cpp+0x108>)
 8000836:	f001 f93b 	bl	8001ab0 <HAL_GPIO_WritePin>
            break;
 800083a:	e010      	b.n	800085e <main_cpp+0xee>
        case USBD_STATE_SUSPENDED  :
            HAL_GPIO_WritePin(GPIOB,LED_RED_Pin,GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2180      	movs	r1, #128	; 0x80
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <main_cpp+0x108>)
 8000842:	f001 f935 	bl	8001ab0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB,LED_YELLOW_Pin,GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2140      	movs	r1, #64	; 0x40
 800084a:	480b      	ldr	r0, [pc, #44]	; (8000878 <main_cpp+0x108>)
 800084c:	f001 f930 	bl	8001ab0 <HAL_GPIO_WritePin>
            break;
 8000850:	e005      	b.n	800085e <main_cpp+0xee>
        case USBD_STATE_CONFIGURED :
            HAL_GPIO_WritePin(GPIOB,LED_CAN_Pin,GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2110      	movs	r1, #16
 8000856:	4808      	ldr	r0, [pc, #32]	; (8000878 <main_cpp+0x108>)
 8000858:	f001 f92a 	bl	8001ab0 <HAL_GPIO_WritePin>
            break;
 800085c:	bf00      	nop
        }
        HAL_Delay(10);
 800085e:	200a      	movs	r0, #10
 8000860:	f000 f8b4 	bl	80009cc <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB,LED_RED_Pin|LED_YELLOW_Pin|LED_CAN_Pin,GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	21d0      	movs	r1, #208	; 0xd0
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <main_cpp+0x108>)
 800086a:	f001 f921 	bl	8001ab0 <HAL_GPIO_WritePin>

    //	 CDC_Transmit_FS(buffer,6);
    }
 800086e:	e78b      	b.n	8000788 <main_cpp+0x18>
 8000870:	200001a0 	.word	0x200001a0
 8000874:	200001d0 	.word	0x200001d0
 8000878:	48000400 	.word	0x48000400

0800087c <_ZNSt5arrayIhLj8EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f805 	bl	8000896 <_ZNSt14__array_traitsIhLj8EE6_S_ptrERA8_Kh>
 800088c:	4603      	mov	r3, r0
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <_ZNSt14__array_traitsIhLj8EE6_S_ptrERA8_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b2:	490e      	ldr	r1, [pc, #56]	; (80008ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <LoopForever+0xe>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c8:	4c0b      	ldr	r4, [pc, #44]	; (80008f8 <LoopForever+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008d6:	f7ff fe41 	bl	800055c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008da:	f008 fcf7 	bl	80092cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008de:	f7ff fc73 	bl	80001c8 <main>

080008e2 <LoopForever>:

LoopForever:
    b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80008f0:	080093c4 	.word	0x080093c4
  ldr r2, =_sbss
 80008f4:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80008f8:	200013a0 	.word	0x200013a0

080008fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC1_2_IRQHandler>
	...

08000900 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_Init+0x28>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_Init+0x28>)
 800090a:	f043 0310 	orr.w	r3, r3, #16
 800090e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 ff11 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	200f      	movs	r0, #15
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff fd70 	bl	8000400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40022000 	.word	0x40022000

0800092c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 ff29 	bl	80017a2 <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 fef1 	bl	800174e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008
 80009b0:	200001c8 	.word	0x200001c8

080009b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	200001c8 	.word	0x200001c8

080009cc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d4:	f7ff ffee 	bl	80009b4 <HAL_GetTick>
 80009d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e4:	d005      	beq.n	80009f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_Delay+0x44>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009f2:	bf00      	nop
 80009f4:	f7ff ffde 	bl	80009b4 <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d8f7      	bhi.n	80009f4 <HAL_Delay+0x28>
  {
  }
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008

08000a14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d101      	bne.n	8000a26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e0ed      	b.n	8000c02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d102      	bne.n	8000a38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fd08 	bl	8000448 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f042 0201 	orr.w	r2, r2, #1
 8000a46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a48:	f7ff ffb4 	bl	80009b4 <HAL_GetTick>
 8000a4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a4e:	e012      	b.n	8000a76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a50:	f7ff ffb0 	bl	80009b4 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	2b0a      	cmp	r3, #10
 8000a5c:	d90b      	bls.n	8000a76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e0c5      	b.n	8000c02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0e5      	beq.n	8000a50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f022 0202 	bic.w	r2, r2, #2
 8000a92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a94:	f7ff ff8e 	bl	80009b4 <HAL_GetTick>
 8000a98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a9a:	e012      	b.n	8000ac2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a9c:	f7ff ff8a 	bl	80009b4 <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b0a      	cmp	r3, #10
 8000aa8:	d90b      	bls.n	8000ac2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2205      	movs	r2, #5
 8000aba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e09f      	b.n	8000c02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1e5      	bne.n	8000a9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7e1b      	ldrb	r3, [r3, #24]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d108      	bne.n	8000aea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	e007      	b.n	8000afa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7e5b      	ldrb	r3, [r3, #25]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d108      	bne.n	8000b14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e007      	b.n	8000b24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7e9b      	ldrb	r3, [r3, #26]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d108      	bne.n	8000b3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f042 0220 	orr.w	r2, r2, #32
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	e007      	b.n	8000b4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f022 0220 	bic.w	r2, r2, #32
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	7edb      	ldrb	r3, [r3, #27]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d108      	bne.n	8000b68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 0210 	bic.w	r2, r2, #16
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	e007      	b.n	8000b78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f042 0210 	orr.w	r2, r2, #16
 8000b76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	7f1b      	ldrb	r3, [r3, #28]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d108      	bne.n	8000b92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f042 0208 	orr.w	r2, r2, #8
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	e007      	b.n	8000ba2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f022 0208 	bic.w	r2, r2, #8
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7f5b      	ldrb	r3, [r3, #29]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d108      	bne.n	8000bbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f042 0204 	orr.w	r2, r2, #4
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	e007      	b.n	8000bcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0204 	bic.w	r2, r2, #4
 8000bca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	ea42 0103 	orr.w	r1, r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	1e5a      	subs	r2, r3, #1
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d12e      	bne.n	8000c7c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2202      	movs	r2, #2
 8000c22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 0201 	bic.w	r2, r2, #1
 8000c34:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c36:	f7ff febd 	bl	80009b4 <HAL_GetTick>
 8000c3a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c3c:	e012      	b.n	8000c64 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c3e:	f7ff feb9 	bl	80009b4 <HAL_GetTick>
 8000c42:	4602      	mov	r2, r0
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	2b0a      	cmp	r3, #10
 8000c4a:	d90b      	bls.n	8000c64 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c50:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2205      	movs	r2, #5
 8000c5c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e012      	b.n	8000c8a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1e5      	bne.n	8000c3e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e006      	b.n	8000c8a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c80:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
  }
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b089      	sub	sp, #36	; 0x24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cb0:	7ffb      	ldrb	r3, [r7, #31]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d003      	beq.n	8000cbe <HAL_CAN_AddTxMessage+0x2c>
 8000cb6:	7ffb      	ldrb	r3, [r7, #31]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	f040 80b8 	bne.w	8000e2e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d10a      	bne.n	8000cde <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d105      	bne.n	8000cde <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f000 80a0 	beq.w	8000e1e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	0e1b      	lsrs	r3, r3, #24
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d907      	bls.n	8000cfe <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e09e      	b.n	8000e3c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10d      	bne.n	8000d2c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d1a:	68f9      	ldr	r1, [r7, #12]
 8000d1c:	6809      	ldr	r1, [r1, #0]
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3318      	adds	r3, #24
 8000d24:	011b      	lsls	r3, r3, #4
 8000d26:	440b      	add	r3, r1
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e00f      	b.n	8000d4c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d36:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d3c:	68f9      	ldr	r1, [r7, #12]
 8000d3e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d40:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3318      	adds	r3, #24
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	440b      	add	r3, r1
 8000d4a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6819      	ldr	r1, [r3, #0]
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	691a      	ldr	r2, [r3, #16]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	3318      	adds	r3, #24
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	440b      	add	r3, r1
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	7d1b      	ldrb	r3, [r3, #20]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d111      	bne.n	8000d8c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3318      	adds	r3, #24
 8000d70:	011b      	lsls	r3, r3, #4
 8000d72:	4413      	add	r3, r2
 8000d74:	3304      	adds	r3, #4
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	6811      	ldr	r1, [r2, #0]
 8000d7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3318      	adds	r3, #24
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	440b      	add	r3, r1
 8000d88:	3304      	adds	r3, #4
 8000d8a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3307      	adds	r3, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	061a      	lsls	r2, r3, #24
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3306      	adds	r3, #6
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	041b      	lsls	r3, r3, #16
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3305      	adds	r3, #5
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	4313      	orrs	r3, r2
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	3204      	adds	r2, #4
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	4610      	mov	r0, r2
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	6811      	ldr	r1, [r2, #0]
 8000db4:	ea43 0200 	orr.w	r2, r3, r0
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	440b      	add	r3, r1
 8000dbe:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000dc2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3303      	adds	r3, #3
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	061a      	lsls	r2, r3, #24
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3302      	adds	r3, #2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	041b      	lsls	r3, r3, #16
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	4313      	orrs	r3, r2
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	7812      	ldrb	r2, [r2, #0]
 8000de4:	4610      	mov	r0, r2
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	6811      	ldr	r1, [r2, #0]
 8000dea:	ea43 0200 	orr.w	r2, r3, r0
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	440b      	add	r3, r1
 8000df4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000df8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3318      	adds	r3, #24
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	4413      	add	r3, r2
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	6811      	ldr	r1, [r2, #0]
 8000e0c:	f043 0201 	orr.w	r2, r3, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3318      	adds	r3, #24
 8000e14:	011b      	lsls	r3, r3, #4
 8000e16:	440b      	add	r3, r1
 8000e18:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e00e      	b.n	8000e3c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e006      	b.n	8000e3c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
  }
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3724      	adds	r7, #36	; 0x24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e5a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e5c:	7afb      	ldrb	r3, [r7, #11]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d002      	beq.n	8000e68 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000e62:	7afb      	ldrb	r3, [r7, #11]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d11d      	bne.n	8000ea4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b087      	sub	sp, #28
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d003      	beq.n	8000ed6 <HAL_CAN_GetRxMessage+0x24>
 8000ece:	7dfb      	ldrb	r3, [r7, #23]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	f040 80f3 	bne.w	80010bc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d10e      	bne.n	8000efa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d116      	bne.n	8000f18 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e0e7      	b.n	80010ca <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d107      	bne.n	8000f18 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e0d8      	b.n	80010ca <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	331b      	adds	r3, #27
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	4413      	add	r3, r2
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0204 	and.w	r2, r3, #4
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10c      	bne.n	8000f50 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	331b      	adds	r3, #27
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	4413      	add	r3, r2
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	0d5b      	lsrs	r3, r3, #21
 8000f46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e00b      	b.n	8000f68 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	331b      	adds	r3, #27
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	4413      	add	r3, r2
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	08db      	lsrs	r3, r3, #3
 8000f60:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	331b      	adds	r3, #27
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	4413      	add	r3, r2
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0202 	and.w	r2, r3, #2
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	331b      	adds	r3, #27
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	4413      	add	r3, r2
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 020f 	and.w	r2, r3, #15
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	331b      	adds	r3, #27
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	331b      	adds	r3, #27
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	4413      	add	r3, r2
 8000fba:	3304      	adds	r3, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	0c1b      	lsrs	r3, r3, #16
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	4413      	add	r3, r2
 8000fd0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	4413      	add	r3, r2
 8000fe6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	0a1a      	lsrs	r2, r3, #8
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	4413      	add	r3, r2
 8001000:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	0c1a      	lsrs	r2, r3, #16
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	3302      	adds	r3, #2
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	4413      	add	r3, r2
 800101a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	0e1a      	lsrs	r2, r3, #24
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	3303      	adds	r3, #3
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	4413      	add	r3, r2
 8001034:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	3304      	adds	r3, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	4413      	add	r3, r2
 800104c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	0a1a      	lsrs	r2, r3, #8
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	3305      	adds	r3, #5
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	4413      	add	r3, r2
 8001066:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	0c1a      	lsrs	r2, r3, #16
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	3306      	adds	r3, #6
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	4413      	add	r3, r2
 8001080:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	0e1a      	lsrs	r2, r3, #24
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	3307      	adds	r3, #7
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d108      	bne.n	80010a8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f042 0220 	orr.w	r2, r2, #32
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	e007      	b.n	80010b8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0220 	orr.w	r2, r2, #32
 80010b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e006      	b.n	80010ca <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
  }
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	371c      	adds	r7, #28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ea:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d002      	beq.n	80010f8 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80010f2:	7afb      	ldrb	r3, [r7, #11]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d10f      	bne.n	8001118 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d106      	bne.n	800110c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	e005      	b.n	8001118 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001118:	68fb      	ldr	r3, [r7, #12]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b08a      	sub	sp, #40	; 0x28
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d07c      	beq.n	8001266 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d023      	beq.n	80011be <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2201      	movs	r2, #1
 800117c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f983 	bl	8001494 <HAL_CAN_TxMailbox0CompleteCallback>
 800118e:	e016      	b.n	80011be <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	2b00      	cmp	r3, #0
 8001198:	d004      	beq.n	80011a4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
 80011a2:	e00c      	b.n	80011be <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d004      	beq.n	80011b8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
 80011b6:	e002      	b.n	80011be <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f989 	bl	80014d0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d024      	beq.n	8001212 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f963 	bl	80014a8 <HAL_CAN_TxMailbox1CompleteCallback>
 80011e2:	e016      	b.n	8001212 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d004      	beq.n	80011f8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
 80011f6:	e00c      	b.n	8001212 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
 800120a:	e002      	b.n	8001212 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f969 	bl	80014e4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d024      	beq.n	8001266 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001224:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 f943 	bl	80014bc <HAL_CAN_TxMailbox2CompleteCallback>
 8001236:	e016      	b.n	8001266 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d004      	beq.n	800124c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
 800124a:	e00c      	b.n	8001266 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d004      	beq.n	8001260 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
 800125e:	e002      	b.n	8001266 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f949 	bl	80014f8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00c      	beq.n	800128a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	d007      	beq.n	800128a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001280:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2210      	movs	r2, #16
 8001288:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00b      	beq.n	80012ac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d006      	beq.n	80012ac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2208      	movs	r2, #8
 80012a4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f93a 	bl	8001520 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d009      	beq.n	80012ca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d002      	beq.n	80012ca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f921 	bl	800150c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00c      	beq.n	80012ee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d007      	beq.n	80012ee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2210      	movs	r2, #16
 80012ec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00b      	beq.n	8001310 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2208      	movs	r2, #8
 8001308:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f91c 	bl	8001548 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	2b00      	cmp	r3, #0
 8001318:	d009      	beq.n	800132e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f903 	bl	8001534 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00b      	beq.n	8001350 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2210      	movs	r2, #16
 8001348:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f906 	bl	800155c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2208      	movs	r2, #8
 800136a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f8ff 	bl	8001570 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d07b      	beq.n	8001474 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	d072      	beq.n	800146c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d043      	beq.n	800146c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d03e      	beq.n	800146c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80013f4:	2b60      	cmp	r3, #96	; 0x60
 80013f6:	d02b      	beq.n	8001450 <HAL_CAN_IRQHandler+0x32a>
 80013f8:	2b60      	cmp	r3, #96	; 0x60
 80013fa:	d82e      	bhi.n	800145a <HAL_CAN_IRQHandler+0x334>
 80013fc:	2b50      	cmp	r3, #80	; 0x50
 80013fe:	d022      	beq.n	8001446 <HAL_CAN_IRQHandler+0x320>
 8001400:	2b50      	cmp	r3, #80	; 0x50
 8001402:	d82a      	bhi.n	800145a <HAL_CAN_IRQHandler+0x334>
 8001404:	2b40      	cmp	r3, #64	; 0x40
 8001406:	d019      	beq.n	800143c <HAL_CAN_IRQHandler+0x316>
 8001408:	2b40      	cmp	r3, #64	; 0x40
 800140a:	d826      	bhi.n	800145a <HAL_CAN_IRQHandler+0x334>
 800140c:	2b30      	cmp	r3, #48	; 0x30
 800140e:	d010      	beq.n	8001432 <HAL_CAN_IRQHandler+0x30c>
 8001410:	2b30      	cmp	r3, #48	; 0x30
 8001412:	d822      	bhi.n	800145a <HAL_CAN_IRQHandler+0x334>
 8001414:	2b10      	cmp	r3, #16
 8001416:	d002      	beq.n	800141e <HAL_CAN_IRQHandler+0x2f8>
 8001418:	2b20      	cmp	r3, #32
 800141a:	d005      	beq.n	8001428 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800141c:	e01d      	b.n	800145a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001426:	e019      	b.n	800145c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001430:	e014      	b.n	800145c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	f043 0320 	orr.w	r3, r3, #32
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800143a:	e00f      	b.n	800145c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001444:	e00a      	b.n	800145c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800144e:	e005      	b.n	800145c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001458:	e000      	b.n	800145c <HAL_CAN_IRQHandler+0x336>
            break;
 800145a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	699a      	ldr	r2, [r3, #24]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800146a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2204      	movs	r2, #4
 8001472:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f87c 	bl	8001584 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	; 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	2b00      	cmp	r3, #0
 800160c:	db0b      	blt.n	8001626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	f003 021f 	and.w	r2, r3, #31
 8001614:	4907      	ldr	r1, [pc, #28]	; (8001634 <__NVIC_EnableIRQ+0x38>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	2001      	movs	r0, #1
 800161e:	fa00 f202 	lsl.w	r2, r0, r2
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	; (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001704:	d301      	bcc.n	800170a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001706:	2301      	movs	r3, #1
 8001708:	e00f      	b.n	800172a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <SysTick_Config+0x40>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001712:	210f      	movs	r1, #15
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f7ff ff8e 	bl	8001638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <SysTick_Config+0x40>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SysTick_Config+0x40>)
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	e000e010 	.word	0xe000e010

08001738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff29 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001760:	f7ff ff3e 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 8001764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	6978      	ldr	r0, [r7, #20]
 800176c:	f7ff ff8e 	bl	800168c <NVIC_EncodePriority>
 8001770:	4602      	mov	r2, r0
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff5d 	bl	8001638 <__NVIC_SetPriority>
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff31 	bl	80015fc <__NVIC_EnableIRQ>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ffa2 	bl	80016f4 <SysTick_Config>
 80017b0:	4603      	mov	r3, r0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ca:	e154      	b.n	8001a76 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	4013      	ands	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8146 	beq.w	8001a70 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d005      	beq.n	80017fc <HAL_GPIO_Init+0x40>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d130      	bne.n	800185e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001832:	2201      	movs	r2, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f003 0201 	and.w	r2, r3, #1
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b03      	cmp	r3, #3
 8001868:	d017      	beq.n	800189a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d123      	bne.n	80018ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	08da      	lsrs	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3208      	adds	r2, #8
 80018ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	220f      	movs	r2, #15
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	08da      	lsrs	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	6939      	ldr	r1, [r7, #16]
 80018ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0203 	and.w	r2, r3, #3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 80a0 	beq.w	8001a70 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001930:	4b58      	ldr	r3, [pc, #352]	; (8001a94 <HAL_GPIO_Init+0x2d8>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a57      	ldr	r2, [pc, #348]	; (8001a94 <HAL_GPIO_Init+0x2d8>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b55      	ldr	r3, [pc, #340]	; (8001a94 <HAL_GPIO_Init+0x2d8>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001948:	4a53      	ldr	r2, [pc, #332]	; (8001a98 <HAL_GPIO_Init+0x2dc>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001972:	d019      	beq.n	80019a8 <HAL_GPIO_Init+0x1ec>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a49      	ldr	r2, [pc, #292]	; (8001a9c <HAL_GPIO_Init+0x2e0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d013      	beq.n	80019a4 <HAL_GPIO_Init+0x1e8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a48      	ldr	r2, [pc, #288]	; (8001aa0 <HAL_GPIO_Init+0x2e4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00d      	beq.n	80019a0 <HAL_GPIO_Init+0x1e4>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a47      	ldr	r2, [pc, #284]	; (8001aa4 <HAL_GPIO_Init+0x2e8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d007      	beq.n	800199c <HAL_GPIO_Init+0x1e0>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a46      	ldr	r2, [pc, #280]	; (8001aa8 <HAL_GPIO_Init+0x2ec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_GPIO_Init+0x1dc>
 8001994:	2304      	movs	r3, #4
 8001996:	e008      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 8001998:	2305      	movs	r3, #5
 800199a:	e006      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 800199c:	2303      	movs	r3, #3
 800199e:	e004      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e002      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 80019a8:	2300      	movs	r3, #0
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	f002 0203 	and.w	r2, r2, #3
 80019b0:	0092      	lsls	r2, r2, #2
 80019b2:	4093      	lsls	r3, r2
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ba:	4937      	ldr	r1, [pc, #220]	; (8001a98 <HAL_GPIO_Init+0x2dc>)
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	3302      	adds	r3, #2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c8:	4b38      	ldr	r3, [pc, #224]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019ec:	4a2f      	ldr	r2, [pc, #188]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a16:	4a25      	ldr	r2, [pc, #148]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a40:	4a1a      	ldr	r2, [pc, #104]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a6a:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3301      	adds	r3, #1
 8001a74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f47f aea3 	bne.w	80017cc <HAL_GPIO_Init+0x10>
  }
}
 8001a86:	bf00      	nop
 8001a88:	bf00      	nop
 8001a8a:	371c      	adds	r7, #28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010000 	.word	0x40010000
 8001a9c:	48000400 	.word	0x48000400
 8001aa0:	48000800 	.word	0x48000800
 8001aa4:	48000c00 	.word	0x48000c00
 8001aa8:	48001000 	.word	0x48001000
 8001aac:	40010400 	.word	0x40010400

08001ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
 8001abc:	4613      	mov	r3, r2
 8001abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac0:	787b      	ldrb	r3, [r7, #1]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001acc:	e002      	b.n	8001ad4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	b08b      	sub	sp, #44	; 0x2c
 8001ae4:	af06      	add	r7, sp, #24
 8001ae6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0d0      	b.n	8001c94 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f007 f8f2 	bl	8008cf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2203      	movs	r2, #3
 8001b10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 f89a 	bl	8004c52 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]
 8001b22:	e04c      	b.n	8001bbe <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	3301      	adds	r3, #1
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	b298      	uxth	r0, r3
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	3336      	adds	r3, #54	; 0x36
 8001b62:	4602      	mov	r2, r0
 8001b64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	440b      	add	r3, r1
 8001b76:	3303      	adds	r3, #3
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b7c:	7bfa      	ldrb	r2, [r7, #15]
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	3338      	adds	r3, #56	; 0x38
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b90:	7bfa      	ldrb	r2, [r7, #15]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	333c      	adds	r3, #60	; 0x3c
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ba4:	7bfa      	ldrb	r2, [r7, #15]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3340      	adds	r3, #64	; 0x40
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d3ad      	bcc.n	8001b24 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
 8001bcc:	e044      	b.n	8001c58 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	3301      	adds	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d3b5      	bcc.n	8001bce <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	687e      	ldr	r6, [r7, #4]
 8001c6a:	466d      	mov	r5, sp
 8001c6c:	f106 0410 	add.w	r4, r6, #16
 8001c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	602b      	str	r3, [r5, #0]
 8001c78:	1d33      	adds	r3, r6, #4
 8001c7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c7c:	6838      	ldr	r0, [r7, #0]
 8001c7e:	f003 f803 	bl	8004c88 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_PCD_Start+0x16>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e016      	b.n	8001ce0 <HAL_PCD_Start+0x44>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f002 ffb0 	bl	8004c24 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f007 fab8 	bl	800923c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f005 f9c5 	bl	8007060 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_PCD_IRQHandler>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
#include "main.h"
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f005 f9be 	bl	8007076 <USB_ReadInterrupts>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d04:	d102      	bne.n	8001d0c <HAL_PCD_IRQHandler+0x24>



    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 faf6 	bl	80022f8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f005 f9b0 	bl	8007076 <USB_ReadInterrupts>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d20:	d112      	bne.n	8001d48 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d34:	b292      	uxth	r2, r2
 8001d36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f007 f881 	bl	8008e42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d40:	2100      	movs	r1, #0
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8c7 	bl	8001ed6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f005 f992 	bl	8007076 <USB_ReadInterrupts>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d5c:	d10b      	bne.n	8001d76 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d70:	b292      	uxth	r2, r2
 8001d72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f005 f97b 	bl	8007076 <USB_ReadInterrupts>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d8a:	d10b      	bne.n	8001da4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d9e:	b292      	uxth	r2, r2
 8001da0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f005 f964 	bl	8007076 <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db8:	d126      	bne.n	8001e08 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0204 	bic.w	r2, r2, #4
 8001dcc:	b292      	uxth	r2, r2
 8001dce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0208 	bic.w	r2, r2, #8
 8001de4:	b292      	uxth	r2, r2
 8001de6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f007 f862 	bl	8008eb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e02:	b292      	uxth	r2, r2
 8001e04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f005 f932 	bl	8007076 <USB_ReadInterrupts>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e1c:	d126      	bne.n	8001e6c <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0208 	orr.w	r2, r2, #8
 8001e30:	b292      	uxth	r2, r2
 8001e32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e48:	b292      	uxth	r2, r2
 8001e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0204 	orr.w	r2, r2, #4
 8001e60:	b292      	uxth	r2, r2
 8001e62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f007 f80a 	bl	8008e80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f005 f900 	bl	8007076 <USB_ReadInterrupts>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e80:	d10e      	bne.n	8001ea0 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e94:	b292      	uxth	r2, r2
 8001e96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f006 ffc3 	bl	8008e26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f005 f8e6 	bl	8007076 <USB_ReadInterrupts>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eb4:	d10b      	bne.n	8001ece <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ec8:	b292      	uxth	r2, r2
 8001eca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_PCD_SetAddress+0x1a>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e013      	b.n	8001f18 <HAL_PCD_SetAddress+0x42>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f005 f895 	bl	8007038 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	4608      	mov	r0, r1
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4603      	mov	r3, r0
 8001f30:	70fb      	strb	r3, [r7, #3]
 8001f32:	460b      	mov	r3, r1
 8001f34:	803b      	strh	r3, [r7, #0]
 8001f36:	4613      	mov	r3, r2
 8001f38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	da0e      	bge.n	8001f64 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	705a      	strb	r2, [r3, #1]
 8001f62:	e00e      	b.n	8001f82 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 0207 	and.w	r2, r3, #7
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f8e:	883a      	ldrh	r2, [r7, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	78ba      	ldrb	r2, [r7, #2]
 8001f98:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	785b      	ldrb	r3, [r3, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d004      	beq.n	8001fac <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fac:	78bb      	ldrb	r3, [r7, #2]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d102      	bne.n	8001fb8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_PCD_EP_Open+0xa6>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e00e      	b.n	8001fe4 <HAL_PCD_EP_Open+0xc4>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68f9      	ldr	r1, [r7, #12]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f002 fe79 	bl	8004ccc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	da0e      	bge.n	800201e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	705a      	strb	r2, [r3, #1]
 800201c:	e00e      	b.n	800203c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 0207 	and.w	r2, r3, #7
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	b2da      	uxtb	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_PCD_EP_Close+0x6a>
 8002052:	2302      	movs	r3, #2
 8002054:	e00e      	b.n	8002074 <HAL_PCD_EP_Close+0x88>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68f9      	ldr	r1, [r7, #12]
 8002064:	4618      	mov	r0, r3
 8002066:	f003 f9c5 	bl	80053f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	460b      	mov	r3, r1
 800208a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800208c:	7afb      	ldrb	r3, [r7, #11]
 800208e:	f003 0207 	and.w	r2, r3, #7
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4413      	add	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2200      	movs	r2, #0
 80020ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020bc:	7afb      	ldrb	r3, [r7, #11]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020c8:	7afb      	ldrb	r3, [r7, #11]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6979      	ldr	r1, [r7, #20]
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 fb78 	bl	80057ce <USB_EPStartXfer>
 80020de:	e005      	b.n	80020ec <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6979      	ldr	r1, [r7, #20]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 fb71 	bl	80057ce <USB_EPStartXfer>
  }

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	f003 0207 	and.w	r2, r3, #7
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002118:	681b      	ldr	r3, [r3, #0]
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	460b      	mov	r3, r1
 8002134:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002136:	7afb      	ldrb	r3, [r7, #11]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4413      	add	r3, r2
 800214a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2200      	movs	r2, #0
 800216a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2201      	movs	r2, #1
 8002170:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002172:	7afb      	ldrb	r3, [r7, #11]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	b2da      	uxtb	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800217e:	7afb      	ldrb	r3, [r7, #11]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	2b00      	cmp	r3, #0
 8002186:	d106      	bne.n	8002196 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6979      	ldr	r1, [r7, #20]
 800218e:	4618      	mov	r0, r3
 8002190:	f003 fb1d 	bl	80057ce <USB_EPStartXfer>
 8002194:	e005      	b.n	80021a2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6979      	ldr	r1, [r7, #20]
 800219c:	4618      	mov	r0, r3
 800219e:	f003 fb16 	bl	80057ce <USB_EPStartXfer>
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	f003 0207 	and.w	r2, r3, #7
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d901      	bls.n	80021ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e03e      	b.n	8002248 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da0e      	bge.n	80021f0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	705a      	strb	r2, [r3, #1]
 80021ee:	e00c      	b.n	800220a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	b2da      	uxtb	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_PCD_EP_SetStall+0x7e>
 8002226:	2302      	movs	r3, #2
 8002228:	e00e      	b.n	8002248 <HAL_PCD_EP_SetStall+0x9c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68f9      	ldr	r1, [r7, #12]
 8002238:	4618      	mov	r0, r3
 800223a:	f004 fdfe 	bl	8006e3a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	f003 020f 	and.w	r2, r3, #15
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	429a      	cmp	r2, r3
 8002268:	d901      	bls.n	800226e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e040      	b.n	80022f0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800226e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002272:	2b00      	cmp	r3, #0
 8002274:	da0e      	bge.n	8002294 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	705a      	strb	r2, [r3, #1]
 8002292:	e00e      	b.n	80022b2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	f003 0207 	and.w	r2, r3, #7
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_PCD_EP_ClrStall+0x82>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e00e      	b.n	80022f0 <HAL_PCD_EP_ClrStall+0xa0>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68f9      	ldr	r1, [r7, #12]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f004 fdfb 	bl	8006edc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <PCD_EP_ISR_Handler>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
#include "main.h"
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b096      	sub	sp, #88	; 0x58
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002300:	e3a9      	b.n	8002a56 <PCD_EP_ISR_Handler+0x75e>
  {

    wIstr = hpcd->Instance->ISTR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800230a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800230e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800231c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002320:	2b00      	cmp	r3, #0
 8002322:	f040 8164 	bne.w	80025ee <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002326:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	d152      	bne.n	80023d8 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800233e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002342:	81fb      	strh	r3, [r7, #14]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	89fb      	ldrh	r3, [r7, #14]
 800234a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800234e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002352:	b29b      	uxth	r3, r3
 8002354:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3328      	adds	r3, #40	; 0x28
 800235a:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002364:	b29b      	uxth	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	3302      	adds	r3, #2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002386:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	441a      	add	r2, r3
 8002392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002394:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002396:	2100      	movs	r1, #0
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f006 fd2a 	bl	8008df2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8355 	beq.w	8002a56 <PCD_EP_ISR_Handler+0x75e>
 80023ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f040 8350 	bne.w	8002a56 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	b292      	uxth	r2, r2
 80023ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023d6:	e33e      	b.n	8002a56 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023de:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023ea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d034      	beq.n	8002460 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fe:	b29b      	uxth	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	3306      	adds	r3, #6
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800241e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002420:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800242c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002432:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002434:	b29b      	uxth	r3, r3
 8002436:	f004 fe74 	bl	8007122 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	b29a      	uxth	r2, r3
 8002442:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002446:	4013      	ands	r3, r2
 8002448:	823b      	strh	r3, [r7, #16]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	8a3a      	ldrh	r2, [r7, #16]
 8002450:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002454:	b292      	uxth	r2, r2
 8002456:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f006 fc9d 	bl	8008d98 <HAL_PCD_SetupStageCallback>
 800245e:	e2fa      	b.n	8002a56 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002460:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002464:	2b00      	cmp	r3, #0
 8002466:	f280 82f6 	bge.w	8002a56 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	b29a      	uxth	r2, r3
 8002472:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002476:	4013      	ands	r3, r2
 8002478:	83fb      	strh	r3, [r7, #30]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	8bfa      	ldrh	r2, [r7, #30]
 8002480:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002484:	b292      	uxth	r2, r2
 8002486:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002490:	b29b      	uxth	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	3306      	adds	r3, #6
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d019      	beq.n	80024f0 <PCD_EP_ISR_Handler+0x1f8>
 80024bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d015      	beq.n	80024f0 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ca:	6959      	ldr	r1, [r3, #20]
 80024cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ce:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f004 fe24 	bl	8007122 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80024da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	441a      	add	r2, r3
 80024e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024e8:	2100      	movs	r1, #0
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f006 fc66 	bl	8008dbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 82aa 	bne.w	8002a56 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002510:	b29b      	uxth	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	4413      	add	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d112      	bne.n	8002550 <PCD_EP_ISR_Handler+0x258>
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002534:	b29a      	uxth	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	801a      	strh	r2, [r3, #0]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002548:	b29a      	uxth	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	e02f      	b.n	80025b0 <PCD_EP_ISR_Handler+0x2b8>
 8002550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b3e      	cmp	r3, #62	; 0x3e
 8002556:	d813      	bhi.n	8002580 <PCD_EP_ISR_Handler+0x288>
 8002558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	085b      	lsrs	r3, r3, #1
 800255e:	647b      	str	r3, [r7, #68]	; 0x44
 8002560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <PCD_EP_ISR_Handler+0x27a>
 800256c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256e:	3301      	adds	r3, #1
 8002570:	647b      	str	r3, [r7, #68]	; 0x44
 8002572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002574:	b29b      	uxth	r3, r3
 8002576:	029b      	lsls	r3, r3, #10
 8002578:	b29a      	uxth	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	e017      	b.n	80025b0 <PCD_EP_ISR_Handler+0x2b8>
 8002580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	647b      	str	r3, [r7, #68]	; 0x44
 8002588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <PCD_EP_ISR_Handler+0x2a2>
 8002594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002596:	3b01      	subs	r3, #1
 8002598:	647b      	str	r3, [r7, #68]	; 0x44
 800259a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259c:	b29b      	uxth	r3, r3
 800259e:	029b      	lsls	r3, r3, #10
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c0:	827b      	strh	r3, [r7, #18]
 80025c2:	8a7b      	ldrh	r3, [r7, #18]
 80025c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025c8:	827b      	strh	r3, [r7, #18]
 80025ca:	8a7b      	ldrh	r3, [r7, #18]
 80025cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025d0:	827b      	strh	r3, [r7, #18]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	8a7b      	ldrh	r3, [r7, #18]
 80025d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	8013      	strh	r3, [r2, #0]
 80025ec:	e233      	b.n	8002a56 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002602:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002606:	2b00      	cmp	r3, #0
 8002608:	f280 80fc 	bge.w	8002804 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	b29a      	uxth	r2, r3
 800261e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002622:	4013      	ands	r3, r2
 8002624:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800263a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800263e:	b292      	uxth	r2, r2
 8002640:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002642:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800265a:	7b1b      	ldrb	r3, [r3, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d125      	bne.n	80026ac <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002668:	b29b      	uxth	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	3306      	adds	r3, #6
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002688:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800268c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8092 	beq.w	80027ba <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800269c:	6959      	ldr	r1, [r3, #20]
 800269e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a0:	88da      	ldrh	r2, [r3, #6]
 80026a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026a6:	f004 fd3c 	bl	8007122 <USB_ReadPMA>
 80026aa:	e086      	b.n	80027ba <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80026ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ae:	78db      	ldrb	r3, [r3, #3]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d10a      	bne.n	80026ca <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80026b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80026b8:	461a      	mov	r2, r3
 80026ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f9d8 	bl	8002a72 <HAL_PCD_EP_DB_Receive>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80026c8:	e077      	b.n	80027ba <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	441a      	add	r2, r3
 80026f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002706:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800270a:	b29b      	uxth	r3, r3
 800270c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d024      	beq.n	8002772 <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002730:	b29b      	uxth	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	3302      	adds	r3, #2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	4413      	add	r3, r2
 8002746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002750:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002754:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002758:	2b00      	cmp	r3, #0
 800275a:	d02e      	beq.n	80027ba <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002762:	6959      	ldr	r1, [r3, #20]
 8002764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002766:	891a      	ldrh	r2, [r3, #8]
 8002768:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800276c:	f004 fcd9 	bl	8007122 <USB_ReadPMA>
 8002770:	e023      	b.n	80027ba <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	3306      	adds	r3, #6
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	4413      	add	r3, r2
 8002790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800279a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800279e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ac:	6959      	ldr	r1, [r3, #20]
 80027ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b0:	895a      	ldrh	r2, [r3, #10]
 80027b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027b6:	f004 fcb4 	bl	8007122 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80027ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027c2:	441a      	add	r2, r3
 80027c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80027c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027d0:	441a      	add	r2, r3
 80027d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <PCD_EP_ISR_Handler+0x4f2>
 80027de:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80027e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d206      	bcs.n	80027f8 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80027ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	4619      	mov	r1, r3
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f006 fae3 	bl	8008dbc <HAL_PCD_DataOutStageCallback>
 80027f6:	e005      	b.n	8002804 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027fe:	4618      	mov	r0, r3
 8002800:	f002 ffe5 	bl	80057ce <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002804:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8122 	beq.w	8002a56 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8002812:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800283c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002840:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	441a      	add	r2, r3
 8002852:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800285a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800285e:	b29b      	uxth	r3, r3
 8002860:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002864:	78db      	ldrb	r3, [r3, #3]
 8002866:	2b02      	cmp	r3, #2
 8002868:	f000 809d 	beq.w	80029a6 <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 800286c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002872:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d046      	beq.n	800290c <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800287e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002880:	785b      	ldrb	r3, [r3, #1]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d126      	bne.n	80028d4 <PCD_EP_ISR_Handler+0x5dc>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002894:	b29b      	uxth	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	4413      	add	r3, r2
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
 800289e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	011a      	lsls	r2, r3, #4
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	4413      	add	r3, r2
 80028a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	801a      	strh	r2, [r3, #0]
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	801a      	strh	r2, [r3, #0]
 80028d2:	e061      	b.n	8002998 <PCD_EP_ISR_Handler+0x6a0>
 80028d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d6:	785b      	ldrb	r3, [r3, #1]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d15d      	bne.n	8002998 <PCD_EP_ISR_Handler+0x6a0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	4413      	add	r3, r2
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	011a      	lsls	r2, r3, #4
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	4413      	add	r3, r2
 80028fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	2200      	movs	r2, #0
 8002908:	801a      	strh	r2, [r3, #0]
 800290a:	e045      	b.n	8002998 <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002914:	785b      	ldrb	r3, [r3, #1]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d126      	bne.n	8002968 <PCD_EP_ISR_Handler+0x670>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002928:	b29b      	uxth	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292e:	4413      	add	r3, r2
 8002930:	637b      	str	r3, [r7, #52]	; 0x34
 8002932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	011a      	lsls	r2, r3, #4
 8002938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293a:	4413      	add	r3, r2
 800293c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002940:	633b      	str	r3, [r7, #48]	; 0x30
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800294c:	b29a      	uxth	r2, r3
 800294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002950:	801a      	strh	r2, [r3, #0]
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800295c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002960:	b29a      	uxth	r2, r3
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	e017      	b.n	8002998 <PCD_EP_ISR_Handler+0x6a0>
 8002968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296a:	785b      	ldrb	r3, [r3, #1]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d113      	bne.n	8002998 <PCD_EP_ISR_Handler+0x6a0>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002978:	b29b      	uxth	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800297e:	4413      	add	r3, r2
 8002980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	011a      	lsls	r2, r3, #4
 8002988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298a:	4413      	add	r3, r2
 800298c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002990:	63bb      	str	r3, [r7, #56]	; 0x38
 8002992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002994:	2200      	movs	r2, #0
 8002996:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4619      	mov	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f006 fa27 	bl	8008df2 <HAL_PCD_DataInStageCallback>
 80029a4:	e057      	b.n	8002a56 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 80029a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a8:	78db      	ldrb	r3, [r3, #3]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d14c      	bne.n	8002a48 <PCD_EP_ISR_Handler+0x750>
 80029ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d146      	bne.n	8002a48 <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	3302      	adds	r3, #2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 80029e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d907      	bls.n	8002a02 <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 80029f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029fa:	1ad2      	subs	r2, r2, r3
 80029fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029fe:	619a      	str	r2, [r3, #24]
 8002a00:	e002      	b.n	8002a08 <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 8002a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a04:	2200      	movs	r2, #0
 8002a06:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d106      	bne.n	8002a1e <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f006 f9eb 	bl	8008df2 <HAL_PCD_DataInStageCallback>
 8002a1c:	e01b      	b.n	8002a56 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a26:	441a      	add	r2, r3
 8002a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2e:	69da      	ldr	r2, [r3, #28]
 8002a30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a34:	441a      	add	r2, r3
 8002a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a38:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 fec4 	bl	80057ce <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a46:	e006      	b.n	8002a56 <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a48:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f91b 	bl	8002c8c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	b21b      	sxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f6ff ac4d 	blt.w	8002302 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3758      	adds	r7, #88	; 0x58
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b088      	sub	sp, #32
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d07e      	beq.n	8002b88 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ab2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	699a      	ldr	r2, [r3, #24]
 8002ab8:	8b7b      	ldrh	r3, [r7, #26]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d306      	bcc.n	8002acc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	8b7b      	ldrh	r3, [r7, #26]
 8002ac4:	1ad2      	subs	r2, r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	619a      	str	r2, [r3, #24]
 8002aca:	e002      	b.n	8002ad2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d123      	bne.n	8002b22 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af4:	833b      	strh	r3, [r7, #24]
 8002af6:	8b3b      	ldrh	r3, [r7, #24]
 8002af8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002afc:	833b      	strh	r3, [r7, #24]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	441a      	add	r2, r3
 8002b0c:	8b3b      	ldrh	r3, [r7, #24]
 8002b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01f      	beq.n	8002b6c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b46:	82fb      	strh	r3, [r7, #22]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	441a      	add	r2, r3
 8002b56:	8afb      	ldrh	r3, [r7, #22]
 8002b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b6c:	8b7b      	ldrh	r3, [r7, #26]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8087 	beq.w	8002c82 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	6959      	ldr	r1, [r3, #20]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	891a      	ldrh	r2, [r3, #8]
 8002b80:	8b7b      	ldrh	r3, [r7, #26]
 8002b82:	f004 face 	bl	8007122 <USB_ReadPMA>
 8002b86:	e07c      	b.n	8002c82 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3306      	adds	r3, #6
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bb0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	8b7b      	ldrh	r3, [r7, #26]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d306      	bcc.n	8002bca <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	699a      	ldr	r2, [r3, #24]
 8002bc0:	8b7b      	ldrh	r3, [r7, #26]
 8002bc2:	1ad2      	subs	r2, r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	619a      	str	r2, [r3, #24]
 8002bc8:	e002      	b.n	8002bd0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d123      	bne.n	8002c20 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf2:	83fb      	strh	r3, [r7, #30]
 8002bf4:	8bfb      	ldrh	r3, [r7, #30]
 8002bf6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bfa:	83fb      	strh	r3, [r7, #30]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	441a      	add	r2, r3
 8002c0a:	8bfb      	ldrh	r3, [r7, #30]
 8002c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d11f      	bne.n	8002c6a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c44:	83bb      	strh	r3, [r7, #28]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	441a      	add	r2, r3
 8002c54:	8bbb      	ldrh	r3, [r7, #28]
 8002c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c6a:	8b7b      	ldrh	r3, [r7, #26]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	6959      	ldr	r1, [r3, #20]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	895a      	ldrh	r2, [r3, #10]
 8002c7c:	8b7b      	ldrh	r3, [r7, #26]
 8002c7e:	f004 fa50 	bl	8007122 <USB_ReadPMA>
    }
  }

  return count;
 8002c82:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b0a2      	sub	sp, #136	; 0x88
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	4613      	mov	r3, r2
 8002c98:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 81c7 	beq.w	8003034 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3302      	adds	r3, #2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d907      	bls.n	8002cee <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce6:	1ad2      	subs	r2, r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	619a      	str	r2, [r3, #24]
 8002cec:	e002      	b.n	8002cf4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f040 80b9 	bne.w	8002e70 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d126      	bne.n	8002d54 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	4413      	add	r3, r2
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	011a      	lsls	r2, r3, #4
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	4413      	add	r3, r2
 8002d28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	801a      	strh	r2, [r3, #0]
 8002d52:	e01a      	b.n	8002d8a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d116      	bne.n	8002d8a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	633b      	str	r3, [r7, #48]	; 0x30
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	4413      	add	r3, r2
 8002d72:	633b      	str	r3, [r7, #48]	; 0x30
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	011a      	lsls	r2, r3, #4
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	2200      	movs	r2, #0
 8002d88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	623b      	str	r3, [r7, #32]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d126      	bne.n	8002de6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4413      	add	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	011a      	lsls	r2, r3, #4
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	4413      	add	r3, r2
 8002dba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	801a      	strh	r2, [r3, #0]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	801a      	strh	r2, [r3, #0]
 8002de4:	e017      	b.n	8002e16 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	785b      	ldrb	r3, [r3, #1]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d113      	bne.n	8002e16 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	623b      	str	r3, [r7, #32]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	011a      	lsls	r2, r3, #4
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2200      	movs	r2, #0
 8002e14:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f005 ffe8 	bl	8008df2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 82d4 	beq.w	80033d6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e48:	827b      	strh	r3, [r7, #18]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	441a      	add	r2, r3
 8002e58:	8a7b      	ldrh	r3, [r7, #18]
 8002e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	8013      	strh	r3, [r2, #0]
 8002e6e:	e2b2      	b.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d021      	beq.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e94:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	441a      	add	r2, r3
 8002ea6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f040 8286 	bne.w	80033d6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ed2:	441a      	add	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ee0:	441a      	add	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	6a1a      	ldr	r2, [r3, #32]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d309      	bcc.n	8002f06 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	6a1a      	ldr	r2, [r3, #32]
 8002efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002efe:	1ad2      	subs	r2, r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	621a      	str	r2, [r3, #32]
 8002f04:	e015      	b.n	8002f32 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d107      	bne.n	8002f1e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002f0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f12:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f1c:	e009      	b.n	8002f32 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	785b      	ldrb	r3, [r3, #1]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d155      	bne.n	8002fe6 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4e:	4413      	add	r3, r2
 8002f50:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	011a      	lsls	r2, r3, #4
 8002f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f60:	637b      	str	r3, [r7, #52]	; 0x34
 8002f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d112      	bne.n	8002f8e <HAL_PCD_EP_DB_Transmit+0x302>
 8002f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f76:	801a      	strh	r2, [r3, #0]
 8002f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8a:	801a      	strh	r2, [r3, #0]
 8002f8c:	e047      	b.n	800301e <HAL_PCD_EP_DB_Transmit+0x392>
 8002f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f90:	2b3e      	cmp	r3, #62	; 0x3e
 8002f92:	d811      	bhi.n	8002fb8 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_PCD_EP_DB_Transmit+0x31e>
 8002fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	029b      	lsls	r3, r3, #10
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb4:	801a      	strh	r2, [r3, #0]
 8002fb6:	e032      	b.n	800301e <HAL_PCD_EP_DB_Transmit+0x392>
 8002fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <HAL_PCD_EP_DB_Transmit+0x342>
 8002fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	029b      	lsls	r3, r3, #10
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe2:	801a      	strh	r2, [r3, #0]
 8002fe4:	e01b      	b.n	800301e <HAL_PCD_EP_DB_Transmit+0x392>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	785b      	ldrb	r3, [r3, #1]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d117      	bne.n	800301e <HAL_PCD_EP_DB_Transmit+0x392>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003002:	4413      	add	r3, r2
 8003004:	643b      	str	r3, [r7, #64]	; 0x40
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	011a      	lsls	r2, r3, #4
 800300c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800300e:	4413      	add	r3, r2
 8003010:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003018:	b29a      	uxth	r2, r3
 800301a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6959      	ldr	r1, [r3, #20]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	891a      	ldrh	r2, [r3, #8]
 800302a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800302c:	b29b      	uxth	r3, r3
 800302e:	f004 f832 	bl	8007096 <USB_WritePMA>
 8003032:	e1d0      	b.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800303c:	b29b      	uxth	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	3306      	adds	r3, #6
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800305c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003068:	429a      	cmp	r2, r3
 800306a:	d307      	bcc.n	800307c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	699a      	ldr	r2, [r3, #24]
 8003070:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003074:	1ad2      	subs	r2, r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	619a      	str	r2, [r3, #24]
 800307a:	e002      	b.n	8003082 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2200      	movs	r2, #0
 8003080:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 80c4 	bne.w	8003214 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	785b      	ldrb	r3, [r3, #1]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d126      	bne.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x456>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	66fb      	str	r3, [r7, #108]	; 0x6c
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a8:	4413      	add	r3, r2
 80030aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	011a      	lsls	r2, r3, #4
 80030b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b4:	4413      	add	r3, r2
 80030b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80030bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030ca:	801a      	strh	r2, [r3, #0]
 80030cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030da:	b29a      	uxth	r2, r3
 80030dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030de:	801a      	strh	r2, [r3, #0]
 80030e0:	e01a      	b.n	8003118 <HAL_PCD_EP_DB_Transmit+0x48c>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	785b      	ldrb	r3, [r3, #1]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d116      	bne.n	8003118 <HAL_PCD_EP_DB_Transmit+0x48c>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	677b      	str	r3, [r7, #116]	; 0x74
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030fe:	4413      	add	r3, r2
 8003100:	677b      	str	r3, [r7, #116]	; 0x74
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	011a      	lsls	r2, r3, #4
 8003108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800310a:	4413      	add	r3, r2
 800310c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003110:	673b      	str	r3, [r7, #112]	; 0x70
 8003112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003114:	2200      	movs	r2, #0
 8003116:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	67bb      	str	r3, [r7, #120]	; 0x78
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	785b      	ldrb	r3, [r3, #1]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d12f      	bne.n	8003186 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003136:	b29b      	uxth	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800313e:	4413      	add	r3, r2
 8003140:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	011a      	lsls	r2, r3, #4
 800314a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800314e:	4413      	add	r3, r2
 8003150:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003158:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003164:	b29a      	uxth	r2, r3
 8003166:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800316a:	801a      	strh	r2, [r3, #0]
 800316c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800317c:	b29a      	uxth	r2, r3
 800317e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003182:	801a      	strh	r2, [r3, #0]
 8003184:	e017      	b.n	80031b6 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	785b      	ldrb	r3, [r3, #1]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d113      	bne.n	80031b6 <HAL_PCD_EP_DB_Transmit+0x52a>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003196:	b29b      	uxth	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800319c:	4413      	add	r3, r2
 800319e:	67bb      	str	r3, [r7, #120]	; 0x78
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	011a      	lsls	r2, r3, #4
 80031a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031a8:	4413      	add	r3, r2
 80031aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031b2:	2200      	movs	r2, #0
 80031b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	4619      	mov	r1, r3
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f005 fe18 	bl	8008df2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f040 8104 	bne.w	80033d6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	441a      	add	r2, r3
 80031fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003206:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800320a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800320e:	b29b      	uxth	r3, r3
 8003210:	8013      	strh	r3, [r2, #0]
 8003212:	e0e0      	b.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d121      	bne.n	8003262 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003238:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	441a      	add	r2, r3
 800324a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800324e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003256:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800325a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325e:	b29b      	uxth	r3, r3
 8003260:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003268:	2b01      	cmp	r3, #1
 800326a:	f040 80b4 	bne.w	80033d6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003276:	441a      	add	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003284:	441a      	add	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6a1a      	ldr	r2, [r3, #32]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	429a      	cmp	r2, r3
 8003294:	d309      	bcc.n	80032aa <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a2:	1ad2      	subs	r2, r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	621a      	str	r2, [r3, #32]
 80032a8:	e015      	b.n	80032d6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d107      	bne.n	80032c2 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80032b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032b6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032c0:	e009      	b.n	80032d6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	667b      	str	r3, [r7, #100]	; 0x64
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	785b      	ldrb	r3, [r3, #1]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d155      	bne.n	8003390 <HAL_PCD_EP_DB_Transmit+0x704>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f8:	4413      	add	r3, r2
 80032fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	011a      	lsls	r2, r3, #4
 8003302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003304:	4413      	add	r3, r2
 8003306:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800330a:	65bb      	str	r3, [r7, #88]	; 0x58
 800330c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330e:	2b00      	cmp	r3, #0
 8003310:	d112      	bne.n	8003338 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003312:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800331c:	b29a      	uxth	r2, r3
 800331e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003320:	801a      	strh	r2, [r3, #0]
 8003322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800332c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003330:	b29a      	uxth	r2, r3
 8003332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003334:	801a      	strh	r2, [r3, #0]
 8003336:	e044      	b.n	80033c2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800333a:	2b3e      	cmp	r3, #62	; 0x3e
 800333c:	d811      	bhi.n	8003362 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800333e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003340:	085b      	lsrs	r3, r3, #1
 8003342:	657b      	str	r3, [r7, #84]	; 0x54
 8003344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800334e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003350:	3301      	adds	r3, #1
 8003352:	657b      	str	r3, [r7, #84]	; 0x54
 8003354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003356:	b29b      	uxth	r3, r3
 8003358:	029b      	lsls	r3, r3, #10
 800335a:	b29a      	uxth	r2, r3
 800335c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800335e:	801a      	strh	r2, [r3, #0]
 8003360:	e02f      	b.n	80033c2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	657b      	str	r3, [r7, #84]	; 0x54
 8003368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003374:	3b01      	subs	r3, #1
 8003376:	657b      	str	r3, [r7, #84]	; 0x54
 8003378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800337a:	b29b      	uxth	r3, r3
 800337c:	029b      	lsls	r3, r3, #10
 800337e:	b29b      	uxth	r3, r3
 8003380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003388:	b29a      	uxth	r2, r3
 800338a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800338c:	801a      	strh	r2, [r3, #0]
 800338e:	e018      	b.n	80033c2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	785b      	ldrb	r3, [r3, #1]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d114      	bne.n	80033c2 <HAL_PCD_EP_DB_Transmit+0x736>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033a6:	4413      	add	r3, r2
 80033a8:	667b      	str	r3, [r7, #100]	; 0x64
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	011a      	lsls	r2, r3, #4
 80033b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033b2:	4413      	add	r3, r2
 80033b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033b8:	663b      	str	r3, [r7, #96]	; 0x60
 80033ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033bc:	b29a      	uxth	r2, r3
 80033be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033c0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	6959      	ldr	r1, [r3, #20]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	895a      	ldrh	r2, [r3, #10]
 80033ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	f003 fe60 	bl	8007096 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f0:	823b      	strh	r3, [r7, #16]
 80033f2:	8a3b      	ldrh	r3, [r7, #16]
 80033f4:	f083 0310 	eor.w	r3, r3, #16
 80033f8:	823b      	strh	r3, [r7, #16]
 80033fa:	8a3b      	ldrh	r3, [r7, #16]
 80033fc:	f083 0320 	eor.w	r3, r3, #32
 8003400:	823b      	strh	r3, [r7, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	441a      	add	r2, r3
 8003410:	8a3b      	ldrh	r3, [r7, #16]
 8003412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800341a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800341e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003422:	b29b      	uxth	r3, r3
 8003424:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3788      	adds	r7, #136	; 0x88
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	817b      	strh	r3, [r7, #10]
 800343e:	4613      	mov	r3, r2
 8003440:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003442:	897b      	ldrh	r3, [r7, #10]
 8003444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4413      	add	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	e009      	b.n	800347a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003466:	897a      	ldrh	r2, [r7, #10]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800347a:	893b      	ldrh	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d107      	bne.n	8003490 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2200      	movs	r2, #0
 8003484:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	b29a      	uxth	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	80da      	strh	r2, [r3, #6]
 800348e:	e00b      	b.n	80034a8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2201      	movs	r2, #1
 8003494:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	b29a      	uxth	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80034be:	af00      	add	r7, sp, #0
 80034c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f001 b823 	b.w	8004524 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 817d 	beq.w	80037ee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80034f4:	4bbc      	ldr	r3, [pc, #752]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d00c      	beq.n	800351a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003500:	4bb9      	ldr	r3, [pc, #740]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 030c 	and.w	r3, r3, #12
 8003508:	2b08      	cmp	r3, #8
 800350a:	d15c      	bne.n	80035c6 <HAL_RCC_OscConfig+0x10e>
 800350c:	4bb6      	ldr	r3, [pc, #728]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003518:	d155      	bne.n	80035c6 <HAL_RCC_OscConfig+0x10e>
 800351a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800351e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800352e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d102      	bne.n	800354c <HAL_RCC_OscConfig+0x94>
 8003546:	4ba8      	ldr	r3, [pc, #672]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	e015      	b.n	8003578 <HAL_RCC_OscConfig+0xc0>
 800354c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003550:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003564:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003568:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003574:	4b9c      	ldr	r3, [pc, #624]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800357c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003580:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003584:	fa92 f2a2 	rbit	r2, r2
 8003588:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800358c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003590:	fab2 f282 	clz	r2, r2
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	f042 0220 	orr.w	r2, r2, #32
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	f002 021f 	and.w	r2, r2, #31
 80035a0:	2101      	movs	r1, #1
 80035a2:	fa01 f202 	lsl.w	r2, r1, r2
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 811f 	beq.w	80037ec <HAL_RCC_OscConfig+0x334>
 80035ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f040 8116 	bne.w	80037ec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f000 bfaf 	b.w	8004524 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d6:	d106      	bne.n	80035e6 <HAL_RCC_OscConfig+0x12e>
 80035d8:	4b83      	ldr	r3, [pc, #524]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a82      	ldr	r2, [pc, #520]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 80035de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	e036      	b.n	8003654 <HAL_RCC_OscConfig+0x19c>
 80035e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0x158>
 80035f6:	4b7c      	ldr	r3, [pc, #496]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a7b      	ldr	r2, [pc, #492]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 80035fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b79      	ldr	r3, [pc, #484]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a78      	ldr	r2, [pc, #480]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 8003608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e021      	b.n	8003654 <HAL_RCC_OscConfig+0x19c>
 8003610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0x184>
 8003622:	4b71      	ldr	r3, [pc, #452]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a70      	ldr	r2, [pc, #448]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 8003628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b6e      	ldr	r3, [pc, #440]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a6d      	ldr	r2, [pc, #436]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 8003634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	e00b      	b.n	8003654 <HAL_RCC_OscConfig+0x19c>
 800363c:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a69      	ldr	r2, [pc, #420]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 8003642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	4b67      	ldr	r3, [pc, #412]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a66      	ldr	r2, [pc, #408]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 800364e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003652:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003654:	4b64      	ldr	r3, [pc, #400]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	f023 020f 	bic.w	r2, r3, #15
 800365c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	495f      	ldr	r1, [pc, #380]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 800366a:	4313      	orrs	r3, r2
 800366c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800366e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d059      	beq.n	8003732 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7fd f999 	bl	80009b4 <HAL_GetTick>
 8003682:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	e00a      	b.n	800369e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003688:	f7fd f994 	bl	80009b4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b64      	cmp	r3, #100	; 0x64
 8003696:	d902      	bls.n	800369e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	f000 bf43 	b.w	8004524 <HAL_RCC_OscConfig+0x106c>
 800369e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036a2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80036b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d102      	bne.n	80036d0 <HAL_RCC_OscConfig+0x218>
 80036ca:	4b47      	ldr	r3, [pc, #284]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	e015      	b.n	80036fc <HAL_RCC_OscConfig+0x244>
 80036d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036d4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80036dc:	fa93 f3a3 	rbit	r3, r3
 80036e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80036e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036e8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80036ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80036f0:	fa93 f3a3 	rbit	r3, r3
 80036f4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80036f8:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003700:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003704:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003708:	fa92 f2a2 	rbit	r2, r2
 800370c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003710:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003714:	fab2 f282 	clz	r2, r2
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	f042 0220 	orr.w	r2, r2, #32
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	f002 021f 	and.w	r2, r2, #31
 8003724:	2101      	movs	r1, #1
 8003726:	fa01 f202 	lsl.w	r2, r1, r2
 800372a:	4013      	ands	r3, r2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0ab      	beq.n	8003688 <HAL_RCC_OscConfig+0x1d0>
 8003730:	e05d      	b.n	80037ee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fd f93f 	bl	80009b4 <HAL_GetTick>
 8003736:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373a:	e00a      	b.n	8003752 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800373c:	f7fd f93a 	bl	80009b4 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b64      	cmp	r3, #100	; 0x64
 800374a:	d902      	bls.n	8003752 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	f000 bee9 	b.w	8004524 <HAL_RCC_OscConfig+0x106c>
 8003752:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003756:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003766:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d102      	bne.n	8003784 <HAL_RCC_OscConfig+0x2cc>
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	e015      	b.n	80037b0 <HAL_RCC_OscConfig+0x2f8>
 8003784:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003788:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800379c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80037a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80037ac:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037b4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80037b8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80037bc:	fa92 f2a2 	rbit	r2, r2
 80037c0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80037c4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80037c8:	fab2 f282 	clz	r2, r2
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	f042 0220 	orr.w	r2, r2, #32
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	f002 021f 	and.w	r2, r2, #31
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f202 	lsl.w	r2, r1, r2
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1ab      	bne.n	800373c <HAL_RCC_OscConfig+0x284>
 80037e4:	e003      	b.n	80037ee <HAL_RCC_OscConfig+0x336>
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 817d 	beq.w	8003afe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003804:	4ba6      	ldr	r3, [pc, #664]	; (8003aa0 <HAL_RCC_OscConfig+0x5e8>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00b      	beq.n	8003828 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003810:	4ba3      	ldr	r3, [pc, #652]	; (8003aa0 <HAL_RCC_OscConfig+0x5e8>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d172      	bne.n	8003902 <HAL_RCC_OscConfig+0x44a>
 800381c:	4ba0      	ldr	r3, [pc, #640]	; (8003aa0 <HAL_RCC_OscConfig+0x5e8>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d16c      	bne.n	8003902 <HAL_RCC_OscConfig+0x44a>
 8003828:	2302      	movs	r3, #2
 800382a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800383a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d102      	bne.n	8003858 <HAL_RCC_OscConfig+0x3a0>
 8003852:	4b93      	ldr	r3, [pc, #588]	; (8003aa0 <HAL_RCC_OscConfig+0x5e8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	e013      	b.n	8003880 <HAL_RCC_OscConfig+0x3c8>
 8003858:	2302      	movs	r3, #2
 800385a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800386a:	2302      	movs	r3, #2
 800386c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003870:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800387c:	4b88      	ldr	r3, [pc, #544]	; (8003aa0 <HAL_RCC_OscConfig+0x5e8>)
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	2202      	movs	r2, #2
 8003882:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003886:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800388a:	fa92 f2a2 	rbit	r2, r2
 800388e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003892:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003896:	fab2 f282 	clz	r2, r2
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	f042 0220 	orr.w	r2, r2, #32
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f002 021f 	and.w	r2, r2, #31
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCC_OscConfig+0x410>
 80038b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d002      	beq.n	80038c8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f000 be2e 	b.w	8004524 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4b75      	ldr	r3, [pc, #468]	; (8003aa0 <HAL_RCC_OscConfig+0x5e8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	21f8      	movs	r1, #248	; 0xf8
 80038de:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80038e6:	fa91 f1a1 	rbit	r1, r1
 80038ea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80038ee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80038f2:	fab1 f181 	clz	r1, r1
 80038f6:	b2c9      	uxtb	r1, r1
 80038f8:	408b      	lsls	r3, r1
 80038fa:	4969      	ldr	r1, [pc, #420]	; (8003aa0 <HAL_RCC_OscConfig+0x5e8>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003900:	e0fd      	b.n	8003afe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003906:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8088 	beq.w	8003a24 <HAL_RCC_OscConfig+0x56c>
 8003914:	2301      	movs	r3, #1
 8003916:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003926:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003934:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	461a      	mov	r2, r3
 800393c:	2301      	movs	r3, #1
 800393e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fd f838 	bl	80009b4 <HAL_GetTick>
 8003944:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003948:	e00a      	b.n	8003960 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800394a:	f7fd f833 	bl	80009b4 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d902      	bls.n	8003960 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	f000 bde2 	b.w	8004524 <HAL_RCC_OscConfig+0x106c>
 8003960:	2302      	movs	r3, #2
 8003962:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003972:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b01      	cmp	r3, #1
 8003988:	d102      	bne.n	8003990 <HAL_RCC_OscConfig+0x4d8>
 800398a:	4b45      	ldr	r3, [pc, #276]	; (8003aa0 <HAL_RCC_OscConfig+0x5e8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	e013      	b.n	80039b8 <HAL_RCC_OscConfig+0x500>
 8003990:	2302      	movs	r3, #2
 8003992:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80039a2:	2302      	movs	r3, #2
 80039a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80039a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80039ac:	fa93 f3a3 	rbit	r3, r3
 80039b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80039b4:	4b3a      	ldr	r3, [pc, #232]	; (8003aa0 <HAL_RCC_OscConfig+0x5e8>)
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2202      	movs	r2, #2
 80039ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80039be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80039c2:	fa92 f2a2 	rbit	r2, r2
 80039c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80039ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80039ce:	fab2 f282 	clz	r2, r2
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	f042 0220 	orr.w	r2, r2, #32
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	f002 021f 	and.w	r2, r2, #31
 80039de:	2101      	movs	r1, #1
 80039e0:	fa01 f202 	lsl.w	r2, r1, r2
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0af      	beq.n	800394a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ea:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <HAL_RCC_OscConfig+0x5e8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	21f8      	movs	r1, #248	; 0xf8
 8003a00:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003a08:	fa91 f1a1 	rbit	r1, r1
 8003a0c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003a10:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003a14:	fab1 f181 	clz	r1, r1
 8003a18:	b2c9      	uxtb	r1, r1
 8003a1a:	408b      	lsls	r3, r1
 8003a1c:	4920      	ldr	r1, [pc, #128]	; (8003aa0 <HAL_RCC_OscConfig+0x5e8>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]
 8003a22:	e06c      	b.n	8003afe <HAL_RCC_OscConfig+0x646>
 8003a24:	2301      	movs	r3, #1
 8003a26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003a2e:	fa93 f3a3 	rbit	r3, r3
 8003a32:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003a36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3a:	fab3 f383 	clz	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a50:	f7fc ffb0 	bl	80009b4 <HAL_GetTick>
 8003a54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a58:	e00a      	b.n	8003a70 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a5a:	f7fc ffab 	bl	80009b4 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d902      	bls.n	8003a70 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	f000 bd5a 	b.w	8004524 <HAL_RCC_OscConfig+0x106c>
 8003a70:	2302      	movs	r3, #2
 8003a72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a7a:	fa93 f3a3 	rbit	r3, r3
 8003a7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d104      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x5ec>
 8003a9a:	4b01      	ldr	r3, [pc, #4]	; (8003aa0 <HAL_RCC_OscConfig+0x5e8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	e015      	b.n	8003acc <HAL_RCC_OscConfig+0x614>
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003aae:	fa93 f3a3 	rbit	r3, r3
 8003ab2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003abc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003ac8:	4bc8      	ldr	r3, [pc, #800]	; (8003dec <HAL_RCC_OscConfig+0x934>)
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	2202      	movs	r2, #2
 8003ace:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003ad2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ad6:	fa92 f2a2 	rbit	r2, r2
 8003ada:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003ade:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ae2:	fab2 f282 	clz	r2, r2
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	f042 0220 	orr.w	r2, r2, #32
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	f002 021f 	and.w	r2, r2, #31
 8003af2:	2101      	movs	r1, #1
 8003af4:	fa01 f202 	lsl.w	r2, r1, r2
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1ad      	bne.n	8003a5a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8110 	beq.w	8003d34 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d079      	beq.n	8003c18 <HAL_RCC_OscConfig+0x760>
 8003b24:	2301      	movs	r3, #1
 8003b26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b2e:	fa93 f3a3 	rbit	r3, r3
 8003b32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	4bab      	ldr	r3, [pc, #684]	; (8003df0 <HAL_RCC_OscConfig+0x938>)
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4e:	f7fc ff31 	bl	80009b4 <HAL_GetTick>
 8003b52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b58:	f7fc ff2c 	bl	80009b4 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d902      	bls.n	8003b6e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	f000 bcdb 	b.w	8004524 <HAL_RCC_OscConfig+0x106c>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b78:	fa93 f3a3 	rbit	r3, r3
 8003b7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b88:	2202      	movs	r2, #2
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b90:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	fa93 f2a3 	rbit	r2, r3
 8003b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bac:	2202      	movs	r2, #2
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	fa93 f2a3 	rbit	r2, r3
 8003bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003bc6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc8:	4b88      	ldr	r3, [pc, #544]	; (8003dec <HAL_RCC_OscConfig+0x934>)
 8003bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003bd4:	2102      	movs	r1, #2
 8003bd6:	6019      	str	r1, [r3, #0]
 8003bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bdc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	fa93 f1a3 	rbit	r1, r3
 8003be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bee:	6019      	str	r1, [r3, #0]
  return result;
 8003bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0a0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x6a0>
 8003c16:	e08d      	b.n	8003d34 <HAL_RCC_OscConfig+0x87c>
 8003c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	fa93 f2a3 	rbit	r2, r3
 8003c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c3a:	601a      	str	r2, [r3, #0]
  return result;
 8003c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003c44:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4b68      	ldr	r3, [pc, #416]	; (8003df0 <HAL_RCC_OscConfig+0x938>)
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	461a      	mov	r2, r3
 8003c56:	2300      	movs	r3, #0
 8003c58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5a:	f7fc feab 	bl	80009b4 <HAL_GetTick>
 8003c5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c64:	f7fc fea6 	bl	80009b4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d902      	bls.n	8003c7a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	f000 bc55 	b.w	8004524 <HAL_RCC_OscConfig+0x106c>
 8003c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c82:	2202      	movs	r2, #2
 8003c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	fa93 f2a3 	rbit	r2, r3
 8003c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	fa93 f2a3 	rbit	r2, r3
 8003cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cca:	2202      	movs	r2, #2
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	fa93 f2a3 	rbit	r2, r3
 8003cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003ce4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce6:	4b41      	ldr	r3, [pc, #260]	; (8003dec <HAL_RCC_OscConfig+0x934>)
 8003ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	6019      	str	r1, [r3, #0]
 8003cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	fa93 f1a3 	rbit	r1, r3
 8003d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d08:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003d0c:	6019      	str	r1, [r3, #0]
  return result;
 8003d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d12:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	fab3 f383 	clz	r3, r3
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	2101      	movs	r1, #1
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d197      	bne.n	8003c64 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 81a1 	beq.w	800408c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d50:	4b26      	ldr	r3, [pc, #152]	; (8003dec <HAL_RCC_OscConfig+0x934>)
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d116      	bne.n	8003d8a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5c:	4b23      	ldr	r3, [pc, #140]	; (8003dec <HAL_RCC_OscConfig+0x934>)
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	4a22      	ldr	r2, [pc, #136]	; (8003dec <HAL_RCC_OscConfig+0x934>)
 8003d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d66:	61d3      	str	r3, [r2, #28]
 8003d68:	4b20      	ldr	r3, [pc, #128]	; (8003dec <HAL_RCC_OscConfig+0x934>)
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d74:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003d82:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8a:	4b1a      	ldr	r3, [pc, #104]	; (8003df4 <HAL_RCC_OscConfig+0x93c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d11a      	bne.n	8003dcc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d96:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <HAL_RCC_OscConfig+0x93c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a16      	ldr	r2, [pc, #88]	; (8003df4 <HAL_RCC_OscConfig+0x93c>)
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da2:	f7fc fe07 	bl	80009b4 <HAL_GetTick>
 8003da6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003daa:	e009      	b.n	8003dc0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dac:	f7fc fe02 	bl	80009b4 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b64      	cmp	r3, #100	; 0x64
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e3b1      	b.n	8004524 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <HAL_RCC_OscConfig+0x93c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ef      	beq.n	8003dac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d10d      	bne.n	8003df8 <HAL_RCC_OscConfig+0x940>
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_RCC_OscConfig+0x934>)
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4a02      	ldr	r2, [pc, #8]	; (8003dec <HAL_RCC_OscConfig+0x934>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6213      	str	r3, [r2, #32]
 8003de8:	e03c      	b.n	8003e64 <HAL_RCC_OscConfig+0x9ac>
 8003dea:	bf00      	nop
 8003dec:	40021000 	.word	0x40021000
 8003df0:	10908120 	.word	0x10908120
 8003df4:	40007000 	.word	0x40007000
 8003df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10c      	bne.n	8003e22 <HAL_RCC_OscConfig+0x96a>
 8003e08:	4bc1      	ldr	r3, [pc, #772]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	4ac0      	ldr	r2, [pc, #768]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	6213      	str	r3, [r2, #32]
 8003e14:	4bbe      	ldr	r3, [pc, #760]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	4abd      	ldr	r2, [pc, #756]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8003e1a:	f023 0304 	bic.w	r3, r3, #4
 8003e1e:	6213      	str	r3, [r2, #32]
 8003e20:	e020      	b.n	8003e64 <HAL_RCC_OscConfig+0x9ac>
 8003e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	2b05      	cmp	r3, #5
 8003e30:	d10c      	bne.n	8003e4c <HAL_RCC_OscConfig+0x994>
 8003e32:	4bb7      	ldr	r3, [pc, #732]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	4ab6      	ldr	r2, [pc, #728]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8003e38:	f043 0304 	orr.w	r3, r3, #4
 8003e3c:	6213      	str	r3, [r2, #32]
 8003e3e:	4bb4      	ldr	r3, [pc, #720]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	4ab3      	ldr	r2, [pc, #716]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6213      	str	r3, [r2, #32]
 8003e4a:	e00b      	b.n	8003e64 <HAL_RCC_OscConfig+0x9ac>
 8003e4c:	4bb0      	ldr	r3, [pc, #704]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	4aaf      	ldr	r2, [pc, #700]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	6213      	str	r3, [r2, #32]
 8003e58:	4bad      	ldr	r3, [pc, #692]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	4aac      	ldr	r2, [pc, #688]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8003e5e:	f023 0304 	bic.w	r3, r3, #4
 8003e62:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8081 	beq.w	8003f78 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e76:	f7fc fd9d 	bl	80009b4 <HAL_GetTick>
 8003e7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7e:	e00b      	b.n	8003e98 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e80:	f7fc fd98 	bl	80009b4 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e345      	b.n	8004524 <HAL_RCC_OscConfig+0x106c>
 8003e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	fa93 f2a3 	rbit	r2, r3
 8003eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ecc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	fa93 f2a3 	rbit	r2, r3
 8003ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eda:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ede:	601a      	str	r2, [r3, #0]
  return result;
 8003ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ee8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eea:	fab3 f383 	clz	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f043 0302 	orr.w	r3, r3, #2
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d102      	bne.n	8003f04 <HAL_RCC_OscConfig+0xa4c>
 8003efe:	4b84      	ldr	r3, [pc, #528]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	e013      	b.n	8003f2c <HAL_RCC_OscConfig+0xa74>
 8003f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f08:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	fa93 f2a3 	rbit	r2, r3
 8003f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f22:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	4b79      	ldr	r3, [pc, #484]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f30:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003f34:	2102      	movs	r1, #2
 8003f36:	6011      	str	r1, [r2, #0]
 8003f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f3c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	fa92 f1a2 	rbit	r1, r2
 8003f46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f4a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003f4e:	6011      	str	r1, [r2, #0]
  return result;
 8003f50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f54:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	fab2 f282 	clz	r2, r2
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	f002 021f 	and.w	r2, r2, #31
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d084      	beq.n	8003e80 <HAL_RCC_OscConfig+0x9c8>
 8003f76:	e07f      	b.n	8004078 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f78:	f7fc fd1c 	bl	80009b4 <HAL_GetTick>
 8003f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f80:	e00b      	b.n	8003f9a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f82:	f7fc fd17 	bl	80009b4 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e2c4      	b.n	8004524 <HAL_RCC_OscConfig+0x106c>
 8003f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003faa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	fa93 f2a3 	rbit	r2, r3
 8003fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	fa93 f2a3 	rbit	r2, r3
 8003fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fdc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003fe0:	601a      	str	r2, [r3, #0]
  return result;
 8003fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003fea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fec:	fab3 f383 	clz	r3, r3
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f043 0302 	orr.w	r3, r3, #2
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d102      	bne.n	8004006 <HAL_RCC_OscConfig+0xb4e>
 8004000:	4b43      	ldr	r3, [pc, #268]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	e013      	b.n	800402e <HAL_RCC_OscConfig+0xb76>
 8004006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800400e:	2202      	movs	r2, #2
 8004010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004016:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	fa93 f2a3 	rbit	r2, r3
 8004020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004024:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	4b39      	ldr	r3, [pc, #228]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004032:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004036:	2102      	movs	r1, #2
 8004038:	6011      	str	r1, [r2, #0]
 800403a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800403e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	fa92 f1a2 	rbit	r1, r2
 8004048:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800404c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004050:	6011      	str	r1, [r2, #0]
  return result;
 8004052:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004056:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	fab2 f282 	clz	r2, r2
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	f002 021f 	and.w	r2, r2, #31
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f202 	lsl.w	r2, r1, r2
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d184      	bne.n	8003f82 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004078:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800407c:	2b01      	cmp	r3, #1
 800407e:	d105      	bne.n	800408c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004080:	4b23      	ldr	r3, [pc, #140]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	4a22      	ldr	r2, [pc, #136]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 8004086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800408a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800408c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004090:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8242 	beq.w	8004522 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800409e:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <HAL_RCC_OscConfig+0xc58>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	f000 8213 	beq.w	80044d2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	f040 8162 	bne.w	8004382 <HAL_RCC_OscConfig+0xeca>
 80040be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80040c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	fa93 f2a3 	rbit	r2, r3
 80040da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80040e2:	601a      	str	r2, [r3, #0]
  return result;
 80040e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80040ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	461a      	mov	r2, r3
 8004100:	2300      	movs	r3, #0
 8004102:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004104:	f7fc fc56 	bl	80009b4 <HAL_GetTick>
 8004108:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800410c:	e00c      	b.n	8004128 <HAL_RCC_OscConfig+0xc70>
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004114:	f7fc fc4e 	bl	80009b4 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e1fd      	b.n	8004524 <HAL_RCC_OscConfig+0x106c>
 8004128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800413a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	fa93 f2a3 	rbit	r2, r3
 8004144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004148:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800414c:	601a      	str	r2, [r3, #0]
  return result;
 800414e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004152:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004156:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004158:	fab3 f383 	clz	r3, r3
 800415c:	b2db      	uxtb	r3, r3
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	d102      	bne.n	8004172 <HAL_RCC_OscConfig+0xcba>
 800416c:	4bb0      	ldr	r3, [pc, #704]	; (8004430 <HAL_RCC_OscConfig+0xf78>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	e027      	b.n	80041c2 <HAL_RCC_OscConfig+0xd0a>
 8004172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004176:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800417a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800417e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004184:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	fa93 f2a3 	rbit	r2, r3
 800418e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004192:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80041a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	fa93 f2a3 	rbit	r2, r3
 80041b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	4b9c      	ldr	r3, [pc, #624]	; (8004430 <HAL_RCC_OscConfig+0xf78>)
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041c6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80041ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041ce:	6011      	str	r1, [r2, #0]
 80041d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041d4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	fa92 f1a2 	rbit	r1, r2
 80041de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041e2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80041e6:	6011      	str	r1, [r2, #0]
  return result;
 80041e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80041f0:	6812      	ldr	r2, [r2, #0]
 80041f2:	fab2 f282 	clz	r2, r2
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	f042 0220 	orr.w	r2, r2, #32
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	f002 021f 	and.w	r2, r2, #31
 8004202:	2101      	movs	r1, #1
 8004204:	fa01 f202 	lsl.w	r2, r1, r2
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d182      	bne.n	8004114 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800420e:	4b88      	ldr	r3, [pc, #544]	; (8004430 <HAL_RCC_OscConfig+0xf78>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004226:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	430b      	orrs	r3, r1
 8004230:	497f      	ldr	r1, [pc, #508]	; (8004430 <HAL_RCC_OscConfig+0xf78>)
 8004232:	4313      	orrs	r3, r2
 8004234:	604b      	str	r3, [r1, #4]
 8004236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800423e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004248:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	fa93 f2a3 	rbit	r2, r3
 8004252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004256:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800425a:	601a      	str	r2, [r3, #0]
  return result;
 800425c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004260:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004264:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004270:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	461a      	mov	r2, r3
 8004278:	2301      	movs	r3, #1
 800427a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fc fb9a 	bl	80009b4 <HAL_GetTick>
 8004280:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004284:	e009      	b.n	800429a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004286:	f7fc fb95 	bl	80009b4 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e144      	b.n	8004524 <HAL_RCC_OscConfig+0x106c>
 800429a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80042a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	fa93 f2a3 	rbit	r2, r3
 80042b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80042be:	601a      	str	r2, [r3, #0]
  return result;
 80042c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80042c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042ca:	fab3 f383 	clz	r3, r3
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d102      	bne.n	80042e4 <HAL_RCC_OscConfig+0xe2c>
 80042de:	4b54      	ldr	r3, [pc, #336]	; (8004430 <HAL_RCC_OscConfig+0xf78>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	e027      	b.n	8004334 <HAL_RCC_OscConfig+0xe7c>
 80042e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80042ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	fa93 f2a3 	rbit	r2, r3
 8004300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004304:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004312:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	fa93 f2a3 	rbit	r2, r3
 8004326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800432a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	4b3f      	ldr	r3, [pc, #252]	; (8004430 <HAL_RCC_OscConfig+0xf78>)
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004338:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800433c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004340:	6011      	str	r1, [r2, #0]
 8004342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004346:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	fa92 f1a2 	rbit	r1, r2
 8004350:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004354:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004358:	6011      	str	r1, [r2, #0]
  return result;
 800435a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800435e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	fab2 f282 	clz	r2, r2
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	f042 0220 	orr.w	r2, r2, #32
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	f002 021f 	and.w	r2, r2, #31
 8004374:	2101      	movs	r1, #1
 8004376:	fa01 f202 	lsl.w	r2, r1, r2
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d082      	beq.n	8004286 <HAL_RCC_OscConfig+0xdce>
 8004380:	e0cf      	b.n	8004522 <HAL_RCC_OscConfig+0x106a>
 8004382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004386:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800438a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800438e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004394:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	fa93 f2a3 	rbit	r2, r3
 800439e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80043a6:	601a      	str	r2, [r3, #0]
  return result;
 80043a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80043b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	461a      	mov	r2, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c8:	f7fc faf4 	bl	80009b4 <HAL_GetTick>
 80043cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d0:	e009      	b.n	80043e6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d2:	f7fc faef 	bl	80009b4 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e09e      	b.n	8004524 <HAL_RCC_OscConfig+0x106c>
 80043e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80043ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	fa93 f2a3 	rbit	r2, r3
 8004402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004406:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800440a:	601a      	str	r2, [r3, #0]
  return result;
 800440c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004410:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004414:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004416:	fab3 f383 	clz	r3, r3
 800441a:	b2db      	uxtb	r3, r3
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b01      	cmp	r3, #1
 8004428:	d104      	bne.n	8004434 <HAL_RCC_OscConfig+0xf7c>
 800442a:	4b01      	ldr	r3, [pc, #4]	; (8004430 <HAL_RCC_OscConfig+0xf78>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	e029      	b.n	8004484 <HAL_RCC_OscConfig+0xfcc>
 8004430:	40021000 	.word	0x40021000
 8004434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004438:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800443c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004446:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	fa93 f2a3 	rbit	r2, r3
 8004450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004454:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004462:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	fa93 f2a3 	rbit	r2, r3
 8004476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <HAL_RCC_OscConfig+0x1078>)
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004488:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800448c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004490:	6011      	str	r1, [r2, #0]
 8004492:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004496:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	fa92 f1a2 	rbit	r1, r2
 80044a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80044a8:	6011      	str	r1, [r2, #0]
  return result;
 80044aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	fab2 f282 	clz	r2, r2
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	f042 0220 	orr.w	r2, r2, #32
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	f002 021f 	and.w	r2, r2, #31
 80044c4:	2101      	movs	r1, #1
 80044c6:	fa01 f202 	lsl.w	r2, r1, r2
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d180      	bne.n	80043d2 <HAL_RCC_OscConfig+0xf1a>
 80044d0:	e027      	b.n	8004522 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e01e      	b.n	8004524 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044e6:	4b12      	ldr	r3, [pc, #72]	; (8004530 <HAL_RCC_OscConfig+0x1078>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80044ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80044f2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	429a      	cmp	r2, r3
 8004504:	d10b      	bne.n	800451e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004506:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800450a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800450e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800451a:	429a      	cmp	r2, r3
 800451c:	d001      	beq.n	8004522 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40021000 	.word	0x40021000

08004534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b09e      	sub	sp, #120	; 0x78
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e162      	b.n	8004812 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800454c:	4b90      	ldr	r3, [pc, #576]	; (8004790 <HAL_RCC_ClockConfig+0x25c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d910      	bls.n	800457c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b8d      	ldr	r3, [pc, #564]	; (8004790 <HAL_RCC_ClockConfig+0x25c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 0207 	bic.w	r2, r3, #7
 8004562:	498b      	ldr	r1, [pc, #556]	; (8004790 <HAL_RCC_ClockConfig+0x25c>)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b89      	ldr	r3, [pc, #548]	; (8004790 <HAL_RCC_ClockConfig+0x25c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e14a      	b.n	8004812 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004588:	4b82      	ldr	r3, [pc, #520]	; (8004794 <HAL_RCC_ClockConfig+0x260>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	497f      	ldr	r1, [pc, #508]	; (8004794 <HAL_RCC_ClockConfig+0x260>)
 8004596:	4313      	orrs	r3, r2
 8004598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 80dc 	beq.w	8004760 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d13c      	bne.n	800462a <HAL_RCC_ClockConfig+0xf6>
 80045b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045b8:	fa93 f3a3 	rbit	r3, r3
 80045bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80045be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c0:	fab3 f383 	clz	r3, r3
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d102      	bne.n	80045da <HAL_RCC_ClockConfig+0xa6>
 80045d4:	4b6f      	ldr	r3, [pc, #444]	; (8004794 <HAL_RCC_ClockConfig+0x260>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	e00f      	b.n	80045fa <HAL_RCC_ClockConfig+0xc6>
 80045da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045e2:	fa93 f3a3 	rbit	r3, r3
 80045e6:	667b      	str	r3, [r7, #100]	; 0x64
 80045e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045ec:	663b      	str	r3, [r7, #96]	; 0x60
 80045ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045f6:	4b67      	ldr	r3, [pc, #412]	; (8004794 <HAL_RCC_ClockConfig+0x260>)
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004602:	fa92 f2a2 	rbit	r2, r2
 8004606:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004608:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800460a:	fab2 f282 	clz	r2, r2
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	f042 0220 	orr.w	r2, r2, #32
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	f002 021f 	and.w	r2, r2, #31
 800461a:	2101      	movs	r1, #1
 800461c:	fa01 f202 	lsl.w	r2, r1, r2
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d17b      	bne.n	800471e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e0f3      	b.n	8004812 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d13c      	bne.n	80046ac <HAL_RCC_ClockConfig+0x178>
 8004632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004636:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d102      	bne.n	800465c <HAL_RCC_ClockConfig+0x128>
 8004656:	4b4f      	ldr	r3, [pc, #316]	; (8004794 <HAL_RCC_ClockConfig+0x260>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	e00f      	b.n	800467c <HAL_RCC_ClockConfig+0x148>
 800465c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004660:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	647b      	str	r3, [r7, #68]	; 0x44
 800466a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800466e:	643b      	str	r3, [r7, #64]	; 0x40
 8004670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004672:	fa93 f3a3 	rbit	r3, r3
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004678:	4b46      	ldr	r3, [pc, #280]	; (8004794 <HAL_RCC_ClockConfig+0x260>)
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004680:	63ba      	str	r2, [r7, #56]	; 0x38
 8004682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004684:	fa92 f2a2 	rbit	r2, r2
 8004688:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800468a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800468c:	fab2 f282 	clz	r2, r2
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	f042 0220 	orr.w	r2, r2, #32
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	f002 021f 	and.w	r2, r2, #31
 800469c:	2101      	movs	r1, #1
 800469e:	fa01 f202 	lsl.w	r2, r1, r2
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d13a      	bne.n	800471e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0b2      	b.n	8004812 <HAL_RCC_ClockConfig+0x2de>
 80046ac:	2302      	movs	r3, #2
 80046ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	fa93 f3a3 	rbit	r3, r3
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ba:	fab3 f383 	clz	r3, r3
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d102      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x1a0>
 80046ce:	4b31      	ldr	r3, [pc, #196]	; (8004794 <HAL_RCC_ClockConfig+0x260>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	e00d      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1bc>
 80046d4:	2302      	movs	r3, #2
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	fa93 f3a3 	rbit	r3, r3
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
 80046e0:	2302      	movs	r3, #2
 80046e2:	623b      	str	r3, [r7, #32]
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	fa93 f3a3 	rbit	r3, r3
 80046ea:	61fb      	str	r3, [r7, #28]
 80046ec:	4b29      	ldr	r3, [pc, #164]	; (8004794 <HAL_RCC_ClockConfig+0x260>)
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	2202      	movs	r2, #2
 80046f2:	61ba      	str	r2, [r7, #24]
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	fa92 f2a2 	rbit	r2, r2
 80046fa:	617a      	str	r2, [r7, #20]
  return result;
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	fab2 f282 	clz	r2, r2
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	f042 0220 	orr.w	r2, r2, #32
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	f002 021f 	and.w	r2, r2, #31
 800470e:	2101      	movs	r1, #1
 8004710:	fa01 f202 	lsl.w	r2, r1, r2
 8004714:	4013      	ands	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e079      	b.n	8004812 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800471e:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <HAL_RCC_ClockConfig+0x260>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f023 0203 	bic.w	r2, r3, #3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	491a      	ldr	r1, [pc, #104]	; (8004794 <HAL_RCC_ClockConfig+0x260>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004730:	f7fc f940 	bl	80009b4 <HAL_GetTick>
 8004734:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004736:	e00a      	b.n	800474e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004738:	f7fc f93c 	bl	80009b4 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	f241 3288 	movw	r2, #5000	; 0x1388
 8004746:	4293      	cmp	r3, r2
 8004748:	d901      	bls.n	800474e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e061      	b.n	8004812 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474e:	4b11      	ldr	r3, [pc, #68]	; (8004794 <HAL_RCC_ClockConfig+0x260>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f003 020c 	and.w	r2, r3, #12
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	429a      	cmp	r2, r3
 800475e:	d1eb      	bne.n	8004738 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCC_ClockConfig+0x25c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d214      	bcs.n	8004798 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476e:	4b08      	ldr	r3, [pc, #32]	; (8004790 <HAL_RCC_ClockConfig+0x25c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 0207 	bic.w	r2, r3, #7
 8004776:	4906      	ldr	r1, [pc, #24]	; (8004790 <HAL_RCC_ClockConfig+0x25c>)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b04      	ldr	r3, [pc, #16]	; (8004790 <HAL_RCC_ClockConfig+0x25c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e040      	b.n	8004812 <HAL_RCC_ClockConfig+0x2de>
 8004790:	40022000 	.word	0x40022000
 8004794:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a4:	4b1d      	ldr	r3, [pc, #116]	; (800481c <HAL_RCC_ClockConfig+0x2e8>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	491a      	ldr	r1, [pc, #104]	; (800481c <HAL_RCC_ClockConfig+0x2e8>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047c2:	4b16      	ldr	r3, [pc, #88]	; (800481c <HAL_RCC_ClockConfig+0x2e8>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4912      	ldr	r1, [pc, #72]	; (800481c <HAL_RCC_ClockConfig+0x2e8>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80047d6:	f000 f829 	bl	800482c <HAL_RCC_GetSysClockFreq>
 80047da:	4601      	mov	r1, r0
 80047dc:	4b0f      	ldr	r3, [pc, #60]	; (800481c <HAL_RCC_ClockConfig+0x2e8>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047e4:	22f0      	movs	r2, #240	; 0xf0
 80047e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	fa92 f2a2 	rbit	r2, r2
 80047ee:	60fa      	str	r2, [r7, #12]
  return result;
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	fab2 f282 	clz	r2, r2
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	40d3      	lsrs	r3, r2
 80047fa:	4a09      	ldr	r2, [pc, #36]	; (8004820 <HAL_RCC_ClockConfig+0x2ec>)
 80047fc:	5cd3      	ldrb	r3, [r2, r3]
 80047fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004802:	4a08      	ldr	r2, [pc, #32]	; (8004824 <HAL_RCC_ClockConfig+0x2f0>)
 8004804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004806:	4b08      	ldr	r3, [pc, #32]	; (8004828 <HAL_RCC_ClockConfig+0x2f4>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7fc f88e 	bl	800092c <HAL_InitTick>
  
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3778      	adds	r7, #120	; 0x78
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000
 8004820:	0800938c 	.word	0x0800938c
 8004824:	20000000 	.word	0x20000000
 8004828:	20000004 	.word	0x20000004

0800482c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800482c:	b480      	push	{r7}
 800482e:	b08b      	sub	sp, #44	; 0x2c
 8004830:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	2300      	movs	r3, #0
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	2300      	movs	r3, #0
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004846:	4b29      	ldr	r3, [pc, #164]	; (80048ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b04      	cmp	r3, #4
 8004854:	d002      	beq.n	800485c <HAL_RCC_GetSysClockFreq+0x30>
 8004856:	2b08      	cmp	r3, #8
 8004858:	d003      	beq.n	8004862 <HAL_RCC_GetSysClockFreq+0x36>
 800485a:	e03c      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800485c:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800485e:	623b      	str	r3, [r7, #32]
      break;
 8004860:	e03c      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004868:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800486c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	fa92 f2a2 	rbit	r2, r2
 8004874:	607a      	str	r2, [r7, #4]
  return result;
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	fab2 f282 	clz	r2, r2
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	40d3      	lsrs	r3, r2
 8004880:	4a1c      	ldr	r2, [pc, #112]	; (80048f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004882:	5cd3      	ldrb	r3, [r2, r3]
 8004884:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004886:	4b19      	ldr	r3, [pc, #100]	; (80048ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	220f      	movs	r2, #15
 8004890:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	fa92 f2a2 	rbit	r2, r2
 8004898:	60fa      	str	r2, [r7, #12]
  return result;
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	fab2 f282 	clz	r2, r2
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	40d3      	lsrs	r3, r2
 80048a4:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80048a6:	5cd3      	ldrb	r3, [r2, r3]
 80048a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048b4:	4a0e      	ldr	r2, [pc, #56]	; (80048f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	fb02 f303 	mul.w	r3, r2, r3
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
 80048c4:	e004      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	4a0c      	ldr	r2, [pc, #48]	; (80048fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	623b      	str	r3, [r7, #32]
      break;
 80048d4:	e002      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048d8:	623b      	str	r3, [r7, #32]
      break;
 80048da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048dc:	6a3b      	ldr	r3, [r7, #32]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	372c      	adds	r7, #44	; 0x2c
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40021000 	.word	0x40021000
 80048f0:	007a1200 	.word	0x007a1200
 80048f4:	0800939c 	.word	0x0800939c
 80048f8:	080093ac 	.word	0x080093ac
 80048fc:	003d0900 	.word	0x003d0900

08004900 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b092      	sub	sp, #72	; 0x48
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004910:	2300      	movs	r3, #0
 8004912:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 80d4 	beq.w	8004acc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004924:	4b4e      	ldr	r3, [pc, #312]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10e      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004930:	4b4b      	ldr	r3, [pc, #300]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	4a4a      	ldr	r2, [pc, #296]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493a:	61d3      	str	r3, [r2, #28]
 800493c:	4b48      	ldr	r3, [pc, #288]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004948:	2301      	movs	r3, #1
 800494a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494e:	4b45      	ldr	r3, [pc, #276]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d118      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800495a:	4b42      	ldr	r3, [pc, #264]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a41      	ldr	r2, [pc, #260]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004964:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004966:	f7fc f825 	bl	80009b4 <HAL_GetTick>
 800496a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	e008      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496e:	f7fc f821 	bl	80009b4 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b64      	cmp	r3, #100	; 0x64
 800497a:	d901      	bls.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e14b      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004980:	4b38      	ldr	r3, [pc, #224]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800498c:	4b34      	ldr	r3, [pc, #208]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004994:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8084 	beq.w	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d07c      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049ac:	4b2c      	ldr	r3, [pc, #176]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	fa93 f3a3 	rbit	r3, r3
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049c6:	fab3 f383 	clz	r3, r3
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	461a      	mov	r2, r3
 80049ce:	4b26      	ldr	r3, [pc, #152]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	461a      	mov	r2, r3
 80049d6:	2301      	movs	r3, #1
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	fa93 f3a3 	rbit	r3, r3
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80049e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	461a      	mov	r2, r3
 80049fa:	2300      	movs	r3, #0
 80049fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049fe:	4a18      	ldr	r2, [pc, #96]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a02:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d04b      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0e:	f7fb ffd1 	bl	80009b4 <HAL_GetTick>
 8004a12:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a14:	e00a      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a16:	f7fb ffcd 	bl	80009b4 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e0f5      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	fa93 f3a3 	rbit	r3, r3
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
 8004a38:	2302      	movs	r3, #2
 8004a3a:	623b      	str	r3, [r7, #32]
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	fa93 f3a3 	rbit	r3, r3
 8004a42:	61fb      	str	r3, [r7, #28]
  return result;
 8004a44:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a46:	fab3 f383 	clz	r3, r3
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	f043 0302 	orr.w	r3, r3, #2
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d108      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004a5a:	4b01      	ldr	r3, [pc, #4]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	e00d      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004a60:	40021000 	.word	0x40021000
 8004a64:	40007000 	.word	0x40007000
 8004a68:	10908100 	.word	0x10908100
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	fa93 f3a3 	rbit	r3, r3
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	4b69      	ldr	r3, [pc, #420]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	613a      	str	r2, [r7, #16]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	fa92 f2a2 	rbit	r2, r2
 8004a86:	60fa      	str	r2, [r7, #12]
  return result;
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	fab2 f282 	clz	r2, r2
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	f002 021f 	and.w	r2, r2, #31
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0b7      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004aa6:	4b5e      	ldr	r3, [pc, #376]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	495b      	ldr	r1, [pc, #364]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ab8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d105      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac0:	4b57      	ldr	r3, [pc, #348]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	4a56      	ldr	r2, [pc, #344]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ad8:	4b51      	ldr	r3, [pc, #324]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	f023 0203 	bic.w	r2, r3, #3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	494e      	ldr	r1, [pc, #312]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004af6:	4b4a      	ldr	r3, [pc, #296]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	4947      	ldr	r1, [pc, #284]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b14:	4b42      	ldr	r3, [pc, #264]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	493f      	ldr	r1, [pc, #252]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d008      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b32:	4b3b      	ldr	r3, [pc, #236]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f023 0210 	bic.w	r2, r3, #16
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	4938      	ldr	r1, [pc, #224]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004b50:	4b33      	ldr	r3, [pc, #204]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	4930      	ldr	r1, [pc, #192]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d008      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b6e:	4b2c      	ldr	r3, [pc, #176]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	f023 0220 	bic.w	r2, r3, #32
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	4929      	ldr	r1, [pc, #164]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b8c:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	4921      	ldr	r1, [pc, #132]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0310 	and.w	r3, r3, #16
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004baa:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	491a      	ldr	r1, [pc, #104]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bc8:	4b15      	ldr	r3, [pc, #84]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd4:	4912      	ldr	r1, [pc, #72]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004be6:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	490b      	ldr	r1, [pc, #44]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c04:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	4903      	ldr	r1, [pc, #12]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3748      	adds	r7, #72	; 0x48
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40021000 	.word	0x40021000

08004c24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c34:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b085      	sub	sp, #20
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c5a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c5e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	4013      	ands	r3, r2
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c88:	b084      	sub	sp, #16
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	f107 0014 	add.w	r0, r7, #20
 8004c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	b004      	add	sp, #16
 8004cc8:	4770      	bx	lr
	...

08004ccc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b09d      	sub	sp, #116	; 0x74
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	78db      	ldrb	r3, [r3, #3]
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d81f      	bhi.n	8004d3e <USB_ActivateEndpoint+0x72>
 8004cfe:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <USB_ActivateEndpoint+0x38>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d31 	.word	0x08004d31
 8004d0c:	08004d47 	.word	0x08004d47
 8004d10:	08004d23 	.word	0x08004d23
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d20:	e012      	b.n	8004d48 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d22:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d26:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d2a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d2e:	e00b      	b.n	8004d48 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d3c:	e004      	b.n	8004d48 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004d44:	e000      	b.n	8004d48 <USB_ActivateEndpoint+0x7c>
      break;
 8004d46:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	b21b      	sxth	r3, r3
 8004d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	b21a      	sxth	r2, r3
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	b21b      	sxth	r3, r3
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	b21b      	sxth	r3, r3
 8004d8e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	441a      	add	r2, r3
 8004d9c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	7b1b      	ldrb	r3, [r3, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 8149 	bne.w	8005050 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 8084 	beq.w	8004ed0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	4413      	add	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	011a      	lsls	r2, r3, #4
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	88db      	ldrh	r3, [r3, #6]
 8004df0:	085b      	lsrs	r3, r3, #1
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	827b      	strh	r3, [r7, #18]
 8004e0a:	8a7b      	ldrh	r3, [r7, #18]
 8004e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01b      	beq.n	8004e4c <USB_ActivateEndpoint+0x180>
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2a:	823b      	strh	r3, [r7, #16]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	8a3b      	ldrh	r3, [r7, #16]
 8004e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	78db      	ldrb	r3, [r3, #3]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d020      	beq.n	8004e96 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e6a:	81bb      	strh	r3, [r7, #12]
 8004e6c:	89bb      	ldrh	r3, [r7, #12]
 8004e6e:	f083 0320 	eor.w	r3, r3, #32
 8004e72:	81bb      	strh	r3, [r7, #12]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	441a      	add	r2, r3
 8004e7e:	89bb      	ldrh	r3, [r7, #12]
 8004e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	8013      	strh	r3, [r2, #0]
 8004e94:	e2a6      	b.n	80053e4 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eac:	81fb      	strh	r3, [r7, #14]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	441a      	add	r2, r3
 8004eb8:	89fb      	ldrh	r3, [r7, #14]
 8004eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	8013      	strh	r3, [r2, #0]
 8004ece:	e289      	b.n	80053e4 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	4413      	add	r3, r2
 8004ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	011a      	lsls	r2, r3, #4
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	88db      	ldrh	r3, [r3, #6]
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	4413      	add	r3, r2
 8004f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	011a      	lsls	r2, r3, #4
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	4413      	add	r3, r2
 8004f22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d112      	bne.n	8004f56 <USB_ActivateEndpoint+0x28a>
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	801a      	strh	r2, [r3, #0]
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	e02f      	b.n	8004fb6 <USB_ActivateEndpoint+0x2ea>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f5c:	d813      	bhi.n	8004f86 <USB_ActivateEndpoint+0x2ba>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <USB_ActivateEndpoint+0x2ac>
 8004f72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f74:	3301      	adds	r3, #1
 8004f76:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	029b      	lsls	r3, r3, #10
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	801a      	strh	r2, [r3, #0]
 8004f84:	e017      	b.n	8004fb6 <USB_ActivateEndpoint+0x2ea>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <USB_ActivateEndpoint+0x2d4>
 8004f9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	029b      	lsls	r3, r3, #10
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	847b      	strh	r3, [r7, #34]	; 0x22
 8004fc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d01b      	beq.n	8005006 <USB_ActivateEndpoint+0x33a>
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe4:	843b      	strh	r3, [r7, #32]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	8c3b      	ldrh	r3, [r7, #32]
 8004ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501c:	83fb      	strh	r3, [r7, #30]
 800501e:	8bfb      	ldrh	r3, [r7, #30]
 8005020:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005024:	83fb      	strh	r3, [r7, #30]
 8005026:	8bfb      	ldrh	r3, [r7, #30]
 8005028:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800502c:	83fb      	strh	r3, [r7, #30]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	441a      	add	r2, r3
 8005038:	8bfb      	ldrh	r3, [r7, #30]
 800503a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504a:	b29b      	uxth	r3, r3
 800504c:	8013      	strh	r3, [r2, #0]
 800504e:	e1c9      	b.n	80053e4 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	78db      	ldrb	r3, [r3, #3]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d11e      	bne.n	8005096 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	441a      	add	r2, r3
 800507c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005088:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800508c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005090:	b29b      	uxth	r3, r3
 8005092:	8013      	strh	r3, [r2, #0]
 8005094:	e01d      	b.n	80050d2 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80050a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	441a      	add	r2, r3
 80050ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050dc:	b29b      	uxth	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050e2:	4413      	add	r3, r2
 80050e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	011a      	lsls	r2, r3, #4
 80050ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	891b      	ldrh	r3, [r3, #8]
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005104:	801a      	strh	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	657b      	str	r3, [r7, #84]	; 0x54
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005110:	b29b      	uxth	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005116:	4413      	add	r3, r2
 8005118:	657b      	str	r3, [r7, #84]	; 0x54
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	011a      	lsls	r2, r3, #4
 8005120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005122:	4413      	add	r3, r2
 8005124:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005128:	653b      	str	r3, [r7, #80]	; 0x50
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	895b      	ldrh	r3, [r3, #10]
 800512e:	085b      	lsrs	r3, r3, #1
 8005130:	b29b      	uxth	r3, r3
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005138:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	785b      	ldrb	r3, [r3, #1]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f040 8093 	bne.w	800526a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005154:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01b      	beq.n	8005198 <USB_ActivateEndpoint+0x4cc>
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005176:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	441a      	add	r2, r3
 8005182:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005194:	b29b      	uxth	r3, r3
 8005196:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80051a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80051a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01b      	beq.n	80051e8 <USB_ActivateEndpoint+0x51c>
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	441a      	add	r2, r3
 80051d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80051d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	873b      	strh	r3, [r7, #56]	; 0x38
 8005200:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005202:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005206:	873b      	strh	r3, [r7, #56]	; 0x38
 8005208:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800520a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800520e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	441a      	add	r2, r3
 800521a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800521c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522c:	b29b      	uxth	r3, r3
 800522e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005246:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	441a      	add	r2, r3
 8005252:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800525c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005264:	b29b      	uxth	r3, r3
 8005266:	8013      	strh	r3, [r2, #0]
 8005268:	e0bc      	b.n	80053e4 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800527a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800527e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01d      	beq.n	80052c2 <USB_ActivateEndpoint+0x5f6>
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	441a      	add	r2, r3
 80052aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80052ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052be:	b29b      	uxth	r3, r3
 80052c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80052d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80052d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01d      	beq.n	800531a <USB_ActivateEndpoint+0x64e>
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	441a      	add	r2, r3
 8005302:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800530a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005312:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005316:	b29b      	uxth	r3, r3
 8005318:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	78db      	ldrb	r3, [r3, #3]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d024      	beq.n	800536c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005338:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800533c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005340:	f083 0320 	eor.w	r3, r3, #32
 8005344:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	441a      	add	r2, r3
 8005352:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005366:	b29b      	uxth	r3, r3
 8005368:	8013      	strh	r3, [r2, #0]
 800536a:	e01d      	b.n	80053a8 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29b      	uxth	r3, r3
 800537a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005382:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	441a      	add	r2, r3
 8005390:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800539c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	441a      	add	r2, r3
 80053cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80053d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80053e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3774      	adds	r7, #116	; 0x74
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b08d      	sub	sp, #52	; 0x34
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	7b1b      	ldrb	r3, [r3, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f040 808e 	bne.w	8005524 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	785b      	ldrb	r3, [r3, #1]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d044      	beq.n	800549a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	81bb      	strh	r3, [r7, #12]
 800541e:	89bb      	ldrh	r3, [r7, #12]
 8005420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01b      	beq.n	8005460 <USB_DeactivateEndpoint+0x6c>
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543e:	817b      	strh	r3, [r7, #10]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	441a      	add	r2, r3
 800544a:	897b      	ldrh	r3, [r7, #10]
 800544c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005458:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800545c:	b29b      	uxth	r3, r3
 800545e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005476:	813b      	strh	r3, [r7, #8]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	441a      	add	r2, r3
 8005482:	893b      	ldrh	r3, [r7, #8]
 8005484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005494:	b29b      	uxth	r3, r3
 8005496:	8013      	strh	r3, [r2, #0]
 8005498:	e192      	b.n	80057c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	827b      	strh	r3, [r7, #18]
 80054a8:	8a7b      	ldrh	r3, [r7, #18]
 80054aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01b      	beq.n	80054ea <USB_DeactivateEndpoint+0xf6>
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	823b      	strh	r3, [r7, #16]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	8a3b      	ldrh	r3, [r7, #16]
 80054d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005500:	81fb      	strh	r3, [r7, #14]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	441a      	add	r2, r3
 800550c:	89fb      	ldrh	r3, [r7, #14]
 800550e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551e:	b29b      	uxth	r3, r3
 8005520:	8013      	strh	r3, [r2, #0]
 8005522:	e14d      	b.n	80057c0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f040 80a5 	bne.w	8005678 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	843b      	strh	r3, [r7, #32]
 800553c:	8c3b      	ldrh	r3, [r7, #32]
 800553e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d01b      	beq.n	800557e <USB_DeactivateEndpoint+0x18a>
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555c:	83fb      	strh	r3, [r7, #30]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	441a      	add	r2, r3
 8005568:	8bfb      	ldrh	r3, [r7, #30]
 800556a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557a:	b29b      	uxth	r3, r3
 800557c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	83bb      	strh	r3, [r7, #28]
 800558c:	8bbb      	ldrh	r3, [r7, #28]
 800558e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01b      	beq.n	80055ce <USB_DeactivateEndpoint+0x1da>
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ac:	837b      	strh	r3, [r7, #26]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	441a      	add	r2, r3
 80055b8:	8b7b      	ldrh	r3, [r7, #26]
 80055ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e4:	833b      	strh	r3, [r7, #24]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	441a      	add	r2, r3
 80055f0:	8b3b      	ldrh	r3, [r7, #24]
 80055f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005602:	b29b      	uxth	r3, r3
 8005604:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561c:	82fb      	strh	r3, [r7, #22]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	441a      	add	r2, r3
 8005628:	8afb      	ldrh	r3, [r7, #22]
 800562a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563a:	b29b      	uxth	r3, r3
 800563c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005654:	82bb      	strh	r3, [r7, #20]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	441a      	add	r2, r3
 8005660:	8abb      	ldrh	r3, [r7, #20]
 8005662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800566a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005672:	b29b      	uxth	r3, r3
 8005674:	8013      	strh	r3, [r2, #0]
 8005676:	e0a3      	b.n	80057c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005686:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d01b      	beq.n	80056c8 <USB_DeactivateEndpoint+0x2d4>
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	441a      	add	r2, r3
 80056b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80056b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80056d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80056d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01b      	beq.n	8005718 <USB_DeactivateEndpoint+0x324>
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	853b      	strh	r3, [r7, #40]	; 0x28
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	441a      	add	r2, r3
 8005702:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005710:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005714:	b29b      	uxth	r3, r3
 8005716:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	441a      	add	r2, r3
 800573a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800573c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800574c:	b29b      	uxth	r3, r3
 800574e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	b29b      	uxth	r3, r3
 800575e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005766:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	441a      	add	r2, r3
 8005772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005784:	b29b      	uxth	r3, r3
 8005786:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	847b      	strh	r3, [r7, #34]	; 0x22
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	441a      	add	r2, r3
 80057aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057bc:	b29b      	uxth	r3, r3
 80057be:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3734      	adds	r7, #52	; 0x34
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b0c2      	sub	sp, #264	; 0x108
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057dc:	6018      	str	r0, [r3, #0]
 80057de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e6:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	f040 867b 	bne.w	80064f0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80057fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	429a      	cmp	r2, r3
 8005814:	d908      	bls.n	8005828 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005826:	e007      	b.n	8005838 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	7b1b      	ldrb	r3, [r3, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d13a      	bne.n	80058be <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6959      	ldr	r1, [r3, #20]
 8005854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	88da      	ldrh	r2, [r3, #6]
 8005860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005864:	b29b      	uxth	r3, r3
 8005866:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800586a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800586e:	6800      	ldr	r0, [r0, #0]
 8005870:	f001 fc11 	bl	8007096 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005878:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	613b      	str	r3, [r7, #16]
 8005880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800588e:	b29b      	uxth	r3, r3
 8005890:	461a      	mov	r2, r3
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4413      	add	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	011a      	lsls	r2, r3, #4
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	4413      	add	r3, r2
 80058aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	801a      	strh	r2, [r3, #0]
 80058ba:	f000 bde3 	b.w	8006484 <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80058be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	78db      	ldrb	r3, [r3, #3]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	f040 843a 	bne.w	8006144 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80058d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6a1a      	ldr	r2, [r3, #32]
 80058dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	f240 83b7 	bls.w	800605c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80058ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b29b      	uxth	r3, r3
 800590c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005914:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	441a      	add	r2, r3
 8005932:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800593a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800593e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005946:	b29b      	uxth	r3, r3
 8005948:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800594a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6a1a      	ldr	r2, [r3, #32]
 8005956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595a:	1ad2      	subs	r2, r2, r3
 800595c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b29b      	uxth	r3, r3
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 81b3 	beq.w	8005cf6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	633b      	str	r3, [r7, #48]	; 0x30
 800599c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	785b      	ldrb	r3, [r3, #1]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d16d      	bne.n	8005a88 <USB_EPStartXfer+0x2ba>
 80059ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	4413      	add	r3, r2
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	011a      	lsls	r2, r3, #4
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	4413      	add	r3, r2
 80059e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
 80059e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d112      	bne.n	8005a16 <USB_EPStartXfer+0x248>
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	801a      	strh	r2, [r3, #0]
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	801a      	strh	r2, [r3, #0]
 8005a14:	e05d      	b.n	8005ad2 <USB_EPStartXfer+0x304>
 8005a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a1a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a1c:	d817      	bhi.n	8005a4e <USB_EPStartXfer+0x280>
 8005a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a22:	085b      	lsrs	r3, r3, #1
 8005a24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d004      	beq.n	8005a3e <USB_EPStartXfer+0x270>
 8005a34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a38:	3301      	adds	r3, #1
 8005a3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	029b      	lsls	r3, r3, #10
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	801a      	strh	r2, [r3, #0]
 8005a4c:	e041      	b.n	8005ad2 <USB_EPStartXfer+0x304>
 8005a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a5c:	f003 031f 	and.w	r3, r3, #31
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <USB_EPStartXfer+0x2a0>
 8005a64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	029b      	lsls	r3, r3, #10
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	801a      	strh	r2, [r3, #0]
 8005a86:	e024      	b.n	8005ad2 <USB_EPStartXfer+0x304>
 8005a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d11c      	bne.n	8005ad2 <USB_EPStartXfer+0x304>
 8005a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	4413      	add	r3, r2
 8005aae:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	011a      	lsls	r2, r3, #4
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	895b      	ldrh	r3, [r3, #10]
 8005ade:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6959      	ldr	r1, [r3, #20]
 8005aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005af8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005afc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b00:	6800      	ldr	r0, [r0, #0]
 8005b02:	f001 fac8 	bl	8007096 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695a      	ldr	r2, [r3, #20]
 8005b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b16:	441a      	add	r2, r3
 8005b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6a1a      	ldr	r2, [r3, #32]
 8005b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d90f      	bls.n	8005b60 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8005b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a1a      	ldr	r2, [r3, #32]
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b50:	1ad2      	subs	r2, r2, r3
 8005b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	621a      	str	r2, [r3, #32]
 8005b5e:	e00e      	b.n	8005b7e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	785b      	ldrb	r3, [r3, #1]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d16d      	bne.n	8005c6a <USB_EPStartXfer+0x49c>
 8005b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	461a      	mov	r2, r3
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	4413      	add	r3, r2
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	011a      	lsls	r2, r3, #4
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d112      	bne.n	8005bf8 <USB_EPStartXfer+0x42a>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	e063      	b.n	8005cc0 <USB_EPStartXfer+0x4f2>
 8005bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfc:	2b3e      	cmp	r3, #62	; 0x3e
 8005bfe:	d817      	bhi.n	8005c30 <USB_EPStartXfer+0x462>
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c04:	085b      	lsrs	r3, r3, #1
 8005c06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d004      	beq.n	8005c20 <USB_EPStartXfer+0x452>
 8005c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	029b      	lsls	r3, r3, #10
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	e047      	b.n	8005cc0 <USB_EPStartXfer+0x4f2>
 8005c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3e:	f003 031f 	and.w	r3, r3, #31
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d104      	bne.n	8005c50 <USB_EPStartXfer+0x482>
 8005c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	029b      	lsls	r3, r3, #10
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	801a      	strh	r2, [r3, #0]
 8005c68:	e02a      	b.n	8005cc0 <USB_EPStartXfer+0x4f2>
 8005c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d122      	bne.n	8005cc0 <USB_EPStartXfer+0x4f2>
 8005c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	623b      	str	r3, [r7, #32]
 8005c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	623b      	str	r3, [r7, #32]
 8005c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	011a      	lsls	r2, r3, #4
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	891b      	ldrh	r3, [r3, #8]
 8005ccc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6959      	ldr	r1, [r3, #20]
 8005cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ce6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005cea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005cee:	6800      	ldr	r0, [r0, #0]
 8005cf0:	f001 f9d1 	bl	8007096 <USB_WritePMA>
 8005cf4:	e3c6      	b.n	8006484 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d16d      	bne.n	8005de2 <USB_EPStartXfer+0x614>
 8005d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	461a      	mov	r2, r3
 8005d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d26:	4413      	add	r3, r2
 8005d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	011a      	lsls	r2, r3, #4
 8005d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d40:	647b      	str	r3, [r7, #68]	; 0x44
 8005d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d112      	bne.n	8005d70 <USB_EPStartXfer+0x5a2>
 8005d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d58:	801a      	strh	r2, [r3, #0]
 8005d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	e063      	b.n	8005e38 <USB_EPStartXfer+0x66a>
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d74:	2b3e      	cmp	r3, #62	; 0x3e
 8005d76:	d817      	bhi.n	8005da8 <USB_EPStartXfer+0x5da>
 8005d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d7c:	085b      	lsrs	r3, r3, #1
 8005d7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d004      	beq.n	8005d98 <USB_EPStartXfer+0x5ca>
 8005d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d92:	3301      	adds	r3, #1
 8005d94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	029b      	lsls	r3, r3, #10
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005da4:	801a      	strh	r2, [r3, #0]
 8005da6:	e047      	b.n	8005e38 <USB_EPStartXfer+0x66a>
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db6:	f003 031f 	and.w	r3, r3, #31
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d104      	bne.n	8005dc8 <USB_EPStartXfer+0x5fa>
 8005dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005dc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	029b      	lsls	r3, r3, #10
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dde:	801a      	strh	r2, [r3, #0]
 8005de0:	e02a      	b.n	8005e38 <USB_EPStartXfer+0x66a>
 8005de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	785b      	ldrb	r3, [r3, #1]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d122      	bne.n	8005e38 <USB_EPStartXfer+0x66a>
 8005df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	653b      	str	r3, [r7, #80]	; 0x50
 8005dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e12:	4413      	add	r3, r2
 8005e14:	653b      	str	r3, [r7, #80]	; 0x50
 8005e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	011a      	lsls	r2, r3, #4
 8005e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e26:	4413      	add	r3, r2
 8005e28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	891b      	ldrh	r3, [r3, #8]
 8005e44:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6959      	ldr	r1, [r3, #20]
 8005e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e5e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e62:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e66:	6800      	ldr	r0, [r0, #0]
 8005e68:	f001 f915 	bl	8007096 <USB_WritePMA>
            ep->xfer_buff += len;
 8005e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695a      	ldr	r2, [r3, #20]
 8005e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e7c:	441a      	add	r2, r3
 8005e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6a1a      	ldr	r2, [r3, #32]
 8005e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d90f      	bls.n	8005ec6 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8005ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6a1a      	ldr	r2, [r3, #32]
 8005eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb6:	1ad2      	subs	r2, r2, r3
 8005eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	621a      	str	r2, [r3, #32]
 8005ec4:	e00e      	b.n	8005ee4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	643b      	str	r3, [r7, #64]	; 0x40
 8005ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d16d      	bne.n	8005fdc <USB_EPStartXfer+0x80e>
 8005f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	4413      	add	r3, r2
 8005f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	011a      	lsls	r2, r3, #4
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	4413      	add	r3, r2
 8005f36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d112      	bne.n	8005f6a <USB_EPStartXfer+0x79c>
 8005f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f52:	801a      	strh	r2, [r3, #0]
 8005f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	e05d      	b.n	8006026 <USB_EPStartXfer+0x858>
 8005f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f70:	d817      	bhi.n	8005fa2 <USB_EPStartXfer+0x7d4>
 8005f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d004      	beq.n	8005f92 <USB_EPStartXfer+0x7c4>
 8005f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	029b      	lsls	r3, r3, #10
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9e:	801a      	strh	r2, [r3, #0]
 8005fa0:	e041      	b.n	8006026 <USB_EPStartXfer+0x858>
 8005fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d104      	bne.n	8005fc2 <USB_EPStartXfer+0x7f4>
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	029b      	lsls	r3, r3, #10
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd8:	801a      	strh	r2, [r3, #0]
 8005fda:	e024      	b.n	8006026 <USB_EPStartXfer+0x858>
 8005fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d11c      	bne.n	8006026 <USB_EPStartXfer+0x858>
 8005fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006000:	4413      	add	r3, r2
 8006002:	643b      	str	r3, [r7, #64]	; 0x40
 8006004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	011a      	lsls	r2, r3, #4
 8006012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006014:	4413      	add	r3, r2
 8006016:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800601a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006020:	b29a      	uxth	r2, r3
 8006022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006024:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	895b      	ldrh	r3, [r3, #10]
 8006032:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6959      	ldr	r1, [r3, #20]
 8006042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006046:	b29b      	uxth	r3, r3
 8006048:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800604c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006050:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006054:	6800      	ldr	r0, [r0, #0]
 8006056:	f001 f81e 	bl	8007096 <USB_WritePMA>
 800605a:	e213      	b.n	8006484 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800605c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800606c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006070:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	b29b      	uxth	r3, r3
 800608a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800608e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006092:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800609a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	441a      	add	r2, r3
 80060b0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80060b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80060c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e8:	4413      	add	r3, r2
 80060ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	011a      	lsls	r2, r3, #4
 80060fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060fc:	4413      	add	r3, r2
 80060fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006102:	65bb      	str	r3, [r7, #88]	; 0x58
 8006104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006108:	b29a      	uxth	r2, r3
 800610a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800610c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800610e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	891b      	ldrh	r3, [r3, #8]
 800611a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800611e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6959      	ldr	r1, [r3, #20]
 800612a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612e:	b29b      	uxth	r3, r3
 8006130:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006134:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006138:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800613c:	6800      	ldr	r0, [r0, #0]
 800613e:	f000 ffaa 	bl	8007096 <USB_WritePMA>
 8006142:	e19f      	b.n	8006484 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6a1a      	ldr	r2, [r3, #32]
 8006150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006154:	1ad2      	subs	r2, r2, r3
 8006156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80bc 	beq.w	8006302 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800618a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	673b      	str	r3, [r7, #112]	; 0x70
 8006196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d16d      	bne.n	8006282 <USB_EPStartXfer+0xab4>
 80061a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80061b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061c6:	4413      	add	r3, r2
 80061c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80061ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	011a      	lsls	r2, r3, #4
 80061d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061da:	4413      	add	r3, r2
 80061dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061e0:	667b      	str	r3, [r7, #100]	; 0x64
 80061e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d112      	bne.n	8006210 <USB_EPStartXfer+0xa42>
 80061ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061f8:	801a      	strh	r2, [r3, #0]
 80061fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006208:	b29a      	uxth	r2, r3
 800620a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	e05d      	b.n	80062cc <USB_EPStartXfer+0xafe>
 8006210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006214:	2b3e      	cmp	r3, #62	; 0x3e
 8006216:	d817      	bhi.n	8006248 <USB_EPStartXfer+0xa7a>
 8006218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621c:	085b      	lsrs	r3, r3, #1
 800621e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d004      	beq.n	8006238 <USB_EPStartXfer+0xa6a>
 800622e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006232:	3301      	adds	r3, #1
 8006234:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006238:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800623c:	b29b      	uxth	r3, r3
 800623e:	029b      	lsls	r3, r3, #10
 8006240:	b29a      	uxth	r2, r3
 8006242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006244:	801a      	strh	r2, [r3, #0]
 8006246:	e041      	b.n	80062cc <USB_EPStartXfer+0xafe>
 8006248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006256:	f003 031f 	and.w	r3, r3, #31
 800625a:	2b00      	cmp	r3, #0
 800625c:	d104      	bne.n	8006268 <USB_EPStartXfer+0xa9a>
 800625e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006262:	3b01      	subs	r3, #1
 8006264:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006268:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800626c:	b29b      	uxth	r3, r3
 800626e:	029b      	lsls	r3, r3, #10
 8006270:	b29b      	uxth	r3, r3
 8006272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800627a:	b29a      	uxth	r2, r3
 800627c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800627e:	801a      	strh	r2, [r3, #0]
 8006280:	e024      	b.n	80062cc <USB_EPStartXfer+0xafe>
 8006282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d11c      	bne.n	80062cc <USB_EPStartXfer+0xafe>
 8006292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006296:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	461a      	mov	r2, r3
 80062a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062a6:	4413      	add	r3, r2
 80062a8:	673b      	str	r3, [r7, #112]	; 0x70
 80062aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	011a      	lsls	r2, r3, #4
 80062b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062ba:	4413      	add	r3, r2
 80062bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80062cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	895b      	ldrh	r3, [r3, #10]
 80062d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6959      	ldr	r1, [r3, #20]
 80062e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80062f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80062f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80062fa:	6800      	ldr	r0, [r0, #0]
 80062fc:	f000 fecb 	bl	8007096 <USB_WritePMA>
 8006300:	e0c0      	b.n	8006484 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	785b      	ldrb	r3, [r3, #1]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d16d      	bne.n	80063ee <USB_EPStartXfer+0xc20>
 8006312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800631e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006322:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800632c:	b29b      	uxth	r3, r3
 800632e:	461a      	mov	r2, r3
 8006330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006332:	4413      	add	r3, r2
 8006334:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	011a      	lsls	r2, r3, #4
 8006344:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006346:	4413      	add	r3, r2
 8006348:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800634c:	67bb      	str	r3, [r7, #120]	; 0x78
 800634e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006352:	2b00      	cmp	r3, #0
 8006354:	d112      	bne.n	800637c <USB_EPStartXfer+0xbae>
 8006356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006360:	b29a      	uxth	r2, r3
 8006362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006374:	b29a      	uxth	r2, r3
 8006376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006378:	801a      	strh	r2, [r3, #0]
 800637a:	e069      	b.n	8006450 <USB_EPStartXfer+0xc82>
 800637c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006380:	2b3e      	cmp	r3, #62	; 0x3e
 8006382:	d817      	bhi.n	80063b4 <USB_EPStartXfer+0xbe6>
 8006384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800638e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d004      	beq.n	80063a4 <USB_EPStartXfer+0xbd6>
 800639a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800639e:	3301      	adds	r3, #1
 80063a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	029b      	lsls	r3, r3, #10
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063b0:	801a      	strh	r2, [r3, #0]
 80063b2:	e04d      	b.n	8006450 <USB_EPStartXfer+0xc82>
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b8:	095b      	lsrs	r3, r3, #5
 80063ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c2:	f003 031f 	and.w	r3, r3, #31
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d104      	bne.n	80063d4 <USB_EPStartXfer+0xc06>
 80063ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063ce:	3b01      	subs	r3, #1
 80063d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063d8:	b29b      	uxth	r3, r3
 80063da:	029b      	lsls	r3, r3, #10
 80063dc:	b29b      	uxth	r3, r3
 80063de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ea:	801a      	strh	r2, [r3, #0]
 80063ec:	e030      	b.n	8006450 <USB_EPStartXfer+0xc82>
 80063ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	785b      	ldrb	r3, [r3, #1]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d128      	bne.n	8006450 <USB_EPStartXfer+0xc82>
 80063fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006402:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800640c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800641a:	b29b      	uxth	r3, r3
 800641c:	461a      	mov	r2, r3
 800641e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006422:	4413      	add	r3, r2
 8006424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	011a      	lsls	r2, r3, #4
 8006436:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800643a:	4413      	add	r3, r2
 800643c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006440:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006448:	b29a      	uxth	r2, r3
 800644a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800644e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	891b      	ldrh	r3, [r3, #8]
 800645c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6959      	ldr	r1, [r3, #20]
 800646c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006470:	b29b      	uxth	r3, r3
 8006472:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006476:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800647a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800647e:	6800      	ldr	r0, [r0, #0]
 8006480:	f000 fe09 	bl	8007096 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006488:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064aa:	817b      	strh	r3, [r7, #10]
 80064ac:	897b      	ldrh	r3, [r7, #10]
 80064ae:	f083 0310 	eor.w	r3, r3, #16
 80064b2:	817b      	strh	r3, [r7, #10]
 80064b4:	897b      	ldrh	r3, [r7, #10]
 80064b6:	f083 0320 	eor.w	r3, r3, #32
 80064ba:	817b      	strh	r3, [r7, #10]
 80064bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	441a      	add	r2, r3
 80064d6:	897b      	ldrh	r3, [r7, #10]
 80064d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	8013      	strh	r3, [r2, #0]
 80064ec:	f000 bc9f 	b.w	8006e2e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80064f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	7b1b      	ldrb	r3, [r3, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f040 80ae 	bne.w	800665e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699a      	ldr	r2, [r3, #24]
 800650e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	429a      	cmp	r2, r3
 800651c:	d917      	bls.n	800654e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800651e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800652e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699a      	ldr	r2, [r3, #24]
 800653a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	619a      	str	r2, [r3, #24]
 800654c:	e00e      	b.n	800656c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800654e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800655e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2200      	movs	r2, #0
 800656a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800656c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800657a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006588:	b29b      	uxth	r3, r3
 800658a:	461a      	mov	r2, r3
 800658c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006590:	4413      	add	r3, r2
 8006592:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	011a      	lsls	r2, r3, #4
 80065a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80065a8:	4413      	add	r3, r2
 80065aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80065b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d116      	bne.n	80065e8 <USB_EPStartXfer+0xe1a>
 80065ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065de:	b29a      	uxth	r2, r3
 80065e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065e4:	801a      	strh	r2, [r3, #0]
 80065e6:	e3e8      	b.n	8006dba <USB_EPStartXfer+0x15ec>
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ec:	2b3e      	cmp	r3, #62	; 0x3e
 80065ee:	d818      	bhi.n	8006622 <USB_EPStartXfer+0xe54>
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d004      	beq.n	8006610 <USB_EPStartXfer+0xe42>
 8006606:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800660a:	3301      	adds	r3, #1
 800660c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006610:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006614:	b29b      	uxth	r3, r3
 8006616:	029b      	lsls	r3, r3, #10
 8006618:	b29a      	uxth	r2, r3
 800661a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e3cb      	b.n	8006dba <USB_EPStartXfer+0x15ec>
 8006622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006630:	f003 031f 	and.w	r3, r3, #31
 8006634:	2b00      	cmp	r3, #0
 8006636:	d104      	bne.n	8006642 <USB_EPStartXfer+0xe74>
 8006638:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800663c:	3b01      	subs	r3, #1
 800663e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006642:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006646:	b29b      	uxth	r3, r3
 8006648:	029b      	lsls	r3, r3, #10
 800664a:	b29b      	uxth	r3, r3
 800664c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006654:	b29a      	uxth	r2, r3
 8006656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800665a:	801a      	strh	r2, [r3, #0]
 800665c:	e3ad      	b.n	8006dba <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800665e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	78db      	ldrb	r3, [r3, #3]
 800666a:	2b02      	cmp	r3, #2
 800666c:	f040 8200 	bne.w	8006a70 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	785b      	ldrb	r3, [r3, #1]
 800667c:	2b00      	cmp	r3, #0
 800667e:	f040 8091 	bne.w	80067a4 <USB_EPStartXfer+0xfd6>
 8006682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006694:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669e:	b29b      	uxth	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066a6:	4413      	add	r3, r2
 80066a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	011a      	lsls	r2, r3, #4
 80066ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066be:	4413      	add	r3, r2
 80066c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d116      	bne.n	8006706 <USB_EPStartXfer+0xf38>
 80066d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066ea:	801a      	strh	r2, [r3, #0]
 80066ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006702:	801a      	strh	r2, [r3, #0]
 8006704:	e083      	b.n	800680e <USB_EPStartXfer+0x1040>
 8006706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	2b3e      	cmp	r3, #62	; 0x3e
 8006714:	d820      	bhi.n	8006758 <USB_EPStartXfer+0xf8a>
 8006716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	085b      	lsrs	r3, r3, #1
 8006724:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <USB_EPStartXfer+0xf78>
 800673c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006740:	3301      	adds	r3, #1
 8006742:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674a:	b29b      	uxth	r3, r3
 800674c:	029b      	lsls	r3, r3, #10
 800674e:	b29a      	uxth	r2, r3
 8006750:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006754:	801a      	strh	r2, [r3, #0]
 8006756:	e05a      	b.n	800680e <USB_EPStartXfer+0x1040>
 8006758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800676a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 031f 	and.w	r3, r3, #31
 800677a:	2b00      	cmp	r3, #0
 800677c:	d104      	bne.n	8006788 <USB_EPStartXfer+0xfba>
 800677e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006782:	3b01      	subs	r3, #1
 8006784:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800678c:	b29b      	uxth	r3, r3
 800678e:	029b      	lsls	r3, r3, #10
 8006790:	b29b      	uxth	r3, r3
 8006792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679a:	b29a      	uxth	r2, r3
 800679c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067a0:	801a      	strh	r2, [r3, #0]
 80067a2:	e034      	b.n	800680e <USB_EPStartXfer+0x1040>
 80067a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d12c      	bne.n	800680e <USB_EPStartXfer+0x1040>
 80067b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	461a      	mov	r2, r3
 80067d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067d8:	4413      	add	r3, r2
 80067da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	011a      	lsls	r2, r3, #4
 80067ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067f0:	4413      	add	r3, r2
 80067f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	b29a      	uxth	r2, r3
 8006808:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800680c:	801a      	strh	r2, [r3, #0]
 800680e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800681c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	2b00      	cmp	r3, #0
 800682a:	f040 8091 	bne.w	8006950 <USB_EPStartXfer+0x1182>
 800682e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800683c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684a:	b29b      	uxth	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006852:	4413      	add	r3, r2
 8006854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	011a      	lsls	r2, r3, #4
 8006866:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800686a:	4413      	add	r3, r2
 800686c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d116      	bne.n	80068b2 <USB_EPStartXfer+0x10e4>
 8006884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006890:	b29a      	uxth	r2, r3
 8006892:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006896:	801a      	strh	r2, [r3, #0]
 8006898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068ae:	801a      	strh	r2, [r3, #0]
 80068b0:	e07c      	b.n	80069ac <USB_EPStartXfer+0x11de>
 80068b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b3e      	cmp	r3, #62	; 0x3e
 80068c0:	d820      	bhi.n	8006904 <USB_EPStartXfer+0x1136>
 80068c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d004      	beq.n	80068f2 <USB_EPStartXfer+0x1124>
 80068e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ec:	3301      	adds	r3, #1
 80068ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	029b      	lsls	r3, r3, #10
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006900:	801a      	strh	r2, [r3, #0]
 8006902:	e053      	b.n	80069ac <USB_EPStartXfer+0x11de>
 8006904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 031f 	and.w	r3, r3, #31
 8006926:	2b00      	cmp	r3, #0
 8006928:	d104      	bne.n	8006934 <USB_EPStartXfer+0x1166>
 800692a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800692e:	3b01      	subs	r3, #1
 8006930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006938:	b29b      	uxth	r3, r3
 800693a:	029b      	lsls	r3, r3, #10
 800693c:	b29b      	uxth	r3, r3
 800693e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006946:	b29a      	uxth	r2, r3
 8006948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	e02d      	b.n	80069ac <USB_EPStartXfer+0x11de>
 8006950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d125      	bne.n	80069ac <USB_EPStartXfer+0x11de>
 8006960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006964:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696e:	b29b      	uxth	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006976:	4413      	add	r3, r2
 8006978:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800697c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	011a      	lsls	r2, r3, #4
 800698a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800698e:	4413      	add	r3, r2
 8006990:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006994:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069aa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80069ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 81fe 	beq.w	8006dba <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80069be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80069e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <USB_EPStartXfer+0x1228>
 80069ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80069ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10d      	bne.n	8006a12 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80069fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f040 81db 	bne.w	8006dba <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f040 81d4 	bne.w	8006dba <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a38:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	441a      	add	r2, r3
 8006a56:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	8013      	strh	r3, [r2, #0]
 8006a6e:	e1a4      	b.n	8006dba <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	78db      	ldrb	r3, [r3, #3]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	f040 819a 	bne.w	8006db6 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d917      	bls.n	8006ace <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8006a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006abe:	1ad2      	subs	r2, r2, r3
 8006ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	619a      	str	r2, [r3, #24]
 8006acc:	e00e      	b.n	8006aec <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8006ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	785b      	ldrb	r3, [r3, #1]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d178      	bne.n	8006bee <USB_EPStartXfer+0x1420>
 8006afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b20:	4413      	add	r3, r2
 8006b22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	011a      	lsls	r2, r3, #4
 8006b34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b38:	4413      	add	r3, r2
 8006b3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d116      	bne.n	8006b78 <USB_EPStartXfer+0x13aa>
 8006b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b5c:	801a      	strh	r2, [r3, #0]
 8006b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b74:	801a      	strh	r2, [r3, #0]
 8006b76:	e06b      	b.n	8006c50 <USB_EPStartXfer+0x1482>
 8006b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b7c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b7e:	d818      	bhi.n	8006bb2 <USB_EPStartXfer+0x13e4>
 8006b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b84:	085b      	lsrs	r3, r3, #1
 8006b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d004      	beq.n	8006ba0 <USB_EPStartXfer+0x13d2>
 8006b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	029b      	lsls	r3, r3, #10
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	e04e      	b.n	8006c50 <USB_EPStartXfer+0x1482>
 8006bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d104      	bne.n	8006bd2 <USB_EPStartXfer+0x1404>
 8006bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	029b      	lsls	r3, r3, #10
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bea:	801a      	strh	r2, [r3, #0]
 8006bec:	e030      	b.n	8006c50 <USB_EPStartXfer+0x1482>
 8006bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d128      	bne.n	8006c50 <USB_EPStartXfer+0x1482>
 8006bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c22:	4413      	add	r3, r2
 8006c24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	011a      	lsls	r2, r3, #4
 8006c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c4e:	801a      	strh	r2, [r3, #0]
 8006c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	785b      	ldrb	r3, [r3, #1]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d178      	bne.n	8006d60 <USB_EPStartXfer+0x1592>
 8006c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c92:	4413      	add	r3, r2
 8006c94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	011a      	lsls	r2, r3, #4
 8006ca6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006caa:	4413      	add	r3, r2
 8006cac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d116      	bne.n	8006cea <USB_EPStartXfer+0x151c>
 8006cbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cce:	801a      	strh	r2, [r3, #0]
 8006cd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ce6:	801a      	strh	r2, [r3, #0]
 8006ce8:	e067      	b.n	8006dba <USB_EPStartXfer+0x15ec>
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cee:	2b3e      	cmp	r3, #62	; 0x3e
 8006cf0:	d818      	bhi.n	8006d24 <USB_EPStartXfer+0x1556>
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d004      	beq.n	8006d12 <USB_EPStartXfer+0x1544>
 8006d08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	029b      	lsls	r3, r3, #10
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d20:	801a      	strh	r2, [r3, #0]
 8006d22:	e04a      	b.n	8006dba <USB_EPStartXfer+0x15ec>
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d28:	095b      	lsrs	r3, r3, #5
 8006d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d104      	bne.n	8006d44 <USB_EPStartXfer+0x1576>
 8006d3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	029b      	lsls	r3, r3, #10
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	e02c      	b.n	8006dba <USB_EPStartXfer+0x15ec>
 8006d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	785b      	ldrb	r3, [r3, #1]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d124      	bne.n	8006dba <USB_EPStartXfer+0x15ec>
 8006d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	461a      	mov	r2, r3
 8006d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d86:	4413      	add	r3, r2
 8006d88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	011a      	lsls	r2, r3, #4
 8006d9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d9e:	4413      	add	r3, r2
 8006da0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006db2:	801a      	strh	r2, [r3, #0]
 8006db4:	e001      	b.n	8006dba <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e03a      	b.n	8006e30 <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006de4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006de8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006df0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006df4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006df8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	441a      	add	r2, r3
 8006e16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	785b      	ldrb	r3, [r3, #1]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d020      	beq.n	8006e8e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e62:	81bb      	strh	r3, [r7, #12]
 8006e64:	89bb      	ldrh	r3, [r7, #12]
 8006e66:	f083 0310 	eor.w	r3, r3, #16
 8006e6a:	81bb      	strh	r3, [r7, #12]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	441a      	add	r2, r3
 8006e76:	89bb      	ldrh	r3, [r7, #12]
 8006e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	8013      	strh	r3, [r2, #0]
 8006e8c:	e01f      	b.n	8006ece <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea4:	81fb      	strh	r3, [r7, #14]
 8006ea6:	89fb      	ldrh	r3, [r7, #14]
 8006ea8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006eac:	81fb      	strh	r3, [r7, #14]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	441a      	add	r2, r3
 8006eb8:	89fb      	ldrh	r3, [r7, #14]
 8006eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	7b1b      	ldrb	r3, [r3, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f040 809d 	bne.w	800702a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	785b      	ldrb	r3, [r3, #1]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d04c      	beq.n	8006f92 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	823b      	strh	r3, [r7, #16]
 8006f06:	8a3b      	ldrh	r3, [r7, #16]
 8006f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01b      	beq.n	8006f48 <USB_EPClearStall+0x6c>
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	81fb      	strh	r3, [r7, #14]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	441a      	add	r2, r3
 8006f32:	89fb      	ldrh	r3, [r7, #14]
 8006f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	78db      	ldrb	r3, [r3, #3]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d06c      	beq.n	800702a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f66:	81bb      	strh	r3, [r7, #12]
 8006f68:	89bb      	ldrh	r3, [r7, #12]
 8006f6a:	f083 0320 	eor.w	r3, r3, #32
 8006f6e:	81bb      	strh	r3, [r7, #12]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	441a      	add	r2, r3
 8006f7a:	89bb      	ldrh	r3, [r7, #12]
 8006f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	8013      	strh	r3, [r2, #0]
 8006f90:	e04b      	b.n	800702a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	82fb      	strh	r3, [r7, #22]
 8006fa0:	8afb      	ldrh	r3, [r7, #22]
 8006fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01b      	beq.n	8006fe2 <USB_EPClearStall+0x106>
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc0:	82bb      	strh	r3, [r7, #20]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	441a      	add	r2, r3
 8006fcc:	8abb      	ldrh	r3, [r7, #20]
 8006fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff8:	827b      	strh	r3, [r7, #18]
 8006ffa:	8a7b      	ldrh	r3, [r7, #18]
 8006ffc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007000:	827b      	strh	r3, [r7, #18]
 8007002:	8a7b      	ldrh	r3, [r7, #18]
 8007004:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007008:	827b      	strh	r3, [r7, #18]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	441a      	add	r2, r3
 8007014:	8a7b      	ldrh	r3, [r7, #18]
 8007016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800701a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800701e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007026:	b29b      	uxth	r3, r3
 8007028:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	371c      	adds	r7, #28
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d103      	bne.n	8007052 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2280      	movs	r2, #128	; 0x80
 800704e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007084:	b29b      	uxth	r3, r3
 8007086:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007088:	68fb      	ldr	r3, [r7, #12]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007096:	b480      	push	{r7}
 8007098:	b08d      	sub	sp, #52	; 0x34
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	4611      	mov	r1, r2
 80070a2:	461a      	mov	r2, r3
 80070a4:	460b      	mov	r3, r1
 80070a6:	80fb      	strh	r3, [r7, #6]
 80070a8:	4613      	mov	r3, r2
 80070aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80070ac:	88bb      	ldrh	r3, [r7, #4]
 80070ae:	3301      	adds	r3, #1
 80070b0:	085b      	lsrs	r3, r3, #1
 80070b2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070bc:	88fb      	ldrh	r3, [r7, #6]
 80070be:	005a      	lsls	r2, r3, #1
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070c8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ce:	e01e      	b.n	800710e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	3301      	adds	r3, #1
 80070da:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	461a      	mov	r2, r3
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80070f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f8:	3302      	adds	r3, #2
 80070fa:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	3302      	adds	r3, #2
 8007100:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	3301      	adds	r3, #1
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	3b01      	subs	r3, #1
 800710c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1dd      	bne.n	80070d0 <USB_WritePMA+0x3a>
  }
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	3734      	adds	r7, #52	; 0x34
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007122:	b480      	push	{r7}
 8007124:	b08b      	sub	sp, #44	; 0x2c
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	4611      	mov	r1, r2
 800712e:	461a      	mov	r2, r3
 8007130:	460b      	mov	r3, r1
 8007132:	80fb      	strh	r3, [r7, #6]
 8007134:	4613      	mov	r3, r2
 8007136:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007138:	88bb      	ldrh	r3, [r7, #4]
 800713a:	085b      	lsrs	r3, r3, #1
 800713c:	b29b      	uxth	r3, r3
 800713e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007148:	88fb      	ldrh	r3, [r7, #6]
 800714a:	005a      	lsls	r2, r3, #1
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007154:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
 800715a:	e01b      	b.n	8007194 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	b29b      	uxth	r3, r3
 8007162:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	3302      	adds	r3, #2
 8007168:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	3301      	adds	r3, #1
 8007176:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	0a1b      	lsrs	r3, r3, #8
 800717c:	b2da      	uxtb	r2, r3
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	3301      	adds	r3, #1
 8007186:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	3302      	adds	r3, #2
 800718c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	3b01      	subs	r3, #1
 8007192:	627b      	str	r3, [r7, #36]	; 0x24
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e0      	bne.n	800715c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800719a:	88bb      	ldrh	r3, [r7, #4]
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d007      	beq.n	80071b6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	701a      	strb	r2, [r3, #0]
  }
}
 80071b6:	bf00      	nop
 80071b8:	372c      	adds	r7, #44	; 0x2c
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	7c1b      	ldrb	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d115      	bne.n	8007206 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80071da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071de:	2202      	movs	r2, #2
 80071e0:	2181      	movs	r1, #129	; 0x81
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 fee9 	bl	8008fba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071f2:	2202      	movs	r2, #2
 80071f4:	2101      	movs	r1, #1
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 fedf 	bl	8008fba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007204:	e012      	b.n	800722c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007206:	2340      	movs	r3, #64	; 0x40
 8007208:	2202      	movs	r2, #2
 800720a:	2181      	movs	r1, #129	; 0x81
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 fed4 	bl	8008fba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007218:	2340      	movs	r3, #64	; 0x40
 800721a:	2202      	movs	r2, #2
 800721c:	2101      	movs	r1, #1
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 fecb 	bl	8008fba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800722c:	2308      	movs	r3, #8
 800722e:	2203      	movs	r2, #3
 8007230:	2182      	movs	r1, #130	; 0x82
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 fec1 	bl	8008fba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800723e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007242:	f001 ffe3 	bl	800920c <USBD_static_malloc>
 8007246:	4602      	mov	r2, r0
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007254:	2b00      	cmp	r3, #0
 8007256:	d102      	bne.n	800725e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007258:	2301      	movs	r3, #1
 800725a:	73fb      	strb	r3, [r7, #15]
 800725c:	e026      	b.n	80072ac <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007264:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2200      	movs	r2, #0
 800727c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	7c1b      	ldrb	r3, [r3, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d109      	bne.n	800729c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800728e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007292:	2101      	movs	r1, #1
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 ff82 	bl	800919e <USBD_LL_PrepareReceive>
 800729a:	e007      	b.n	80072ac <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072a2:	2340      	movs	r3, #64	; 0x40
 80072a4:	2101      	movs	r1, #1
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f001 ff79 	bl	800919e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	460b      	mov	r3, r1
 80072c0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80072c6:	2181      	movs	r1, #129	; 0x81
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 fe9c 	bl	8009006 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80072d4:	2101      	movs	r1, #1
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 fe95 	bl	8009006 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80072e4:	2182      	movs	r1, #130	; 0x82
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 fe8d 	bl	8009006 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00e      	beq.n	800731a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730c:	4618      	mov	r0, r3
 800730e:	f001 ff8b 	bl	8009228 <USBD_static_free>
    pdev->pClassData = NULL;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800731a:	7bfb      	ldrb	r3, [r7, #15]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800734a:	2b00      	cmp	r3, #0
 800734c:	d039      	beq.n	80073c2 <USBD_CDC_Setup+0x9e>
 800734e:	2b20      	cmp	r3, #32
 8007350:	d17f      	bne.n	8007452 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	88db      	ldrh	r3, [r3, #6]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d029      	beq.n	80073ae <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	b25b      	sxtb	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	da11      	bge.n	8007388 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007370:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	88d2      	ldrh	r2, [r2, #6]
 8007376:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007378:	6939      	ldr	r1, [r7, #16]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	88db      	ldrh	r3, [r3, #6]
 800737e:	461a      	mov	r2, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f001 f9e4 	bl	800874e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007386:	e06b      	b.n	8007460 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	785a      	ldrb	r2, [r3, #1]
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	88db      	ldrh	r3, [r3, #6]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800739e:	6939      	ldr	r1, [r7, #16]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	88db      	ldrh	r3, [r3, #6]
 80073a4:	461a      	mov	r2, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 f9ff 	bl	80087aa <USBD_CtlPrepareRx>
      break;
 80073ac:	e058      	b.n	8007460 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	7850      	ldrb	r0, [r2, #1]
 80073ba:	2200      	movs	r2, #0
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	4798      	blx	r3
      break;
 80073c0:	e04e      	b.n	8007460 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	785b      	ldrb	r3, [r3, #1]
 80073c6:	2b0b      	cmp	r3, #11
 80073c8:	d02e      	beq.n	8007428 <USBD_CDC_Setup+0x104>
 80073ca:	2b0b      	cmp	r3, #11
 80073cc:	dc38      	bgt.n	8007440 <USBD_CDC_Setup+0x11c>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <USBD_CDC_Setup+0xb4>
 80073d2:	2b0a      	cmp	r3, #10
 80073d4:	d014      	beq.n	8007400 <USBD_CDC_Setup+0xdc>
 80073d6:	e033      	b.n	8007440 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d107      	bne.n	80073f2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80073e2:	f107 030c 	add.w	r3, r7, #12
 80073e6:	2202      	movs	r2, #2
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f001 f9af 	bl	800874e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073f0:	e02e      	b.n	8007450 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 f93f 	bl	8008678 <USBD_CtlError>
            ret = USBD_FAIL;
 80073fa:	2302      	movs	r3, #2
 80073fc:	75fb      	strb	r3, [r7, #23]
          break;
 80073fe:	e027      	b.n	8007450 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007406:	2b03      	cmp	r3, #3
 8007408:	d107      	bne.n	800741a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800740a:	f107 030f 	add.w	r3, r7, #15
 800740e:	2201      	movs	r2, #1
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 f99b 	bl	800874e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007418:	e01a      	b.n	8007450 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 f92b 	bl	8008678 <USBD_CtlError>
            ret = USBD_FAIL;
 8007422:	2302      	movs	r3, #2
 8007424:	75fb      	strb	r3, [r7, #23]
          break;
 8007426:	e013      	b.n	8007450 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742e:	2b03      	cmp	r3, #3
 8007430:	d00d      	beq.n	800744e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f001 f91f 	bl	8008678 <USBD_CtlError>
            ret = USBD_FAIL;
 800743a:	2302      	movs	r3, #2
 800743c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800743e:	e006      	b.n	800744e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 f918 	bl	8008678 <USBD_CtlError>
          ret = USBD_FAIL;
 8007448:	2302      	movs	r3, #2
 800744a:	75fb      	strb	r3, [r7, #23]
          break;
 800744c:	e000      	b.n	8007450 <USBD_CDC_Setup+0x12c>
          break;
 800744e:	bf00      	nop
      }
      break;
 8007450:	e006      	b.n	8007460 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 f90f 	bl	8008678 <USBD_CtlError>
      ret = USBD_FAIL;
 800745a:	2302      	movs	r3, #2
 800745c:	75fb      	strb	r3, [r7, #23]
      break;
 800745e:	bf00      	nop
  }

  return ret;
 8007460:	7dfb      	ldrb	r3, [r7, #23]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	460b      	mov	r3, r1
 8007474:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800747c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007484:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800748c:	2b00      	cmp	r3, #0
 800748e:	d03a      	beq.n	8007506 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007490:	78fa      	ldrb	r2, [r7, #3]
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	331c      	adds	r3, #28
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d029      	beq.n	80074fa <USBD_CDC_DataIn+0x90>
 80074a6:	78fa      	ldrb	r2, [r7, #3]
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	4613      	mov	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	331c      	adds	r3, #28
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	78f9      	ldrb	r1, [r7, #3]
 80074ba:	68b8      	ldr	r0, [r7, #8]
 80074bc:	460b      	mov	r3, r1
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	440b      	add	r3, r1
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	4403      	add	r3, r0
 80074c6:	3338      	adds	r3, #56	; 0x38
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	fbb2 f1f3 	udiv	r1, r2, r3
 80074ce:	fb01 f303 	mul.w	r3, r1, r3
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d110      	bne.n	80074fa <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80074d8:	78fa      	ldrb	r2, [r7, #3]
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	4613      	mov	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	331c      	adds	r3, #28
 80074e8:	2200      	movs	r2, #0
 80074ea:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074ec:	78f9      	ldrb	r1, [r7, #3]
 80074ee:	2300      	movs	r3, #0
 80074f0:	2200      	movs	r2, #0
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 fe30 	bl	8009158 <USBD_LL_Transmit>
 80074f8:	e003      	b.n	8007502 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	e000      	b.n	8007508 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007506:	2302      	movs	r3, #2
  }
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007522:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 fe5b 	bl	80091e4 <USBD_LL_GetRxDataSize>
 800752e:	4602      	mov	r2, r0
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00d      	beq.n	800755c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007554:	4611      	mov	r1, r2
 8007556:	4798      	blx	r3

    return USBD_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	e000      	b.n	800755e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800755c:	2302      	movs	r3, #2
  }
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b084      	sub	sp, #16
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007574:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800757c:	2b00      	cmp	r3, #0
 800757e:	d015      	beq.n	80075ac <USBD_CDC_EP0_RxReady+0x46>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007586:	2bff      	cmp	r3, #255	; 0xff
 8007588:	d010      	beq.n	80075ac <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007598:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80075a0:	b292      	uxth	r2, r2
 80075a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	22ff      	movs	r2, #255	; 0xff
 80075a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2243      	movs	r2, #67	; 0x43
 80075c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80075c6:	4b03      	ldr	r3, [pc, #12]	; (80075d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	20000094 	.word	0x20000094

080075d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2243      	movs	r2, #67	; 0x43
 80075e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80075e6:	4b03      	ldr	r3, [pc, #12]	; (80075f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	20000050 	.word	0x20000050

080075f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2243      	movs	r2, #67	; 0x43
 8007604:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007606:	4b03      	ldr	r3, [pc, #12]	; (8007614 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	200000d8 	.word	0x200000d8

08007618 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	220a      	movs	r2, #10
 8007624:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007626:	4b03      	ldr	r3, [pc, #12]	; (8007634 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	2000000c 	.word	0x2000000c

08007638 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007642:	2302      	movs	r3, #2
 8007644:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007658:	7bfb      	ldrb	r3, [r7, #15]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007666:	b480      	push	{r7}
 8007668:	b087      	sub	sp, #28
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	4613      	mov	r3, r2
 8007672:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007684:	88fa      	ldrh	r2, [r7, #6]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	371c      	adds	r7, #28
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800769a:	b480      	push	{r7}
 800769c:	b085      	sub	sp, #20
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076aa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d017      	beq.n	800770c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	7c1b      	ldrb	r3, [r3, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d109      	bne.n	80076f8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076ee:	2101      	movs	r1, #1
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 fd54 	bl	800919e <USBD_LL_PrepareReceive>
 80076f6:	e007      	b.n	8007708 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076fe:	2340      	movs	r3, #64	; 0x40
 8007700:	2101      	movs	r1, #1
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f001 fd4b 	bl	800919e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	e000      	b.n	800770e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800770c:	2302      	movs	r3, #2
  }
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	4613      	mov	r3, r2
 8007722:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800772a:	2302      	movs	r3, #2
 800772c:	e01a      	b.n	8007764 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	79fa      	ldrb	r2, [r7, #7]
 800775a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f001 fbb7 	bl	8008ed0 <USBD_LL_Init>

  return USBD_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d006      	beq.n	800778e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	73fb      	strb	r3, [r7, #15]
 800778c:	e001      	b.n	8007792 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800778e:	2302      	movs	r3, #2
 8007790:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007792:	7bfb      	ldrb	r3, [r7, #15]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 fbeb 	bl	8008f84 <USBD_LL_Start>

  return USBD_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b084      	sub	sp, #16
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	460b      	mov	r3, r1
 80077d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80077da:	2302      	movs	r3, #2
 80077dc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00c      	beq.n	8007802 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	78fa      	ldrb	r2, [r7, #3]
 80077f2:	4611      	mov	r1, r2
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	4798      	blx	r3
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007802:	7bfb      	ldrb	r3, [r7, #15]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	78fa      	ldrb	r2, [r7, #3]
 8007822:	4611      	mov	r1, r2
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4798      	blx	r3

  return USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	4618      	mov	r0, r3
 8007846:	f000 feda 	bl	80085fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007858:	461a      	mov	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007866:	f003 031f 	and.w	r3, r3, #31
 800786a:	2b02      	cmp	r3, #2
 800786c:	d016      	beq.n	800789c <USBD_LL_SetupStage+0x6a>
 800786e:	2b02      	cmp	r3, #2
 8007870:	d81c      	bhi.n	80078ac <USBD_LL_SetupStage+0x7a>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <USBD_LL_SetupStage+0x4a>
 8007876:	2b01      	cmp	r3, #1
 8007878:	d008      	beq.n	800788c <USBD_LL_SetupStage+0x5a>
 800787a:	e017      	b.n	80078ac <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f9cd 	bl	8007c24 <USBD_StdDevReq>
      break;
 800788a:	e01a      	b.n	80078c2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fa2f 	bl	8007cf8 <USBD_StdItfReq>
      break;
 800789a:	e012      	b.n	80078c2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fa6f 	bl	8007d88 <USBD_StdEPReq>
      break;
 80078aa:	e00a      	b.n	80078c2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80078b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	4619      	mov	r1, r3
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f001 fbc2 	bl	8009044 <USBD_LL_StallEP>
      break;
 80078c0:	bf00      	nop
  }

  return USBD_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	460b      	mov	r3, r1
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80078da:	7afb      	ldrb	r3, [r7, #11]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d14b      	bne.n	8007978 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80078e6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d134      	bne.n	800795c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d919      	bls.n	8007932 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	1ad2      	subs	r2, r2, r3
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	68da      	ldr	r2, [r3, #12]
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007914:	429a      	cmp	r2, r3
 8007916:	d203      	bcs.n	8007920 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800791c:	b29b      	uxth	r3, r3
 800791e:	e002      	b.n	8007926 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007924:	b29b      	uxth	r3, r3
 8007926:	461a      	mov	r2, r3
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 ff5b 	bl	80087e6 <USBD_CtlContinueRx>
 8007930:	e038      	b.n	80079a4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007944:	2b03      	cmp	r3, #3
 8007946:	d105      	bne.n	8007954 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 ff58 	bl	800880a <USBD_CtlSendStatus>
 800795a:	e023      	b.n	80079a4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007962:	2b05      	cmp	r3, #5
 8007964:	d11e      	bne.n	80079a4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800796e:	2100      	movs	r1, #0
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f001 fb67 	bl	8009044 <USBD_LL_StallEP>
 8007976:	e015      	b.n	80079a4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00d      	beq.n	80079a0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800798a:	2b03      	cmp	r3, #3
 800798c:	d108      	bne.n	80079a0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	7afa      	ldrb	r2, [r7, #11]
 8007998:	4611      	mov	r1, r2
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	4798      	blx	r3
 800799e:	e001      	b.n	80079a4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079a0:	2302      	movs	r3, #2
 80079a2:	e000      	b.n	80079a6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b086      	sub	sp, #24
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	460b      	mov	r3, r1
 80079b8:	607a      	str	r2, [r7, #4]
 80079ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80079bc:	7afb      	ldrb	r3, [r7, #11]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d17f      	bne.n	8007ac2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3314      	adds	r3, #20
 80079c6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d15c      	bne.n	8007a8c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d915      	bls.n	8007a0a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	1ad2      	subs	r2, r2, r3
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 fec5 	bl	8008786 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079fc:	2300      	movs	r3, #0
 80079fe:	2200      	movs	r2, #0
 8007a00:	2100      	movs	r1, #0
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f001 fbcb 	bl	800919e <USBD_LL_PrepareReceive>
 8007a08:	e04e      	b.n	8007aa8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	6912      	ldr	r2, [r2, #16]
 8007a12:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a16:	fb01 f202 	mul.w	r2, r1, r2
 8007a1a:	1a9b      	subs	r3, r3, r2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d11c      	bne.n	8007a5a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d316      	bcc.n	8007a5a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d20f      	bcs.n	8007a5a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 fea1 	bl	8008786 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	2200      	movs	r2, #0
 8007a50:	2100      	movs	r1, #0
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f001 fba3 	bl	800919e <USBD_LL_PrepareReceive>
 8007a58:	e026      	b.n	8007aa8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00a      	beq.n	8007a7c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d105      	bne.n	8007a7c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007a7c:	2180      	movs	r1, #128	; 0x80
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f001 fae0 	bl	8009044 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 fed3 	bl	8008830 <USBD_CtlReceiveStatus>
 8007a8a:	e00d      	b.n	8007aa8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d004      	beq.n	8007aa0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d103      	bne.n	8007aa8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007aa0:	2180      	movs	r1, #128	; 0x80
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f001 face 	bl	8009044 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d11d      	bne.n	8007aee <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f7ff fe80 	bl	80077b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ac0:	e015      	b.n	8007aee <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00d      	beq.n	8007aea <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d108      	bne.n	8007aea <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	7afa      	ldrb	r2, [r7, #11]
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	4798      	blx	r3
 8007ae8:	e001      	b.n	8007aee <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007aea:	2302      	movs	r3, #2
 8007aec:	e000      	b.n	8007af0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b00:	2340      	movs	r3, #64	; 0x40
 8007b02:	2200      	movs	r2, #0
 8007b04:	2100      	movs	r1, #0
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f001 fa57 	bl	8008fba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2240      	movs	r2, #64	; 0x40
 8007b18:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b1c:	2340      	movs	r3, #64	; 0x40
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2180      	movs	r1, #128	; 0x80
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 fa49 	bl	8008fba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2240      	movs	r2, #64	; 0x40
 8007b32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d009      	beq.n	8007b70 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	6852      	ldr	r2, [r2, #4]
 8007b68:	b2d2      	uxtb	r2, r2
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	4798      	blx	r3
  }

  return USBD_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	78fa      	ldrb	r2, [r7, #3]
 8007b8a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2204      	movs	r2, #4
 8007bb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	d105      	bne.n	8007be2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d10b      	bne.n	8007c1a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d005      	beq.n	8007c1a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c3a:	2b40      	cmp	r3, #64	; 0x40
 8007c3c:	d005      	beq.n	8007c4a <USBD_StdDevReq+0x26>
 8007c3e:	2b40      	cmp	r3, #64	; 0x40
 8007c40:	d84f      	bhi.n	8007ce2 <USBD_StdDevReq+0xbe>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d009      	beq.n	8007c5a <USBD_StdDevReq+0x36>
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d14b      	bne.n	8007ce2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	4798      	blx	r3
      break;
 8007c58:	e048      	b.n	8007cec <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	785b      	ldrb	r3, [r3, #1]
 8007c5e:	2b09      	cmp	r3, #9
 8007c60:	d839      	bhi.n	8007cd6 <USBD_StdDevReq+0xb2>
 8007c62:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <USBD_StdDevReq+0x44>)
 8007c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c68:	08007cb9 	.word	0x08007cb9
 8007c6c:	08007ccd 	.word	0x08007ccd
 8007c70:	08007cd7 	.word	0x08007cd7
 8007c74:	08007cc3 	.word	0x08007cc3
 8007c78:	08007cd7 	.word	0x08007cd7
 8007c7c:	08007c9b 	.word	0x08007c9b
 8007c80:	08007c91 	.word	0x08007c91
 8007c84:	08007cd7 	.word	0x08007cd7
 8007c88:	08007caf 	.word	0x08007caf
 8007c8c:	08007ca5 	.word	0x08007ca5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f9dc 	bl	8008050 <USBD_GetDescriptor>
          break;
 8007c98:	e022      	b.n	8007ce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fb3f 	bl	8008320 <USBD_SetAddress>
          break;
 8007ca2:	e01d      	b.n	8007ce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fb7e 	bl	80083a8 <USBD_SetConfig>
          break;
 8007cac:	e018      	b.n	8007ce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fc07 	bl	80084c4 <USBD_GetConfig>
          break;
 8007cb6:	e013      	b.n	8007ce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fc37 	bl	800852e <USBD_GetStatus>
          break;
 8007cc0:	e00e      	b.n	8007ce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fc65 	bl	8008594 <USBD_SetFeature>
          break;
 8007cca:	e009      	b.n	8007ce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fc74 	bl	80085bc <USBD_ClrFeature>
          break;
 8007cd4:	e004      	b.n	8007ce0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fccd 	bl	8008678 <USBD_CtlError>
          break;
 8007cde:	bf00      	nop
      }
      break;
 8007ce0:	e004      	b.n	8007cec <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fcc7 	bl	8008678 <USBD_CtlError>
      break;
 8007cea:	bf00      	nop
  }

  return ret;
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop

08007cf8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d0e:	2b40      	cmp	r3, #64	; 0x40
 8007d10:	d005      	beq.n	8007d1e <USBD_StdItfReq+0x26>
 8007d12:	2b40      	cmp	r3, #64	; 0x40
 8007d14:	d82e      	bhi.n	8007d74 <USBD_StdItfReq+0x7c>
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <USBD_StdItfReq+0x26>
 8007d1a:	2b20      	cmp	r3, #32
 8007d1c:	d12a      	bne.n	8007d74 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d24:	3b01      	subs	r3, #1
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d81d      	bhi.n	8007d66 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	889b      	ldrh	r3, [r3, #4]
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d813      	bhi.n	8007d5c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	4798      	blx	r3
 8007d42:	4603      	mov	r3, r0
 8007d44:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	88db      	ldrh	r3, [r3, #6]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d110      	bne.n	8007d70 <USBD_StdItfReq+0x78>
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10d      	bne.n	8007d70 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fd58 	bl	800880a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d5a:	e009      	b.n	8007d70 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fc8a 	bl	8008678 <USBD_CtlError>
          break;
 8007d64:	e004      	b.n	8007d70 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fc85 	bl	8008678 <USBD_CtlError>
          break;
 8007d6e:	e000      	b.n	8007d72 <USBD_StdItfReq+0x7a>
          break;
 8007d70:	bf00      	nop
      }
      break;
 8007d72:	e004      	b.n	8007d7e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fc7e 	bl	8008678 <USBD_CtlError>
      break;
 8007d7c:	bf00      	nop
  }

  return USBD_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	889b      	ldrh	r3, [r3, #4]
 8007d9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007da4:	2b40      	cmp	r3, #64	; 0x40
 8007da6:	d007      	beq.n	8007db8 <USBD_StdEPReq+0x30>
 8007da8:	2b40      	cmp	r3, #64	; 0x40
 8007daa:	f200 8146 	bhi.w	800803a <USBD_StdEPReq+0x2b2>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00a      	beq.n	8007dc8 <USBD_StdEPReq+0x40>
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	f040 8141 	bne.w	800803a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
      break;
 8007dc6:	e13d      	b.n	8008044 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dd0:	2b20      	cmp	r3, #32
 8007dd2:	d10a      	bne.n	8007dea <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	4798      	blx	r3
 8007de2:	4603      	mov	r3, r0
 8007de4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	e12d      	b.n	8008046 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	785b      	ldrb	r3, [r3, #1]
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d007      	beq.n	8007e02 <USBD_StdEPReq+0x7a>
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	f300 811b 	bgt.w	800802e <USBD_StdEPReq+0x2a6>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d072      	beq.n	8007ee2 <USBD_StdEPReq+0x15a>
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d03a      	beq.n	8007e76 <USBD_StdEPReq+0xee>
 8007e00:	e115      	b.n	800802e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d002      	beq.n	8007e12 <USBD_StdEPReq+0x8a>
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d015      	beq.n	8007e3c <USBD_StdEPReq+0xb4>
 8007e10:	e02b      	b.n	8007e6a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00c      	beq.n	8007e32 <USBD_StdEPReq+0xaa>
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	2b80      	cmp	r3, #128	; 0x80
 8007e1c:	d009      	beq.n	8007e32 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f001 f90e 	bl	8009044 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e28:	2180      	movs	r1, #128	; 0x80
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f001 f90a 	bl	8009044 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e30:	e020      	b.n	8007e74 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fc1f 	bl	8008678 <USBD_CtlError>
              break;
 8007e3a:	e01b      	b.n	8007e74 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	885b      	ldrh	r3, [r3, #2]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10e      	bne.n	8007e62 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00b      	beq.n	8007e62 <USBD_StdEPReq+0xda>
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	2b80      	cmp	r3, #128	; 0x80
 8007e4e:	d008      	beq.n	8007e62 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	88db      	ldrh	r3, [r3, #6]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d104      	bne.n	8007e62 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 f8f1 	bl	8009044 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fcd1 	bl	800880a <USBD_CtlSendStatus>

              break;
 8007e68:	e004      	b.n	8007e74 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fc03 	bl	8008678 <USBD_CtlError>
              break;
 8007e72:	bf00      	nop
          }
          break;
 8007e74:	e0e0      	b.n	8008038 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d002      	beq.n	8007e86 <USBD_StdEPReq+0xfe>
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d015      	beq.n	8007eb0 <USBD_StdEPReq+0x128>
 8007e84:	e026      	b.n	8007ed4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00c      	beq.n	8007ea6 <USBD_StdEPReq+0x11e>
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
 8007e8e:	2b80      	cmp	r3, #128	; 0x80
 8007e90:	d009      	beq.n	8007ea6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 f8d4 	bl	8009044 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e9c:	2180      	movs	r1, #128	; 0x80
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 f8d0 	bl	8009044 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ea4:	e01c      	b.n	8007ee0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fbe5 	bl	8008678 <USBD_CtlError>
              break;
 8007eae:	e017      	b.n	8007ee0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	885b      	ldrh	r3, [r3, #2]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d112      	bne.n	8007ede <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f001 f8db 	bl	8009082 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fc9c 	bl	800880a <USBD_CtlSendStatus>
              }
              break;
 8007ed2:	e004      	b.n	8007ede <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fbce 	bl	8008678 <USBD_CtlError>
              break;
 8007edc:	e000      	b.n	8007ee0 <USBD_StdEPReq+0x158>
              break;
 8007ede:	bf00      	nop
          }
          break;
 8007ee0:	e0aa      	b.n	8008038 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d002      	beq.n	8007ef2 <USBD_StdEPReq+0x16a>
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d032      	beq.n	8007f56 <USBD_StdEPReq+0x1ce>
 8007ef0:	e097      	b.n	8008022 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d007      	beq.n	8007f08 <USBD_StdEPReq+0x180>
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b80      	cmp	r3, #128	; 0x80
 8007efc:	d004      	beq.n	8007f08 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fbb9 	bl	8008678 <USBD_CtlError>
                break;
 8007f06:	e091      	b.n	800802c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	da0b      	bge.n	8007f28 <USBD_StdEPReq+0x1a0>
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	3310      	adds	r3, #16
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	4413      	add	r3, r2
 8007f24:	3304      	adds	r3, #4
 8007f26:	e00b      	b.n	8007f40 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	3304      	adds	r3, #4
 8007f40:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2200      	movs	r2, #0
 8007f46:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fbfd 	bl	800874e <USBD_CtlSendData>
              break;
 8007f54:	e06a      	b.n	800802c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	da11      	bge.n	8007f82 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f5e:	7bbb      	ldrb	r3, [r7, #14]
 8007f60:	f003 020f 	and.w	r2, r3, #15
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	3318      	adds	r3, #24
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d117      	bne.n	8007fa8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fb7c 	bl	8008678 <USBD_CtlError>
                  break;
 8007f80:	e054      	b.n	800802c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	f003 020f 	and.w	r2, r3, #15
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	440b      	add	r3, r1
 8007f94:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d104      	bne.n	8007fa8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fb69 	bl	8008678 <USBD_CtlError>
                  break;
 8007fa6:	e041      	b.n	800802c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	da0b      	bge.n	8007fc8 <USBD_StdEPReq+0x240>
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	3310      	adds	r3, #16
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	e00b      	b.n	8007fe0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	4413      	add	r3, r2
 8007fde:	3304      	adds	r3, #4
 8007fe0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <USBD_StdEPReq+0x266>
 8007fe8:	7bbb      	ldrb	r3, [r7, #14]
 8007fea:	2b80      	cmp	r3, #128	; 0x80
 8007fec:	d103      	bne.n	8007ff6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	e00e      	b.n	8008014 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 f860 	bl	80090c0 <USBD_LL_IsStallEP>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2201      	movs	r2, #1
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	e002      	b.n	8008014 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2202      	movs	r2, #2
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fb97 	bl	800874e <USBD_CtlSendData>
              break;
 8008020:	e004      	b.n	800802c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fb27 	bl	8008678 <USBD_CtlError>
              break;
 800802a:	bf00      	nop
          }
          break;
 800802c:	e004      	b.n	8008038 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fb21 	bl	8008678 <USBD_CtlError>
          break;
 8008036:	bf00      	nop
      }
      break;
 8008038:	e004      	b.n	8008044 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fb1b 	bl	8008678 <USBD_CtlError>
      break;
 8008042:	bf00      	nop
  }

  return ret;
 8008044:	7bfb      	ldrb	r3, [r7, #15]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	885b      	ldrh	r3, [r3, #2]
 800806a:	0a1b      	lsrs	r3, r3, #8
 800806c:	b29b      	uxth	r3, r3
 800806e:	3b01      	subs	r3, #1
 8008070:	2b06      	cmp	r3, #6
 8008072:	f200 8128 	bhi.w	80082c6 <USBD_GetDescriptor+0x276>
 8008076:	a201      	add	r2, pc, #4	; (adr r2, 800807c <USBD_GetDescriptor+0x2c>)
 8008078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807c:	08008099 	.word	0x08008099
 8008080:	080080b1 	.word	0x080080b1
 8008084:	080080f1 	.word	0x080080f1
 8008088:	080082c7 	.word	0x080082c7
 800808c:	080082c7 	.word	0x080082c7
 8008090:	08008267 	.word	0x08008267
 8008094:	08008293 	.word	0x08008293
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	7c12      	ldrb	r2, [r2, #16]
 80080a4:	f107 0108 	add.w	r1, r7, #8
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
 80080ac:	60f8      	str	r0, [r7, #12]
      break;
 80080ae:	e112      	b.n	80082d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	7c1b      	ldrb	r3, [r3, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10d      	bne.n	80080d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c0:	f107 0208 	add.w	r2, r7, #8
 80080c4:	4610      	mov	r0, r2
 80080c6:	4798      	blx	r3
 80080c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3301      	adds	r3, #1
 80080ce:	2202      	movs	r2, #2
 80080d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080d2:	e100      	b.n	80082d6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080dc:	f107 0208 	add.w	r2, r7, #8
 80080e0:	4610      	mov	r0, r2
 80080e2:	4798      	blx	r3
 80080e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3301      	adds	r3, #1
 80080ea:	2202      	movs	r2, #2
 80080ec:	701a      	strb	r2, [r3, #0]
      break;
 80080ee:	e0f2      	b.n	80082d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	885b      	ldrh	r3, [r3, #2]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b05      	cmp	r3, #5
 80080f8:	f200 80ac 	bhi.w	8008254 <USBD_GetDescriptor+0x204>
 80080fc:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <USBD_GetDescriptor+0xb4>)
 80080fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008102:	bf00      	nop
 8008104:	0800811d 	.word	0x0800811d
 8008108:	08008151 	.word	0x08008151
 800810c:	08008185 	.word	0x08008185
 8008110:	080081b9 	.word	0x080081b9
 8008114:	080081ed 	.word	0x080081ed
 8008118:	08008221 	.word	0x08008221
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00b      	beq.n	8008140 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	7c12      	ldrb	r2, [r2, #16]
 8008134:	f107 0108 	add.w	r1, r7, #8
 8008138:	4610      	mov	r0, r2
 800813a:	4798      	blx	r3
 800813c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800813e:	e091      	b.n	8008264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fa98 	bl	8008678 <USBD_CtlError>
            err++;
 8008148:	7afb      	ldrb	r3, [r7, #11]
 800814a:	3301      	adds	r3, #1
 800814c:	72fb      	strb	r3, [r7, #11]
          break;
 800814e:	e089      	b.n	8008264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00b      	beq.n	8008174 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	7c12      	ldrb	r2, [r2, #16]
 8008168:	f107 0108 	add.w	r1, r7, #8
 800816c:	4610      	mov	r0, r2
 800816e:	4798      	blx	r3
 8008170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008172:	e077      	b.n	8008264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fa7e 	bl	8008678 <USBD_CtlError>
            err++;
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	3301      	adds	r3, #1
 8008180:	72fb      	strb	r3, [r7, #11]
          break;
 8008182:	e06f      	b.n	8008264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	7c12      	ldrb	r2, [r2, #16]
 800819c:	f107 0108 	add.w	r1, r7, #8
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081a6:	e05d      	b.n	8008264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fa64 	bl	8008678 <USBD_CtlError>
            err++;
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	3301      	adds	r3, #1
 80081b4:	72fb      	strb	r3, [r7, #11]
          break;
 80081b6:	e055      	b.n	8008264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	7c12      	ldrb	r2, [r2, #16]
 80081d0:	f107 0108 	add.w	r1, r7, #8
 80081d4:	4610      	mov	r0, r2
 80081d6:	4798      	blx	r3
 80081d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081da:	e043      	b.n	8008264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fa4a 	bl	8008678 <USBD_CtlError>
            err++;
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	3301      	adds	r3, #1
 80081e8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ea:	e03b      	b.n	8008264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	7c12      	ldrb	r2, [r2, #16]
 8008204:	f107 0108 	add.w	r1, r7, #8
 8008208:	4610      	mov	r0, r2
 800820a:	4798      	blx	r3
 800820c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800820e:	e029      	b.n	8008264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fa30 	bl	8008678 <USBD_CtlError>
            err++;
 8008218:	7afb      	ldrb	r3, [r7, #11]
 800821a:	3301      	adds	r3, #1
 800821c:	72fb      	strb	r3, [r7, #11]
          break;
 800821e:	e021      	b.n	8008264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	7c12      	ldrb	r2, [r2, #16]
 8008238:	f107 0108 	add.w	r1, r7, #8
 800823c:	4610      	mov	r0, r2
 800823e:	4798      	blx	r3
 8008240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008242:	e00f      	b.n	8008264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa16 	bl	8008678 <USBD_CtlError>
            err++;
 800824c:	7afb      	ldrb	r3, [r7, #11]
 800824e:	3301      	adds	r3, #1
 8008250:	72fb      	strb	r3, [r7, #11]
          break;
 8008252:	e007      	b.n	8008264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa0e 	bl	8008678 <USBD_CtlError>
          err++;
 800825c:	7afb      	ldrb	r3, [r7, #11]
 800825e:	3301      	adds	r3, #1
 8008260:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008262:	e038      	b.n	80082d6 <USBD_GetDescriptor+0x286>
 8008264:	e037      	b.n	80082d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	7c1b      	ldrb	r3, [r3, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d109      	bne.n	8008282 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008276:	f107 0208 	add.w	r2, r7, #8
 800827a:	4610      	mov	r0, r2
 800827c:	4798      	blx	r3
 800827e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008280:	e029      	b.n	80082d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f9f7 	bl	8008678 <USBD_CtlError>
        err++;
 800828a:	7afb      	ldrb	r3, [r7, #11]
 800828c:	3301      	adds	r3, #1
 800828e:	72fb      	strb	r3, [r7, #11]
      break;
 8008290:	e021      	b.n	80082d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	7c1b      	ldrb	r3, [r3, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10d      	bne.n	80082b6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a2:	f107 0208 	add.w	r2, r7, #8
 80082a6:	4610      	mov	r0, r2
 80082a8:	4798      	blx	r3
 80082aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	3301      	adds	r3, #1
 80082b0:	2207      	movs	r2, #7
 80082b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082b4:	e00f      	b.n	80082d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f9dd 	bl	8008678 <USBD_CtlError>
        err++;
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	3301      	adds	r3, #1
 80082c2:	72fb      	strb	r3, [r7, #11]
      break;
 80082c4:	e007      	b.n	80082d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f9d5 	bl	8008678 <USBD_CtlError>
      err++;
 80082ce:	7afb      	ldrb	r3, [r7, #11]
 80082d0:	3301      	adds	r3, #1
 80082d2:	72fb      	strb	r3, [r7, #11]
      break;
 80082d4:	bf00      	nop
  }

  if (err != 0U)
 80082d6:	7afb      	ldrb	r3, [r7, #11]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d11c      	bne.n	8008316 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80082dc:	893b      	ldrh	r3, [r7, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d011      	beq.n	8008306 <USBD_GetDescriptor+0x2b6>
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	88db      	ldrh	r3, [r3, #6]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00d      	beq.n	8008306 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	88da      	ldrh	r2, [r3, #6]
 80082ee:	893b      	ldrh	r3, [r7, #8]
 80082f0:	4293      	cmp	r3, r2
 80082f2:	bf28      	it	cs
 80082f4:	4613      	movcs	r3, r2
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082fa:	893b      	ldrh	r3, [r7, #8]
 80082fc:	461a      	mov	r2, r3
 80082fe:	68f9      	ldr	r1, [r7, #12]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fa24 	bl	800874e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	88db      	ldrh	r3, [r3, #6]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d104      	bne.n	8008318 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa7b 	bl	800880a <USBD_CtlSendStatus>
 8008314:	e000      	b.n	8008318 <USBD_GetDescriptor+0x2c8>
    return;
 8008316:	bf00      	nop
    }
  }
}
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop

08008320 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	889b      	ldrh	r3, [r3, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d130      	bne.n	8008394 <USBD_SetAddress+0x74>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	88db      	ldrh	r3, [r3, #6]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d12c      	bne.n	8008394 <USBD_SetAddress+0x74>
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	885b      	ldrh	r3, [r3, #2]
 800833e:	2b7f      	cmp	r3, #127	; 0x7f
 8008340:	d828      	bhi.n	8008394 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	885b      	ldrh	r3, [r3, #2]
 8008346:	b2db      	uxtb	r3, r3
 8008348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800834c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008354:	2b03      	cmp	r3, #3
 8008356:	d104      	bne.n	8008362 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f98c 	bl	8008678 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008360:	e01d      	b.n	800839e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	7bfa      	ldrb	r2, [r7, #15]
 8008366:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800836a:	7bfb      	ldrb	r3, [r7, #15]
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fed3 	bl	800911a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fa48 	bl	800880a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800837a:	7bfb      	ldrb	r3, [r7, #15]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d004      	beq.n	800838a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008388:	e009      	b.n	800839e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008392:	e004      	b.n	800839e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f96e 	bl	8008678 <USBD_CtlError>
  }
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	885b      	ldrh	r3, [r3, #2]
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	4b41      	ldr	r3, [pc, #260]	; (80084c0 <USBD_SetConfig+0x118>)
 80083ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083bc:	4b40      	ldr	r3, [pc, #256]	; (80084c0 <USBD_SetConfig+0x118>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d904      	bls.n	80083ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f956 	bl	8008678 <USBD_CtlError>
 80083cc:	e075      	b.n	80084ba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d002      	beq.n	80083de <USBD_SetConfig+0x36>
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d023      	beq.n	8008424 <USBD_SetConfig+0x7c>
 80083dc:	e062      	b.n	80084a4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80083de:	4b38      	ldr	r3, [pc, #224]	; (80084c0 <USBD_SetConfig+0x118>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d01a      	beq.n	800841c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80083e6:	4b36      	ldr	r3, [pc, #216]	; (80084c0 <USBD_SetConfig+0x118>)
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2203      	movs	r2, #3
 80083f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80083f8:	4b31      	ldr	r3, [pc, #196]	; (80084c0 <USBD_SetConfig+0x118>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff f9e5 	bl	80077ce <USBD_SetClassConfig>
 8008404:	4603      	mov	r3, r0
 8008406:	2b02      	cmp	r3, #2
 8008408:	d104      	bne.n	8008414 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f933 	bl	8008678 <USBD_CtlError>
            return;
 8008412:	e052      	b.n	80084ba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f9f8 	bl	800880a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800841a:	e04e      	b.n	80084ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f9f4 	bl	800880a <USBD_CtlSendStatus>
        break;
 8008422:	e04a      	b.n	80084ba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008424:	4b26      	ldr	r3, [pc, #152]	; (80084c0 <USBD_SetConfig+0x118>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d112      	bne.n	8008452 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008434:	4b22      	ldr	r3, [pc, #136]	; (80084c0 <USBD_SetConfig+0x118>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800843e:	4b20      	ldr	r3, [pc, #128]	; (80084c0 <USBD_SetConfig+0x118>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7ff f9e1 	bl	800780c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f9dd 	bl	800880a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008450:	e033      	b.n	80084ba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008452:	4b1b      	ldr	r3, [pc, #108]	; (80084c0 <USBD_SetConfig+0x118>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	d01d      	beq.n	800849c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff f9cf 	bl	800780c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800846e:	4b14      	ldr	r3, [pc, #80]	; (80084c0 <USBD_SetConfig+0x118>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008478:	4b11      	ldr	r3, [pc, #68]	; (80084c0 <USBD_SetConfig+0x118>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff f9a5 	bl	80077ce <USBD_SetClassConfig>
 8008484:	4603      	mov	r3, r0
 8008486:	2b02      	cmp	r3, #2
 8008488:	d104      	bne.n	8008494 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f8f3 	bl	8008678 <USBD_CtlError>
            return;
 8008492:	e012      	b.n	80084ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f9b8 	bl	800880a <USBD_CtlSendStatus>
        break;
 800849a:	e00e      	b.n	80084ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f9b4 	bl	800880a <USBD_CtlSendStatus>
        break;
 80084a2:	e00a      	b.n	80084ba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f8e6 	bl	8008678 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80084ac:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <USBD_SetConfig+0x118>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7ff f9aa 	bl	800780c <USBD_ClrClassConfig>
        break;
 80084b8:	bf00      	nop
    }
  }
}
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	200001cc 	.word	0x200001cc

080084c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	88db      	ldrh	r3, [r3, #6]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d004      	beq.n	80084e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f8cd 	bl	8008678 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80084de:	e022      	b.n	8008526 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	dc02      	bgt.n	80084f0 <USBD_GetConfig+0x2c>
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dc03      	bgt.n	80084f6 <USBD_GetConfig+0x32>
 80084ee:	e015      	b.n	800851c <USBD_GetConfig+0x58>
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d00b      	beq.n	800850c <USBD_GetConfig+0x48>
 80084f4:	e012      	b.n	800851c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	3308      	adds	r3, #8
 8008500:	2201      	movs	r2, #1
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f922 	bl	800874e <USBD_CtlSendData>
        break;
 800850a:	e00c      	b.n	8008526 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3304      	adds	r3, #4
 8008510:	2201      	movs	r2, #1
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f91a 	bl	800874e <USBD_CtlSendData>
        break;
 800851a:	e004      	b.n	8008526 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f8aa 	bl	8008678 <USBD_CtlError>
        break;
 8008524:	bf00      	nop
}
 8008526:	bf00      	nop
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800853e:	3b01      	subs	r3, #1
 8008540:	2b02      	cmp	r3, #2
 8008542:	d81e      	bhi.n	8008582 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	88db      	ldrh	r3, [r3, #6]
 8008548:	2b02      	cmp	r3, #2
 800854a:	d004      	beq.n	8008556 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f892 	bl	8008678 <USBD_CtlError>
        break;
 8008554:	e01a      	b.n	800858c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008562:	2b00      	cmp	r3, #0
 8008564:	d005      	beq.n	8008572 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	f043 0202 	orr.w	r2, r3, #2
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	330c      	adds	r3, #12
 8008576:	2202      	movs	r2, #2
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f8e7 	bl	800874e <USBD_CtlSendData>
      break;
 8008580:	e004      	b.n	800858c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f877 	bl	8008678 <USBD_CtlError>
      break;
 800858a:	bf00      	nop
  }
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	885b      	ldrh	r3, [r3, #2]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d106      	bne.n	80085b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f92b 	bl	800880a <USBD_CtlSendStatus>
  }
}
 80085b4:	bf00      	nop
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085cc:	3b01      	subs	r3, #1
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d80b      	bhi.n	80085ea <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	885b      	ldrh	r3, [r3, #2]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d10c      	bne.n	80085f4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f911 	bl	800880a <USBD_CtlSendStatus>
      }
      break;
 80085e8:	e004      	b.n	80085f4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f843 	bl	8008678 <USBD_CtlError>
      break;
 80085f2:	e000      	b.n	80085f6 <USBD_ClrFeature+0x3a>
      break;
 80085f4:	bf00      	nop
  }
}
 80085f6:	bf00      	nop
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	781a      	ldrb	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	785a      	ldrb	r2, [r3, #1]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	3302      	adds	r3, #2
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	b29a      	uxth	r2, r3
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	3303      	adds	r3, #3
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	021b      	lsls	r3, r3, #8
 800862a:	b29b      	uxth	r3, r3
 800862c:	4413      	add	r3, r2
 800862e:	b29a      	uxth	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	3304      	adds	r3, #4
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	b29a      	uxth	r2, r3
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	3305      	adds	r3, #5
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	b29b      	uxth	r3, r3
 8008644:	021b      	lsls	r3, r3, #8
 8008646:	b29b      	uxth	r3, r3
 8008648:	4413      	add	r3, r2
 800864a:	b29a      	uxth	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	3306      	adds	r3, #6
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	b29a      	uxth	r2, r3
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	3307      	adds	r3, #7
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	021b      	lsls	r3, r3, #8
 8008662:	b29b      	uxth	r3, r3
 8008664:	4413      	add	r3, r2
 8008666:	b29a      	uxth	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	80da      	strh	r2, [r3, #6]

}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008682:	2180      	movs	r1, #128	; 0x80
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fcdd 	bl	8009044 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800868a:	2100      	movs	r1, #0
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fcd9 	bl	8009044 <USBD_LL_StallEP>
}
 8008692:	bf00      	nop
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b086      	sub	sp, #24
 800869e:	af00      	add	r7, sp, #0
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d032      	beq.n	8008716 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 f834 	bl	800871e <USBD_GetLen>
 80086b6:	4603      	mov	r3, r0
 80086b8:	3301      	adds	r3, #1
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	005b      	lsls	r3, r3, #1
 80086be:	b29a      	uxth	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	75fa      	strb	r2, [r7, #23]
 80086ca:	461a      	mov	r2, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	4413      	add	r3, r2
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	7812      	ldrb	r2, [r2, #0]
 80086d4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	1c5a      	adds	r2, r3, #1
 80086da:	75fa      	strb	r2, [r7, #23]
 80086dc:	461a      	mov	r2, r3
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	4413      	add	r3, r2
 80086e2:	2203      	movs	r2, #3
 80086e4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80086e6:	e012      	b.n	800870e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	60fa      	str	r2, [r7, #12]
 80086ee:	7dfa      	ldrb	r2, [r7, #23]
 80086f0:	1c51      	adds	r1, r2, #1
 80086f2:	75f9      	strb	r1, [r7, #23]
 80086f4:	4611      	mov	r1, r2
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	440a      	add	r2, r1
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	1c5a      	adds	r2, r3, #1
 8008702:	75fa      	strb	r2, [r7, #23]
 8008704:	461a      	mov	r2, r3
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	4413      	add	r3, r2
 800870a:	2200      	movs	r2, #0
 800870c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e8      	bne.n	80086e8 <USBD_GetString+0x4e>
    }
  }
}
 8008716:	bf00      	nop
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800871e:	b480      	push	{r7}
 8008720:	b085      	sub	sp, #20
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008726:	2300      	movs	r3, #0
 8008728:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800872a:	e005      	b.n	8008738 <USBD_GetLen+0x1a>
  {
    len++;
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	3301      	adds	r3, #1
 8008730:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3301      	adds	r3, #1
 8008736:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1f5      	bne.n	800872c <USBD_GetLen+0xe>
  }

  return len;
 8008740:	7bfb      	ldrb	r3, [r7, #15]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	60b9      	str	r1, [r7, #8]
 8008758:	4613      	mov	r3, r2
 800875a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2202      	movs	r2, #2
 8008760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008764:	88fa      	ldrh	r2, [r7, #6]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800876a:	88fa      	ldrh	r2, [r7, #6]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008770:	88fb      	ldrh	r3, [r7, #6]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	2100      	movs	r1, #0
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 fcee 	bl	8009158 <USBD_LL_Transmit>

  return USBD_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	60f8      	str	r0, [r7, #12]
 800878e:	60b9      	str	r1, [r7, #8]
 8008790:	4613      	mov	r3, r2
 8008792:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008794:	88fb      	ldrh	r3, [r7, #6]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	2100      	movs	r1, #0
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 fcdc 	bl	8009158 <USBD_LL_Transmit>

  return USBD_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	4613      	mov	r3, r2
 80087b6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2203      	movs	r2, #3
 80087bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80087c0:	88fa      	ldrh	r2, [r7, #6]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80087c8:	88fa      	ldrh	r2, [r7, #6]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087d0:	88fb      	ldrh	r3, [r7, #6]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	2100      	movs	r1, #0
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f000 fce1 	bl	800919e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b084      	sub	sp, #16
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	60f8      	str	r0, [r7, #12]
 80087ee:	60b9      	str	r1, [r7, #8]
 80087f0:	4613      	mov	r3, r2
 80087f2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087f4:	88fb      	ldrh	r3, [r7, #6]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	2100      	movs	r1, #0
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f000 fccf 	bl	800919e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b082      	sub	sp, #8
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2204      	movs	r2, #4
 8008816:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800881a:	2300      	movs	r3, #0
 800881c:	2200      	movs	r2, #0
 800881e:	2100      	movs	r1, #0
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fc99 	bl	8009158 <USBD_LL_Transmit>

  return USBD_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2205      	movs	r2, #5
 800883c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008840:	2300      	movs	r3, #0
 8008842:	2200      	movs	r2, #0
 8008844:	2100      	movs	r1, #0
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fca9 	bl	800919e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800885c:	2200      	movs	r2, #0
 800885e:	4912      	ldr	r1, [pc, #72]	; (80088a8 <MX_USB_DEVICE_Init+0x50>)
 8008860:	4812      	ldr	r0, [pc, #72]	; (80088ac <MX_USB_DEVICE_Init+0x54>)
 8008862:	f7fe ff58 	bl	8007716 <USBD_Init>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800886c:	f7f7 fdc2 	bl	80003f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008870:	490f      	ldr	r1, [pc, #60]	; (80088b0 <MX_USB_DEVICE_Init+0x58>)
 8008872:	480e      	ldr	r0, [pc, #56]	; (80088ac <MX_USB_DEVICE_Init+0x54>)
 8008874:	f7fe ff7a 	bl	800776c <USBD_RegisterClass>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800887e:	f7f7 fdb9 	bl	80003f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008882:	490c      	ldr	r1, [pc, #48]	; (80088b4 <MX_USB_DEVICE_Init+0x5c>)
 8008884:	4809      	ldr	r0, [pc, #36]	; (80088ac <MX_USB_DEVICE_Init+0x54>)
 8008886:	f7fe fed7 	bl	8007638 <USBD_CDC_RegisterInterface>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008890:	f7f7 fdb0 	bl	80003f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008894:	4805      	ldr	r0, [pc, #20]	; (80088ac <MX_USB_DEVICE_Init+0x54>)
 8008896:	f7fe ff83 	bl	80077a0 <USBD_Start>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80088a0:	f7f7 fda8 	bl	80003f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088a4:	bf00      	nop
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	20000134 	.word	0x20000134
 80088ac:	200001d0 	.word	0x200001d0
 80088b0:	20000018 	.word	0x20000018
 80088b4:	20000124 	.word	0x20000124

080088b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80088bc:	2200      	movs	r2, #0
 80088be:	4905      	ldr	r1, [pc, #20]	; (80088d4 <CDC_Init_FS+0x1c>)
 80088c0:	4805      	ldr	r0, [pc, #20]	; (80088d8 <CDC_Init_FS+0x20>)
 80088c2:	f7fe fed0 	bl	8007666 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80088c6:	4905      	ldr	r1, [pc, #20]	; (80088dc <CDC_Init_FS+0x24>)
 80088c8:	4803      	ldr	r0, [pc, #12]	; (80088d8 <CDC_Init_FS+0x20>)
 80088ca:	f7fe fee6 	bl	800769a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80088ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	20000894 	.word	0x20000894
 80088d8:	200001d0 	.word	0x200001d0
 80088dc:	20000494 	.word	0x20000494

080088e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80088e0:	b480      	push	{r7}
 80088e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80088e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	4603      	mov	r3, r0
 80088f8:	6039      	str	r1, [r7, #0]
 80088fa:	71fb      	strb	r3, [r7, #7]
 80088fc:	4613      	mov	r3, r2
 80088fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008900:	79fb      	ldrb	r3, [r7, #7]
 8008902:	2b23      	cmp	r3, #35	; 0x23
 8008904:	f200 80a2 	bhi.w	8008a4c <CDC_Control_FS+0x15c>
 8008908:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <CDC_Control_FS+0x20>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	08008a4d 	.word	0x08008a4d
 8008914:	08008a4d 	.word	0x08008a4d
 8008918:	08008a4d 	.word	0x08008a4d
 800891c:	08008a4d 	.word	0x08008a4d
 8008920:	08008a4d 	.word	0x08008a4d
 8008924:	08008a4d 	.word	0x08008a4d
 8008928:	08008a4d 	.word	0x08008a4d
 800892c:	08008a4d 	.word	0x08008a4d
 8008930:	08008a4d 	.word	0x08008a4d
 8008934:	08008a4d 	.word	0x08008a4d
 8008938:	08008a4d 	.word	0x08008a4d
 800893c:	08008a4d 	.word	0x08008a4d
 8008940:	08008a4d 	.word	0x08008a4d
 8008944:	08008a4d 	.word	0x08008a4d
 8008948:	08008a4d 	.word	0x08008a4d
 800894c:	08008a4d 	.word	0x08008a4d
 8008950:	08008a4d 	.word	0x08008a4d
 8008954:	08008a4d 	.word	0x08008a4d
 8008958:	08008a4d 	.word	0x08008a4d
 800895c:	08008a4d 	.word	0x08008a4d
 8008960:	08008a4d 	.word	0x08008a4d
 8008964:	08008a4d 	.word	0x08008a4d
 8008968:	08008a4d 	.word	0x08008a4d
 800896c:	08008a4d 	.word	0x08008a4d
 8008970:	08008a4d 	.word	0x08008a4d
 8008974:	08008a4d 	.word	0x08008a4d
 8008978:	08008a4d 	.word	0x08008a4d
 800897c:	08008a4d 	.word	0x08008a4d
 8008980:	08008a4d 	.word	0x08008a4d
 8008984:	08008a4d 	.word	0x08008a4d
 8008988:	08008a4d 	.word	0x08008a4d
 800898c:	08008a4d 	.word	0x08008a4d
 8008990:	080089a1 	.word	0x080089a1
 8008994:	080089ef 	.word	0x080089ef
 8008998:	08008a4d 	.word	0x08008a4d
 800899c:	08008a4d 	.word	0x08008a4d
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    {

    	HAL_GPIO_WritePin(GPIOB,LED_GREEN_Pin,GPIO_PIN_SET);
 80089a0:	2201      	movs	r2, #1
 80089a2:	2120      	movs	r1, #32
 80089a4:	482c      	ldr	r0, [pc, #176]	; (8008a58 <CDC_Control_FS+0x168>)
 80089a6:	f7f9 f883 	bl	8001ab0 <HAL_GPIO_WritePin>
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	3301      	adds	r3, #1
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	021b      	lsls	r3, r3, #8
 80089b8:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	3302      	adds	r3, #2
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80089c2:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	3303      	adds	r3, #3
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	061b      	lsls	r3, r3, #24
 80089cc:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80089ce:	461a      	mov	r2, r3
 80089d0:	4b22      	ldr	r3, [pc, #136]	; (8008a5c <CDC_Control_FS+0x16c>)
 80089d2:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	791a      	ldrb	r2, [r3, #4]
 80089d8:	4b20      	ldr	r3, [pc, #128]	; (8008a5c <CDC_Control_FS+0x16c>)
 80089da:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	795a      	ldrb	r2, [r3, #5]
 80089e0:	4b1e      	ldr	r3, [pc, #120]	; (8008a5c <CDC_Control_FS+0x16c>)
 80089e2:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	799a      	ldrb	r2, [r3, #6]
 80089e8:	4b1c      	ldr	r3, [pc, #112]	; (8008a5c <CDC_Control_FS+0x16c>)
 80089ea:	719a      	strb	r2, [r3, #6]
    }
    break;
 80089ec:	e02f      	b.n	8008a4e <CDC_Control_FS+0x15e>

    case CDC_GET_LINE_CODING:
    {


    	HAL_GPIO_WritePin(GPIOB,LED_GREEN_Pin,GPIO_PIN_SET);
 80089ee:	2201      	movs	r2, #1
 80089f0:	2120      	movs	r1, #32
 80089f2:	4819      	ldr	r0, [pc, #100]	; (8008a58 <CDC_Control_FS+0x168>)
 80089f4:	f7f9 f85c 	bl	8001ab0 <HAL_GPIO_WritePin>
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 80089f8:	4b18      	ldr	r3, [pc, #96]	; (8008a5c <CDC_Control_FS+0x16c>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8008a02:	4b16      	ldr	r3, [pc, #88]	; (8008a5c <CDC_Control_FS+0x16c>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	0a1a      	lsrs	r2, r3, #8
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	b2d2      	uxtb	r2, r2
 8008a0e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8008a10:	4b12      	ldr	r3, [pc, #72]	; (8008a5c <CDC_Control_FS+0x16c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	0c1a      	lsrs	r2, r3, #16
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	3302      	adds	r3, #2
 8008a1a:	b2d2      	uxtb	r2, r2
 8008a1c:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8008a1e:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <CDC_Control_FS+0x16c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	0e1a      	lsrs	r2, r3, #24
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	3303      	adds	r3, #3
 8008a28:	b2d2      	uxtb	r2, r2
 8008a2a:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4a0a      	ldr	r2, [pc, #40]	; (8008a5c <CDC_Control_FS+0x16c>)
 8008a32:	7912      	ldrb	r2, [r2, #4]
 8008a34:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	3305      	adds	r3, #5
 8008a3a:	4a08      	ldr	r2, [pc, #32]	; (8008a5c <CDC_Control_FS+0x16c>)
 8008a3c:	7952      	ldrb	r2, [r2, #5]
 8008a3e:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	3306      	adds	r3, #6
 8008a44:	4a05      	ldr	r2, [pc, #20]	; (8008a5c <CDC_Control_FS+0x16c>)
 8008a46:	7992      	ldrb	r2, [r2, #6]
 8008a48:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008a4a:	e000      	b.n	8008a4e <CDC_Control_FS+0x15e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a4c:	bf00      	nop
  }

  return (USBD_OK);
 8008a4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	48000400 	.word	0x48000400
 8008a5c:	2000011c 	.word	0x2000011c

08008a60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	4817      	ldr	r0, [pc, #92]	; (8008acc <CDC_Receive_FS+0x6c>)
 8008a6e:	f7fe fe14 	bl	800769a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a72:	4816      	ldr	r0, [pc, #88]	; (8008acc <CDC_Receive_FS+0x6c>)
 8008a74:	f7fe fe25 	bl	80076c2 <USBD_CDC_ReceivePacket>
  //COBS
  for(int i=0;i<*Len;i++)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	e01b      	b.n	8008ab6 <CDC_Receive_FS+0x56>
  {
    if(Buf[i]==0)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	4413      	add	r3, r2
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d112      	bne.n	8008ab0 <CDC_Receive_FS+0x50>
    {
      if(i==0)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00c      	beq.n	8008aaa <CDC_Receive_FS+0x4a>
      {
        continue;
      }
      else
      {
        if(Buf[i-1]==0)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	4413      	add	r3, r2
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d007      	beq.n	8008aae <CDC_Receive_FS+0x4e>
        {
          continue;
        }
        else
        {
          Buf[i]=0;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	701a      	strb	r2, [r3, #0]
 8008aa8:	e002      	b.n	8008ab0 <CDC_Receive_FS+0x50>
        continue;
 8008aaa:	bf00      	nop
 8008aac:	e000      	b.n	8008ab0 <CDC_Receive_FS+0x50>
          continue;
 8008aae:	bf00      	nop
  for(int i=0;i<*Len;i++)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d8de      	bhi.n	8008a7e <CDC_Receive_FS+0x1e>
        }
      }
    }
  }
  return (USBD_OK);
 8008ac0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	200001d0 	.word	0x200001d0

08008ad0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	6039      	str	r1, [r7, #0]
 8008ada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2212      	movs	r2, #18
 8008ae0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ae2:	4b03      	ldr	r3, [pc, #12]	; (8008af0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	20000150 	.word	0x20000150

08008af4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	6039      	str	r1, [r7, #0]
 8008afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2204      	movs	r2, #4
 8008b04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b06:	4b03      	ldr	r3, [pc, #12]	; (8008b14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	20000164 	.word	0x20000164

08008b18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	4603      	mov	r3, r0
 8008b20:	6039      	str	r1, [r7, #0]
 8008b22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d105      	bne.n	8008b36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	4907      	ldr	r1, [pc, #28]	; (8008b4c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b2e:	4808      	ldr	r0, [pc, #32]	; (8008b50 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b30:	f7ff fdb3 	bl	800869a <USBD_GetString>
 8008b34:	e004      	b.n	8008b40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	4904      	ldr	r1, [pc, #16]	; (8008b4c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b3a:	4805      	ldr	r0, [pc, #20]	; (8008b50 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b3c:	f7ff fdad 	bl	800869a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b40:	4b02      	ldr	r3, [pc, #8]	; (8008b4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20000c94 	.word	0x20000c94
 8008b50:	08009344 	.word	0x08009344

08008b54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	6039      	str	r1, [r7, #0]
 8008b5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	4904      	ldr	r1, [pc, #16]	; (8008b74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b64:	4804      	ldr	r0, [pc, #16]	; (8008b78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b66:	f7ff fd98 	bl	800869a <USBD_GetString>
  return USBD_StrDesc;
 8008b6a:	4b02      	ldr	r3, [pc, #8]	; (8008b74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	20000c94 	.word	0x20000c94
 8008b78:	0800935c 	.word	0x0800935c

08008b7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	4603      	mov	r3, r0
 8008b84:	6039      	str	r1, [r7, #0]
 8008b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	221a      	movs	r2, #26
 8008b8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b8e:	f000 f843 	bl	8008c18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b92:	4b02      	ldr	r3, [pc, #8]	; (8008b9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	20000168 	.word	0x20000168

08008ba0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	6039      	str	r1, [r7, #0]
 8008baa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bac:	79fb      	ldrb	r3, [r7, #7]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d105      	bne.n	8008bbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	4907      	ldr	r1, [pc, #28]	; (8008bd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bb6:	4808      	ldr	r0, [pc, #32]	; (8008bd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bb8:	f7ff fd6f 	bl	800869a <USBD_GetString>
 8008bbc:	e004      	b.n	8008bc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	4904      	ldr	r1, [pc, #16]	; (8008bd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bc2:	4805      	ldr	r0, [pc, #20]	; (8008bd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bc4:	f7ff fd69 	bl	800869a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bc8:	4b02      	ldr	r3, [pc, #8]	; (8008bd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20000c94 	.word	0x20000c94
 8008bd8:	08009370 	.word	0x08009370

08008bdc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4603      	mov	r3, r0
 8008be4:	6039      	str	r1, [r7, #0]
 8008be6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008be8:	79fb      	ldrb	r3, [r7, #7]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d105      	bne.n	8008bfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	4907      	ldr	r1, [pc, #28]	; (8008c10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bf2:	4808      	ldr	r0, [pc, #32]	; (8008c14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008bf4:	f7ff fd51 	bl	800869a <USBD_GetString>
 8008bf8:	e004      	b.n	8008c04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	4904      	ldr	r1, [pc, #16]	; (8008c10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008bfe:	4805      	ldr	r0, [pc, #20]	; (8008c14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c00:	f7ff fd4b 	bl	800869a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c04:	4b02      	ldr	r3, [pc, #8]	; (8008c10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	20000c94 	.word	0x20000c94
 8008c14:	0800937c 	.word	0x0800937c

08008c18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c1e:	4b0f      	ldr	r3, [pc, #60]	; (8008c5c <Get_SerialNum+0x44>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c24:	4b0e      	ldr	r3, [pc, #56]	; (8008c60 <Get_SerialNum+0x48>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c2a:	4b0e      	ldr	r3, [pc, #56]	; (8008c64 <Get_SerialNum+0x4c>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4413      	add	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d009      	beq.n	8008c52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c3e:	2208      	movs	r2, #8
 8008c40:	4909      	ldr	r1, [pc, #36]	; (8008c68 <Get_SerialNum+0x50>)
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 f814 	bl	8008c70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c48:	2204      	movs	r2, #4
 8008c4a:	4908      	ldr	r1, [pc, #32]	; (8008c6c <Get_SerialNum+0x54>)
 8008c4c:	68b8      	ldr	r0, [r7, #8]
 8008c4e:	f000 f80f 	bl	8008c70 <IntToUnicode>
  }
}
 8008c52:	bf00      	nop
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	1ffff7ac 	.word	0x1ffff7ac
 8008c60:	1ffff7b0 	.word	0x1ffff7b0
 8008c64:	1ffff7b4 	.word	0x1ffff7b4
 8008c68:	2000016a 	.word	0x2000016a
 8008c6c:	2000017a 	.word	0x2000017a

08008c70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c82:	2300      	movs	r3, #0
 8008c84:	75fb      	strb	r3, [r7, #23]
 8008c86:	e027      	b.n	8008cd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	0f1b      	lsrs	r3, r3, #28
 8008c8c:	2b09      	cmp	r3, #9
 8008c8e:	d80b      	bhi.n	8008ca8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	0f1b      	lsrs	r3, r3, #28
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	440b      	add	r3, r1
 8008ca0:	3230      	adds	r2, #48	; 0x30
 8008ca2:	b2d2      	uxtb	r2, r2
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	e00a      	b.n	8008cbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	0f1b      	lsrs	r3, r3, #28
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	440b      	add	r3, r1
 8008cb8:	3237      	adds	r2, #55	; 0x37
 8008cba:	b2d2      	uxtb	r2, r2
 8008cbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	3301      	adds	r3, #1
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	4413      	add	r3, r2
 8008cce:	2200      	movs	r2, #0
 8008cd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	75fb      	strb	r3, [r7, #23]
 8008cd8:	7dfa      	ldrb	r2, [r7, #23]
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d3d3      	bcc.n	8008c88 <IntToUnicode+0x18>
  }
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	371c      	adds	r7, #28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
	...

08008cf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08a      	sub	sp, #40	; 0x28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cf8:	f107 0314 	add.w	r3, r7, #20
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	605a      	str	r2, [r3, #4]
 8008d02:	609a      	str	r2, [r3, #8]
 8008d04:	60da      	str	r2, [r3, #12]
 8008d06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a1f      	ldr	r2, [pc, #124]	; (8008d8c <HAL_PCD_MspInit+0x9c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d137      	bne.n	8008d82 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d12:	4b1f      	ldr	r3, [pc, #124]	; (8008d90 <HAL_PCD_MspInit+0xa0>)
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	4a1e      	ldr	r2, [pc, #120]	; (8008d90 <HAL_PCD_MspInit+0xa0>)
 8008d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d1c:	6153      	str	r3, [r2, #20]
 8008d1e:	4b1c      	ldr	r3, [pc, #112]	; (8008d90 <HAL_PCD_MspInit+0xa0>)
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d26:	613b      	str	r3, [r7, #16]
 8008d28:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008d2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d30:	2302      	movs	r3, #2
 8008d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d34:	2300      	movs	r3, #0
 8008d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8008d3c:	230e      	movs	r3, #14
 8008d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d40:	f107 0314 	add.w	r3, r7, #20
 8008d44:	4619      	mov	r1, r3
 8008d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d4a:	f7f8 fd37 	bl	80017bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d4e:	4b10      	ldr	r3, [pc, #64]	; (8008d90 <HAL_PCD_MspInit+0xa0>)
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	4a0f      	ldr	r2, [pc, #60]	; (8008d90 <HAL_PCD_MspInit+0xa0>)
 8008d54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d58:	61d3      	str	r3, [r2, #28]
 8008d5a:	4b0d      	ldr	r3, [pc, #52]	; (8008d90 <HAL_PCD_MspInit+0xa0>)
 8008d5c:	69db      	ldr	r3, [r3, #28]
 8008d5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 8008d66:	4b0b      	ldr	r3, [pc, #44]	; (8008d94 <HAL_PCD_MspInit+0xa4>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a0a      	ldr	r2, [pc, #40]	; (8008d94 <HAL_PCD_MspInit+0xa4>)
 8008d6c:	f043 0320 	orr.w	r3, r3, #32
 8008d70:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 8008d72:	2200      	movs	r2, #0
 8008d74:	2101      	movs	r1, #1
 8008d76:	204b      	movs	r0, #75	; 0x4b
 8008d78:	f7f8 fce9 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008d7c:	204b      	movs	r0, #75	; 0x4b
 8008d7e:	f7f8 fd02 	bl	8001786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008d82:	bf00      	nop
 8008d84:	3728      	adds	r7, #40	; 0x28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	40005c00 	.word	0x40005c00
 8008d90:	40021000 	.word	0x40021000
 8008d94:	40010000 	.word	0x40010000

08008d98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008dac:	4619      	mov	r1, r3
 8008dae:	4610      	mov	r0, r2
 8008db0:	f7fe fd3f 	bl	8007832 <USBD_LL_SetupStage>
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008dce:	78fa      	ldrb	r2, [r7, #3]
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	00db      	lsls	r3, r3, #3
 8008dda:	440b      	add	r3, r1
 8008ddc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	78fb      	ldrb	r3, [r7, #3]
 8008de4:	4619      	mov	r1, r3
 8008de6:	f7fe fd71 	bl	80078cc <USBD_LL_DataOutStage>
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008e04:	78fa      	ldrb	r2, [r7, #3]
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	440b      	add	r3, r1
 8008e12:	333c      	adds	r3, #60	; 0x3c
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	78fb      	ldrb	r3, [r7, #3]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	f7fe fdc8 	bl	80079ae <USBD_LL_DataInStage>
}
 8008e1e:	bf00      	nop
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b082      	sub	sp, #8
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe fedb 	bl	8007bf0 <USBD_LL_SOF>
}
 8008e3a:	bf00      	nop
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d001      	beq.n	8008e5a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e56:	f7f7 facd 	bl	80003f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e60:	7bfa      	ldrb	r2, [r7, #15]
 8008e62:	4611      	mov	r1, r2
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fe fe88 	bl	8007b7a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fe fe41 	bl	8007af8 <USBD_LL_Reset>
}
 8008e76:	bf00      	nop
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe fe83 	bl	8007b9a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e9c:	4b04      	ldr	r3, [pc, #16]	; (8008eb0 <HAL_PCD_SuspendCallback+0x30>)
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	4a03      	ldr	r2, [pc, #12]	; (8008eb0 <HAL_PCD_SuspendCallback+0x30>)
 8008ea2:	f043 0306 	orr.w	r3, r3, #6
 8008ea6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ea8:	bf00      	nop
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	e000ed00 	.word	0xe000ed00

08008eb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe fe7e 	bl	8007bc4 <USBD_LL_Resume>
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008ed8:	4a28      	ldr	r2, [pc, #160]	; (8008f7c <USBD_LL_Init+0xac>)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a26      	ldr	r2, [pc, #152]	; (8008f7c <USBD_LL_Init+0xac>)
 8008ee4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008ee8:	4b24      	ldr	r3, [pc, #144]	; (8008f7c <USBD_LL_Init+0xac>)
 8008eea:	4a25      	ldr	r2, [pc, #148]	; (8008f80 <USBD_LL_Init+0xb0>)
 8008eec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008eee:	4b23      	ldr	r3, [pc, #140]	; (8008f7c <USBD_LL_Init+0xac>)
 8008ef0:	2208      	movs	r2, #8
 8008ef2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008ef4:	4b21      	ldr	r3, [pc, #132]	; (8008f7c <USBD_LL_Init+0xac>)
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008efa:	4b20      	ldr	r3, [pc, #128]	; (8008f7c <USBD_LL_Init+0xac>)
 8008efc:	2202      	movs	r2, #2
 8008efe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008f00:	4b1e      	ldr	r3, [pc, #120]	; (8008f7c <USBD_LL_Init+0xac>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008f06:	4b1d      	ldr	r3, [pc, #116]	; (8008f7c <USBD_LL_Init+0xac>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008f0c:	481b      	ldr	r0, [pc, #108]	; (8008f7c <USBD_LL_Init+0xac>)
 8008f0e:	f7f8 fde7 	bl	8001ae0 <HAL_PCD_Init>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008f18:	f7f7 fa6c 	bl	80003f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f22:	2318      	movs	r3, #24
 8008f24:	2200      	movs	r2, #0
 8008f26:	2100      	movs	r1, #0
 8008f28:	f7fa fa82 	bl	8003430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f32:	2358      	movs	r3, #88	; 0x58
 8008f34:	2200      	movs	r2, #0
 8008f36:	2180      	movs	r1, #128	; 0x80
 8008f38:	f7fa fa7a 	bl	8003430 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f42:	23c0      	movs	r3, #192	; 0xc0
 8008f44:	2200      	movs	r2, #0
 8008f46:	2181      	movs	r1, #129	; 0x81
 8008f48:	f7fa fa72 	bl	8003430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f52:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008f56:	2200      	movs	r2, #0
 8008f58:	2101      	movs	r1, #1
 8008f5a:	f7fa fa69 	bl	8003430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2182      	movs	r1, #130	; 0x82
 8008f6c:	f7fa fa60 	bl	8003430 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000e94 	.word	0x20000e94
 8008f80:	40005c00 	.word	0x40005c00

08008f84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7f8 fe7e 	bl	8001c9c <HAL_PCD_Start>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 f964 	bl	8009274 <USBD_Get_USB_Status>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	4608      	mov	r0, r1
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	4603      	mov	r3, r0
 8008fca:	70fb      	strb	r3, [r7, #3]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70bb      	strb	r3, [r7, #2]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008fe2:	78bb      	ldrb	r3, [r7, #2]
 8008fe4:	883a      	ldrh	r2, [r7, #0]
 8008fe6:	78f9      	ldrb	r1, [r7, #3]
 8008fe8:	f7f8 ff9a 	bl	8001f20 <HAL_PCD_EP_Open>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 f93e 	bl	8009274 <USBD_Get_USB_Status>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009020:	78fa      	ldrb	r2, [r7, #3]
 8009022:	4611      	mov	r1, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f7f8 ffe1 	bl	8001fec <HAL_PCD_EP_Close>
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	4618      	mov	r0, r3
 8009032:	f000 f91f 	bl	8009274 <USBD_Get_USB_Status>
 8009036:	4603      	mov	r3, r0
 8009038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800903a:	7bbb      	ldrb	r3, [r7, #14]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800905e:	78fa      	ldrb	r2, [r7, #3]
 8009060:	4611      	mov	r1, r2
 8009062:	4618      	mov	r0, r3
 8009064:	f7f9 f8a2 	bl	80021ac <HAL_PCD_EP_SetStall>
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f900 	bl	8009274 <USBD_Get_USB_Status>
 8009074:	4603      	mov	r3, r0
 8009076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009078:	7bbb      	ldrb	r3, [r7, #14]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	460b      	mov	r3, r1
 800908c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	4611      	mov	r1, r2
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7f9 f8d5 	bl	8002250 <HAL_PCD_EP_ClrStall>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 f8e1 	bl	8009274 <USBD_Get_USB_Status>
 80090b2:	4603      	mov	r3, r0
 80090b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	da0c      	bge.n	80090f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090dc:	78fb      	ldrb	r3, [r7, #3]
 80090de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e2:	68f9      	ldr	r1, [r7, #12]
 80090e4:	1c5a      	adds	r2, r3, #1
 80090e6:	4613      	mov	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4413      	add	r3, r2
 80090ec:	00db      	lsls	r3, r3, #3
 80090ee:	440b      	add	r3, r1
 80090f0:	3302      	adds	r3, #2
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	e00b      	b.n	800910e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090fc:	68f9      	ldr	r1, [r7, #12]
 80090fe:	4613      	mov	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	440b      	add	r3, r1
 8009108:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800910c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	460b      	mov	r3, r1
 8009124:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009134:	78fa      	ldrb	r2, [r7, #3]
 8009136:	4611      	mov	r1, r2
 8009138:	4618      	mov	r0, r3
 800913a:	f7f8 fecc 	bl	8001ed6 <HAL_PCD_SetAddress>
 800913e:	4603      	mov	r3, r0
 8009140:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009142:	7bfb      	ldrb	r3, [r7, #15]
 8009144:	4618      	mov	r0, r3
 8009146:	f000 f895 	bl	8009274 <USBD_Get_USB_Status>
 800914a:	4603      	mov	r3, r0
 800914c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800914e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	607a      	str	r2, [r7, #4]
 8009162:	461a      	mov	r2, r3
 8009164:	460b      	mov	r3, r1
 8009166:	72fb      	strb	r3, [r7, #11]
 8009168:	4613      	mov	r3, r2
 800916a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800917a:	893b      	ldrh	r3, [r7, #8]
 800917c:	7af9      	ldrb	r1, [r7, #11]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	f7f8 ffd1 	bl	8002126 <HAL_PCD_EP_Transmit>
 8009184:	4603      	mov	r3, r0
 8009186:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009188:	7dfb      	ldrb	r3, [r7, #23]
 800918a:	4618      	mov	r0, r3
 800918c:	f000 f872 	bl	8009274 <USBD_Get_USB_Status>
 8009190:	4603      	mov	r3, r0
 8009192:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009194:	7dbb      	ldrb	r3, [r7, #22]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3718      	adds	r7, #24
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b086      	sub	sp, #24
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	60f8      	str	r0, [r7, #12]
 80091a6:	607a      	str	r2, [r7, #4]
 80091a8:	461a      	mov	r2, r3
 80091aa:	460b      	mov	r3, r1
 80091ac:	72fb      	strb	r3, [r7, #11]
 80091ae:	4613      	mov	r3, r2
 80091b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091c0:	893b      	ldrh	r3, [r7, #8]
 80091c2:	7af9      	ldrb	r1, [r7, #11]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	f7f8 ff59 	bl	800207c <HAL_PCD_EP_Receive>
 80091ca:	4603      	mov	r3, r0
 80091cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 f84f 	bl	8009274 <USBD_Get_USB_Status>
 80091d6:	4603      	mov	r3, r0
 80091d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091da:	7dbb      	ldrb	r3, [r7, #22]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091f6:	78fa      	ldrb	r2, [r7, #3]
 80091f8:	4611      	mov	r1, r2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7f8 ff7b 	bl	80020f6 <HAL_PCD_EP_GetRxCount>
 8009200:	4603      	mov	r3, r0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009214:	4b03      	ldr	r3, [pc, #12]	; (8009224 <USBD_static_malloc+0x18>)
}
 8009216:	4618      	mov	r0, r3
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	20001180 	.word	0x20001180

08009228 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]

}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d107      	bne.n	800925e <HAL_PCDEx_SetConnectionState+0x22>
  {
	/* Configure Low connection state. */
	 HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_SET);
 800924e:	2201      	movs	r2, #1
 8009250:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009258:	f7f8 fc2a 	bl	8001ab0 <HAL_GPIO_WritePin>
  {
	/* Configure High connection state. */
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_RESET);
  }
  /* USER CODE END 6 */
}
 800925c:	e006      	b.n	800926c <HAL_PCDEx_SetConnectionState+0x30>
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_RESET);
 800925e:	2200      	movs	r2, #0
 8009260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009268:	f7f8 fc22 	bl	8001ab0 <HAL_GPIO_WritePin>
}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	4603      	mov	r3, r0
 800927c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009282:	79fb      	ldrb	r3, [r7, #7]
 8009284:	2b03      	cmp	r3, #3
 8009286:	d817      	bhi.n	80092b8 <USBD_Get_USB_Status+0x44>
 8009288:	a201      	add	r2, pc, #4	; (adr r2, 8009290 <USBD_Get_USB_Status+0x1c>)
 800928a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928e:	bf00      	nop
 8009290:	080092a1 	.word	0x080092a1
 8009294:	080092a7 	.word	0x080092a7
 8009298:	080092ad 	.word	0x080092ad
 800929c:	080092b3 	.word	0x080092b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	73fb      	strb	r3, [r7, #15]
    break;
 80092a4:	e00b      	b.n	80092be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092a6:	2302      	movs	r3, #2
 80092a8:	73fb      	strb	r3, [r7, #15]
    break;
 80092aa:	e008      	b.n	80092be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092ac:	2301      	movs	r3, #1
 80092ae:	73fb      	strb	r3, [r7, #15]
    break;
 80092b0:	e005      	b.n	80092be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092b2:	2302      	movs	r3, #2
 80092b4:	73fb      	strb	r3, [r7, #15]
    break;
 80092b6:	e002      	b.n	80092be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092b8:	2302      	movs	r3, #2
 80092ba:	73fb      	strb	r3, [r7, #15]
    break;
 80092bc:	bf00      	nop
  }
  return usb_status;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <__libc_init_array>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	4d0d      	ldr	r5, [pc, #52]	; (8009304 <__libc_init_array+0x38>)
 80092d0:	4c0d      	ldr	r4, [pc, #52]	; (8009308 <__libc_init_array+0x3c>)
 80092d2:	1b64      	subs	r4, r4, r5
 80092d4:	10a4      	asrs	r4, r4, #2
 80092d6:	2600      	movs	r6, #0
 80092d8:	42a6      	cmp	r6, r4
 80092da:	d109      	bne.n	80092f0 <__libc_init_array+0x24>
 80092dc:	4d0b      	ldr	r5, [pc, #44]	; (800930c <__libc_init_array+0x40>)
 80092de:	4c0c      	ldr	r4, [pc, #48]	; (8009310 <__libc_init_array+0x44>)
 80092e0:	f000 f820 	bl	8009324 <_init>
 80092e4:	1b64      	subs	r4, r4, r5
 80092e6:	10a4      	asrs	r4, r4, #2
 80092e8:	2600      	movs	r6, #0
 80092ea:	42a6      	cmp	r6, r4
 80092ec:	d105      	bne.n	80092fa <__libc_init_array+0x2e>
 80092ee:	bd70      	pop	{r4, r5, r6, pc}
 80092f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f4:	4798      	blx	r3
 80092f6:	3601      	adds	r6, #1
 80092f8:	e7ee      	b.n	80092d8 <__libc_init_array+0xc>
 80092fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80092fe:	4798      	blx	r3
 8009300:	3601      	adds	r6, #1
 8009302:	e7f2      	b.n	80092ea <__libc_init_array+0x1e>
 8009304:	080093bc 	.word	0x080093bc
 8009308:	080093bc 	.word	0x080093bc
 800930c:	080093bc 	.word	0x080093bc
 8009310:	080093c0 	.word	0x080093c0

08009314 <memset>:
 8009314:	4402      	add	r2, r0
 8009316:	4603      	mov	r3, r0
 8009318:	4293      	cmp	r3, r2
 800931a:	d100      	bne.n	800931e <memset+0xa>
 800931c:	4770      	bx	lr
 800931e:	f803 1b01 	strb.w	r1, [r3], #1
 8009322:	e7f9      	b.n	8009318 <memset+0x4>

08009324 <_init>:
 8009324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009326:	bf00      	nop
 8009328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932a:	bc08      	pop	{r3}
 800932c:	469e      	mov	lr, r3
 800932e:	4770      	bx	lr

08009330 <_fini>:
 8009330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009332:	bf00      	nop
 8009334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009336:	bc08      	pop	{r3}
 8009338:	469e      	mov	lr, r3
 800933a:	4770      	bx	lr
