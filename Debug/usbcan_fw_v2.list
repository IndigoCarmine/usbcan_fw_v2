
usbcan_fw_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08008458  08008458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084d8  080084d8  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  080084d8  080084d8  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084d8  080084d8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084d8  080084d8  000184d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084dc  080084dc  000184dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080084e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f4  20000184  08008664  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20001378  08008664  00021378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfce  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a79  00000000  00000000  0002e182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  00030c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  00031638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e12a  00000000  00000000  00031f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee40  00000000  00000000  00050052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3e01  00000000  00000000  0005ee92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102c93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f0  00000000  00000000  00102ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008440 	.word	0x08008440

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	08008440 	.word	0x08008440

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f99c 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f842 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f89c 	bl	8000310 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001d8:	f007 fbca 	bl	8007970 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 switch(hUsbDeviceFS.dev_state){
 80001dc:	4b1b      	ldr	r3, [pc, #108]	; (800024c <main+0x84>)
 80001de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80001e2:	3b01      	subs	r3, #1
 80001e4:	2b03      	cmp	r3, #3
 80001e6:	d824      	bhi.n	8000232 <main+0x6a>
 80001e8:	a201      	add	r2, pc, #4	; (adr r2, 80001f0 <main+0x28>)
 80001ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ee:	bf00      	nop
 80001f0:	08000201 	.word	0x08000201
 80001f4:	0800020b 	.word	0x0800020b
 80001f8:	08000227 	.word	0x08000227
 80001fc:	08000215 	.word	0x08000215
	 case USBD_STATE_DEFAULT:
		 HAL_GPIO_TogglePin(GPIOB,LED_RED_Pin);
 8000200:	2180      	movs	r1, #128	; 0x80
 8000202:	4813      	ldr	r0, [pc, #76]	; (8000250 <main+0x88>)
 8000204:	f000 fcae 	bl	8000b64 <HAL_GPIO_TogglePin>
		 break;
 8000208:	e013      	b.n	8000232 <main+0x6a>
	 case USBD_STATE_ADDRESSED :
		 HAL_GPIO_TogglePin(GPIOB,LED_RED_Pin);
 800020a:	2180      	movs	r1, #128	; 0x80
 800020c:	4810      	ldr	r0, [pc, #64]	; (8000250 <main+0x88>)
 800020e:	f000 fca9 	bl	8000b64 <HAL_GPIO_TogglePin>
		 break;
 8000212:	e00e      	b.n	8000232 <main+0x6a>
	 case USBD_STATE_SUSPENDED  :
		 HAL_GPIO_TogglePin(GPIOB,LED_RED_Pin);
 8000214:	2180      	movs	r1, #128	; 0x80
 8000216:	480e      	ldr	r0, [pc, #56]	; (8000250 <main+0x88>)
 8000218:	f000 fca4 	bl	8000b64 <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin(GPIOB,LED_YELLOW_Pin);
 800021c:	2140      	movs	r1, #64	; 0x40
 800021e:	480c      	ldr	r0, [pc, #48]	; (8000250 <main+0x88>)
 8000220:	f000 fca0 	bl	8000b64 <HAL_GPIO_TogglePin>
		 break;
 8000224:	e005      	b.n	8000232 <main+0x6a>
	 case USBD_STATE_CONFIGURED :
		 HAL_GPIO_WritePin(GPIOB,LED_CAN_Pin,GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	2110      	movs	r1, #16
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <main+0x88>)
 800022c:	f000 fc82 	bl	8000b34 <HAL_GPIO_WritePin>
		 break;
 8000230:	bf00      	nop
	 }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_Delay(10);
 8000232:	200a      	movs	r0, #10
 8000234:	f000 f9ce 	bl	80005d4 <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOB,LED_RED_Pin|LED_YELLOW_Pin|LED_CAN_Pin,GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	21d0      	movs	r1, #208	; 0xd0
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <main+0x88>)
 800023e:	f000 fc79 	bl	8000b34 <HAL_GPIO_WritePin>

	 CDC_Transmit_FS("Hello\n",6);
 8000242:	2106      	movs	r1, #6
 8000244:	4803      	ldr	r0, [pc, #12]	; (8000254 <main+0x8c>)
 8000246:	f007 fcab 	bl	8007ba0 <CDC_Transmit_FS>
  {
 800024a:	e7c7      	b.n	80001dc <main+0x14>
 800024c:	200001a8 	.word	0x200001a8
 8000250:	48000400 	.word	0x48000400
 8000254:	08008458 	.word	0x08008458

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b09c      	sub	sp, #112	; 0x70
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f008 f8e2 	bl	8008430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027c:	463b      	mov	r3, r7
 800027e:	2234      	movs	r2, #52	; 0x34
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f008 f8d4 	bl	8008430 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000288:	2301      	movs	r3, #1
 800028a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800028c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000290:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	2301      	movs	r3, #1
 8000298:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029a:	2302      	movs	r3, #2
 800029c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 f95e 	bl	8002570 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ba:	f000 f88b 	bl	80003d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	2302      	movs	r3, #2
 80002c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002d8:	2102      	movs	r1, #2
 80002da:	4618      	mov	r0, r3
 80002dc:	f003 f986 	bl	80035ec <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002e6:	f000 f875 	bl	80003d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002ee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002f0:	2300      	movs	r3, #0
 80002f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f4:	463b      	mov	r3, r7
 80002f6:	4618      	mov	r0, r3
 80002f8:	f003 fb5e 	bl	80039b8 <HAL_RCCEx_PeriphCLKConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000302:	f000 f867 	bl	80003d4 <Error_Handler>
  }
}
 8000306:	bf00      	nop
 8000308:	3770      	adds	r7, #112	; 0x70
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 030c 	add.w	r3, r7, #12
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000326:	4b29      	ldr	r3, [pc, #164]	; (80003cc <MX_GPIO_Init+0xbc>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a28      	ldr	r2, [pc, #160]	; (80003cc <MX_GPIO_Init+0xbc>)
 800032c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b26      	ldr	r3, [pc, #152]	; (80003cc <MX_GPIO_Init+0xbc>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800033a:	60bb      	str	r3, [r7, #8]
 800033c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b23      	ldr	r3, [pc, #140]	; (80003cc <MX_GPIO_Init+0xbc>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a22      	ldr	r2, [pc, #136]	; (80003cc <MX_GPIO_Init+0xbc>)
 8000344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000348:	6153      	str	r3, [r2, #20]
 800034a:	4b20      	ldr	r3, [pc, #128]	; (80003cc <MX_GPIO_Init+0xbc>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000356:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <MX_GPIO_Init+0xbc>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <MX_GPIO_Init+0xbc>)
 800035c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <MX_GPIO_Init+0xbc>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f000 fbdc 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_CAN_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	21f0      	movs	r1, #240	; 0xf0
 8000380:	4813      	ldr	r0, [pc, #76]	; (80003d0 <MX_GPIO_Init+0xc0>)
 8000382:	f000 fbd7 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USB_PULLUP_Pin */
  GPIO_InitStruct.Pin = USB_PULLUP_Pin;
 8000386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800038a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038c:	2301      	movs	r3, #1
 800038e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USB_PULLUP_GPIO_Port, &GPIO_InitStruct);
 8000398:	f107 030c 	add.w	r3, r7, #12
 800039c:	4619      	mov	r1, r3
 800039e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a2:	f000 fa4d 	bl	8000840 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin LED_GREEN_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 80003a6:	23f0      	movs	r3, #240	; 0xf0
 80003a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	4619      	mov	r1, r3
 80003bc:	4804      	ldr	r0, [pc, #16]	; (80003d0 <MX_GPIO_Init+0xc0>)
 80003be:	f000 fa3f 	bl	8000840 <HAL_GPIO_Init>

}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	48000400 	.word	0x48000400

080003d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d8:	b672      	cpsid	i
}
 80003da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003dc:	e7fe      	b.n	80003dc <Error_Handler+0x8>
	...

080003e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <HAL_MspInit+0x44>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <HAL_MspInit+0x44>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6193      	str	r3, [r2, #24]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <HAL_MspInit+0x44>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <HAL_MspInit+0x44>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	4a08      	ldr	r2, [pc, #32]	; (8000424 <HAL_MspInit+0x44>)
 8000404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000408:	61d3      	str	r3, [r2, #28]
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <HAL_MspInit+0x44>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000412:	603b      	str	r3, [r7, #0]
 8000414:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000

08000428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800042c:	e7fe      	b.n	800042c <NMI_Handler+0x4>

0800042e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <HardFault_Handler+0x4>

08000434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <MemManage_Handler+0x4>

0800043a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <BusFault_Handler+0x4>

08000440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <UsageFault_Handler+0x4>

08000446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000474:	f000 f88e 	bl	8000594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000480:	4802      	ldr	r0, [pc, #8]	; (800048c <USB_LP_IRQHandler+0x10>)
 8000482:	f000 fc8d 	bl	8000da0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000e6c 	.word	0x20000e6c

08000490 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <SystemInit+0x20>)
 8000496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800049a:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <SystemInit+0x20>)
 800049c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000ed00 	.word	0xe000ed00

080004b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b8:	480d      	ldr	r0, [pc, #52]	; (80004f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ba:	490e      	ldr	r1, [pc, #56]	; (80004f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004bc:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <LoopForever+0xe>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c0:	e002      	b.n	80004c8 <LoopCopyDataInit>

080004c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c6:	3304      	adds	r3, #4

080004c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004cc:	d3f9      	bcc.n	80004c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d0:	4c0b      	ldr	r4, [pc, #44]	; (8000500 <LoopForever+0x16>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d4:	e001      	b.n	80004da <LoopFillZerobss>

080004d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d8:	3204      	adds	r2, #4

080004da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004dc:	d3fb      	bcc.n	80004d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004de:	f7ff ffd7 	bl	8000490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004e2:	f007 ff81 	bl	80083e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004e6:	f7ff fe6f 	bl	80001c8 <main>

080004ea <LoopForever>:

LoopForever:
    b LoopForever
 80004ea:	e7fe      	b.n	80004ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004ec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80004f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80004f8:	080084e0 	.word	0x080084e0
  ldr r2, =_sbss
 80004fc:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000500:	20001378 	.word	0x20001378

08000504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC1_2_IRQHandler>
	...

08000508 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_Init+0x28>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <HAL_Init+0x28>)
 8000512:	f043 0310 	orr.w	r3, r3, #16
 8000516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f94f 	bl	80007bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051e:	200f      	movs	r0, #15
 8000520:	f000 f808 	bl	8000534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000524:	f7ff ff5c 	bl	80003e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40022000 	.word	0x40022000

08000534 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x54>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_InitTick+0x58>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054a:	fbb3 f3f1 	udiv	r3, r3, r1
 800054e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f967 	bl	8000826 <HAL_SYSTICK_Config>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	e00e      	b.n	8000580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d80a      	bhi.n	800057e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000568:	2200      	movs	r2, #0
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	f04f 30ff 	mov.w	r0, #4294967295
 8000570:	f000 f92f 	bl	80007d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <HAL_InitTick+0x5c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800057a:	2300      	movs	r3, #0
 800057c:	e000      	b.n	8000580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000000 	.word	0x20000000
 800058c:	20000008 	.word	0x20000008
 8000590:	20000004 	.word	0x20000004

08000594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x20>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_IncTick+0x24>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <HAL_IncTick+0x24>)
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000008 	.word	0x20000008
 80005b8:	200001a0 	.word	0x200001a0

080005bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return uwTick;  
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <HAL_GetTick+0x14>)
 80005c2:	681b      	ldr	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	200001a0 	.word	0x200001a0

080005d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005dc:	f7ff ffee 	bl	80005bc <HAL_GetTick>
 80005e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ec:	d005      	beq.n	80005fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_Delay+0x44>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005fa:	bf00      	nop
 80005fc:	f7ff ffde 	bl	80005bc <HAL_GetTick>
 8000600:	4602      	mov	r2, r0
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	429a      	cmp	r2, r3
 800060a:	d8f7      	bhi.n	80005fc <HAL_Delay+0x28>
  {
  }
}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000008 	.word	0x20000008

0800061c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064e:	4a04      	ldr	r2, [pc, #16]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	60d3      	str	r3, [r2, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <__NVIC_GetPriorityGrouping+0x18>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	f003 0307 	and.w	r3, r3, #7
}
 8000672:	4618      	mov	r0, r3
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	2b00      	cmp	r3, #0
 8000690:	db0b      	blt.n	80006aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 021f 	and.w	r2, r3, #31
 8000698:	4907      	ldr	r1, [pc, #28]	; (80006b8 <__NVIC_EnableIRQ+0x38>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	095b      	lsrs	r3, r3, #5
 80006a0:	2001      	movs	r0, #1
 80006a2:	fa00 f202 	lsl.w	r2, r0, r2
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e100 	.word	0xe000e100

080006bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	6039      	str	r1, [r7, #0]
 80006c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db0a      	blt.n	80006e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	490c      	ldr	r1, [pc, #48]	; (8000708 <__NVIC_SetPriority+0x4c>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	0112      	lsls	r2, r2, #4
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	440b      	add	r3, r1
 80006e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e4:	e00a      	b.n	80006fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4908      	ldr	r1, [pc, #32]	; (800070c <__NVIC_SetPriority+0x50>)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	3b04      	subs	r3, #4
 80006f4:	0112      	lsls	r2, r2, #4
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	440b      	add	r3, r1
 80006fa:	761a      	strb	r2, [r3, #24]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000e100 	.word	0xe000e100
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000710:	b480      	push	{r7}
 8000712:	b089      	sub	sp, #36	; 0x24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	f1c3 0307 	rsb	r3, r3, #7
 800072a:	2b04      	cmp	r3, #4
 800072c:	bf28      	it	cs
 800072e:	2304      	movcs	r3, #4
 8000730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3304      	adds	r3, #4
 8000736:	2b06      	cmp	r3, #6
 8000738:	d902      	bls.n	8000740 <NVIC_EncodePriority+0x30>
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3b03      	subs	r3, #3
 800073e:	e000      	b.n	8000742 <NVIC_EncodePriority+0x32>
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	f04f 32ff 	mov.w	r2, #4294967295
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	43da      	mvns	r2, r3
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	401a      	ands	r2, r3
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000758:	f04f 31ff 	mov.w	r1, #4294967295
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	fa01 f303 	lsl.w	r3, r1, r3
 8000762:	43d9      	mvns	r1, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	4313      	orrs	r3, r2
         );
}
 800076a:	4618      	mov	r0, r3
 800076c:	3724      	adds	r7, #36	; 0x24
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
	...

08000778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000788:	d301      	bcc.n	800078e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800078a:	2301      	movs	r3, #1
 800078c:	e00f      	b.n	80007ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <SysTick_Config+0x40>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000796:	210f      	movs	r1, #15
 8000798:	f04f 30ff 	mov.w	r0, #4294967295
 800079c:	f7ff ff8e 	bl	80006bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <SysTick_Config+0x40>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <SysTick_Config+0x40>)
 80007a8:	2207      	movs	r2, #7
 80007aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	e000e010 	.word	0xe000e010

080007bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff ff29 	bl	800061c <__NVIC_SetPriorityGrouping>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b086      	sub	sp, #24
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	60b9      	str	r1, [r7, #8]
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e4:	f7ff ff3e 	bl	8000664 <__NVIC_GetPriorityGrouping>
 80007e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	68b9      	ldr	r1, [r7, #8]
 80007ee:	6978      	ldr	r0, [r7, #20]
 80007f0:	f7ff ff8e 	bl	8000710 <NVIC_EncodePriority>
 80007f4:	4602      	mov	r2, r0
 80007f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fa:	4611      	mov	r1, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff5d 	bl	80006bc <__NVIC_SetPriority>
}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff31 	bl	8000680 <__NVIC_EnableIRQ>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff ffa2 	bl	8000778 <SysTick_Config>
 8000834:	4603      	mov	r3, r0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000840:	b480      	push	{r7}
 8000842:	b087      	sub	sp, #28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800084e:	e154      	b.n	8000afa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	2101      	movs	r1, #1
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	fa01 f303 	lsl.w	r3, r1, r3
 800085c:	4013      	ands	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2b00      	cmp	r3, #0
 8000864:	f000 8146 	beq.w	8000af4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f003 0303 	and.w	r3, r3, #3
 8000870:	2b01      	cmp	r3, #1
 8000872:	d005      	beq.n	8000880 <HAL_GPIO_Init+0x40>
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	f003 0303 	and.w	r3, r3, #3
 800087c:	2b02      	cmp	r3, #2
 800087e:	d130      	bne.n	80008e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	2203      	movs	r2, #3
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	43db      	mvns	r3, r3
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4013      	ands	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	68da      	ldr	r2, [r3, #12]
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008b6:	2201      	movs	r2, #1
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	4013      	ands	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	091b      	lsrs	r3, r3, #4
 80008cc:	f003 0201 	and.w	r2, r3, #1
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4313      	orrs	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f003 0303 	and.w	r3, r3, #3
 80008ea:	2b03      	cmp	r3, #3
 80008ec:	d017      	beq.n	800091e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2203      	movs	r2, #3
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4013      	ands	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f003 0303 	and.w	r3, r3, #3
 8000926:	2b02      	cmp	r3, #2
 8000928:	d123      	bne.n	8000972 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	08da      	lsrs	r2, r3, #3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3208      	adds	r2, #8
 8000932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000936:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	220f      	movs	r2, #15
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43db      	mvns	r3, r3
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	4013      	ands	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	691a      	ldr	r2, [r3, #16]
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	f003 0307 	and.w	r3, r3, #7
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4313      	orrs	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	08da      	lsrs	r2, r3, #3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3208      	adds	r2, #8
 800096c:	6939      	ldr	r1, [r7, #16]
 800096e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	2203      	movs	r2, #3
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f003 0203 	and.w	r2, r3, #3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 80a0 	beq.w	8000af4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b4:	4b58      	ldr	r3, [pc, #352]	; (8000b18 <HAL_GPIO_Init+0x2d8>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a57      	ldr	r2, [pc, #348]	; (8000b18 <HAL_GPIO_Init+0x2d8>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b55      	ldr	r3, [pc, #340]	; (8000b18 <HAL_GPIO_Init+0x2d8>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009cc:	4a53      	ldr	r2, [pc, #332]	; (8000b1c <HAL_GPIO_Init+0x2dc>)
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	089b      	lsrs	r3, r3, #2
 80009d2:	3302      	adds	r3, #2
 80009d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	f003 0303 	and.w	r3, r3, #3
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	220f      	movs	r2, #15
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009f6:	d019      	beq.n	8000a2c <HAL_GPIO_Init+0x1ec>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a49      	ldr	r2, [pc, #292]	; (8000b20 <HAL_GPIO_Init+0x2e0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d013      	beq.n	8000a28 <HAL_GPIO_Init+0x1e8>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a48      	ldr	r2, [pc, #288]	; (8000b24 <HAL_GPIO_Init+0x2e4>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d00d      	beq.n	8000a24 <HAL_GPIO_Init+0x1e4>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a47      	ldr	r2, [pc, #284]	; (8000b28 <HAL_GPIO_Init+0x2e8>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d007      	beq.n	8000a20 <HAL_GPIO_Init+0x1e0>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a46      	ldr	r2, [pc, #280]	; (8000b2c <HAL_GPIO_Init+0x2ec>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d101      	bne.n	8000a1c <HAL_GPIO_Init+0x1dc>
 8000a18:	2304      	movs	r3, #4
 8000a1a:	e008      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	e006      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a20:	2303      	movs	r3, #3
 8000a22:	e004      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a24:	2302      	movs	r3, #2
 8000a26:	e002      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	f002 0203 	and.w	r2, r2, #3
 8000a34:	0092      	lsls	r2, r2, #2
 8000a36:	4093      	lsls	r3, r2
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a3e:	4937      	ldr	r1, [pc, #220]	; (8000b1c <HAL_GPIO_Init+0x2dc>)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a4c:	4b38      	ldr	r3, [pc, #224]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a70:	4a2f      	ldr	r2, [pc, #188]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a9a:	4a25      	ldr	r2, [pc, #148]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ac4:	4a1a      	ldr	r2, [pc, #104]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	fa22 f303 	lsr.w	r3, r2, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f47f aea3 	bne.w	8000850 <HAL_GPIO_Init+0x10>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	371c      	adds	r7, #28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010000 	.word	0x40010000
 8000b20:	48000400 	.word	0x48000400
 8000b24:	48000800 	.word	0x48000800
 8000b28:	48000c00 	.word	0x48000c00
 8000b2c:	48001000 	.word	0x48001000
 8000b30:	40010400 	.word	0x40010400

08000b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
 8000b40:	4613      	mov	r3, r2
 8000b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b44:	787b      	ldrb	r3, [r7, #1]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b50:	e002      	b.n	8000b58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b52:	887a      	ldrh	r2, [r7, #2]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	041a      	lsls	r2, r3, #16
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	43d9      	mvns	r1, r3
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	400b      	ands	r3, r1
 8000b86:	431a      	orrs	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	619a      	str	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9a:	b08b      	sub	sp, #44	; 0x2c
 8000b9c:	af06      	add	r7, sp, #24
 8000b9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e0d0      	b.n	8000d4c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d106      	bne.n	8000bc4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f007 f924 	bl	8007e0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f003 f89a 	bl	8003d0a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	e04c      	b.n	8000c76 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	1c5a      	adds	r2, r3, #1
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	440b      	add	r3, r1
 8000bec:	3301      	adds	r3, #1
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	440b      	add	r3, r1
 8000c02:	7bfa      	ldrb	r2, [r7, #15]
 8000c04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c06:	7bfa      	ldrb	r2, [r7, #15]
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	b298      	uxth	r0, r3
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3336      	adds	r3, #54	; 0x36
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	4613      	mov	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4413      	add	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	440b      	add	r3, r1
 8000c2e:	3303      	adds	r3, #3
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c34:	7bfa      	ldrb	r2, [r7, #15]
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	440b      	add	r3, r1
 8000c42:	3338      	adds	r3, #56	; 0x38
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c48:	7bfa      	ldrb	r2, [r7, #15]
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	440b      	add	r3, r1
 8000c56:	333c      	adds	r3, #60	; 0x3c
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	440b      	add	r3, r1
 8000c6a:	3340      	adds	r3, #64	; 0x40
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	3301      	adds	r3, #1
 8000c74:	73fb      	strb	r3, [r7, #15]
 8000c76:	7bfa      	ldrb	r2, [r7, #15]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d3ad      	bcc.n	8000bdc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	e044      	b.n	8000d10 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c86:	7bfa      	ldrb	r2, [r7, #15]
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	440b      	add	r3, r1
 8000c94:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c9c:	7bfa      	ldrb	r2, [r7, #15]
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	440b      	add	r3, r1
 8000caa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000cae:	7bfa      	ldrb	r2, [r7, #15]
 8000cb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cb2:	7bfa      	ldrb	r2, [r7, #15]
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000cc8:	7bfa      	ldrb	r2, [r7, #15]
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	440b      	add	r3, r1
 8000cd6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cde:	7bfa      	ldrb	r2, [r7, #15]
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	440b      	add	r3, r1
 8000cec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cf4:	7bfa      	ldrb	r2, [r7, #15]
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
 8000d10:	7bfa      	ldrb	r2, [r7, #15]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d3b5      	bcc.n	8000c86 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	687e      	ldr	r6, [r7, #4]
 8000d22:	466d      	mov	r5, sp
 8000d24:	f106 0410 	add.w	r4, r6, #16
 8000d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d2c:	6823      	ldr	r3, [r4, #0]
 8000d2e:	602b      	str	r3, [r5, #0]
 8000d30:	1d33      	adds	r3, r6, #4
 8000d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d34:	6838      	ldr	r0, [r7, #0]
 8000d36:	f003 f803 	bl	8003d40 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d54 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d101      	bne.n	8000d6a <HAL_PCD_Start+0x16>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e016      	b.n	8000d98 <HAL_PCD_Start+0x44>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 ffb0 	bl	8003cdc <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f007 faea 	bl	8008358 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f005 f9c5 	bl	8006118 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_PCD_IRQHandler>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
#include "main.h"
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f005 f9be 	bl	800612e <USB_ReadInterrupts>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dbc:	d102      	bne.n	8000dc4 <HAL_PCD_IRQHandler+0x24>



    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 faf6 	bl	80013b0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f005 f9b0 	bl	800612e <USB_ReadInterrupts>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd8:	d112      	bne.n	8000e00 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dec:	b292      	uxth	r2, r2
 8000dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f007 f8b3 	bl	8007f5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000df8:	2100      	movs	r1, #0
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f8c7 	bl	8000f8e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f005 f992 	bl	800612e <USB_ReadInterrupts>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e14:	d10b      	bne.n	8000e2e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e28:	b292      	uxth	r2, r2
 8000e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f005 f97b 	bl	800612e <USB_ReadInterrupts>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e42:	d10b      	bne.n	8000e5c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e56:	b292      	uxth	r2, r2
 8000e58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f005 f964 	bl	800612e <USB_ReadInterrupts>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e70:	d126      	bne.n	8000ec0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0204 	bic.w	r2, r2, #4
 8000e84:	b292      	uxth	r2, r2
 8000e86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0208 	bic.w	r2, r2, #8
 8000e9c:	b292      	uxth	r2, r2
 8000e9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f007 f894 	bl	8007fd0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000eba:	b292      	uxth	r2, r2
 8000ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f005 f932 	bl	800612e <USB_ReadInterrupts>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ed4:	d126      	bne.n	8000f24 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f042 0208 	orr.w	r2, r2, #8
 8000ee8:	b292      	uxth	r2, r2
 8000eea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f00:	b292      	uxth	r2, r2
 8000f02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f042 0204 	orr.w	r2, r2, #4
 8000f18:	b292      	uxth	r2, r2
 8000f1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f007 f83c 	bl	8007f9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f005 f900 	bl	800612e <USB_ReadInterrupts>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f38:	d10e      	bne.n	8000f58 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f4c:	b292      	uxth	r2, r2
 8000f4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f006 fff5 	bl	8007f42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f005 f8e6 	bl	800612e <USB_ReadInterrupts>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f6c:	d10b      	bne.n	8000f86 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f80:	b292      	uxth	r2, r2
 8000f82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	460b      	mov	r3, r1
 8000f98:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d101      	bne.n	8000fa8 <HAL_PCD_SetAddress+0x1a>
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e013      	b.n	8000fd0 <HAL_PCD_SetAddress+0x42>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	78fa      	ldrb	r2, [r7, #3]
 8000fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	78fa      	ldrb	r2, [r7, #3]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f005 f895 	bl	80060f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	70fb      	strb	r3, [r7, #3]
 8000fea:	460b      	mov	r3, r1
 8000fec:	803b      	strh	r3, [r7, #0]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da0e      	bge.n	800101c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2201      	movs	r2, #1
 8001018:	705a      	strb	r2, [r3, #1]
 800101a:	e00e      	b.n	800103a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	f003 0207 	and.w	r2, r3, #7
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	b2da      	uxtb	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001046:	883a      	ldrh	r2, [r7, #0]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	78ba      	ldrb	r2, [r7, #2]
 8001050:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	785b      	ldrb	r3, [r3, #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d004      	beq.n	8001064 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b29a      	uxth	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001064:	78bb      	ldrb	r3, [r7, #2]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d102      	bne.n	8001070 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2200      	movs	r2, #0
 800106e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_PCD_EP_Open+0xa6>
 800107a:	2302      	movs	r3, #2
 800107c:	e00e      	b.n	800109c <HAL_PCD_EP_Open+0xc4>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68f9      	ldr	r1, [r7, #12]
 800108c:	4618      	mov	r0, r3
 800108e:	f002 fe79 	bl	8003d84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800109a:	7afb      	ldrb	r3, [r7, #11]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	da0e      	bge.n	80010d6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2201      	movs	r2, #1
 80010d2:	705a      	strb	r2, [r3, #1]
 80010d4:	e00e      	b.n	80010f4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	f003 0207 	and.w	r2, r3, #7
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2200      	movs	r2, #0
 80010f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_PCD_EP_Close+0x6a>
 800110a:	2302      	movs	r3, #2
 800110c:	e00e      	b.n	800112c <HAL_PCD_EP_Close+0x88>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68f9      	ldr	r1, [r7, #12]
 800111c:	4618      	mov	r0, r3
 800111e:	f003 f9c5 	bl	80044ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	460b      	mov	r3, r1
 8001142:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001144:	7afb      	ldrb	r3, [r7, #11]
 8001146:	f003 0207 	and.w	r2, r3, #7
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	2200      	movs	r2, #0
 8001172:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001174:	7afb      	ldrb	r3, [r7, #11]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	b2da      	uxtb	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001180:	7afb      	ldrb	r3, [r7, #11]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	2b00      	cmp	r3, #0
 8001188:	d106      	bne.n	8001198 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6979      	ldr	r1, [r7, #20]
 8001190:	4618      	mov	r0, r3
 8001192:	f003 fb78 	bl	8004886 <USB_EPStartXfer>
 8001196:	e005      	b.n	80011a4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6979      	ldr	r1, [r7, #20]
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fb71 	bl	8004886 <USB_EPStartXfer>
  }

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	f003 0207 	and.w	r2, r3, #7
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80011d0:	681b      	ldr	r3, [r3, #0]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	460b      	mov	r3, r1
 80011ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011ee:	7afb      	ldrb	r3, [r7, #11]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4413      	add	r3, r2
 8001202:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2201      	movs	r2, #1
 8001228:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800122a:	7afb      	ldrb	r3, [r7, #11]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	b2da      	uxtb	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	2b00      	cmp	r3, #0
 800123e:	d106      	bne.n	800124e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6979      	ldr	r1, [r7, #20]
 8001246:	4618      	mov	r0, r3
 8001248:	f003 fb1d 	bl	8004886 <USB_EPStartXfer>
 800124c:	e005      	b.n	800125a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6979      	ldr	r1, [r7, #20]
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fb16 	bl	8004886 <USB_EPStartXfer>
  }

  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	f003 0207 	and.w	r2, r3, #7
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	429a      	cmp	r2, r3
 800127c:	d901      	bls.n	8001282 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e03e      	b.n	8001300 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001286:	2b00      	cmp	r3, #0
 8001288:	da0e      	bge.n	80012a8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2201      	movs	r2, #1
 80012a4:	705a      	strb	r2, [r3, #1]
 80012a6:	e00c      	b.n	80012c2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012a8:	78fa      	ldrb	r2, [r7, #3]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2201      	movs	r2, #1
 80012c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_PCD_EP_SetStall+0x7e>
 80012de:	2302      	movs	r3, #2
 80012e0:	e00e      	b.n	8001300 <HAL_PCD_EP_SetStall+0x9c>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68f9      	ldr	r1, [r7, #12]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 fdfe 	bl	8005ef2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	f003 020f 	and.w	r2, r3, #15
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	d901      	bls.n	8001326 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e040      	b.n	80013a8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800132a:	2b00      	cmp	r3, #0
 800132c:	da0e      	bge.n	800134c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800132e:	78fb      	ldrb	r3, [r7, #3]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2201      	movs	r2, #1
 8001348:	705a      	strb	r2, [r3, #1]
 800134a:	e00e      	b.n	800136a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	f003 0207 	and.w	r2, r3, #7
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	b2da      	uxtb	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_PCD_EP_ClrStall+0x82>
 8001386:	2302      	movs	r3, #2
 8001388:	e00e      	b.n	80013a8 <HAL_PCD_EP_ClrStall+0xa0>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68f9      	ldr	r1, [r7, #12]
 8001398:	4618      	mov	r0, r3
 800139a:	f004 fdfb 	bl	8005f94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <PCD_EP_ISR_Handler>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
#include "main.h"
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b096      	sub	sp, #88	; 0x58
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013b8:	e3a9      	b.n	8001b0e <PCD_EP_ISR_Handler+0x75e>
  {

    wIstr = hpcd->Instance->ISTR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80013c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	f003 030f 	and.w	r3, r3, #15
 80013d0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80013d4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f040 8164 	bne.w	80016a6 <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80013de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d152      	bne.n	8001490 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80013f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013fa:	81fb      	strh	r3, [r7, #14]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800140a:	b29b      	uxth	r3, r3
 800140c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3328      	adds	r3, #40	; 0x28
 8001412:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800141c:	b29b      	uxth	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4413      	add	r3, r2
 8001428:	3302      	adds	r3, #2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	4413      	add	r3, r2
 8001432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800143c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800143e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	441a      	add	r2, r3
 800144a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800144c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800144e:	2100      	movs	r1, #0
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f006 fd5c 	bl	8007f0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8355 	beq.w	8001b0e <PCD_EP_ISR_Handler+0x75e>
 8001464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	2b00      	cmp	r3, #0
 800146a:	f040 8350 	bne.w	8001b0e <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800147a:	b2da      	uxtb	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b292      	uxth	r2, r2
 8001482:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800148e:	e33e      	b.n	8001b0e <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001496:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80014a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80014a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d034      	beq.n	8001518 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4413      	add	r3, r2
 80014c2:	3306      	adds	r3, #6
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80014e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014e6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80014e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	f004 fe74 	bl	80061da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014fe:	4013      	ands	r3, r2
 8001500:	823b      	strh	r3, [r7, #16]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	8a3a      	ldrh	r2, [r7, #16]
 8001508:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800150c:	b292      	uxth	r2, r2
 800150e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f006 fccf 	bl	8007eb4 <HAL_PCD_SetupStageCallback>
 8001516:	e2fa      	b.n	8001b0e <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001518:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800151c:	2b00      	cmp	r3, #0
 800151e:	f280 82f6 	bge.w	8001b0e <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	b29a      	uxth	r2, r3
 800152a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800152e:	4013      	ands	r3, r2
 8001530:	83fb      	strh	r3, [r7, #30]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	8bfa      	ldrh	r2, [r7, #30]
 8001538:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800153c:	b292      	uxth	r2, r2
 800153e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001548:	b29b      	uxth	r3, r3
 800154a:	461a      	mov	r2, r3
 800154c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	3306      	adds	r3, #6
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	4413      	add	r3, r2
 800155e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800156a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800156c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d019      	beq.n	80015a8 <PCD_EP_ISR_Handler+0x1f8>
 8001574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d015      	beq.n	80015a8 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001582:	6959      	ldr	r1, [r3, #20]
 8001584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001586:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800158a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800158c:	b29b      	uxth	r3, r3
 800158e:	f004 fe24 	bl	80061da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	441a      	add	r2, r3
 800159c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800159e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80015a0:	2100      	movs	r1, #0
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f006 fc98 	bl	8007ed8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f040 82aa 	bne.w	8001b0e <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	4413      	add	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d112      	bne.n	8001608 <PCD_EP_ISR_Handler+0x258>
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	801a      	strh	r2, [r3, #0]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001600:	b29a      	uxth	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	e02f      	b.n	8001668 <PCD_EP_ISR_Handler+0x2b8>
 8001608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	2b3e      	cmp	r3, #62	; 0x3e
 800160e:	d813      	bhi.n	8001638 <PCD_EP_ISR_Handler+0x288>
 8001610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	647b      	str	r3, [r7, #68]	; 0x44
 8001618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <PCD_EP_ISR_Handler+0x27a>
 8001624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001626:	3301      	adds	r3, #1
 8001628:	647b      	str	r3, [r7, #68]	; 0x44
 800162a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800162c:	b29b      	uxth	r3, r3
 800162e:	029b      	lsls	r3, r3, #10
 8001630:	b29a      	uxth	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	801a      	strh	r2, [r3, #0]
 8001636:	e017      	b.n	8001668 <PCD_EP_ISR_Handler+0x2b8>
 8001638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	647b      	str	r3, [r7, #68]	; 0x44
 8001640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <PCD_EP_ISR_Handler+0x2a2>
 800164c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800164e:	3b01      	subs	r3, #1
 8001650:	647b      	str	r3, [r7, #68]	; 0x44
 8001652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001654:	b29b      	uxth	r3, r3
 8001656:	029b      	lsls	r3, r3, #10
 8001658:	b29b      	uxth	r3, r3
 800165a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800165e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001662:	b29a      	uxth	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001678:	827b      	strh	r3, [r7, #18]
 800167a:	8a7b      	ldrh	r3, [r7, #18]
 800167c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001680:	827b      	strh	r3, [r7, #18]
 8001682:	8a7b      	ldrh	r3, [r7, #18]
 8001684:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001688:	827b      	strh	r3, [r7, #18]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	8a7b      	ldrh	r3, [r7, #18]
 8001690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800169c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	8013      	strh	r3, [r2, #0]
 80016a4:	e233      	b.n	8001b0e <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016ba:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f280 80fc 	bge.w	80018bc <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016da:	4013      	ands	r3, r2
 80016dc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80016f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016f6:	b292      	uxth	r2, r2
 80016f8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016fa:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001712:	7b1b      	ldrb	r3, [r3, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d125      	bne.n	8001764 <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001720:	b29b      	uxth	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4413      	add	r3, r2
 800172c:	3306      	adds	r3, #6
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	4413      	add	r3, r2
 8001736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001740:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8001744:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 8092 	beq.w	8001872 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001754:	6959      	ldr	r1, [r3, #20]
 8001756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001758:	88da      	ldrh	r2, [r3, #6]
 800175a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800175e:	f004 fd3c 	bl	80061da <USB_ReadPMA>
 8001762:	e086      	b.n	8001872 <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001766:	78db      	ldrb	r3, [r3, #3]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d10a      	bne.n	8001782 <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800176c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001770:	461a      	mov	r2, r3
 8001772:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f9d8 	bl	8001b2a <HAL_PCD_EP_DB_Receive>
 800177a:	4603      	mov	r3, r0
 800177c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001780:	e077      	b.n	8001872 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	b29b      	uxth	r3, r3
 8001794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800179c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	441a      	add	r2, r3
 80017ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d024      	beq.n	800182a <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4413      	add	r3, r2
 80017f4:	3302      	adds	r3, #2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001808:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800180c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001810:	2b00      	cmp	r3, #0
 8001812:	d02e      	beq.n	8001872 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800181a:	6959      	ldr	r1, [r3, #20]
 800181c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800181e:	891a      	ldrh	r2, [r3, #8]
 8001820:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001824:	f004 fcd9 	bl	80061da <USB_ReadPMA>
 8001828:	e023      	b.n	8001872 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001832:	b29b      	uxth	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4413      	add	r3, r2
 800183e:	3306      	adds	r3, #6
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	4413      	add	r3, r2
 8001848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001852:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001856:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001864:	6959      	ldr	r1, [r3, #20]
 8001866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001868:	895a      	ldrh	r2, [r3, #10]
 800186a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800186e:	f004 fcb4 	bl	80061da <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800187a:	441a      	add	r2, r3
 800187c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800187e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001888:	441a      	add	r2, r3
 800188a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800188c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800188e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <PCD_EP_ISR_Handler+0x4f2>
 8001896:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800189a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d206      	bcs.n	80018b0 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80018a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	4619      	mov	r1, r3
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f006 fb15 	bl	8007ed8 <HAL_PCD_DataOutStageCallback>
 80018ae:	e005      	b.n	80018bc <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 ffe5 	bl	8004886 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80018bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80018c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 8122 	beq.w	8001b0e <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 80018ca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	441a      	add	r2, r3
 800190a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800190e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001916:	b29b      	uxth	r3, r3
 8001918:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800191a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800191c:	78db      	ldrb	r3, [r3, #3]
 800191e:	2b02      	cmp	r3, #2
 8001920:	f000 809d 	beq.w	8001a5e <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 8001924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800192a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800192e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001932:	2b00      	cmp	r3, #0
 8001934:	d046      	beq.n	80019c4 <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001938:	785b      	ldrb	r3, [r3, #1]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d126      	bne.n	800198c <PCD_EP_ISR_Handler+0x5dc>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800194c:	b29b      	uxth	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	4413      	add	r3, r2
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
 8001956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	011a      	lsls	r2, r3, #4
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	4413      	add	r3, r2
 8001960:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001964:	623b      	str	r3, [r7, #32]
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001970:	b29a      	uxth	r2, r3
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	801a      	strh	r2, [r3, #0]
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001984:	b29a      	uxth	r2, r3
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	801a      	strh	r2, [r3, #0]
 800198a:	e061      	b.n	8001a50 <PCD_EP_ISR_Handler+0x6a0>
 800198c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800198e:	785b      	ldrb	r3, [r3, #1]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d15d      	bne.n	8001a50 <PCD_EP_ISR_Handler+0x6a0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a8:	4413      	add	r3, r2
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	011a      	lsls	r2, r3, #4
 80019b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b4:	4413      	add	r3, r2
 80019b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80019bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019be:	2200      	movs	r2, #0
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	e045      	b.n	8001a50 <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019cc:	785b      	ldrb	r3, [r3, #1]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d126      	bne.n	8001a20 <PCD_EP_ISR_Handler+0x670>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e6:	4413      	add	r3, r2
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
 80019ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	011a      	lsls	r2, r3, #4
 80019f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f2:	4413      	add	r3, r2
 80019f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
 80019fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a08:	801a      	strh	r2, [r3, #0]
 8001a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1c:	801a      	strh	r2, [r3, #0]
 8001a1e:	e017      	b.n	8001a50 <PCD_EP_ISR_Handler+0x6a0>
 8001a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a22:	785b      	ldrb	r3, [r3, #1]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d113      	bne.n	8001a50 <PCD_EP_ISR_Handler+0x6a0>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a36:	4413      	add	r3, r2
 8001a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	011a      	lsls	r2, r3, #4
 8001a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a42:	4413      	add	r3, r2
 8001a44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a48:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f006 fa59 	bl	8007f0e <HAL_PCD_DataInStageCallback>
 8001a5c:	e057      	b.n	8001b0e <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8001a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a60:	78db      	ldrb	r3, [r3, #3]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d14c      	bne.n	8001b00 <PCD_EP_ISR_Handler+0x750>
 8001a66:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d146      	bne.n	8001b00 <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4413      	add	r3, r2
 8001a86:	3302      	adds	r3, #2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 8001a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aa0:	699a      	ldr	r2, [r3, #24]
 8001aa2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d907      	bls.n	8001aba <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 8001aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aac:	699a      	ldr	r2, [r3, #24]
 8001aae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ab2:	1ad2      	subs	r2, r2, r3
 8001ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab6:	619a      	str	r2, [r3, #24]
 8001ab8:	e002      	b.n	8001ac0 <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 8001aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d106      	bne.n	8001ad6 <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4619      	mov	r1, r3
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f006 fa1d 	bl	8007f0e <HAL_PCD_DataInStageCallback>
 8001ad4:	e01b      	b.n	8001b0e <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ade:	441a      	add	r2, r3
 8001ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001aec:	441a      	add	r2, r3
 8001aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001af0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 fec4 	bl	8004886 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001afe:	e006      	b.n	8001b0e <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b00:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b04:	461a      	mov	r2, r3
 8001b06:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f91b 	bl	8001d44 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f6ff ac4d 	blt.w	80013ba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3758      	adds	r7, #88	; 0x58
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b088      	sub	sp, #32
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	4613      	mov	r3, r2
 8001b36:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d07e      	beq.n	8001c40 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4413      	add	r3, r2
 8001b56:	3302      	adds	r3, #2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b6a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	8b7b      	ldrh	r3, [r7, #26]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d306      	bcc.n	8001b84 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	8b7b      	ldrh	r3, [r7, #26]
 8001b7c:	1ad2      	subs	r2, r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	619a      	str	r2, [r3, #24]
 8001b82:	e002      	b.n	8001b8a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d123      	bne.n	8001bda <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bac:	833b      	strh	r3, [r7, #24]
 8001bae:	8b3b      	ldrh	r3, [r7, #24]
 8001bb0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bb4:	833b      	strh	r3, [r7, #24]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	441a      	add	r2, r3
 8001bc4:	8b3b      	ldrh	r3, [r7, #24]
 8001bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01f      	beq.n	8001c24 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bfe:	82fb      	strh	r3, [r7, #22]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	441a      	add	r2, r3
 8001c0e:	8afb      	ldrh	r3, [r7, #22]
 8001c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c24:	8b7b      	ldrh	r3, [r7, #26]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8087 	beq.w	8001d3a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	6959      	ldr	r1, [r3, #20]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	891a      	ldrh	r2, [r3, #8]
 8001c38:	8b7b      	ldrh	r3, [r7, #26]
 8001c3a:	f004 face 	bl	80061da <USB_ReadPMA>
 8001c3e:	e07c      	b.n	8001d3a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	3306      	adds	r3, #6
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c68:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	8b7b      	ldrh	r3, [r7, #26]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d306      	bcc.n	8001c82 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	699a      	ldr	r2, [r3, #24]
 8001c78:	8b7b      	ldrh	r3, [r7, #26]
 8001c7a:	1ad2      	subs	r2, r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	619a      	str	r2, [r3, #24]
 8001c80:	e002      	b.n	8001c88 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d123      	bne.n	8001cd8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001caa:	83fb      	strh	r3, [r7, #30]
 8001cac:	8bfb      	ldrh	r3, [r7, #30]
 8001cae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001cb2:	83fb      	strh	r3, [r7, #30]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	441a      	add	r2, r3
 8001cc2:	8bfb      	ldrh	r3, [r7, #30]
 8001cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d11f      	bne.n	8001d22 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cfc:	83bb      	strh	r3, [r7, #28]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	441a      	add	r2, r3
 8001d0c:	8bbb      	ldrh	r3, [r7, #28]
 8001d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d22:	8b7b      	ldrh	r3, [r7, #26]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	6959      	ldr	r1, [r3, #20]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	895a      	ldrh	r2, [r3, #10]
 8001d34:	8b7b      	ldrh	r3, [r7, #26]
 8001d36:	f004 fa50 	bl	80061da <USB_ReadPMA>
    }
  }

  return count;
 8001d3a:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0a2      	sub	sp, #136	; 0x88
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 81c7 	beq.w	80020ec <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4413      	add	r3, r2
 8001d72:	3302      	adds	r3, #2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d907      	bls.n	8001da6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d9e:	1ad2      	subs	r2, r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	619a      	str	r2, [r3, #24]
 8001da4:	e002      	b.n	8001dac <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 80b9 	bne.w	8001f28 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	785b      	ldrb	r3, [r3, #1]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d126      	bne.n	8001e0c <HAL_PCD_EP_DB_Transmit+0xc8>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd2:	4413      	add	r3, r2
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	011a      	lsls	r2, r3, #4
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	4413      	add	r3, r2
 8001de0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	801a      	strh	r2, [r3, #0]
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	801a      	strh	r2, [r3, #0]
 8001e0a:	e01a      	b.n	8001e42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	785b      	ldrb	r3, [r3, #1]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d116      	bne.n	8001e42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e28:	4413      	add	r3, r2
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	011a      	lsls	r2, r3, #4
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	4413      	add	r3, r2
 8001e36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	2200      	movs	r2, #0
 8001e40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	623b      	str	r3, [r7, #32]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	785b      	ldrb	r3, [r3, #1]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d126      	bne.n	8001e9e <HAL_PCD_EP_DB_Transmit+0x15a>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	4413      	add	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	011a      	lsls	r2, r3, #4
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	4413      	add	r3, r2
 8001e72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	801a      	strh	r2, [r3, #0]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	801a      	strh	r2, [r3, #0]
 8001e9c:	e017      	b.n	8001ece <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	785b      	ldrb	r3, [r3, #1]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d113      	bne.n	8001ece <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	623b      	str	r3, [r7, #32]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	011a      	lsls	r2, r3, #4
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f006 f81a 	bl	8007f0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 82d4 	beq.w	800248e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f00:	827b      	strh	r3, [r7, #18]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	441a      	add	r2, r3
 8001f10:	8a7b      	ldrh	r3, [r7, #18]
 8001f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	8013      	strh	r3, [r2, #0]
 8001f26:	e2b2      	b.n	800248e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d021      	beq.n	8001f76 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	441a      	add	r2, r3
 8001f5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	f040 8286 	bne.w	800248e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f8a:	441a      	add	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	69da      	ldr	r2, [r3, #28]
 8001f94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f98:	441a      	add	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	6a1a      	ldr	r2, [r3, #32]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d309      	bcc.n	8001fbe <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	6a1a      	ldr	r2, [r3, #32]
 8001fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb6:	1ad2      	subs	r2, r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	621a      	str	r2, [r3, #32]
 8001fbc:	e015      	b.n	8001fea <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d107      	bne.n	8001fd6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001fc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fd4:	e009      	b.n	8001fea <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	785b      	ldrb	r3, [r3, #1]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d155      	bne.n	800209e <HAL_PCD_EP_DB_Transmit+0x35a>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002000:	b29b      	uxth	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002006:	4413      	add	r3, r2
 8002008:	63bb      	str	r3, [r7, #56]	; 0x38
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	011a      	lsls	r2, r3, #4
 8002010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002012:	4413      	add	r3, r2
 8002014:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002018:	637b      	str	r3, [r7, #52]	; 0x34
 800201a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800201c:	2b00      	cmp	r3, #0
 800201e:	d112      	bne.n	8002046 <HAL_PCD_EP_DB_Transmit+0x302>
 8002020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800202a:	b29a      	uxth	r2, r3
 800202c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202e:	801a      	strh	r2, [r3, #0]
 8002030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800203a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800203e:	b29a      	uxth	r2, r3
 8002040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002042:	801a      	strh	r2, [r3, #0]
 8002044:	e047      	b.n	80020d6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002048:	2b3e      	cmp	r3, #62	; 0x3e
 800204a:	d811      	bhi.n	8002070 <HAL_PCD_EP_DB_Transmit+0x32c>
 800204c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	64bb      	str	r3, [r7, #72]	; 0x48
 8002052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <HAL_PCD_EP_DB_Transmit+0x31e>
 800205c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800205e:	3301      	adds	r3, #1
 8002060:	64bb      	str	r3, [r7, #72]	; 0x48
 8002062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002064:	b29b      	uxth	r3, r3
 8002066:	029b      	lsls	r3, r3, #10
 8002068:	b29a      	uxth	r2, r3
 800206a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206c:	801a      	strh	r2, [r3, #0]
 800206e:	e032      	b.n	80020d6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	64bb      	str	r3, [r7, #72]	; 0x48
 8002076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <HAL_PCD_EP_DB_Transmit+0x342>
 8002080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002082:	3b01      	subs	r3, #1
 8002084:	64bb      	str	r3, [r7, #72]	; 0x48
 8002086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002088:	b29b      	uxth	r3, r3
 800208a:	029b      	lsls	r3, r3, #10
 800208c:	b29b      	uxth	r3, r3
 800208e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002096:	b29a      	uxth	r2, r3
 8002098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209a:	801a      	strh	r2, [r3, #0]
 800209c:	e01b      	b.n	80020d6 <HAL_PCD_EP_DB_Transmit+0x392>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	785b      	ldrb	r3, [r3, #1]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d117      	bne.n	80020d6 <HAL_PCD_EP_DB_Transmit+0x392>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	643b      	str	r3, [r7, #64]	; 0x40
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ba:	4413      	add	r3, r2
 80020bc:	643b      	str	r3, [r7, #64]	; 0x40
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	011a      	lsls	r2, r3, #4
 80020c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c6:	4413      	add	r3, r2
 80020c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	6959      	ldr	r1, [r3, #20]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	891a      	ldrh	r2, [r3, #8]
 80020e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	f004 f832 	bl	800614e <USB_WritePMA>
 80020ea:	e1d0      	b.n	800248e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	3306      	adds	r3, #6
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	4413      	add	r3, r2
 800210a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002114:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	699a      	ldr	r2, [r3, #24]
 800211c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002120:	429a      	cmp	r2, r3
 8002122:	d307      	bcc.n	8002134 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800212c:	1ad2      	subs	r2, r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	619a      	str	r2, [r3, #24]
 8002132:	e002      	b.n	800213a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2200      	movs	r2, #0
 8002138:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 80c4 	bne.w	80022cc <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	785b      	ldrb	r3, [r3, #1]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d126      	bne.n	800219a <HAL_PCD_EP_DB_Transmit+0x456>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002160:	4413      	add	r3, r2
 8002162:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	011a      	lsls	r2, r3, #4
 800216a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216c:	4413      	add	r3, r2
 800216e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002172:	66bb      	str	r3, [r7, #104]	; 0x68
 8002174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	b29b      	uxth	r3, r3
 800217a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800217e:	b29a      	uxth	r2, r3
 8002180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002182:	801a      	strh	r2, [r3, #0]
 8002184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800218e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002192:	b29a      	uxth	r2, r3
 8002194:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002196:	801a      	strh	r2, [r3, #0]
 8002198:	e01a      	b.n	80021d0 <HAL_PCD_EP_DB_Transmit+0x48c>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d116      	bne.n	80021d0 <HAL_PCD_EP_DB_Transmit+0x48c>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	677b      	str	r3, [r7, #116]	; 0x74
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b6:	4413      	add	r3, r2
 80021b8:	677b      	str	r3, [r7, #116]	; 0x74
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	011a      	lsls	r2, r3, #4
 80021c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c2:	4413      	add	r3, r2
 80021c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021c8:	673b      	str	r3, [r7, #112]	; 0x70
 80021ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021cc:	2200      	movs	r2, #0
 80021ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	785b      	ldrb	r3, [r3, #1]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d12f      	bne.n	800223e <HAL_PCD_EP_DB_Transmit+0x4fa>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021f6:	4413      	add	r3, r2
 80021f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	011a      	lsls	r2, r3, #4
 8002202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002206:	4413      	add	r3, r2
 8002208:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800220c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002210:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800221c:	b29a      	uxth	r2, r3
 800221e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002222:	801a      	strh	r2, [r3, #0]
 8002224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002234:	b29a      	uxth	r2, r3
 8002236:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800223a:	801a      	strh	r2, [r3, #0]
 800223c:	e017      	b.n	800226e <HAL_PCD_EP_DB_Transmit+0x52a>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	785b      	ldrb	r3, [r3, #1]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d113      	bne.n	800226e <HAL_PCD_EP_DB_Transmit+0x52a>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002254:	4413      	add	r3, r2
 8002256:	67bb      	str	r3, [r7, #120]	; 0x78
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	011a      	lsls	r2, r3, #4
 800225e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002260:	4413      	add	r3, r2
 8002262:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002266:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002268:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800226a:	2200      	movs	r2, #0
 800226c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	4619      	mov	r1, r3
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f005 fe4a 	bl	8007f0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 8104 	bne.w	800248e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800229c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	441a      	add	r2, r3
 80022b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80022b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	8013      	strh	r3, [r2, #0]
 80022ca:	e0e0      	b.n	800248e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d121      	bne.n	800231a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	441a      	add	r2, r3
 8002302:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800230a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800230e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002316:	b29b      	uxth	r3, r3
 8002318:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002320:	2b01      	cmp	r3, #1
 8002322:	f040 80b4 	bne.w	800248e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800232e:	441a      	add	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	69da      	ldr	r2, [r3, #28]
 8002338:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800233c:	441a      	add	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	6a1a      	ldr	r2, [r3, #32]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	429a      	cmp	r2, r3
 800234c:	d309      	bcc.n	8002362 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	6a1a      	ldr	r2, [r3, #32]
 8002358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800235a:	1ad2      	subs	r2, r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	621a      	str	r2, [r3, #32]
 8002360:	e015      	b.n	800238e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d107      	bne.n	800237a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800236a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800236e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002378:	e009      	b.n	800238e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2200      	movs	r2, #0
 8002384:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	667b      	str	r3, [r7, #100]	; 0x64
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	785b      	ldrb	r3, [r3, #1]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d155      	bne.n	8002448 <HAL_PCD_EP_DB_Transmit+0x704>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b0:	4413      	add	r3, r2
 80023b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	011a      	lsls	r2, r3, #4
 80023ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023bc:	4413      	add	r3, r2
 80023be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80023c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d112      	bne.n	80023f0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80023ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023d8:	801a      	strh	r2, [r3, #0]
 80023da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ec:	801a      	strh	r2, [r3, #0]
 80023ee:	e044      	b.n	800247a <HAL_PCD_EP_DB_Transmit+0x736>
 80023f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f2:	2b3e      	cmp	r3, #62	; 0x3e
 80023f4:	d811      	bhi.n	800241a <HAL_PCD_EP_DB_Transmit+0x6d6>
 80023f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	657b      	str	r3, [r7, #84]	; 0x54
 80023fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002408:	3301      	adds	r3, #1
 800240a:	657b      	str	r3, [r7, #84]	; 0x54
 800240c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800240e:	b29b      	uxth	r3, r3
 8002410:	029b      	lsls	r3, r3, #10
 8002412:	b29a      	uxth	r2, r3
 8002414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002416:	801a      	strh	r2, [r3, #0]
 8002418:	e02f      	b.n	800247a <HAL_PCD_EP_DB_Transmit+0x736>
 800241a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	657b      	str	r3, [r7, #84]	; 0x54
 8002420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800242a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242c:	3b01      	subs	r3, #1
 800242e:	657b      	str	r3, [r7, #84]	; 0x54
 8002430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002432:	b29b      	uxth	r3, r3
 8002434:	029b      	lsls	r3, r3, #10
 8002436:	b29b      	uxth	r3, r3
 8002438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800243c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002440:	b29a      	uxth	r2, r3
 8002442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002444:	801a      	strh	r2, [r3, #0]
 8002446:	e018      	b.n	800247a <HAL_PCD_EP_DB_Transmit+0x736>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	785b      	ldrb	r3, [r3, #1]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d114      	bne.n	800247a <HAL_PCD_EP_DB_Transmit+0x736>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002458:	b29b      	uxth	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800245e:	4413      	add	r3, r2
 8002460:	667b      	str	r3, [r7, #100]	; 0x64
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	011a      	lsls	r2, r3, #4
 8002468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800246a:	4413      	add	r3, r2
 800246c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002470:	663b      	str	r3, [r7, #96]	; 0x60
 8002472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002474:	b29a      	uxth	r2, r3
 8002476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002478:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	6959      	ldr	r1, [r3, #20]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	895a      	ldrh	r2, [r3, #10]
 8002486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002488:	b29b      	uxth	r3, r3
 800248a:	f003 fe60 	bl	800614e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024a8:	823b      	strh	r3, [r7, #16]
 80024aa:	8a3b      	ldrh	r3, [r7, #16]
 80024ac:	f083 0310 	eor.w	r3, r3, #16
 80024b0:	823b      	strh	r3, [r7, #16]
 80024b2:	8a3b      	ldrh	r3, [r7, #16]
 80024b4:	f083 0320 	eor.w	r3, r3, #32
 80024b8:	823b      	strh	r3, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	441a      	add	r2, r3
 80024c8:	8a3b      	ldrh	r3, [r7, #16]
 80024ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024da:	b29b      	uxth	r3, r3
 80024dc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3788      	adds	r7, #136	; 0x88
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	817b      	strh	r3, [r7, #10]
 80024f6:	4613      	mov	r3, r2
 80024f8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80024fa:	897b      	ldrh	r3, [r7, #10]
 80024fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002506:	897b      	ldrh	r3, [r7, #10]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4413      	add	r3, r2
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	e009      	b.n	8002532 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800251e:	897a      	ldrh	r2, [r7, #10]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4413      	add	r3, r2
 8002530:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002532:	893b      	ldrh	r3, [r7, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2200      	movs	r2, #0
 800253c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	b29a      	uxth	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	80da      	strh	r2, [r3, #6]
 8002546:	e00b      	b.n	8002560 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2201      	movs	r2, #1
 800254c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	b29a      	uxth	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	b29a      	uxth	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002576:	af00      	add	r7, sp, #0
 8002578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002580:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002586:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d102      	bne.n	8002596 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	f001 b823 	b.w	80035dc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 817d 	beq.w	80028a6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025ac:	4bbc      	ldr	r3, [pc, #752]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d00c      	beq.n	80025d2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025b8:	4bb9      	ldr	r3, [pc, #740]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d15c      	bne.n	800267e <HAL_RCC_OscConfig+0x10e>
 80025c4:	4bb6      	ldr	r3, [pc, #728]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d0:	d155      	bne.n	800267e <HAL_RCC_OscConfig+0x10e>
 80025d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025e6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	095b      	lsrs	r3, r3, #5
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d102      	bne.n	8002604 <HAL_RCC_OscConfig+0x94>
 80025fe:	4ba8      	ldr	r3, [pc, #672]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	e015      	b.n	8002630 <HAL_RCC_OscConfig+0xc0>
 8002604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002608:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002620:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800262c:	4b9c      	ldr	r3, [pc, #624]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002634:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002638:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800263c:	fa92 f2a2 	rbit	r2, r2
 8002640:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002644:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002648:	fab2 f282 	clz	r2, r2
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	f042 0220 	orr.w	r2, r2, #32
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f002 021f 	and.w	r2, r2, #31
 8002658:	2101      	movs	r1, #1
 800265a:	fa01 f202 	lsl.w	r2, r1, r2
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 811f 	beq.w	80028a4 <HAL_RCC_OscConfig+0x334>
 8002666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 8116 	bne.w	80028a4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	f000 bfaf 	b.w	80035dc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x12e>
 8002690:	4b83      	ldr	r3, [pc, #524]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a82      	ldr	r2, [pc, #520]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	e036      	b.n	800270c <HAL_RCC_OscConfig+0x19c>
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x158>
 80026ae:	4b7c      	ldr	r3, [pc, #496]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a7b      	ldr	r2, [pc, #492]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 80026b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b79      	ldr	r3, [pc, #484]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a78      	ldr	r2, [pc, #480]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 80026c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e021      	b.n	800270c <HAL_RCC_OscConfig+0x19c>
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x184>
 80026da:	4b71      	ldr	r3, [pc, #452]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a70      	ldr	r2, [pc, #448]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 80026e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b6e      	ldr	r3, [pc, #440]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6d      	ldr	r2, [pc, #436]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0x19c>
 80026f4:	4b6a      	ldr	r3, [pc, #424]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a69      	ldr	r2, [pc, #420]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b67      	ldr	r3, [pc, #412]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a66      	ldr	r2, [pc, #408]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800270c:	4b64      	ldr	r3, [pc, #400]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	f023 020f 	bic.w	r2, r3, #15
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	495f      	ldr	r1, [pc, #380]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 8002722:	4313      	orrs	r3, r2
 8002724:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d059      	beq.n	80027ea <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7fd ff41 	bl	80005bc <HAL_GetTick>
 800273a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	e00a      	b.n	8002756 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002740:	f7fd ff3c 	bl	80005bc <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b64      	cmp	r3, #100	; 0x64
 800274e:	d902      	bls.n	8002756 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	f000 bf43 	b.w	80035dc <HAL_RCC_OscConfig+0x106c>
 8002756:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800275a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800276a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d102      	bne.n	8002788 <HAL_RCC_OscConfig+0x218>
 8002782:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	e015      	b.n	80027b4 <HAL_RCC_OscConfig+0x244>
 8002788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800279c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027a0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027a4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80027a8:	fa93 f3a3 	rbit	r3, r3
 80027ac:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80027b0:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027b8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80027bc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027c0:	fa92 f2a2 	rbit	r2, r2
 80027c4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80027c8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80027cc:	fab2 f282 	clz	r2, r2
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	f042 0220 	orr.w	r2, r2, #32
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	f002 021f 	and.w	r2, r2, #31
 80027dc:	2101      	movs	r1, #1
 80027de:	fa01 f202 	lsl.w	r2, r1, r2
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ab      	beq.n	8002740 <HAL_RCC_OscConfig+0x1d0>
 80027e8:	e05d      	b.n	80028a6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ea:	f7fd fee7 	bl	80005bc <HAL_GetTick>
 80027ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f2:	e00a      	b.n	800280a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f4:	f7fd fee2 	bl	80005bc <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b64      	cmp	r3, #100	; 0x64
 8002802:	d902      	bls.n	800280a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	f000 bee9 	b.w	80035dc <HAL_RCC_OscConfig+0x106c>
 800280a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800280e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800281e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d102      	bne.n	800283c <HAL_RCC_OscConfig+0x2cc>
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	e015      	b.n	8002868 <HAL_RCC_OscConfig+0x2f8>
 800283c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002840:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002854:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002858:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002864:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <HAL_RCC_OscConfig+0x330>)
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800286c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002870:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002874:	fa92 f2a2 	rbit	r2, r2
 8002878:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800287c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002880:	fab2 f282 	clz	r2, r2
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f042 0220 	orr.w	r2, r2, #32
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	f002 021f 	and.w	r2, r2, #31
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f202 	lsl.w	r2, r1, r2
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ab      	bne.n	80027f4 <HAL_RCC_OscConfig+0x284>
 800289c:	e003      	b.n	80028a6 <HAL_RCC_OscConfig+0x336>
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 817d 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028bc:	4ba6      	ldr	r3, [pc, #664]	; (8002b58 <HAL_RCC_OscConfig+0x5e8>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00b      	beq.n	80028e0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028c8:	4ba3      	ldr	r3, [pc, #652]	; (8002b58 <HAL_RCC_OscConfig+0x5e8>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d172      	bne.n	80029ba <HAL_RCC_OscConfig+0x44a>
 80028d4:	4ba0      	ldr	r3, [pc, #640]	; (8002b58 <HAL_RCC_OscConfig+0x5e8>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d16c      	bne.n	80029ba <HAL_RCC_OscConfig+0x44a>
 80028e0:	2302      	movs	r3, #2
 80028e2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80028f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d102      	bne.n	8002910 <HAL_RCC_OscConfig+0x3a0>
 800290a:	4b93      	ldr	r3, [pc, #588]	; (8002b58 <HAL_RCC_OscConfig+0x5e8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	e013      	b.n	8002938 <HAL_RCC_OscConfig+0x3c8>
 8002910:	2302      	movs	r3, #2
 8002912:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002922:	2302      	movs	r3, #2
 8002924:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002928:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002934:	4b88      	ldr	r3, [pc, #544]	; (8002b58 <HAL_RCC_OscConfig+0x5e8>)
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	2202      	movs	r2, #2
 800293a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800293e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002942:	fa92 f2a2 	rbit	r2, r2
 8002946:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800294a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800294e:	fab2 f282 	clz	r2, r2
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	f042 0220 	orr.w	r2, r2, #32
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	f002 021f 	and.w	r2, r2, #31
 800295e:	2101      	movs	r1, #1
 8002960:	fa01 f202 	lsl.w	r2, r1, r2
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_RCC_OscConfig+0x410>
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d002      	beq.n	8002980 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	f000 be2e 	b.w	80035dc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002980:	4b75      	ldr	r3, [pc, #468]	; (8002b58 <HAL_RCC_OscConfig+0x5e8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	21f8      	movs	r1, #248	; 0xf8
 8002996:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800299e:	fa91 f1a1 	rbit	r1, r1
 80029a2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80029a6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80029aa:	fab1 f181 	clz	r1, r1
 80029ae:	b2c9      	uxtb	r1, r1
 80029b0:	408b      	lsls	r3, r1
 80029b2:	4969      	ldr	r1, [pc, #420]	; (8002b58 <HAL_RCC_OscConfig+0x5e8>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b8:	e0fd      	b.n	8002bb6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8088 	beq.w	8002adc <HAL_RCC_OscConfig+0x56c>
 80029cc:	2301      	movs	r3, #1
 80029ce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80029de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	461a      	mov	r2, r3
 80029f4:	2301      	movs	r3, #1
 80029f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fd fde0 	bl	80005bc <HAL_GetTick>
 80029fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a02:	f7fd fddb 	bl	80005bc <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d902      	bls.n	8002a18 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	f000 bde2 	b.w	80035dc <HAL_RCC_OscConfig+0x106c>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002a2a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d102      	bne.n	8002a48 <HAL_RCC_OscConfig+0x4d8>
 8002a42:	4b45      	ldr	r3, [pc, #276]	; (8002b58 <HAL_RCC_OscConfig+0x5e8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	e013      	b.n	8002a70 <HAL_RCC_OscConfig+0x500>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a60:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002a6c:	4b3a      	ldr	r3, [pc, #232]	; (8002b58 <HAL_RCC_OscConfig+0x5e8>)
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2202      	movs	r2, #2
 8002a72:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a76:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a82:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a86:	fab2 f282 	clz	r2, r2
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f042 0220 	orr.w	r2, r2, #32
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	f002 021f 	and.w	r2, r2, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0af      	beq.n	8002a02 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	4b2d      	ldr	r3, [pc, #180]	; (8002b58 <HAL_RCC_OscConfig+0x5e8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	21f8      	movs	r1, #248	; 0xf8
 8002ab8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ac0:	fa91 f1a1 	rbit	r1, r1
 8002ac4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ac8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002acc:	fab1 f181 	clz	r1, r1
 8002ad0:	b2c9      	uxtb	r1, r1
 8002ad2:	408b      	lsls	r3, r1
 8002ad4:	4920      	ldr	r1, [pc, #128]	; (8002b58 <HAL_RCC_OscConfig+0x5e8>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
 8002ada:	e06c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x646>
 8002adc:	2301      	movs	r3, #1
 8002ade:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002aee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002afc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	461a      	mov	r2, r3
 8002b04:	2300      	movs	r3, #0
 8002b06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fd fd58 	bl	80005bc <HAL_GetTick>
 8002b0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b12:	f7fd fd53 	bl	80005bc <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d902      	bls.n	8002b28 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	f000 bd5a 	b.w	80035dc <HAL_RCC_OscConfig+0x106c>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d104      	bne.n	8002b5c <HAL_RCC_OscConfig+0x5ec>
 8002b52:	4b01      	ldr	r3, [pc, #4]	; (8002b58 <HAL_RCC_OscConfig+0x5e8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	e015      	b.n	8002b84 <HAL_RCC_OscConfig+0x614>
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b80:	4bc8      	ldr	r3, [pc, #800]	; (8002ea4 <HAL_RCC_OscConfig+0x934>)
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	2202      	movs	r2, #2
 8002b86:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b8a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b8e:	fa92 f2a2 	rbit	r2, r2
 8002b92:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b96:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b9a:	fab2 f282 	clz	r2, r2
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f042 0220 	orr.w	r2, r2, #32
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	f002 021f 	and.w	r2, r2, #31
 8002baa:	2101      	movs	r1, #1
 8002bac:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1ad      	bne.n	8002b12 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8110 	beq.w	8002dec <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d079      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x760>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002be6:	fa93 f3a3 	rbit	r3, r3
 8002bea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4bab      	ldr	r3, [pc, #684]	; (8002ea8 <HAL_RCC_OscConfig+0x938>)
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	461a      	mov	r2, r3
 8002c02:	2301      	movs	r3, #1
 8002c04:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7fd fcd9 	bl	80005bc <HAL_GetTick>
 8002c0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c10:	f7fd fcd4 	bl	80005bc <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d902      	bls.n	8002c26 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	f000 bcdb 	b.w	80035dc <HAL_RCC_OscConfig+0x106c>
 8002c26:	2302      	movs	r3, #2
 8002c28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c40:	2202      	movs	r2, #2
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c48:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	fa93 f2a3 	rbit	r2, r3
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c64:	2202      	movs	r2, #2
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fa93 f2a3 	rbit	r2, r3
 8002c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c7e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c80:	4b88      	ldr	r3, [pc, #544]	; (8002ea4 <HAL_RCC_OscConfig+0x934>)
 8002c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	6019      	str	r1, [r3, #0]
 8002c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	fa93 f1a3 	rbit	r1, r3
 8002c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ca6:	6019      	str	r1, [r3, #0]
  return result;
 8002ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0a0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x6a0>
 8002cce:	e08d      	b.n	8002dec <HAL_RCC_OscConfig+0x87c>
 8002cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	fa93 f2a3 	rbit	r2, r3
 8002cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cf2:	601a      	str	r2, [r3, #0]
  return result;
 8002cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cfc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b68      	ldr	r3, [pc, #416]	; (8002ea8 <HAL_RCC_OscConfig+0x938>)
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2300      	movs	r3, #0
 8002d10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d12:	f7fd fc53 	bl	80005bc <HAL_GetTick>
 8002d16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d1c:	f7fd fc4e 	bl	80005bc <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d902      	bls.n	8002d32 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	f000 bc55 	b.w	80035dc <HAL_RCC_OscConfig+0x106c>
 8002d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d42:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	fa93 f2a3 	rbit	r2, r3
 8002d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d50:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d5e:	2202      	movs	r2, #2
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	fa93 f2a3 	rbit	r2, r3
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d82:	2202      	movs	r2, #2
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	fa93 f2a3 	rbit	r2, r3
 8002d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <HAL_RCC_OscConfig+0x934>)
 8002da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002daa:	2102      	movs	r1, #2
 8002dac:	6019      	str	r1, [r3, #0]
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	fa93 f1a3 	rbit	r1, r3
 8002dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002dc4:	6019      	str	r1, [r3, #0]
  return result;
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	2101      	movs	r1, #1
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d197      	bne.n	8002d1c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 81a1 	beq.w	8003144 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e08:	4b26      	ldr	r3, [pc, #152]	; (8002ea4 <HAL_RCC_OscConfig+0x934>)
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d116      	bne.n	8002e42 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e14:	4b23      	ldr	r3, [pc, #140]	; (8002ea4 <HAL_RCC_OscConfig+0x934>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4a22      	ldr	r2, [pc, #136]	; (8002ea4 <HAL_RCC_OscConfig+0x934>)
 8002e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	61d3      	str	r3, [r2, #28]
 8002e20:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_RCC_OscConfig+0x934>)
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e36:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e3a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <HAL_RCC_OscConfig+0x93c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d11a      	bne.n	8002e84 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e4e:	4b17      	ldr	r3, [pc, #92]	; (8002eac <HAL_RCC_OscConfig+0x93c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a16      	ldr	r2, [pc, #88]	; (8002eac <HAL_RCC_OscConfig+0x93c>)
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5a:	f7fd fbaf 	bl	80005bc <HAL_GetTick>
 8002e5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e62:	e009      	b.n	8002e78 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e64:	f7fd fbaa 	bl	80005bc <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b64      	cmp	r3, #100	; 0x64
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e3b1      	b.n	80035dc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <HAL_RCC_OscConfig+0x93c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ef      	beq.n	8002e64 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d10d      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x940>
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <HAL_RCC_OscConfig+0x934>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4a02      	ldr	r2, [pc, #8]	; (8002ea4 <HAL_RCC_OscConfig+0x934>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	6213      	str	r3, [r2, #32]
 8002ea0:	e03c      	b.n	8002f1c <HAL_RCC_OscConfig+0x9ac>
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	10908120 	.word	0x10908120
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCC_OscConfig+0x96a>
 8002ec0:	4bc1      	ldr	r3, [pc, #772]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4ac0      	ldr	r2, [pc, #768]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	4bbe      	ldr	r3, [pc, #760]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4abd      	ldr	r2, [pc, #756]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8002ed2:	f023 0304 	bic.w	r3, r3, #4
 8002ed6:	6213      	str	r3, [r2, #32]
 8002ed8:	e020      	b.n	8002f1c <HAL_RCC_OscConfig+0x9ac>
 8002eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b05      	cmp	r3, #5
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x994>
 8002eea:	4bb7      	ldr	r3, [pc, #732]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4ab6      	ldr	r2, [pc, #728]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	6213      	str	r3, [r2, #32]
 8002ef6:	4bb4      	ldr	r3, [pc, #720]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4ab3      	ldr	r2, [pc, #716]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6213      	str	r3, [r2, #32]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0x9ac>
 8002f04:	4bb0      	ldr	r3, [pc, #704]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	4aaf      	ldr	r2, [pc, #700]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	6213      	str	r3, [r2, #32]
 8002f10:	4bad      	ldr	r3, [pc, #692]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4aac      	ldr	r2, [pc, #688]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8002f16:	f023 0304 	bic.w	r3, r3, #4
 8002f1a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 8081 	beq.w	8003030 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fd fb45 	bl	80005bc <HAL_GetTick>
 8002f32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	e00b      	b.n	8002f50 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7fd fb40 	bl	80005bc <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e345      	b.n	80035dc <HAL_RCC_OscConfig+0x106c>
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f58:	2202      	movs	r2, #2
 8002f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f60:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	fa93 f2a3 	rbit	r2, r3
 8002f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	fa93 f2a3 	rbit	r2, r3
 8002f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f92:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f96:	601a      	str	r2, [r3, #0]
  return result;
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002fa0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d102      	bne.n	8002fbc <HAL_RCC_OscConfig+0xa4c>
 8002fb6:	4b84      	ldr	r3, [pc, #528]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	e013      	b.n	8002fe4 <HAL_RCC_OscConfig+0xa74>
 8002fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fcc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	fa93 f2a3 	rbit	r2, r3
 8002fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fda:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	4b79      	ldr	r3, [pc, #484]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002fec:	2102      	movs	r1, #2
 8002fee:	6011      	str	r1, [r2, #0]
 8002ff0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	fa92 f1a2 	rbit	r1, r2
 8002ffe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003002:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003006:	6011      	str	r1, [r2, #0]
  return result;
 8003008:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800300c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	fab2 f282 	clz	r2, r2
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	f002 021f 	and.w	r2, r2, #31
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d084      	beq.n	8002f38 <HAL_RCC_OscConfig+0x9c8>
 800302e:	e07f      	b.n	8003130 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003030:	f7fd fac4 	bl	80005bc <HAL_GetTick>
 8003034:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003038:	e00b      	b.n	8003052 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fd fabf 	bl	80005bc <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e2c4      	b.n	80035dc <HAL_RCC_OscConfig+0x106c>
 8003052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003056:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800305a:	2202      	movs	r2, #2
 800305c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003062:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	fa93 f2a3 	rbit	r2, r3
 800306c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003070:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800307e:	2202      	movs	r2, #2
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003086:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	fa93 f2a3 	rbit	r2, r3
 8003090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003094:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003098:	601a      	str	r2, [r3, #0]
  return result;
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f043 0302 	orr.w	r3, r3, #2
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d102      	bne.n	80030be <HAL_RCC_OscConfig+0xb4e>
 80030b8:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	e013      	b.n	80030e6 <HAL_RCC_OscConfig+0xb76>
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030c6:	2202      	movs	r2, #2
 80030c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	fa93 f2a3 	rbit	r2, r3
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030ee:	2102      	movs	r1, #2
 80030f0:	6011      	str	r1, [r2, #0]
 80030f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	fa92 f1a2 	rbit	r1, r2
 8003100:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003104:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003108:	6011      	str	r1, [r2, #0]
  return result;
 800310a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800310e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f002 021f 	and.w	r2, r2, #31
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d184      	bne.n	800303a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003130:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003134:	2b01      	cmp	r3, #1
 8003136:	d105      	bne.n	8003144 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003138:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 800313e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003142:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003148:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8242 	beq.w	80035da <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003156:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <HAL_RCC_OscConfig+0xc58>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b08      	cmp	r3, #8
 8003160:	f000 8213 	beq.w	800358a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	2b02      	cmp	r3, #2
 8003172:	f040 8162 	bne.w	800343a <HAL_RCC_OscConfig+0xeca>
 8003176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800317e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003188:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	fa93 f2a3 	rbit	r2, r3
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800319a:	601a      	str	r2, [r3, #0]
  return result;
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	461a      	mov	r2, r3
 80031b8:	2300      	movs	r3, #0
 80031ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fd f9fe 	bl	80005bc <HAL_GetTick>
 80031c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c4:	e00c      	b.n	80031e0 <HAL_RCC_OscConfig+0xc70>
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fd f9f6 	bl	80005bc <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1fd      	b.n	80035dc <HAL_RCC_OscConfig+0x106c>
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	fa93 f2a3 	rbit	r2, r3
 80031fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003200:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003204:	601a      	str	r2, [r3, #0]
  return result;
 8003206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800320e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d102      	bne.n	800322a <HAL_RCC_OscConfig+0xcba>
 8003224:	4bb0      	ldr	r3, [pc, #704]	; (80034e8 <HAL_RCC_OscConfig+0xf78>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	e027      	b.n	800327a <HAL_RCC_OscConfig+0xd0a>
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003232:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	fa93 f2a3 	rbit	r2, r3
 8003246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003262:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	fa93 f2a3 	rbit	r2, r3
 800326c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003270:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	4b9c      	ldr	r3, [pc, #624]	; (80034e8 <HAL_RCC_OscConfig+0xf78>)
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800327e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003282:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003286:	6011      	str	r1, [r2, #0]
 8003288:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800328c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	fa92 f1a2 	rbit	r1, r2
 8003296:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800329a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800329e:	6011      	str	r1, [r2, #0]
  return result;
 80032a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032a4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	fab2 f282 	clz	r2, r2
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f042 0220 	orr.w	r2, r2, #32
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	f002 021f 	and.w	r2, r2, #31
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f202 	lsl.w	r2, r1, r2
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d182      	bne.n	80031cc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c6:	4b88      	ldr	r3, [pc, #544]	; (80034e8 <HAL_RCC_OscConfig+0xf78>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	430b      	orrs	r3, r1
 80032e8:	497f      	ldr	r1, [pc, #508]	; (80034e8 <HAL_RCC_OscConfig+0xf78>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
 80032ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80032f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003300:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	fa93 f2a3 	rbit	r2, r3
 800330a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003312:	601a      	str	r2, [r3, #0]
  return result;
 8003314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003318:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800331c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800331e:	fab3 f383 	clz	r3, r3
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003328:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	461a      	mov	r2, r3
 8003330:	2301      	movs	r3, #1
 8003332:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7fd f942 	bl	80005bc <HAL_GetTick>
 8003338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800333c:	e009      	b.n	8003352 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333e:	f7fd f93d 	bl	80005bc <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e144      	b.n	80035dc <HAL_RCC_OscConfig+0x106c>
 8003352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003356:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800335a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800335e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003364:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	fa93 f2a3 	rbit	r2, r3
 800336e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003372:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003376:	601a      	str	r2, [r3, #0]
  return result;
 8003378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003380:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d102      	bne.n	800339c <HAL_RCC_OscConfig+0xe2c>
 8003396:	4b54      	ldr	r3, [pc, #336]	; (80034e8 <HAL_RCC_OscConfig+0xf78>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	e027      	b.n	80033ec <HAL_RCC_OscConfig+0xe7c>
 800339c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f2a3 	rbit	r2, r3
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	fa93 f2a3 	rbit	r2, r3
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <HAL_RCC_OscConfig+0xf78>)
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033f0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80033f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033f8:	6011      	str	r1, [r2, #0]
 80033fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033fe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	fa92 f1a2 	rbit	r1, r2
 8003408:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800340c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003410:	6011      	str	r1, [r2, #0]
  return result;
 8003412:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003416:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	fab2 f282 	clz	r2, r2
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	f042 0220 	orr.w	r2, r2, #32
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	f002 021f 	and.w	r2, r2, #31
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f202 	lsl.w	r2, r1, r2
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d082      	beq.n	800333e <HAL_RCC_OscConfig+0xdce>
 8003438:	e0cf      	b.n	80035da <HAL_RCC_OscConfig+0x106a>
 800343a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003442:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fa93 f2a3 	rbit	r2, r3
 8003456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800345e:	601a      	str	r2, [r3, #0]
  return result;
 8003460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003464:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003468:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003474:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	461a      	mov	r2, r3
 800347c:	2300      	movs	r3, #0
 800347e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7fd f89c 	bl	80005bc <HAL_GetTick>
 8003484:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003488:	e009      	b.n	800349e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348a:	f7fd f897 	bl	80005bc <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e09e      	b.n	80035dc <HAL_RCC_OscConfig+0x106c>
 800349e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	fa93 f2a3 	rbit	r2, r3
 80034ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034be:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034c2:	601a      	str	r2, [r3, #0]
  return result;
 80034c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	095b      	lsrs	r3, r3, #5
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d104      	bne.n	80034ec <HAL_RCC_OscConfig+0xf7c>
 80034e2:	4b01      	ldr	r3, [pc, #4]	; (80034e8 <HAL_RCC_OscConfig+0xf78>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	e029      	b.n	800353c <HAL_RCC_OscConfig+0xfcc>
 80034e8:	40021000 	.word	0x40021000
 80034ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003516:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800351a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003524:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	fa93 f2a3 	rbit	r2, r3
 800352e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003532:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <HAL_RCC_OscConfig+0x1078>)
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003540:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003544:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003548:	6011      	str	r1, [r2, #0]
 800354a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800354e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	fa92 f1a2 	rbit	r1, r2
 8003558:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800355c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003560:	6011      	str	r1, [r2, #0]
  return result;
 8003562:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003566:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	fab2 f282 	clz	r2, r2
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	f042 0220 	orr.w	r2, r2, #32
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	f002 021f 	and.w	r2, r2, #31
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f202 	lsl.w	r2, r1, r2
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d180      	bne.n	800348a <HAL_RCC_OscConfig+0xf1a>
 8003588:	e027      	b.n	80035da <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800358a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e01e      	b.n	80035dc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_RCC_OscConfig+0x1078>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035aa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d10b      	bne.n	80035d6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80035be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80035c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000

080035ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b09e      	sub	sp, #120	; 0x78
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e162      	b.n	80038ca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003604:	4b90      	ldr	r3, [pc, #576]	; (8003848 <HAL_RCC_ClockConfig+0x25c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d910      	bls.n	8003634 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b8d      	ldr	r3, [pc, #564]	; (8003848 <HAL_RCC_ClockConfig+0x25c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 0207 	bic.w	r2, r3, #7
 800361a:	498b      	ldr	r1, [pc, #556]	; (8003848 <HAL_RCC_ClockConfig+0x25c>)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b89      	ldr	r3, [pc, #548]	; (8003848 <HAL_RCC_ClockConfig+0x25c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e14a      	b.n	80038ca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003640:	4b82      	ldr	r3, [pc, #520]	; (800384c <HAL_RCC_ClockConfig+0x260>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	497f      	ldr	r1, [pc, #508]	; (800384c <HAL_RCC_ClockConfig+0x260>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80dc 	beq.w	8003818 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d13c      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xf6>
 8003668:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800366c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d102      	bne.n	8003692 <HAL_RCC_ClockConfig+0xa6>
 800368c:	4b6f      	ldr	r3, [pc, #444]	; (800384c <HAL_RCC_ClockConfig+0x260>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	e00f      	b.n	80036b2 <HAL_RCC_ClockConfig+0xc6>
 8003692:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003696:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	667b      	str	r3, [r7, #100]	; 0x64
 80036a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036a4:	663b      	str	r3, [r7, #96]	; 0x60
 80036a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036ae:	4b67      	ldr	r3, [pc, #412]	; (800384c <HAL_RCC_ClockConfig+0x260>)
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80036b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036ba:	fa92 f2a2 	rbit	r2, r2
 80036be:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80036c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036c2:	fab2 f282 	clz	r2, r2
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	f042 0220 	orr.w	r2, r2, #32
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	f002 021f 	and.w	r2, r2, #31
 80036d2:	2101      	movs	r1, #1
 80036d4:	fa01 f202 	lsl.w	r2, r1, r2
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d17b      	bne.n	80037d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0f3      	b.n	80038ca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d13c      	bne.n	8003764 <HAL_RCC_ClockConfig+0x178>
 80036ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d102      	bne.n	8003714 <HAL_RCC_ClockConfig+0x128>
 800370e:	4b4f      	ldr	r3, [pc, #316]	; (800384c <HAL_RCC_ClockConfig+0x260>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	e00f      	b.n	8003734 <HAL_RCC_ClockConfig+0x148>
 8003714:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003718:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	647b      	str	r3, [r7, #68]	; 0x44
 8003722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003726:	643b      	str	r3, [r7, #64]	; 0x40
 8003728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003730:	4b46      	ldr	r3, [pc, #280]	; (800384c <HAL_RCC_ClockConfig+0x260>)
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003738:	63ba      	str	r2, [r7, #56]	; 0x38
 800373a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800373c:	fa92 f2a2 	rbit	r2, r2
 8003740:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003744:	fab2 f282 	clz	r2, r2
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	f042 0220 	orr.w	r2, r2, #32
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	f002 021f 	and.w	r2, r2, #31
 8003754:	2101      	movs	r1, #1
 8003756:	fa01 f202 	lsl.w	r2, r1, r2
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d13a      	bne.n	80037d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0b2      	b.n	80038ca <HAL_RCC_ClockConfig+0x2de>
 8003764:	2302      	movs	r3, #2
 8003766:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d102      	bne.n	800378c <HAL_RCC_ClockConfig+0x1a0>
 8003786:	4b31      	ldr	r3, [pc, #196]	; (800384c <HAL_RCC_ClockConfig+0x260>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	e00d      	b.n	80037a8 <HAL_RCC_ClockConfig+0x1bc>
 800378c:	2302      	movs	r3, #2
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
 8003798:	2302      	movs	r3, #2
 800379a:	623b      	str	r3, [r7, #32]
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	4b29      	ldr	r3, [pc, #164]	; (800384c <HAL_RCC_ClockConfig+0x260>)
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	2202      	movs	r2, #2
 80037aa:	61ba      	str	r2, [r7, #24]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	fa92 f2a2 	rbit	r2, r2
 80037b2:	617a      	str	r2, [r7, #20]
  return result;
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	fab2 f282 	clz	r2, r2
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f042 0220 	orr.w	r2, r2, #32
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	f002 021f 	and.w	r2, r2, #31
 80037c6:	2101      	movs	r1, #1
 80037c8:	fa01 f202 	lsl.w	r2, r1, r2
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e079      	b.n	80038ca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d6:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_RCC_ClockConfig+0x260>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f023 0203 	bic.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	491a      	ldr	r1, [pc, #104]	; (800384c <HAL_RCC_ClockConfig+0x260>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e8:	f7fc fee8 	bl	80005bc <HAL_GetTick>
 80037ec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f0:	f7fc fee4 	bl	80005bc <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e061      	b.n	80038ca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <HAL_RCC_ClockConfig+0x260>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 020c 	and.w	r2, r3, #12
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	429a      	cmp	r2, r3
 8003816:	d1eb      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_ClockConfig+0x25c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d214      	bcs.n	8003850 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <HAL_RCC_ClockConfig+0x25c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 0207 	bic.w	r2, r3, #7
 800382e:	4906      	ldr	r1, [pc, #24]	; (8003848 <HAL_RCC_ClockConfig+0x25c>)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b04      	ldr	r3, [pc, #16]	; (8003848 <HAL_RCC_ClockConfig+0x25c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e040      	b.n	80038ca <HAL_RCC_ClockConfig+0x2de>
 8003848:	40022000 	.word	0x40022000
 800384c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <HAL_RCC_ClockConfig+0x2e8>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	491a      	ldr	r1, [pc, #104]	; (80038d4 <HAL_RCC_ClockConfig+0x2e8>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800387a:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <HAL_RCC_ClockConfig+0x2e8>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4912      	ldr	r1, [pc, #72]	; (80038d4 <HAL_RCC_ClockConfig+0x2e8>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800388e:	f000 f829 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8003892:	4601      	mov	r1, r0
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <HAL_RCC_ClockConfig+0x2e8>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800389c:	22f0      	movs	r2, #240	; 0xf0
 800389e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	fa92 f2a2 	rbit	r2, r2
 80038a6:	60fa      	str	r2, [r7, #12]
  return result;
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	fab2 f282 	clz	r2, r2
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	40d3      	lsrs	r3, r2
 80038b2:	4a09      	ldr	r2, [pc, #36]	; (80038d8 <HAL_RCC_ClockConfig+0x2ec>)
 80038b4:	5cd3      	ldrb	r3, [r2, r3]
 80038b6:	fa21 f303 	lsr.w	r3, r1, r3
 80038ba:	4a08      	ldr	r2, [pc, #32]	; (80038dc <HAL_RCC_ClockConfig+0x2f0>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <HAL_RCC_ClockConfig+0x2f4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fc fe36 	bl	8000534 <HAL_InitTick>
  
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3778      	adds	r7, #120	; 0x78
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000
 80038d8:	080084a8 	.word	0x080084a8
 80038dc:	20000000 	.word	0x20000000
 80038e0:	20000004 	.word	0x20000004

080038e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b08b      	sub	sp, #44	; 0x2c
 80038e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	2300      	movs	r3, #0
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038fe:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b04      	cmp	r3, #4
 800390c:	d002      	beq.n	8003914 <HAL_RCC_GetSysClockFreq+0x30>
 800390e:	2b08      	cmp	r3, #8
 8003910:	d003      	beq.n	800391a <HAL_RCC_GetSysClockFreq+0x36>
 8003912:	e03c      	b.n	800398e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003914:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003916:	623b      	str	r3, [r7, #32]
      break;
 8003918:	e03c      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003920:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003924:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	fa92 f2a2 	rbit	r2, r2
 800392c:	607a      	str	r2, [r7, #4]
  return result;
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	fab2 f282 	clz	r2, r2
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	40d3      	lsrs	r3, r2
 8003938:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800393a:	5cd3      	ldrb	r3, [r2, r3]
 800393c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800393e:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	220f      	movs	r2, #15
 8003948:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	fa92 f2a2 	rbit	r2, r2
 8003950:	60fa      	str	r2, [r7, #12]
  return result;
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	fab2 f282 	clz	r2, r2
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	40d3      	lsrs	r3, r2
 800395c:	4a14      	ldr	r2, [pc, #80]	; (80039b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800395e:	5cd3      	ldrb	r3, [r2, r3]
 8003960:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800396c:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	fbb2 f2f3 	udiv	r2, r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
 800397c:	e004      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	4a0c      	ldr	r2, [pc, #48]	; (80039b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	623b      	str	r3, [r7, #32]
      break;
 800398c:	e002      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003990:	623b      	str	r3, [r7, #32]
      break;
 8003992:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003994:	6a3b      	ldr	r3, [r7, #32]
}
 8003996:	4618      	mov	r0, r3
 8003998:	372c      	adds	r7, #44	; 0x2c
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
 80039a8:	007a1200 	.word	0x007a1200
 80039ac:	080084b8 	.word	0x080084b8
 80039b0:	080084c8 	.word	0x080084c8
 80039b4:	003d0900 	.word	0x003d0900

080039b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b092      	sub	sp, #72	; 0x48
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 80d4 	beq.w	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039dc:	4b4e      	ldr	r3, [pc, #312]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10e      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e8:	4b4b      	ldr	r3, [pc, #300]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	4a4a      	ldr	r2, [pc, #296]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f2:	61d3      	str	r3, [r2, #28]
 80039f4:	4b48      	ldr	r3, [pc, #288]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	4b45      	ldr	r3, [pc, #276]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d118      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a12:	4b42      	ldr	r3, [pc, #264]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a41      	ldr	r2, [pc, #260]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1e:	f7fc fdcd 	bl	80005bc <HAL_GetTick>
 8003a22:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a24:	e008      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a26:	f7fc fdc9 	bl	80005bc <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b64      	cmp	r3, #100	; 0x64
 8003a32:	d901      	bls.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e14b      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a38:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a44:	4b34      	ldr	r3, [pc, #208]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8084 	beq.w	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d07c      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a64:	4b2c      	ldr	r3, [pc, #176]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2301      	movs	r3, #1
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ab6:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04b      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac6:	f7fc fd79 	bl	80005bc <HAL_GetTick>
 8003aca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fc fd75 	bl	80005bc <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0f5      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
 8003af0:	2302      	movs	r3, #2
 8003af2:	623b      	str	r3, [r7, #32]
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	61fb      	str	r3, [r7, #28]
  return result;
 8003afc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afe:	fab3 f383 	clz	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f043 0302 	orr.w	r3, r3, #2
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d108      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b12:	4b01      	ldr	r3, [pc, #4]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	e00d      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40007000 	.word	0x40007000
 8003b20:	10908100 	.word	0x10908100
 8003b24:	2302      	movs	r3, #2
 8003b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	fa93 f3a3 	rbit	r3, r3
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	4b69      	ldr	r3, [pc, #420]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	2202      	movs	r2, #2
 8003b36:	613a      	str	r2, [r7, #16]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	fa92 f2a2 	rbit	r2, r2
 8003b3e:	60fa      	str	r2, [r7, #12]
  return result;
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	fab2 f282 	clz	r2, r2
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	f002 021f 	and.w	r2, r2, #31
 8003b52:	2101      	movs	r1, #1
 8003b54:	fa01 f202 	lsl.w	r2, r1, r2
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0b7      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b5e:	4b5e      	ldr	r3, [pc, #376]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	495b      	ldr	r1, [pc, #364]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b78:	4b57      	ldr	r3, [pc, #348]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	4a56      	ldr	r2, [pc, #344]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b90:	4b51      	ldr	r3, [pc, #324]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	f023 0203 	bic.w	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	494e      	ldr	r1, [pc, #312]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bae:	4b4a      	ldr	r3, [pc, #296]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	4947      	ldr	r1, [pc, #284]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bcc:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	493f      	ldr	r1, [pc, #252]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d008      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bea:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	f023 0210 	bic.w	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	4938      	ldr	r1, [pc, #224]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003c08:	4b33      	ldr	r3, [pc, #204]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	4930      	ldr	r1, [pc, #192]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c26:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	f023 0220 	bic.w	r2, r3, #32
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	4929      	ldr	r1, [pc, #164]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c44:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	4921      	ldr	r1, [pc, #132]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c62:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	491a      	ldr	r1, [pc, #104]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c80:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8c:	4912      	ldr	r1, [pc, #72]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d008      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c9e:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	490b      	ldr	r1, [pc, #44]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	4903      	ldr	r1, [pc, #12]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3748      	adds	r7, #72	; 0x48
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000

08003cdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cf0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d12:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d16:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	4013      	ands	r3, r2
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d40:	b084      	sub	sp, #16
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	f107 0014 	add.w	r0, r7, #20
 8003d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	b004      	add	sp, #16
 8003d80:	4770      	bx	lr
	...

08003d84 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b09d      	sub	sp, #116	; 0x74
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003daa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	78db      	ldrb	r3, [r3, #3]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d81f      	bhi.n	8003df6 <USB_ActivateEndpoint+0x72>
 8003db6:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <USB_ActivateEndpoint+0x38>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003de9 	.word	0x08003de9
 8003dc4:	08003dff 	.word	0x08003dff
 8003dc8:	08003ddb 	.word	0x08003ddb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003dcc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003dd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003dd8:	e012      	b.n	8003e00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003dda:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003dde:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003de2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003de6:	e00b      	b.n	8003e00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003de8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003dec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003df0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003df4:	e004      	b.n	8003e00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003dfc:	e000      	b.n	8003e00 <USB_ActivateEndpoint+0x7c>
      break;
 8003dfe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	441a      	add	r2, r3
 8003e0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	b21b      	sxth	r3, r3
 8003e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	b21a      	sxth	r2, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b21b      	sxth	r3, r3
 8003e42:	4313      	orrs	r3, r2
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	441a      	add	r2, r3
 8003e54:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	7b1b      	ldrb	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f040 8149 	bne.w	8004108 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	785b      	ldrb	r3, [r3, #1]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 8084 	beq.w	8003f88 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	4413      	add	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	011a      	lsls	r2, r3, #4
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	88db      	ldrh	r3, [r3, #6]
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	827b      	strh	r3, [r7, #18]
 8003ec2:	8a7b      	ldrh	r3, [r7, #18]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01b      	beq.n	8003f04 <USB_ActivateEndpoint+0x180>
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee2:	823b      	strh	r3, [r7, #16]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	441a      	add	r2, r3
 8003eee:	8a3b      	ldrh	r3, [r7, #16]
 8003ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	78db      	ldrb	r3, [r3, #3]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d020      	beq.n	8003f4e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f22:	81bb      	strh	r3, [r7, #12]
 8003f24:	89bb      	ldrh	r3, [r7, #12]
 8003f26:	f083 0320 	eor.w	r3, r3, #32
 8003f2a:	81bb      	strh	r3, [r7, #12]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	441a      	add	r2, r3
 8003f36:	89bb      	ldrh	r3, [r7, #12]
 8003f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	8013      	strh	r3, [r2, #0]
 8003f4c:	e2a6      	b.n	800449c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f64:	81fb      	strh	r3, [r7, #14]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	441a      	add	r2, r3
 8003f70:	89fb      	ldrh	r3, [r7, #14]
 8003f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	8013      	strh	r3, [r2, #0]
 8003f86:	e289      	b.n	800449c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	4413      	add	r3, r2
 8003f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	011a      	lsls	r2, r3, #4
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	88db      	ldrh	r3, [r3, #6]
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	4413      	add	r3, r2
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	011a      	lsls	r2, r3, #4
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	4413      	add	r3, r2
 8003fda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d112      	bne.n	800400e <USB_ActivateEndpoint+0x28a>
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	801a      	strh	r2, [r3, #0]
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004006:	b29a      	uxth	r2, r3
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	801a      	strh	r2, [r3, #0]
 800400c:	e02f      	b.n	800406e <USB_ActivateEndpoint+0x2ea>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b3e      	cmp	r3, #62	; 0x3e
 8004014:	d813      	bhi.n	800403e <USB_ActivateEndpoint+0x2ba>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	66bb      	str	r3, [r7, #104]	; 0x68
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <USB_ActivateEndpoint+0x2ac>
 800402a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800402c:	3301      	adds	r3, #1
 800402e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004032:	b29b      	uxth	r3, r3
 8004034:	029b      	lsls	r3, r3, #10
 8004036:	b29a      	uxth	r2, r3
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	801a      	strh	r2, [r3, #0]
 800403c:	e017      	b.n	800406e <USB_ActivateEndpoint+0x2ea>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	66bb      	str	r3, [r7, #104]	; 0x68
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2b00      	cmp	r3, #0
 8004050:	d102      	bne.n	8004058 <USB_ActivateEndpoint+0x2d4>
 8004052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004054:	3b01      	subs	r3, #1
 8004056:	66bb      	str	r3, [r7, #104]	; 0x68
 8004058:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800405a:	b29b      	uxth	r3, r3
 800405c:	029b      	lsls	r3, r3, #10
 800405e:	b29b      	uxth	r3, r3
 8004060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004068:	b29a      	uxth	r2, r3
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	847b      	strh	r3, [r7, #34]	; 0x22
 800407c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800407e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01b      	beq.n	80040be <USB_ActivateEndpoint+0x33a>
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409c:	843b      	strh	r3, [r7, #32]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	441a      	add	r2, r3
 80040a8:	8c3b      	ldrh	r3, [r7, #32]
 80040aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d4:	83fb      	strh	r3, [r7, #30]
 80040d6:	8bfb      	ldrh	r3, [r7, #30]
 80040d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040dc:	83fb      	strh	r3, [r7, #30]
 80040de:	8bfb      	ldrh	r3, [r7, #30]
 80040e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040e4:	83fb      	strh	r3, [r7, #30]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	441a      	add	r2, r3
 80040f0:	8bfb      	ldrh	r3, [r7, #30]
 80040f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004102:	b29b      	uxth	r3, r3
 8004104:	8013      	strh	r3, [r2, #0]
 8004106:	e1c9      	b.n	800449c <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	78db      	ldrb	r3, [r3, #3]
 800410c:	2b02      	cmp	r3, #2
 800410e:	d11e      	bne.n	800414e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004126:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	441a      	add	r2, r3
 8004134:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800413c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004140:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004148:	b29b      	uxth	r3, r3
 800414a:	8013      	strh	r3, [r2, #0]
 800414c:	e01d      	b.n	800418a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	b29b      	uxth	r3, r3
 800415c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004164:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	441a      	add	r2, r3
 8004172:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800417a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800417e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004186:	b29b      	uxth	r3, r3
 8004188:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004194:	b29b      	uxth	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800419a:	4413      	add	r3, r2
 800419c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	011a      	lsls	r2, r3, #4
 80041a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	891b      	ldrh	r3, [r3, #8]
 80041b2:	085b      	lsrs	r3, r3, #1
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041bc:	801a      	strh	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	657b      	str	r3, [r7, #84]	; 0x54
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ce:	4413      	add	r3, r2
 80041d0:	657b      	str	r3, [r7, #84]	; 0x54
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	011a      	lsls	r2, r3, #4
 80041d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80041e0:	653b      	str	r3, [r7, #80]	; 0x50
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	895b      	ldrh	r3, [r3, #10]
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	785b      	ldrb	r3, [r3, #1]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 8093 	bne.w	8004322 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800420c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01b      	beq.n	8004250 <USB_ActivateEndpoint+0x4cc>
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	441a      	add	r2, r3
 800423a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800423c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004244:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424c:	b29b      	uxth	r3, r3
 800424e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800425e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01b      	beq.n	80042a0 <USB_ActivateEndpoint+0x51c>
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	441a      	add	r2, r3
 800428a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800428c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004298:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800429c:	b29b      	uxth	r3, r3
 800429e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b6:	873b      	strh	r3, [r7, #56]	; 0x38
 80042b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80042ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80042be:	873b      	strh	r3, [r7, #56]	; 0x38
 80042c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80042c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042c6:	873b      	strh	r3, [r7, #56]	; 0x38
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	441a      	add	r2, r3
 80042d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80042d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800430c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800431c:	b29b      	uxth	r3, r3
 800431e:	8013      	strh	r3, [r2, #0]
 8004320:	e0bc      	b.n	800449c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004332:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d01d      	beq.n	800437a <USB_ActivateEndpoint+0x5f6>
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004354:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	441a      	add	r2, r3
 8004362:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800436a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800436e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004376:	b29b      	uxth	r3, r3
 8004378:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800438a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01d      	beq.n	80043d2 <USB_ActivateEndpoint+0x64e>
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ac:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	441a      	add	r2, r3
 80043ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80043be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	78db      	ldrb	r3, [r3, #3]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d024      	beq.n	8004424 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80043f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80043f8:	f083 0320 	eor.w	r3, r3, #32
 80043fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	441a      	add	r2, r3
 800440a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800440e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800441a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441e:	b29b      	uxth	r3, r3
 8004420:	8013      	strh	r3, [r2, #0]
 8004422:	e01d      	b.n	8004460 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	b29b      	uxth	r3, r3
 8004432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800443a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	441a      	add	r2, r3
 8004448:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800444c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445c:	b29b      	uxth	r3, r3
 800445e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	441a      	add	r2, r3
 8004484:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004498:	b29b      	uxth	r3, r3
 800449a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800449c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3774      	adds	r7, #116	; 0x74
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b08d      	sub	sp, #52	; 0x34
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	7b1b      	ldrb	r3, [r3, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f040 808e 	bne.w	80045dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	785b      	ldrb	r3, [r3, #1]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d044      	beq.n	8004552 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	81bb      	strh	r3, [r7, #12]
 80044d6:	89bb      	ldrh	r3, [r7, #12]
 80044d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01b      	beq.n	8004518 <USB_DeactivateEndpoint+0x6c>
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	817b      	strh	r3, [r7, #10]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	441a      	add	r2, r3
 8004502:	897b      	ldrh	r3, [r7, #10]
 8004504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004510:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004514:	b29b      	uxth	r3, r3
 8004516:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b29b      	uxth	r3, r3
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452e:	813b      	strh	r3, [r7, #8]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	441a      	add	r2, r3
 800453a:	893b      	ldrh	r3, [r7, #8]
 800453c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800454c:	b29b      	uxth	r3, r3
 800454e:	8013      	strh	r3, [r2, #0]
 8004550:	e192      	b.n	8004878 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	827b      	strh	r3, [r7, #18]
 8004560:	8a7b      	ldrh	r3, [r7, #18]
 8004562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01b      	beq.n	80045a2 <USB_DeactivateEndpoint+0xf6>
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004580:	823b      	strh	r3, [r7, #16]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	441a      	add	r2, r3
 800458c:	8a3b      	ldrh	r3, [r7, #16]
 800458e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800459a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459e:	b29b      	uxth	r3, r3
 80045a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b8:	81fb      	strh	r3, [r7, #14]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	441a      	add	r2, r3
 80045c4:	89fb      	ldrh	r3, [r7, #14]
 80045c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	8013      	strh	r3, [r2, #0]
 80045da:	e14d      	b.n	8004878 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f040 80a5 	bne.w	8004730 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	843b      	strh	r3, [r7, #32]
 80045f4:	8c3b      	ldrh	r3, [r7, #32]
 80045f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01b      	beq.n	8004636 <USB_DeactivateEndpoint+0x18a>
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004614:	83fb      	strh	r3, [r7, #30]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	441a      	add	r2, r3
 8004620:	8bfb      	ldrh	r3, [r7, #30]
 8004622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800462a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800462e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004632:	b29b      	uxth	r3, r3
 8004634:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	83bb      	strh	r3, [r7, #28]
 8004644:	8bbb      	ldrh	r3, [r7, #28]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01b      	beq.n	8004686 <USB_DeactivateEndpoint+0x1da>
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004664:	837b      	strh	r3, [r7, #26]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	441a      	add	r2, r3
 8004670:	8b7b      	ldrh	r3, [r7, #26]
 8004672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004682:	b29b      	uxth	r3, r3
 8004684:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29b      	uxth	r3, r3
 8004694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469c:	833b      	strh	r3, [r7, #24]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	441a      	add	r2, r3
 80046a8:	8b3b      	ldrh	r3, [r7, #24]
 80046aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d4:	82fb      	strh	r3, [r7, #22]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	441a      	add	r2, r3
 80046e0:	8afb      	ldrh	r3, [r7, #22]
 80046e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29b      	uxth	r3, r3
 8004704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470c:	82bb      	strh	r3, [r7, #20]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	8abb      	ldrh	r3, [r7, #20]
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]
 800472e:	e0a3      	b.n	8004878 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800473e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01b      	beq.n	8004780 <USB_DeactivateEndpoint+0x2d4>
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	b29b      	uxth	r3, r3
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800476c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477c:	b29b      	uxth	r3, r3
 800477e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800478e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01b      	beq.n	80047d0 <USB_DeactivateEndpoint+0x324>
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ae:	853b      	strh	r3, [r7, #40]	; 0x28
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80047bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	441a      	add	r2, r3
 80047f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004804:	b29b      	uxth	r3, r3
 8004806:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	441a      	add	r2, r3
 800482a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800482c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483c:	b29b      	uxth	r3, r3
 800483e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	847b      	strh	r3, [r7, #34]	; 0x22
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	441a      	add	r2, r3
 8004862:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004874:	b29b      	uxth	r3, r3
 8004876:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3734      	adds	r7, #52	; 0x34
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b0c2      	sub	sp, #264	; 0x108
 800488a:	af00      	add	r7, sp, #0
 800488c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004890:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004894:	6018      	str	r0, [r3, #0]
 8004896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800489a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800489e:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	f040 867b 	bne.w	80055a8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80048b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699a      	ldr	r2, [r3, #24]
 80048be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d908      	bls.n	80048e0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80048ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80048de:	e007      	b.n	80048f0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80048e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80048f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	7b1b      	ldrb	r3, [r3, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d13a      	bne.n	8004976 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6959      	ldr	r1, [r3, #20]
 800490c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	88da      	ldrh	r2, [r3, #6]
 8004918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800491c:	b29b      	uxth	r3, r3
 800491e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004922:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004926:	6800      	ldr	r0, [r0, #0]
 8004928:	f001 fc11 	bl	800614e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800492c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004930:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800493c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004946:	b29b      	uxth	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4413      	add	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	011a      	lsls	r2, r3, #4
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4413      	add	r3, r2
 8004962:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	f000 bde3 	b.w	800553c <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800497a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	78db      	ldrb	r3, [r3, #3]
 8004982:	2b02      	cmp	r3, #2
 8004984:	f040 843a 	bne.w	80051fc <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800498c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6a1a      	ldr	r2, [r3, #32]
 8004994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	f240 83b7 	bls.w	8005114 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80049a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80049d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	441a      	add	r2, r3
 80049ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80049ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80049fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6a1a      	ldr	r2, [r3, #32]
 8004a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a12:	1ad2      	subs	r2, r2, r3
 8004a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 81b3 	beq.w	8004dae <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	633b      	str	r3, [r7, #48]	; 0x30
 8004a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	785b      	ldrb	r3, [r3, #1]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d16d      	bne.n	8004b40 <USB_EPStartXfer+0x2ba>
 8004a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	461a      	mov	r2, r3
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	4413      	add	r3, r2
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	011a      	lsls	r2, r3, #4
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	4413      	add	r3, r2
 8004a9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d112      	bne.n	8004ace <USB_EPStartXfer+0x248>
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	801a      	strh	r2, [r3, #0]
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	801a      	strh	r2, [r3, #0]
 8004acc:	e05d      	b.n	8004b8a <USB_EPStartXfer+0x304>
 8004ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ad2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ad4:	d817      	bhi.n	8004b06 <USB_EPStartXfer+0x280>
 8004ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ada:	085b      	lsrs	r3, r3, #1
 8004adc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d004      	beq.n	8004af6 <USB_EPStartXfer+0x270>
 8004aec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004af0:	3301      	adds	r3, #1
 8004af2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004af6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	029b      	lsls	r3, r3, #10
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	801a      	strh	r2, [r3, #0]
 8004b04:	e041      	b.n	8004b8a <USB_EPStartXfer+0x304>
 8004b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d104      	bne.n	8004b26 <USB_EPStartXfer+0x2a0>
 8004b1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b20:	3b01      	subs	r3, #1
 8004b22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	029b      	lsls	r3, r3, #10
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	801a      	strh	r2, [r3, #0]
 8004b3e:	e024      	b.n	8004b8a <USB_EPStartXfer+0x304>
 8004b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d11c      	bne.n	8004b8a <USB_EPStartXfer+0x304>
 8004b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	461a      	mov	r2, r3
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	4413      	add	r3, r2
 8004b66:	633b      	str	r3, [r7, #48]	; 0x30
 8004b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	011a      	lsls	r2, r3, #4
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	4413      	add	r3, r2
 8004b7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	895b      	ldrh	r3, [r3, #10]
 8004b96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6959      	ldr	r1, [r3, #20]
 8004ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004bb0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004bb4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004bb8:	6800      	ldr	r0, [r0, #0]
 8004bba:	f001 fac8 	bl	800614e <USB_WritePMA>
            ep->xfer_buff += len;
 8004bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695a      	ldr	r2, [r3, #20]
 8004bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bce:	441a      	add	r2, r3
 8004bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6a1a      	ldr	r2, [r3, #32]
 8004be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d90f      	bls.n	8004c18 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8004bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6a1a      	ldr	r2, [r3, #32]
 8004c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c08:	1ad2      	subs	r2, r2, r3
 8004c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	621a      	str	r2, [r3, #32]
 8004c16:	e00e      	b.n	8004c36 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2200      	movs	r2, #0
 8004c34:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	785b      	ldrb	r3, [r3, #1]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d16d      	bne.n	8004d22 <USB_EPStartXfer+0x49c>
 8004c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	4413      	add	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	011a      	lsls	r2, r3, #4
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d112      	bne.n	8004cb0 <USB_EPStartXfer+0x42a>
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	801a      	strh	r2, [r3, #0]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	801a      	strh	r2, [r3, #0]
 8004cae:	e063      	b.n	8004d78 <USB_EPStartXfer+0x4f2>
 8004cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cb4:	2b3e      	cmp	r3, #62	; 0x3e
 8004cb6:	d817      	bhi.n	8004ce8 <USB_EPStartXfer+0x462>
 8004cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d004      	beq.n	8004cd8 <USB_EPStartXfer+0x452>
 8004cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	029b      	lsls	r3, r3, #10
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	801a      	strh	r2, [r3, #0]
 8004ce6:	e047      	b.n	8004d78 <USB_EPStartXfer+0x4f2>
 8004ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cec:	095b      	lsrs	r3, r3, #5
 8004cee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <USB_EPStartXfer+0x482>
 8004cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d02:	3b01      	subs	r3, #1
 8004d04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	029b      	lsls	r3, r3, #10
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	801a      	strh	r2, [r3, #0]
 8004d20:	e02a      	b.n	8004d78 <USB_EPStartXfer+0x4f2>
 8004d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	785b      	ldrb	r3, [r3, #1]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d122      	bne.n	8004d78 <USB_EPStartXfer+0x4f2>
 8004d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	623b      	str	r3, [r7, #32]
 8004d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	4413      	add	r3, r2
 8004d54:	623b      	str	r3, [r7, #32]
 8004d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	011a      	lsls	r2, r3, #4
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	4413      	add	r3, r2
 8004d68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	891b      	ldrh	r3, [r3, #8]
 8004d84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6959      	ldr	r1, [r3, #20]
 8004d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004d9e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004da2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004da6:	6800      	ldr	r0, [r0, #0]
 8004da8:	f001 f9d1 	bl	800614e <USB_WritePMA>
 8004dac:	e3c6      	b.n	800553c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	785b      	ldrb	r3, [r3, #1]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d16d      	bne.n	8004e9a <USB_EPStartXfer+0x614>
 8004dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dde:	4413      	add	r3, r2
 8004de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	011a      	lsls	r2, r3, #4
 8004df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004df2:	4413      	add	r3, r2
 8004df4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004df8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d112      	bne.n	8004e28 <USB_EPStartXfer+0x5a2>
 8004e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e10:	801a      	strh	r2, [r3, #0]
 8004e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e24:	801a      	strh	r2, [r3, #0]
 8004e26:	e063      	b.n	8004ef0 <USB_EPStartXfer+0x66a>
 8004e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e2c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e2e:	d817      	bhi.n	8004e60 <USB_EPStartXfer+0x5da>
 8004e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e34:	085b      	lsrs	r3, r3, #1
 8004e36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d004      	beq.n	8004e50 <USB_EPStartXfer+0x5ca>
 8004e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	029b      	lsls	r3, r3, #10
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e5c:	801a      	strh	r2, [r3, #0]
 8004e5e:	e047      	b.n	8004ef0 <USB_EPStartXfer+0x66a>
 8004e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d104      	bne.n	8004e80 <USB_EPStartXfer+0x5fa>
 8004e76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	029b      	lsls	r3, r3, #10
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e96:	801a      	strh	r2, [r3, #0]
 8004e98:	e02a      	b.n	8004ef0 <USB_EPStartXfer+0x66a>
 8004e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d122      	bne.n	8004ef0 <USB_EPStartXfer+0x66a>
 8004eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	653b      	str	r3, [r7, #80]	; 0x50
 8004eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eca:	4413      	add	r3, r2
 8004ecc:	653b      	str	r3, [r7, #80]	; 0x50
 8004ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	011a      	lsls	r2, r3, #4
 8004edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ede:	4413      	add	r3, r2
 8004ee0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	891b      	ldrh	r3, [r3, #8]
 8004efc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6959      	ldr	r1, [r3, #20]
 8004f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004f16:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004f1a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004f1e:	6800      	ldr	r0, [r0, #0]
 8004f20:	f001 f915 	bl	800614e <USB_WritePMA>
            ep->xfer_buff += len;
 8004f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695a      	ldr	r2, [r3, #20]
 8004f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f34:	441a      	add	r2, r3
 8004f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6a1a      	ldr	r2, [r3, #32]
 8004f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d90f      	bls.n	8004f7e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8004f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6a1a      	ldr	r2, [r3, #32]
 8004f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f6e:	1ad2      	subs	r2, r2, r3
 8004f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	621a      	str	r2, [r3, #32]
 8004f7c:	e00e      	b.n	8004f9c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	643b      	str	r3, [r7, #64]	; 0x40
 8004fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	785b      	ldrb	r3, [r3, #1]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d16d      	bne.n	8005094 <USB_EPStartXfer+0x80e>
 8004fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	4413      	add	r3, r2
 8004fda:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	011a      	lsls	r2, r3, #4
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	4413      	add	r3, r2
 8004fee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d112      	bne.n	8005022 <USB_EPStartXfer+0x79c>
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005006:	b29a      	uxth	r2, r3
 8005008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500a:	801a      	strh	r2, [r3, #0]
 800500c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800501a:	b29a      	uxth	r2, r3
 800501c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501e:	801a      	strh	r2, [r3, #0]
 8005020:	e05d      	b.n	80050de <USB_EPStartXfer+0x858>
 8005022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005026:	2b3e      	cmp	r3, #62	; 0x3e
 8005028:	d817      	bhi.n	800505a <USB_EPStartXfer+0x7d4>
 800502a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <USB_EPStartXfer+0x7c4>
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	3301      	adds	r3, #1
 8005046:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800504a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504e:	b29b      	uxth	r3, r3
 8005050:	029b      	lsls	r3, r3, #10
 8005052:	b29a      	uxth	r2, r3
 8005054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005056:	801a      	strh	r2, [r3, #0]
 8005058:	e041      	b.n	80050de <USB_EPStartXfer+0x858>
 800505a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005068:	f003 031f 	and.w	r3, r3, #31
 800506c:	2b00      	cmp	r3, #0
 800506e:	d104      	bne.n	800507a <USB_EPStartXfer+0x7f4>
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005074:	3b01      	subs	r3, #1
 8005076:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507e:	b29b      	uxth	r3, r3
 8005080:	029b      	lsls	r3, r3, #10
 8005082:	b29b      	uxth	r3, r3
 8005084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800508c:	b29a      	uxth	r2, r3
 800508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005090:	801a      	strh	r2, [r3, #0]
 8005092:	e024      	b.n	80050de <USB_EPStartXfer+0x858>
 8005094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d11c      	bne.n	80050de <USB_EPStartXfer+0x858>
 80050a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b8:	4413      	add	r3, r2
 80050ba:	643b      	str	r3, [r7, #64]	; 0x40
 80050bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	011a      	lsls	r2, r3, #4
 80050ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050cc:	4413      	add	r3, r2
 80050ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d8:	b29a      	uxth	r2, r3
 80050da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80050de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	895b      	ldrh	r3, [r3, #10]
 80050ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6959      	ldr	r1, [r3, #20]
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005104:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005108:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800510c:	6800      	ldr	r0, [r0, #0]
 800510e:	f001 f81e 	bl	800614e <USB_WritePMA>
 8005112:	e213      	b.n	800553c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005128:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800514e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	441a      	add	r2, r3
 8005168:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800516c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517c:	b29b      	uxth	r3, r3
 800517e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800518c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519a:	b29b      	uxth	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051a0:	4413      	add	r3, r2
 80051a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	011a      	lsls	r2, r3, #4
 80051b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b4:	4413      	add	r3, r2
 80051b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80051bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80051c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	891b      	ldrh	r3, [r3, #8]
 80051d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6959      	ldr	r1, [r3, #20]
 80051e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80051ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80051f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80051f4:	6800      	ldr	r0, [r0, #0]
 80051f6:	f000 ffaa 	bl	800614e <USB_WritePMA>
 80051fa:	e19f      	b.n	800553c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80051fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6a1a      	ldr	r2, [r3, #32]
 8005208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800520c:	1ad2      	subs	r2, r2, r3
 800520e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800521a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	b29b      	uxth	r3, r3
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80bc 	beq.w	80053ba <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005246:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	673b      	str	r3, [r7, #112]	; 0x70
 800524e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d16d      	bne.n	800533a <USB_EPStartXfer+0xab4>
 800525e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	66bb      	str	r3, [r7, #104]	; 0x68
 800526a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005278:	b29b      	uxth	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800527e:	4413      	add	r3, r2
 8005280:	66bb      	str	r3, [r7, #104]	; 0x68
 8005282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	011a      	lsls	r2, r3, #4
 8005290:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005292:	4413      	add	r3, r2
 8005294:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005298:	667b      	str	r3, [r7, #100]	; 0x64
 800529a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d112      	bne.n	80052c8 <USB_EPStartXfer+0xa42>
 80052a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052b0:	801a      	strh	r2, [r3, #0]
 80052b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	e05d      	b.n	8005384 <USB_EPStartXfer+0xafe>
 80052c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052cc:	2b3e      	cmp	r3, #62	; 0x3e
 80052ce:	d817      	bhi.n	8005300 <USB_EPStartXfer+0xa7a>
 80052d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80052da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <USB_EPStartXfer+0xa6a>
 80052e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80052ea:	3301      	adds	r3, #1
 80052ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80052f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	029b      	lsls	r3, r3, #10
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	e041      	b.n	8005384 <USB_EPStartXfer+0xafe>
 8005300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2b00      	cmp	r3, #0
 8005314:	d104      	bne.n	8005320 <USB_EPStartXfer+0xa9a>
 8005316:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800531a:	3b01      	subs	r3, #1
 800531c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005320:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005324:	b29b      	uxth	r3, r3
 8005326:	029b      	lsls	r3, r3, #10
 8005328:	b29b      	uxth	r3, r3
 800532a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005332:	b29a      	uxth	r2, r3
 8005334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	e024      	b.n	8005384 <USB_EPStartXfer+0xafe>
 800533a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800533e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	785b      	ldrb	r3, [r3, #1]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d11c      	bne.n	8005384 <USB_EPStartXfer+0xafe>
 800534a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800534e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005358:	b29b      	uxth	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800535e:	4413      	add	r3, r2
 8005360:	673b      	str	r3, [r7, #112]	; 0x70
 8005362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	011a      	lsls	r2, r3, #4
 8005370:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005372:	4413      	add	r3, r2
 8005374:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005378:	66fb      	str	r3, [r7, #108]	; 0x6c
 800537a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800537e:	b29a      	uxth	r2, r3
 8005380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005382:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	895b      	ldrh	r3, [r3, #10]
 8005390:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6959      	ldr	r1, [r3, #20]
 80053a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80053ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80053b2:	6800      	ldr	r0, [r0, #0]
 80053b4:	f000 fecb 	bl	800614e <USB_WritePMA>
 80053b8:	e0c0      	b.n	800553c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	785b      	ldrb	r3, [r3, #1]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d16d      	bne.n	80054a6 <USB_EPStartXfer+0xc20>
 80053ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053ea:	4413      	add	r3, r2
 80053ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	011a      	lsls	r2, r3, #4
 80053fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053fe:	4413      	add	r3, r2
 8005400:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005404:	67bb      	str	r3, [r7, #120]	; 0x78
 8005406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800540a:	2b00      	cmp	r3, #0
 800540c:	d112      	bne.n	8005434 <USB_EPStartXfer+0xbae>
 800540e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	b29b      	uxth	r3, r3
 8005414:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005418:	b29a      	uxth	r2, r3
 800541a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800541c:	801a      	strh	r2, [r3, #0]
 800541e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542c:	b29a      	uxth	r2, r3
 800542e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005430:	801a      	strh	r2, [r3, #0]
 8005432:	e069      	b.n	8005508 <USB_EPStartXfer+0xc82>
 8005434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005438:	2b3e      	cmp	r3, #62	; 0x3e
 800543a:	d817      	bhi.n	800546c <USB_EPStartXfer+0xbe6>
 800543c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005440:	085b      	lsrs	r3, r3, #1
 8005442:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d004      	beq.n	800545c <USB_EPStartXfer+0xbd6>
 8005452:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005456:	3301      	adds	r3, #1
 8005458:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800545c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005460:	b29b      	uxth	r3, r3
 8005462:	029b      	lsls	r3, r3, #10
 8005464:	b29a      	uxth	r2, r3
 8005466:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	e04d      	b.n	8005508 <USB_EPStartXfer+0xc82>
 800546c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800547a:	f003 031f 	and.w	r3, r3, #31
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <USB_EPStartXfer+0xc06>
 8005482:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005486:	3b01      	subs	r3, #1
 8005488:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800548c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005490:	b29b      	uxth	r3, r3
 8005492:	029b      	lsls	r3, r3, #10
 8005494:	b29b      	uxth	r3, r3
 8005496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800549a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800549e:	b29a      	uxth	r2, r3
 80054a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054a2:	801a      	strh	r2, [r3, #0]
 80054a4:	e030      	b.n	8005508 <USB_EPStartXfer+0xc82>
 80054a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	785b      	ldrb	r3, [r3, #1]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d128      	bne.n	8005508 <USB_EPStartXfer+0xc82>
 80054b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054da:	4413      	add	r3, r2
 80054dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	011a      	lsls	r2, r3, #4
 80054ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054f2:	4413      	add	r3, r2
 80054f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005500:	b29a      	uxth	r2, r3
 8005502:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005506:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800550c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	891b      	ldrh	r3, [r3, #8]
 8005514:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6959      	ldr	r1, [r3, #20]
 8005524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005528:	b29b      	uxth	r3, r3
 800552a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800552e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005532:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005536:	6800      	ldr	r0, [r0, #0]
 8005538:	f000 fe09 	bl	800614e <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800553c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800554a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005562:	817b      	strh	r3, [r7, #10]
 8005564:	897b      	ldrh	r3, [r7, #10]
 8005566:	f083 0310 	eor.w	r3, r3, #16
 800556a:	817b      	strh	r3, [r7, #10]
 800556c:	897b      	ldrh	r3, [r7, #10]
 800556e:	f083 0320 	eor.w	r3, r3, #32
 8005572:	817b      	strh	r3, [r7, #10]
 8005574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	441a      	add	r2, r3
 800558e:	897b      	ldrh	r3, [r7, #10]
 8005590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800559c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	8013      	strh	r3, [r2, #0]
 80055a4:	f000 bc9f 	b.w	8005ee6 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80055a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	7b1b      	ldrb	r3, [r3, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f040 80ae 	bne.w	8005716 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80055ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d917      	bls.n	8005606 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80055d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80055e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699a      	ldr	r2, [r3, #24]
 80055f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f6:	1ad2      	subs	r2, r2, r3
 80055f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	619a      	str	r2, [r3, #24]
 8005604:	e00e      	b.n	8005624 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8005606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800561a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2200      	movs	r2, #0
 8005622:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005628:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005640:	b29b      	uxth	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005648:	4413      	add	r3, r2
 800564a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800564e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	011a      	lsls	r2, r3, #4
 800565c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005660:	4413      	add	r3, r2
 8005662:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005666:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800566a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566e:	2b00      	cmp	r3, #0
 8005670:	d116      	bne.n	80056a0 <USB_EPStartXfer+0xe1a>
 8005672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800567e:	b29a      	uxth	r2, r3
 8005680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005684:	801a      	strh	r2, [r3, #0]
 8005686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	b29b      	uxth	r3, r3
 800568e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005696:	b29a      	uxth	r2, r3
 8005698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800569c:	801a      	strh	r2, [r3, #0]
 800569e:	e3e8      	b.n	8005e72 <USB_EPStartXfer+0x15ec>
 80056a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a4:	2b3e      	cmp	r3, #62	; 0x3e
 80056a6:	d818      	bhi.n	80056da <USB_EPStartXfer+0xe54>
 80056a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d004      	beq.n	80056c8 <USB_EPStartXfer+0xe42>
 80056be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056c2:	3301      	adds	r3, #1
 80056c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	029b      	lsls	r3, r3, #10
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056d6:	801a      	strh	r2, [r3, #0]
 80056d8:	e3cb      	b.n	8005e72 <USB_EPStartXfer+0x15ec>
 80056da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <USB_EPStartXfer+0xe74>
 80056f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056f4:	3b01      	subs	r3, #1
 80056f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056fe:	b29b      	uxth	r3, r3
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	b29b      	uxth	r3, r3
 8005704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800570c:	b29a      	uxth	r2, r3
 800570e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005712:	801a      	strh	r2, [r3, #0]
 8005714:	e3ad      	b.n	8005e72 <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800571a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	78db      	ldrb	r3, [r3, #3]
 8005722:	2b02      	cmp	r3, #2
 8005724:	f040 8200 	bne.w	8005b28 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800572c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	2b00      	cmp	r3, #0
 8005736:	f040 8091 	bne.w	800585c <USB_EPStartXfer+0xfd6>
 800573a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005756:	b29b      	uxth	r3, r3
 8005758:	461a      	mov	r2, r3
 800575a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800575e:	4413      	add	r3, r2
 8005760:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	011a      	lsls	r2, r3, #4
 8005772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005776:	4413      	add	r3, r2
 8005778:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800577c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d116      	bne.n	80057be <USB_EPStartXfer+0xf38>
 8005790:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800579c:	b29a      	uxth	r2, r3
 800579e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057a2:	801a      	strh	r2, [r3, #0]
 80057a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057ba:	801a      	strh	r2, [r3, #0]
 80057bc:	e083      	b.n	80058c6 <USB_EPStartXfer+0x1040>
 80057be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b3e      	cmp	r3, #62	; 0x3e
 80057cc:	d820      	bhi.n	8005810 <USB_EPStartXfer+0xf8a>
 80057ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	085b      	lsrs	r3, r3, #1
 80057dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <USB_EPStartXfer+0xf78>
 80057f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f8:	3301      	adds	r3, #1
 80057fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005802:	b29b      	uxth	r3, r3
 8005804:	029b      	lsls	r3, r3, #10
 8005806:	b29a      	uxth	r2, r3
 8005808:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	e05a      	b.n	80058c6 <USB_EPStartXfer+0x1040>
 8005810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <USB_EPStartXfer+0xfba>
 8005836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583a:	3b01      	subs	r3, #1
 800583c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005844:	b29b      	uxth	r3, r3
 8005846:	029b      	lsls	r3, r3, #10
 8005848:	b29b      	uxth	r3, r3
 800584a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005852:	b29a      	uxth	r2, r3
 8005854:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005858:	801a      	strh	r2, [r3, #0]
 800585a:	e034      	b.n	80058c6 <USB_EPStartXfer+0x1040>
 800585c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d12c      	bne.n	80058c6 <USB_EPStartXfer+0x1040>
 800586c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800587a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005888:	b29b      	uxth	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005890:	4413      	add	r3, r2
 8005892:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	011a      	lsls	r2, r3, #4
 80058a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80058a8:	4413      	add	r3, r2
 80058aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	b29a      	uxth	r2, r3
 80058c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80058d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f040 8091 	bne.w	8005a08 <USB_EPStartXfer+0x1182>
 80058e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005902:	b29b      	uxth	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800590a:	4413      	add	r3, r2
 800590c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	011a      	lsls	r2, r3, #4
 800591e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005922:	4413      	add	r3, r2
 8005924:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005928:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800592c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d116      	bne.n	800596a <USB_EPStartXfer+0x10e4>
 800593c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005948:	b29a      	uxth	r2, r3
 800594a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800594e:	801a      	strh	r2, [r3, #0]
 8005950:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	b29b      	uxth	r3, r3
 8005958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800595c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005960:	b29a      	uxth	r2, r3
 8005962:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005966:	801a      	strh	r2, [r3, #0]
 8005968:	e07c      	b.n	8005a64 <USB_EPStartXfer+0x11de>
 800596a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b3e      	cmp	r3, #62	; 0x3e
 8005978:	d820      	bhi.n	80059bc <USB_EPStartXfer+0x1136>
 800597a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	085b      	lsrs	r3, r3, #1
 8005988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800598c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d004      	beq.n	80059aa <USB_EPStartXfer+0x1124>
 80059a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a4:	3301      	adds	r3, #1
 80059a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	029b      	lsls	r3, r3, #10
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059b8:	801a      	strh	r2, [r3, #0]
 80059ba:	e053      	b.n	8005a64 <USB_EPStartXfer+0x11de>
 80059bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <USB_EPStartXfer+0x1166>
 80059e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e6:	3b01      	subs	r3, #1
 80059e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	029b      	lsls	r3, r3, #10
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a04:	801a      	strh	r2, [r3, #0]
 8005a06:	e02d      	b.n	8005a64 <USB_EPStartXfer+0x11de>
 8005a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	785b      	ldrb	r3, [r3, #1]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d125      	bne.n	8005a64 <USB_EPStartXfer+0x11de>
 8005a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a2e:	4413      	add	r3, r2
 8005a30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	011a      	lsls	r2, r3, #4
 8005a42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a46:	4413      	add	r3, r2
 8005a48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a62:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 81fe 	beq.w	8005e72 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <USB_EPStartXfer+0x1228>
 8005aa2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10d      	bne.n	8005aca <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005aae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 81db 	bne.w	8005e72 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005abc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f040 81d4 	bne.w	8005e72 <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	441a      	add	r2, r3
 8005b0e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	8013      	strh	r3, [r2, #0]
 8005b26:	e1a4      	b.n	8005e72 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	78db      	ldrb	r3, [r3, #3]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	f040 819a 	bne.w	8005e6e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d917      	bls.n	8005b86 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8005b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b76:	1ad2      	subs	r2, r2, r3
 8005b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	619a      	str	r2, [r3, #24]
 8005b84:	e00e      	b.n	8005ba4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8005b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d178      	bne.n	8005ca6 <USB_EPStartXfer+0x1420>
 8005bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bd8:	4413      	add	r3, r2
 8005bda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	011a      	lsls	r2, r3, #4
 8005bec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d116      	bne.n	8005c30 <USB_EPStartXfer+0x13aa>
 8005c02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	e06b      	b.n	8005d08 <USB_EPStartXfer+0x1482>
 8005c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c34:	2b3e      	cmp	r3, #62	; 0x3e
 8005c36:	d818      	bhi.n	8005c6a <USB_EPStartXfer+0x13e4>
 8005c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3c:	085b      	lsrs	r3, r3, #1
 8005c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d004      	beq.n	8005c58 <USB_EPStartXfer+0x13d2>
 8005c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c52:	3301      	adds	r3, #1
 8005c54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	029b      	lsls	r3, r3, #10
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c66:	801a      	strh	r2, [r3, #0]
 8005c68:	e04e      	b.n	8005d08 <USB_EPStartXfer+0x1482>
 8005c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c78:	f003 031f 	and.w	r3, r3, #31
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d104      	bne.n	8005c8a <USB_EPStartXfer+0x1404>
 8005c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c84:	3b01      	subs	r3, #1
 8005c86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	029b      	lsls	r3, r3, #10
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ca2:	801a      	strh	r2, [r3, #0]
 8005ca4:	e030      	b.n	8005d08 <USB_EPStartXfer+0x1482>
 8005ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d128      	bne.n	8005d08 <USB_EPStartXfer+0x1482>
 8005cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cda:	4413      	add	r3, r2
 8005cdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	011a      	lsls	r2, r3, #4
 8005cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d06:	801a      	strh	r2, [r3, #0]
 8005d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d178      	bne.n	8005e18 <USB_EPStartXfer+0x1592>
 8005d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	011a      	lsls	r2, r3, #4
 8005d5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d62:	4413      	add	r3, r2
 8005d64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d116      	bne.n	8005da2 <USB_EPStartXfer+0x151c>
 8005d74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d86:	801a      	strh	r2, [r3, #0]
 8005d88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	e067      	b.n	8005e72 <USB_EPStartXfer+0x15ec>
 8005da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da6:	2b3e      	cmp	r3, #62	; 0x3e
 8005da8:	d818      	bhi.n	8005ddc <USB_EPStartXfer+0x1556>
 8005daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dae:	085b      	lsrs	r3, r3, #1
 8005db0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d004      	beq.n	8005dca <USB_EPStartXfer+0x1544>
 8005dc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	029b      	lsls	r3, r3, #10
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	e04a      	b.n	8005e72 <USB_EPStartXfer+0x15ec>
 8005ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <USB_EPStartXfer+0x1576>
 8005df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005df6:	3b01      	subs	r3, #1
 8005df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	029b      	lsls	r3, r3, #10
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	e02c      	b.n	8005e72 <USB_EPStartXfer+0x15ec>
 8005e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d124      	bne.n	8005e72 <USB_EPStartXfer+0x15ec>
 8005e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	461a      	mov	r2, r3
 8005e3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e3e:	4413      	add	r3, r2
 8005e40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	011a      	lsls	r2, r3, #4
 8005e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e56:	4413      	add	r3, r2
 8005e58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e6a:	801a      	strh	r2, [r3, #0]
 8005e6c:	e001      	b.n	8005e72 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e03a      	b.n	8005ee8 <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e98:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005e9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005ea0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ea4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005ea8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005eac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005eb0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	441a      	add	r2, r3
 8005ece:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	785b      	ldrb	r3, [r3, #1]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d020      	beq.n	8005f46 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1a:	81bb      	strh	r3, [r7, #12]
 8005f1c:	89bb      	ldrh	r3, [r7, #12]
 8005f1e:	f083 0310 	eor.w	r3, r3, #16
 8005f22:	81bb      	strh	r3, [r7, #12]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	441a      	add	r2, r3
 8005f2e:	89bb      	ldrh	r3, [r7, #12]
 8005f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	8013      	strh	r3, [r2, #0]
 8005f44:	e01f      	b.n	8005f86 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5c:	81fb      	strh	r3, [r7, #14]
 8005f5e:	89fb      	ldrh	r3, [r7, #14]
 8005f60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f64:	81fb      	strh	r3, [r7, #14]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	441a      	add	r2, r3
 8005f70:	89fb      	ldrh	r3, [r7, #14]
 8005f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	7b1b      	ldrb	r3, [r3, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f040 809d 	bne.w	80060e2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	785b      	ldrb	r3, [r3, #1]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d04c      	beq.n	800604a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	823b      	strh	r3, [r7, #16]
 8005fbe:	8a3b      	ldrh	r3, [r7, #16]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01b      	beq.n	8006000 <USB_EPClearStall+0x6c>
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fde:	81fb      	strh	r3, [r7, #14]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	89fb      	ldrh	r3, [r7, #14]
 8005fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	78db      	ldrb	r3, [r3, #3]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d06c      	beq.n	80060e2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601e:	81bb      	strh	r3, [r7, #12]
 8006020:	89bb      	ldrh	r3, [r7, #12]
 8006022:	f083 0320 	eor.w	r3, r3, #32
 8006026:	81bb      	strh	r3, [r7, #12]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	441a      	add	r2, r3
 8006032:	89bb      	ldrh	r3, [r7, #12]
 8006034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006044:	b29b      	uxth	r3, r3
 8006046:	8013      	strh	r3, [r2, #0]
 8006048:	e04b      	b.n	80060e2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	82fb      	strh	r3, [r7, #22]
 8006058:	8afb      	ldrh	r3, [r7, #22]
 800605a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01b      	beq.n	800609a <USB_EPClearStall+0x106>
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006078:	82bb      	strh	r3, [r7, #20]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	441a      	add	r2, r3
 8006084:	8abb      	ldrh	r3, [r7, #20]
 8006086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b0:	827b      	strh	r3, [r7, #18]
 80060b2:	8a7b      	ldrh	r3, [r7, #18]
 80060b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060b8:	827b      	strh	r3, [r7, #18]
 80060ba:	8a7b      	ldrh	r3, [r7, #18]
 80060bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060c0:	827b      	strh	r3, [r7, #18]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	441a      	add	r2, r3
 80060cc:	8a7b      	ldrh	r3, [r7, #18]
 80060ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060de:	b29b      	uxth	r3, r3
 80060e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d103      	bne.n	800610a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2280      	movs	r2, #128	; 0x80
 8006106:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800613c:	b29b      	uxth	r3, r3
 800613e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006140:	68fb      	ldr	r3, [r7, #12]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800614e:	b480      	push	{r7}
 8006150:	b08d      	sub	sp, #52	; 0x34
 8006152:	af00      	add	r7, sp, #0
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	4611      	mov	r1, r2
 800615a:	461a      	mov	r2, r3
 800615c:	460b      	mov	r3, r1
 800615e:	80fb      	strh	r3, [r7, #6]
 8006160:	4613      	mov	r3, r2
 8006162:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006164:	88bb      	ldrh	r3, [r7, #4]
 8006166:	3301      	adds	r3, #1
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	005a      	lsls	r2, r3, #1
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006180:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006186:	e01e      	b.n	80061c6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	3301      	adds	r3, #1
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	b29b      	uxth	r3, r3
 800619a:	021b      	lsls	r3, r3, #8
 800619c:	b29b      	uxth	r3, r3
 800619e:	461a      	mov	r2, r3
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	3302      	adds	r3, #2
 80061b2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	3302      	adds	r3, #2
 80061b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	3301      	adds	r3, #1
 80061be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80061c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c2:	3b01      	subs	r3, #1
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1dd      	bne.n	8006188 <USB_WritePMA+0x3a>
  }
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	3734      	adds	r7, #52	; 0x34
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061da:	b480      	push	{r7}
 80061dc:	b08b      	sub	sp, #44	; 0x2c
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	4611      	mov	r1, r2
 80061e6:	461a      	mov	r2, r3
 80061e8:	460b      	mov	r3, r1
 80061ea:	80fb      	strh	r3, [r7, #6]
 80061ec:	4613      	mov	r3, r2
 80061ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80061f0:	88bb      	ldrh	r3, [r7, #4]
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	005a      	lsls	r2, r3, #1
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800620c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
 8006212:	e01b      	b.n	800624c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	b29b      	uxth	r3, r3
 800621a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	3302      	adds	r3, #2
 8006220:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	b2da      	uxtb	r2, r3
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	3301      	adds	r3, #1
 800622e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	0a1b      	lsrs	r3, r3, #8
 8006234:	b2da      	uxtb	r2, r3
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	3301      	adds	r3, #1
 800623e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	3302      	adds	r3, #2
 8006244:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	3b01      	subs	r3, #1
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e0      	bne.n	8006214 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006252:	88bb      	ldrh	r3, [r7, #4]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	b2da      	uxtb	r2, r3
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	701a      	strb	r2, [r3, #0]
  }
}
 800626e:	bf00      	nop
 8006270:	372c      	adds	r7, #44	; 0x2c
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	460b      	mov	r3, r1
 8006284:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	7c1b      	ldrb	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d115      	bne.n	80062be <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006296:	2202      	movs	r2, #2
 8006298:	2181      	movs	r1, #129	; 0x81
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 ff1b 	bl	80080d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062aa:	2202      	movs	r2, #2
 80062ac:	2101      	movs	r1, #1
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f001 ff11 	bl	80080d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80062bc:	e012      	b.n	80062e4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062be:	2340      	movs	r3, #64	; 0x40
 80062c0:	2202      	movs	r2, #2
 80062c2:	2181      	movs	r1, #129	; 0x81
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f001 ff06 	bl	80080d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062d0:	2340      	movs	r3, #64	; 0x40
 80062d2:	2202      	movs	r2, #2
 80062d4:	2101      	movs	r1, #1
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 fefd 	bl	80080d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062e4:	2308      	movs	r3, #8
 80062e6:	2203      	movs	r2, #3
 80062e8:	2182      	movs	r1, #130	; 0x82
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f001 fef3 	bl	80080d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80062f6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80062fa:	f002 f815 	bl	8008328 <USBD_static_malloc>
 80062fe:	4602      	mov	r2, r0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800630c:	2b00      	cmp	r3, #0
 800630e:	d102      	bne.n	8006316 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
 8006314:	e026      	b.n	8006364 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	7c1b      	ldrb	r3, [r3, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d109      	bne.n	8006354 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800634a:	2101      	movs	r1, #1
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 ffb4 	bl	80082ba <USBD_LL_PrepareReceive>
 8006352:	e007      	b.n	8006364 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800635a:	2340      	movs	r3, #64	; 0x40
 800635c:	2101      	movs	r1, #1
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 ffab 	bl	80082ba <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	460b      	mov	r3, r1
 8006378:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800637e:	2181      	movs	r1, #129	; 0x81
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 fece 	bl	8008122 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800638c:	2101      	movs	r1, #1
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 fec7 	bl	8008122 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800639c:	2182      	movs	r1, #130	; 0x82
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f001 febf 	bl	8008122 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00e      	beq.n	80063d2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 ffbd 	bl	8008344 <USBD_static_free>
    pdev->pClassData = NULL;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ec:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006402:	2b00      	cmp	r3, #0
 8006404:	d039      	beq.n	800647a <USBD_CDC_Setup+0x9e>
 8006406:	2b20      	cmp	r3, #32
 8006408:	d17f      	bne.n	800650a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	88db      	ldrh	r3, [r3, #6]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d029      	beq.n	8006466 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	b25b      	sxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	da11      	bge.n	8006440 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006428:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	88d2      	ldrh	r2, [r2, #6]
 800642e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006430:	6939      	ldr	r1, [r7, #16]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	88db      	ldrh	r3, [r3, #6]
 8006436:	461a      	mov	r2, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 fa14 	bl	8007866 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800643e:	e06b      	b.n	8006518 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	785a      	ldrb	r2, [r3, #1]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	88db      	ldrh	r3, [r3, #6]
 800644e:	b2da      	uxtb	r2, r3
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006456:	6939      	ldr	r1, [r7, #16]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	88db      	ldrh	r3, [r3, #6]
 800645c:	461a      	mov	r2, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f001 fa2f 	bl	80078c2 <USBD_CtlPrepareRx>
      break;
 8006464:	e058      	b.n	8006518 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	7850      	ldrb	r0, [r2, #1]
 8006472:	2200      	movs	r2, #0
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	4798      	blx	r3
      break;
 8006478:	e04e      	b.n	8006518 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	2b0b      	cmp	r3, #11
 8006480:	d02e      	beq.n	80064e0 <USBD_CDC_Setup+0x104>
 8006482:	2b0b      	cmp	r3, #11
 8006484:	dc38      	bgt.n	80064f8 <USBD_CDC_Setup+0x11c>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <USBD_CDC_Setup+0xb4>
 800648a:	2b0a      	cmp	r3, #10
 800648c:	d014      	beq.n	80064b8 <USBD_CDC_Setup+0xdc>
 800648e:	e033      	b.n	80064f8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006496:	2b03      	cmp	r3, #3
 8006498:	d107      	bne.n	80064aa <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800649a:	f107 030c 	add.w	r3, r7, #12
 800649e:	2202      	movs	r2, #2
 80064a0:	4619      	mov	r1, r3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 f9df 	bl	8007866 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064a8:	e02e      	b.n	8006508 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 f96f 	bl	8007790 <USBD_CtlError>
            ret = USBD_FAIL;
 80064b2:	2302      	movs	r3, #2
 80064b4:	75fb      	strb	r3, [r7, #23]
          break;
 80064b6:	e027      	b.n	8006508 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d107      	bne.n	80064d2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80064c2:	f107 030f 	add.w	r3, r7, #15
 80064c6:	2201      	movs	r2, #1
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 f9cb 	bl	8007866 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064d0:	e01a      	b.n	8006508 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 f95b 	bl	8007790 <USBD_CtlError>
            ret = USBD_FAIL;
 80064da:	2302      	movs	r3, #2
 80064dc:	75fb      	strb	r3, [r7, #23]
          break;
 80064de:	e013      	b.n	8006508 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d00d      	beq.n	8006506 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 f94f 	bl	8007790 <USBD_CtlError>
            ret = USBD_FAIL;
 80064f2:	2302      	movs	r3, #2
 80064f4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80064f6:	e006      	b.n	8006506 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 f948 	bl	8007790 <USBD_CtlError>
          ret = USBD_FAIL;
 8006500:	2302      	movs	r3, #2
 8006502:	75fb      	strb	r3, [r7, #23]
          break;
 8006504:	e000      	b.n	8006508 <USBD_CDC_Setup+0x12c>
          break;
 8006506:	bf00      	nop
      }
      break;
 8006508:	e006      	b.n	8006518 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 f93f 	bl	8007790 <USBD_CtlError>
      ret = USBD_FAIL;
 8006512:	2302      	movs	r3, #2
 8006514:	75fb      	strb	r3, [r7, #23]
      break;
 8006516:	bf00      	nop
  }

  return ret;
 8006518:	7dfb      	ldrb	r3, [r7, #23]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	460b      	mov	r3, r1
 800652c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006534:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800653c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d03a      	beq.n	80065be <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006548:	78fa      	ldrb	r2, [r7, #3]
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	440b      	add	r3, r1
 8006556:	331c      	adds	r3, #28
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d029      	beq.n	80065b2 <USBD_CDC_DataIn+0x90>
 800655e:	78fa      	ldrb	r2, [r7, #3]
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	440b      	add	r3, r1
 800656c:	331c      	adds	r3, #28
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	78f9      	ldrb	r1, [r7, #3]
 8006572:	68b8      	ldr	r0, [r7, #8]
 8006574:	460b      	mov	r3, r1
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	4403      	add	r3, r0
 800657e:	3338      	adds	r3, #56	; 0x38
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	fbb2 f1f3 	udiv	r1, r2, r3
 8006586:	fb01 f303 	mul.w	r3, r1, r3
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d110      	bne.n	80065b2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006590:	78fa      	ldrb	r2, [r7, #3]
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	331c      	adds	r3, #28
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065a4:	78f9      	ldrb	r1, [r7, #3]
 80065a6:	2300      	movs	r3, #0
 80065a8:	2200      	movs	r2, #0
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f001 fe62 	bl	8008274 <USBD_LL_Transmit>
 80065b0:	e003      	b.n	80065ba <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e000      	b.n	80065c0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80065be:	2302      	movs	r3, #2
  }
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065da:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 fe8d 	bl	8008300 <USBD_LL_GetRxDataSize>
 80065e6:	4602      	mov	r2, r0
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00d      	beq.n	8006614 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800660c:	4611      	mov	r1, r2
 800660e:	4798      	blx	r3

    return USBD_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	e000      	b.n	8006616 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006614:	2302      	movs	r3, #2
  }
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006634:	2b00      	cmp	r3, #0
 8006636:	d015      	beq.n	8006664 <USBD_CDC_EP0_RxReady+0x46>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800663e:	2bff      	cmp	r3, #255	; 0xff
 8006640:	d010      	beq.n	8006664 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006650:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006658:	b292      	uxth	r2, r2
 800665a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	22ff      	movs	r2, #255	; 0xff
 8006660:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2243      	movs	r2, #67	; 0x43
 800667c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800667e:	4b03      	ldr	r3, [pc, #12]	; (800668c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	20000094 	.word	0x20000094

08006690 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2243      	movs	r2, #67	; 0x43
 800669c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800669e:	4b03      	ldr	r3, [pc, #12]	; (80066ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	20000050 	.word	0x20000050

080066b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2243      	movs	r2, #67	; 0x43
 80066bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80066be:	4b03      	ldr	r3, [pc, #12]	; (80066cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	200000d8 	.word	0x200000d8

080066d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	220a      	movs	r2, #10
 80066dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80066de:	4b03      	ldr	r3, [pc, #12]	; (80066ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	2000000c 	.word	0x2000000c

080066f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80066fa:	2302      	movs	r3, #2
 80066fc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800671e:	b480      	push	{r7}
 8006720:	b087      	sub	sp, #28
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	4613      	mov	r3, r2
 800672a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006732:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800673c:	88fa      	ldrh	r2, [r7, #6]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006762:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006788:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01c      	beq.n	80067ce <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800679a:	2b00      	cmp	r3, #0
 800679c:	d115      	bne.n	80067ca <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2181      	movs	r1, #129	; 0x81
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 fd57 	bl	8008274 <USBD_LL_Transmit>

      return USBD_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	e002      	b.n	80067d0 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e000      	b.n	80067d0 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80067ce:	2302      	movs	r3, #2
  }
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d017      	beq.n	8006822 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	7c1b      	ldrb	r3, [r3, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006804:	2101      	movs	r1, #1
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 fd57 	bl	80082ba <USBD_LL_PrepareReceive>
 800680c:	e007      	b.n	800681e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	2101      	movs	r1, #1
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 fd4e 	bl	80082ba <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	e000      	b.n	8006824 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006822:	2302      	movs	r3, #2
  }
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006840:	2302      	movs	r3, #2
 8006842:	e01a      	b.n	800687a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	79fa      	ldrb	r2, [r7, #7]
 8006870:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f001 fbba 	bl	8007fec <USBD_LL_Init>

  return USBD_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006882:	b480      	push	{r7}
 8006884:	b085      	sub	sp, #20
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d006      	beq.n	80068a4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	73fb      	strb	r3, [r7, #15]
 80068a2:	e001      	b.n	80068a8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80068a4:	2302      	movs	r3, #2
 80068a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b082      	sub	sp, #8
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 fbee 	bl	80080a0 <USBD_LL_Start>

  return USBD_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80068f0:	2302      	movs	r3, #2
 80068f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	78fa      	ldrb	r2, [r7, #3]
 8006908:	4611      	mov	r1, r2
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	4798      	blx	r3
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	460b      	mov	r3, r1
 800692c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	78fa      	ldrb	r2, [r7, #3]
 8006938:	4611      	mov	r1, r2
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	4798      	blx	r3

  return USBD_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fedb 	bl	8007716 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800696e:	461a      	mov	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800697c:	f003 031f 	and.w	r3, r3, #31
 8006980:	2b02      	cmp	r3, #2
 8006982:	d016      	beq.n	80069b2 <USBD_LL_SetupStage+0x6a>
 8006984:	2b02      	cmp	r3, #2
 8006986:	d81c      	bhi.n	80069c2 <USBD_LL_SetupStage+0x7a>
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <USBD_LL_SetupStage+0x4a>
 800698c:	2b01      	cmp	r3, #1
 800698e:	d008      	beq.n	80069a2 <USBD_LL_SetupStage+0x5a>
 8006990:	e017      	b.n	80069c2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f9ce 	bl	8006d3c <USBD_StdDevReq>
      break;
 80069a0:	e01a      	b.n	80069d8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa30 	bl	8006e10 <USBD_StdItfReq>
      break;
 80069b0:	e012      	b.n	80069d8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fa70 	bl	8006ea0 <USBD_StdEPReq>
      break;
 80069c0:	e00a      	b.n	80069d8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80069c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f001 fbc5 	bl	8008160 <USBD_LL_StallEP>
      break;
 80069d6:	bf00      	nop
  }

  return USBD_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b086      	sub	sp, #24
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	460b      	mov	r3, r1
 80069ec:	607a      	str	r2, [r7, #4]
 80069ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80069f0:	7afb      	ldrb	r3, [r7, #11]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d14b      	bne.n	8006a8e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80069fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d134      	bne.n	8006a72 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	68da      	ldr	r2, [r3, #12]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d919      	bls.n	8006a48 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	1ad2      	subs	r2, r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d203      	bcs.n	8006a36 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	e002      	b.n	8006a3c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 ff5c 	bl	80078fe <USBD_CtlContinueRx>
 8006a46:	e038      	b.n	8006aba <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00a      	beq.n	8006a6a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d105      	bne.n	8006a6a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 ff59 	bl	8007922 <USBD_CtlSendStatus>
 8006a70:	e023      	b.n	8006aba <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a78:	2b05      	cmp	r3, #5
 8006a7a:	d11e      	bne.n	8006aba <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006a84:	2100      	movs	r1, #0
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f001 fb6a 	bl	8008160 <USBD_LL_StallEP>
 8006a8c:	e015      	b.n	8006aba <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00d      	beq.n	8006ab6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d108      	bne.n	8006ab6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	7afa      	ldrb	r2, [r7, #11]
 8006aae:	4611      	mov	r1, r2
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	4798      	blx	r3
 8006ab4:	e001      	b.n	8006aba <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e000      	b.n	8006abc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	460b      	mov	r3, r1
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ad2:	7afb      	ldrb	r3, [r7, #11]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d17f      	bne.n	8006bd8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3314      	adds	r3, #20
 8006adc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d15c      	bne.n	8006ba2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d915      	bls.n	8006b20 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	1ad2      	subs	r2, r2, r3
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 fec6 	bl	800789e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b12:	2300      	movs	r3, #0
 8006b14:	2200      	movs	r2, #0
 8006b16:	2100      	movs	r1, #0
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f001 fbce 	bl	80082ba <USBD_LL_PrepareReceive>
 8006b1e:	e04e      	b.n	8006bbe <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	6912      	ldr	r2, [r2, #16]
 8006b28:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b2c:	fb01 f202 	mul.w	r2, r1, r2
 8006b30:	1a9b      	subs	r3, r3, r2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d11c      	bne.n	8006b70 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d316      	bcc.n	8006b70 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d20f      	bcs.n	8006b70 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b50:	2200      	movs	r2, #0
 8006b52:	2100      	movs	r1, #0
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 fea2 	bl	800789e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b62:	2300      	movs	r3, #0
 8006b64:	2200      	movs	r2, #0
 8006b66:	2100      	movs	r1, #0
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f001 fba6 	bl	80082ba <USBD_LL_PrepareReceive>
 8006b6e:	e026      	b.n	8006bbe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d105      	bne.n	8006b92 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006b92:	2180      	movs	r1, #128	; 0x80
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f001 fae3 	bl	8008160 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 fed4 	bl	8007948 <USBD_CtlReceiveStatus>
 8006ba0:	e00d      	b.n	8006bbe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d004      	beq.n	8006bb6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d103      	bne.n	8006bbe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006bb6:	2180      	movs	r1, #128	; 0x80
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f001 fad1 	bl	8008160 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d11d      	bne.n	8006c04 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f7ff fe80 	bl	80068ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006bd6:	e015      	b.n	8006c04 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00d      	beq.n	8006c00 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d108      	bne.n	8006c00 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	7afa      	ldrb	r2, [r7, #11]
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	4798      	blx	r3
 8006bfe:	e001      	b.n	8006c04 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c00:	2302      	movs	r3, #2
 8006c02:	e000      	b.n	8006c06 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b082      	sub	sp, #8
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c16:	2340      	movs	r3, #64	; 0x40
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 fa5a 	bl	80080d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2240      	movs	r2, #64	; 0x40
 8006c2e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c32:	2340      	movs	r3, #64	; 0x40
 8006c34:	2200      	movs	r2, #0
 8006c36:	2180      	movs	r1, #128	; 0x80
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 fa4c 	bl	80080d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2240      	movs	r2, #64	; 0x40
 8006c48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d009      	beq.n	8006c86 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6852      	ldr	r2, [r2, #4]
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	4611      	mov	r1, r2
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	4798      	blx	r3
  }

  return USBD_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	78fa      	ldrb	r2, [r7, #3]
 8006ca0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2204      	movs	r2, #4
 8006cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d105      	bne.n	8006cf8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d10b      	bne.n	8006d30 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d52:	2b40      	cmp	r3, #64	; 0x40
 8006d54:	d005      	beq.n	8006d62 <USBD_StdDevReq+0x26>
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	d84f      	bhi.n	8006dfa <USBD_StdDevReq+0xbe>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <USBD_StdDevReq+0x36>
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d14b      	bne.n	8006dfa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	4798      	blx	r3
      break;
 8006d70:	e048      	b.n	8006e04 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	785b      	ldrb	r3, [r3, #1]
 8006d76:	2b09      	cmp	r3, #9
 8006d78:	d839      	bhi.n	8006dee <USBD_StdDevReq+0xb2>
 8006d7a:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <USBD_StdDevReq+0x44>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006dd1 	.word	0x08006dd1
 8006d84:	08006de5 	.word	0x08006de5
 8006d88:	08006def 	.word	0x08006def
 8006d8c:	08006ddb 	.word	0x08006ddb
 8006d90:	08006def 	.word	0x08006def
 8006d94:	08006db3 	.word	0x08006db3
 8006d98:	08006da9 	.word	0x08006da9
 8006d9c:	08006def 	.word	0x08006def
 8006da0:	08006dc7 	.word	0x08006dc7
 8006da4:	08006dbd 	.word	0x08006dbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f9dc 	bl	8007168 <USBD_GetDescriptor>
          break;
 8006db0:	e022      	b.n	8006df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fb3f 	bl	8007438 <USBD_SetAddress>
          break;
 8006dba:	e01d      	b.n	8006df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fb7e 	bl	80074c0 <USBD_SetConfig>
          break;
 8006dc4:	e018      	b.n	8006df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fc07 	bl	80075dc <USBD_GetConfig>
          break;
 8006dce:	e013      	b.n	8006df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fc37 	bl	8007646 <USBD_GetStatus>
          break;
 8006dd8:	e00e      	b.n	8006df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fc65 	bl	80076ac <USBD_SetFeature>
          break;
 8006de2:	e009      	b.n	8006df8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fc74 	bl	80076d4 <USBD_ClrFeature>
          break;
 8006dec:	e004      	b.n	8006df8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fccd 	bl	8007790 <USBD_CtlError>
          break;
 8006df6:	bf00      	nop
      }
      break;
 8006df8:	e004      	b.n	8006e04 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fcc7 	bl	8007790 <USBD_CtlError>
      break;
 8006e02:	bf00      	nop
  }

  return ret;
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop

08006e10 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d005      	beq.n	8006e36 <USBD_StdItfReq+0x26>
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d82e      	bhi.n	8006e8c <USBD_StdItfReq+0x7c>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <USBD_StdItfReq+0x26>
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	d12a      	bne.n	8006e8c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d81d      	bhi.n	8006e7e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	889b      	ldrh	r3, [r3, #4]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d813      	bhi.n	8006e74 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	4798      	blx	r3
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	88db      	ldrh	r3, [r3, #6]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d110      	bne.n	8006e88 <USBD_StdItfReq+0x78>
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10d      	bne.n	8006e88 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fd58 	bl	8007922 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e72:	e009      	b.n	8006e88 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fc8a 	bl	8007790 <USBD_CtlError>
          break;
 8006e7c:	e004      	b.n	8006e88 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fc85 	bl	8007790 <USBD_CtlError>
          break;
 8006e86:	e000      	b.n	8006e8a <USBD_StdItfReq+0x7a>
          break;
 8006e88:	bf00      	nop
      }
      break;
 8006e8a:	e004      	b.n	8006e96 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fc7e 	bl	8007790 <USBD_CtlError>
      break;
 8006e94:	bf00      	nop
  }

  return USBD_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	889b      	ldrh	r3, [r3, #4]
 8006eb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ebc:	2b40      	cmp	r3, #64	; 0x40
 8006ebe:	d007      	beq.n	8006ed0 <USBD_StdEPReq+0x30>
 8006ec0:	2b40      	cmp	r3, #64	; 0x40
 8006ec2:	f200 8146 	bhi.w	8007152 <USBD_StdEPReq+0x2b2>
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <USBD_StdEPReq+0x40>
 8006eca:	2b20      	cmp	r3, #32
 8006ecc:	f040 8141 	bne.w	8007152 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
      break;
 8006ede:	e13d      	b.n	800715c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d10a      	bne.n	8006f02 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
 8006efa:	4603      	mov	r3, r0
 8006efc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	e12d      	b.n	800715e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	785b      	ldrb	r3, [r3, #1]
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d007      	beq.n	8006f1a <USBD_StdEPReq+0x7a>
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	f300 811b 	bgt.w	8007146 <USBD_StdEPReq+0x2a6>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d072      	beq.n	8006ffa <USBD_StdEPReq+0x15a>
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d03a      	beq.n	8006f8e <USBD_StdEPReq+0xee>
 8006f18:	e115      	b.n	8007146 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d002      	beq.n	8006f2a <USBD_StdEPReq+0x8a>
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d015      	beq.n	8006f54 <USBD_StdEPReq+0xb4>
 8006f28:	e02b      	b.n	8006f82 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00c      	beq.n	8006f4a <USBD_StdEPReq+0xaa>
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	2b80      	cmp	r3, #128	; 0x80
 8006f34:	d009      	beq.n	8006f4a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f001 f910 	bl	8008160 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f40:	2180      	movs	r1, #128	; 0x80
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 f90c 	bl	8008160 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f48:	e020      	b.n	8006f8c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fc1f 	bl	8007790 <USBD_CtlError>
              break;
 8006f52:	e01b      	b.n	8006f8c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	885b      	ldrh	r3, [r3, #2]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10e      	bne.n	8006f7a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00b      	beq.n	8006f7a <USBD_StdEPReq+0xda>
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	2b80      	cmp	r3, #128	; 0x80
 8006f66:	d008      	beq.n	8006f7a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	88db      	ldrh	r3, [r3, #6]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 f8f3 	bl	8008160 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fcd1 	bl	8007922 <USBD_CtlSendStatus>

              break;
 8006f80:	e004      	b.n	8006f8c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fc03 	bl	8007790 <USBD_CtlError>
              break;
 8006f8a:	bf00      	nop
          }
          break;
 8006f8c:	e0e0      	b.n	8007150 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d002      	beq.n	8006f9e <USBD_StdEPReq+0xfe>
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d015      	beq.n	8006fc8 <USBD_StdEPReq+0x128>
 8006f9c:	e026      	b.n	8006fec <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00c      	beq.n	8006fbe <USBD_StdEPReq+0x11e>
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b80      	cmp	r3, #128	; 0x80
 8006fa8:	d009      	beq.n	8006fbe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 f8d6 	bl	8008160 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006fb4:	2180      	movs	r1, #128	; 0x80
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f001 f8d2 	bl	8008160 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fbc:	e01c      	b.n	8006ff8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fbe5 	bl	8007790 <USBD_CtlError>
              break;
 8006fc6:	e017      	b.n	8006ff8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	885b      	ldrh	r3, [r3, #2]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d112      	bne.n	8006ff6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 f8dd 	bl	800819e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fc9c 	bl	8007922 <USBD_CtlSendStatus>
              }
              break;
 8006fea:	e004      	b.n	8006ff6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fbce 	bl	8007790 <USBD_CtlError>
              break;
 8006ff4:	e000      	b.n	8006ff8 <USBD_StdEPReq+0x158>
              break;
 8006ff6:	bf00      	nop
          }
          break;
 8006ff8:	e0aa      	b.n	8007150 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007000:	2b02      	cmp	r3, #2
 8007002:	d002      	beq.n	800700a <USBD_StdEPReq+0x16a>
 8007004:	2b03      	cmp	r3, #3
 8007006:	d032      	beq.n	800706e <USBD_StdEPReq+0x1ce>
 8007008:	e097      	b.n	800713a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d007      	beq.n	8007020 <USBD_StdEPReq+0x180>
 8007010:	7bbb      	ldrb	r3, [r7, #14]
 8007012:	2b80      	cmp	r3, #128	; 0x80
 8007014:	d004      	beq.n	8007020 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fbb9 	bl	8007790 <USBD_CtlError>
                break;
 800701e:	e091      	b.n	8007144 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007024:	2b00      	cmp	r3, #0
 8007026:	da0b      	bge.n	8007040 <USBD_StdEPReq+0x1a0>
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	3310      	adds	r3, #16
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	4413      	add	r3, r2
 800703c:	3304      	adds	r3, #4
 800703e:	e00b      	b.n	8007058 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	3304      	adds	r3, #4
 8007058:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2202      	movs	r2, #2
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fbfd 	bl	8007866 <USBD_CtlSendData>
              break;
 800706c:	e06a      	b.n	8007144 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800706e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007072:	2b00      	cmp	r3, #0
 8007074:	da11      	bge.n	800709a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	f003 020f 	and.w	r2, r3, #15
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	440b      	add	r3, r1
 8007088:	3318      	adds	r3, #24
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d117      	bne.n	80070c0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fb7c 	bl	8007790 <USBD_CtlError>
                  break;
 8007098:	e054      	b.n	8007144 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800709a:	7bbb      	ldrb	r3, [r7, #14]
 800709c:	f003 020f 	and.w	r2, r3, #15
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	440b      	add	r3, r1
 80070ac:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d104      	bne.n	80070c0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fb69 	bl	8007790 <USBD_CtlError>
                  break;
 80070be:	e041      	b.n	8007144 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	da0b      	bge.n	80070e0 <USBD_StdEPReq+0x240>
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	3310      	adds	r3, #16
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	4413      	add	r3, r2
 80070dc:	3304      	adds	r3, #4
 80070de:	e00b      	b.n	80070f8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4413      	add	r3, r2
 80070f6:	3304      	adds	r3, #4
 80070f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <USBD_StdEPReq+0x266>
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	2b80      	cmp	r3, #128	; 0x80
 8007104:	d103      	bne.n	800710e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	e00e      	b.n	800712c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 f862 	bl	80081dc <USBD_LL_IsStallEP>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2201      	movs	r2, #1
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	e002      	b.n	800712c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2202      	movs	r2, #2
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fb97 	bl	8007866 <USBD_CtlSendData>
              break;
 8007138:	e004      	b.n	8007144 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fb27 	bl	8007790 <USBD_CtlError>
              break;
 8007142:	bf00      	nop
          }
          break;
 8007144:	e004      	b.n	8007150 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fb21 	bl	8007790 <USBD_CtlError>
          break;
 800714e:	bf00      	nop
      }
      break;
 8007150:	e004      	b.n	800715c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fb1b 	bl	8007790 <USBD_CtlError>
      break;
 800715a:	bf00      	nop
  }

  return ret;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	885b      	ldrh	r3, [r3, #2]
 8007182:	0a1b      	lsrs	r3, r3, #8
 8007184:	b29b      	uxth	r3, r3
 8007186:	3b01      	subs	r3, #1
 8007188:	2b06      	cmp	r3, #6
 800718a:	f200 8128 	bhi.w	80073de <USBD_GetDescriptor+0x276>
 800718e:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <USBD_GetDescriptor+0x2c>)
 8007190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007194:	080071b1 	.word	0x080071b1
 8007198:	080071c9 	.word	0x080071c9
 800719c:	08007209 	.word	0x08007209
 80071a0:	080073df 	.word	0x080073df
 80071a4:	080073df 	.word	0x080073df
 80071a8:	0800737f 	.word	0x0800737f
 80071ac:	080073ab 	.word	0x080073ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	7c12      	ldrb	r2, [r2, #16]
 80071bc:	f107 0108 	add.w	r1, r7, #8
 80071c0:	4610      	mov	r0, r2
 80071c2:	4798      	blx	r3
 80071c4:	60f8      	str	r0, [r7, #12]
      break;
 80071c6:	e112      	b.n	80073ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	7c1b      	ldrb	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10d      	bne.n	80071ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d8:	f107 0208 	add.w	r2, r7, #8
 80071dc:	4610      	mov	r0, r2
 80071de:	4798      	blx	r3
 80071e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3301      	adds	r3, #1
 80071e6:	2202      	movs	r2, #2
 80071e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80071ea:	e100      	b.n	80073ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	f107 0208 	add.w	r2, r7, #8
 80071f8:	4610      	mov	r0, r2
 80071fa:	4798      	blx	r3
 80071fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3301      	adds	r3, #1
 8007202:	2202      	movs	r2, #2
 8007204:	701a      	strb	r2, [r3, #0]
      break;
 8007206:	e0f2      	b.n	80073ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	885b      	ldrh	r3, [r3, #2]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b05      	cmp	r3, #5
 8007210:	f200 80ac 	bhi.w	800736c <USBD_GetDescriptor+0x204>
 8007214:	a201      	add	r2, pc, #4	; (adr r2, 800721c <USBD_GetDescriptor+0xb4>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	08007235 	.word	0x08007235
 8007220:	08007269 	.word	0x08007269
 8007224:	0800729d 	.word	0x0800729d
 8007228:	080072d1 	.word	0x080072d1
 800722c:	08007305 	.word	0x08007305
 8007230:	08007339 	.word	0x08007339
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	7c12      	ldrb	r2, [r2, #16]
 800724c:	f107 0108 	add.w	r1, r7, #8
 8007250:	4610      	mov	r0, r2
 8007252:	4798      	blx	r3
 8007254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007256:	e091      	b.n	800737c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fa98 	bl	8007790 <USBD_CtlError>
            err++;
 8007260:	7afb      	ldrb	r3, [r7, #11]
 8007262:	3301      	adds	r3, #1
 8007264:	72fb      	strb	r3, [r7, #11]
          break;
 8007266:	e089      	b.n	800737c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	7c12      	ldrb	r2, [r2, #16]
 8007280:	f107 0108 	add.w	r1, r7, #8
 8007284:	4610      	mov	r0, r2
 8007286:	4798      	blx	r3
 8007288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800728a:	e077      	b.n	800737c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa7e 	bl	8007790 <USBD_CtlError>
            err++;
 8007294:	7afb      	ldrb	r3, [r7, #11]
 8007296:	3301      	adds	r3, #1
 8007298:	72fb      	strb	r3, [r7, #11]
          break;
 800729a:	e06f      	b.n	800737c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	7c12      	ldrb	r2, [r2, #16]
 80072b4:	f107 0108 	add.w	r1, r7, #8
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
 80072bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072be:	e05d      	b.n	800737c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa64 	bl	8007790 <USBD_CtlError>
            err++;
 80072c8:	7afb      	ldrb	r3, [r7, #11]
 80072ca:	3301      	adds	r3, #1
 80072cc:	72fb      	strb	r3, [r7, #11]
          break;
 80072ce:	e055      	b.n	800737c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	7c12      	ldrb	r2, [r2, #16]
 80072e8:	f107 0108 	add.w	r1, r7, #8
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
 80072f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072f2:	e043      	b.n	800737c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa4a 	bl	8007790 <USBD_CtlError>
            err++;
 80072fc:	7afb      	ldrb	r3, [r7, #11]
 80072fe:	3301      	adds	r3, #1
 8007300:	72fb      	strb	r3, [r7, #11]
          break;
 8007302:	e03b      	b.n	800737c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00b      	beq.n	8007328 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	7c12      	ldrb	r2, [r2, #16]
 800731c:	f107 0108 	add.w	r1, r7, #8
 8007320:	4610      	mov	r0, r2
 8007322:	4798      	blx	r3
 8007324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007326:	e029      	b.n	800737c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa30 	bl	8007790 <USBD_CtlError>
            err++;
 8007330:	7afb      	ldrb	r3, [r7, #11]
 8007332:	3301      	adds	r3, #1
 8007334:	72fb      	strb	r3, [r7, #11]
          break;
 8007336:	e021      	b.n	800737c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00b      	beq.n	800735c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	7c12      	ldrb	r2, [r2, #16]
 8007350:	f107 0108 	add.w	r1, r7, #8
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
 8007358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800735a:	e00f      	b.n	800737c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa16 	bl	8007790 <USBD_CtlError>
            err++;
 8007364:	7afb      	ldrb	r3, [r7, #11]
 8007366:	3301      	adds	r3, #1
 8007368:	72fb      	strb	r3, [r7, #11]
          break;
 800736a:	e007      	b.n	800737c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fa0e 	bl	8007790 <USBD_CtlError>
          err++;
 8007374:	7afb      	ldrb	r3, [r7, #11]
 8007376:	3301      	adds	r3, #1
 8007378:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800737a:	e038      	b.n	80073ee <USBD_GetDescriptor+0x286>
 800737c:	e037      	b.n	80073ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	7c1b      	ldrb	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d109      	bne.n	800739a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800738c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738e:	f107 0208 	add.w	r2, r7, #8
 8007392:	4610      	mov	r0, r2
 8007394:	4798      	blx	r3
 8007396:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007398:	e029      	b.n	80073ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f9f7 	bl	8007790 <USBD_CtlError>
        err++;
 80073a2:	7afb      	ldrb	r3, [r7, #11]
 80073a4:	3301      	adds	r3, #1
 80073a6:	72fb      	strb	r3, [r7, #11]
      break;
 80073a8:	e021      	b.n	80073ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	7c1b      	ldrb	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10d      	bne.n	80073ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ba:	f107 0208 	add.w	r2, r7, #8
 80073be:	4610      	mov	r0, r2
 80073c0:	4798      	blx	r3
 80073c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	3301      	adds	r3, #1
 80073c8:	2207      	movs	r2, #7
 80073ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073cc:	e00f      	b.n	80073ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f9dd 	bl	8007790 <USBD_CtlError>
        err++;
 80073d6:	7afb      	ldrb	r3, [r7, #11]
 80073d8:	3301      	adds	r3, #1
 80073da:	72fb      	strb	r3, [r7, #11]
      break;
 80073dc:	e007      	b.n	80073ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f9d5 	bl	8007790 <USBD_CtlError>
      err++;
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	3301      	adds	r3, #1
 80073ea:	72fb      	strb	r3, [r7, #11]
      break;
 80073ec:	bf00      	nop
  }

  if (err != 0U)
 80073ee:	7afb      	ldrb	r3, [r7, #11]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d11c      	bne.n	800742e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80073f4:	893b      	ldrh	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d011      	beq.n	800741e <USBD_GetDescriptor+0x2b6>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	88db      	ldrh	r3, [r3, #6]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00d      	beq.n	800741e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	88da      	ldrh	r2, [r3, #6]
 8007406:	893b      	ldrh	r3, [r7, #8]
 8007408:	4293      	cmp	r3, r2
 800740a:	bf28      	it	cs
 800740c:	4613      	movcs	r3, r2
 800740e:	b29b      	uxth	r3, r3
 8007410:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007412:	893b      	ldrh	r3, [r7, #8]
 8007414:	461a      	mov	r2, r3
 8007416:	68f9      	ldr	r1, [r7, #12]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fa24 	bl	8007866 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	88db      	ldrh	r3, [r3, #6]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d104      	bne.n	8007430 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fa7b 	bl	8007922 <USBD_CtlSendStatus>
 800742c:	e000      	b.n	8007430 <USBD_GetDescriptor+0x2c8>
    return;
 800742e:	bf00      	nop
    }
  }
}
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop

08007438 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	889b      	ldrh	r3, [r3, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d130      	bne.n	80074ac <USBD_SetAddress+0x74>
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	88db      	ldrh	r3, [r3, #6]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d12c      	bne.n	80074ac <USBD_SetAddress+0x74>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	885b      	ldrh	r3, [r3, #2]
 8007456:	2b7f      	cmp	r3, #127	; 0x7f
 8007458:	d828      	bhi.n	80074ac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	885b      	ldrh	r3, [r3, #2]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007464:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800746c:	2b03      	cmp	r3, #3
 800746e:	d104      	bne.n	800747a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f98c 	bl	8007790 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007478:	e01d      	b.n	80074b6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	7bfa      	ldrb	r2, [r7, #15]
 800747e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fed5 	bl	8008236 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fa48 	bl	8007922 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d004      	beq.n	80074a2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074a0:	e009      	b.n	80074b6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074aa:	e004      	b.n	80074b6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f96e 	bl	8007790 <USBD_CtlError>
  }
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
	...

080074c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	885b      	ldrh	r3, [r3, #2]
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	4b41      	ldr	r3, [pc, #260]	; (80075d8 <USBD_SetConfig+0x118>)
 80074d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074d4:	4b40      	ldr	r3, [pc, #256]	; (80075d8 <USBD_SetConfig+0x118>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d904      	bls.n	80074e6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f956 	bl	8007790 <USBD_CtlError>
 80074e4:	e075      	b.n	80075d2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d002      	beq.n	80074f6 <USBD_SetConfig+0x36>
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d023      	beq.n	800753c <USBD_SetConfig+0x7c>
 80074f4:	e062      	b.n	80075bc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80074f6:	4b38      	ldr	r3, [pc, #224]	; (80075d8 <USBD_SetConfig+0x118>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d01a      	beq.n	8007534 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80074fe:	4b36      	ldr	r3, [pc, #216]	; (80075d8 <USBD_SetConfig+0x118>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2203      	movs	r2, #3
 800750c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007510:	4b31      	ldr	r3, [pc, #196]	; (80075d8 <USBD_SetConfig+0x118>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7ff f9e4 	bl	80068e4 <USBD_SetClassConfig>
 800751c:	4603      	mov	r3, r0
 800751e:	2b02      	cmp	r3, #2
 8007520:	d104      	bne.n	800752c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f933 	bl	8007790 <USBD_CtlError>
            return;
 800752a:	e052      	b.n	80075d2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f9f8 	bl	8007922 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007532:	e04e      	b.n	80075d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f9f4 	bl	8007922 <USBD_CtlSendStatus>
        break;
 800753a:	e04a      	b.n	80075d2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800753c:	4b26      	ldr	r3, [pc, #152]	; (80075d8 <USBD_SetConfig+0x118>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d112      	bne.n	800756a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800754c:	4b22      	ldr	r3, [pc, #136]	; (80075d8 <USBD_SetConfig+0x118>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007556:	4b20      	ldr	r3, [pc, #128]	; (80075d8 <USBD_SetConfig+0x118>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff f9e0 	bl	8006922 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f9dd 	bl	8007922 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007568:	e033      	b.n	80075d2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800756a:	4b1b      	ldr	r3, [pc, #108]	; (80075d8 <USBD_SetConfig+0x118>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	429a      	cmp	r2, r3
 8007576:	d01d      	beq.n	80075b4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff f9ce 	bl	8006922 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007586:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <USBD_SetConfig+0x118>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007590:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <USBD_SetConfig+0x118>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7ff f9a4 	bl	80068e4 <USBD_SetClassConfig>
 800759c:	4603      	mov	r3, r0
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d104      	bne.n	80075ac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f8f3 	bl	8007790 <USBD_CtlError>
            return;
 80075aa:	e012      	b.n	80075d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f9b8 	bl	8007922 <USBD_CtlSendStatus>
        break;
 80075b2:	e00e      	b.n	80075d2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f9b4 	bl	8007922 <USBD_CtlSendStatus>
        break;
 80075ba:	e00a      	b.n	80075d2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f8e6 	bl	8007790 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80075c4:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <USBD_SetConfig+0x118>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7ff f9a9 	bl	8006922 <USBD_ClrClassConfig>
        break;
 80075d0:	bf00      	nop
    }
  }
}
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	200001a4 	.word	0x200001a4

080075dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	88db      	ldrh	r3, [r3, #6]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d004      	beq.n	80075f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f8cd 	bl	8007790 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80075f6:	e022      	b.n	800763e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fe:	2b02      	cmp	r3, #2
 8007600:	dc02      	bgt.n	8007608 <USBD_GetConfig+0x2c>
 8007602:	2b00      	cmp	r3, #0
 8007604:	dc03      	bgt.n	800760e <USBD_GetConfig+0x32>
 8007606:	e015      	b.n	8007634 <USBD_GetConfig+0x58>
 8007608:	2b03      	cmp	r3, #3
 800760a:	d00b      	beq.n	8007624 <USBD_GetConfig+0x48>
 800760c:	e012      	b.n	8007634 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3308      	adds	r3, #8
 8007618:	2201      	movs	r2, #1
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f922 	bl	8007866 <USBD_CtlSendData>
        break;
 8007622:	e00c      	b.n	800763e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3304      	adds	r3, #4
 8007628:	2201      	movs	r2, #1
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f91a 	bl	8007866 <USBD_CtlSendData>
        break;
 8007632:	e004      	b.n	800763e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f8aa 	bl	8007790 <USBD_CtlError>
        break;
 800763c:	bf00      	nop
}
 800763e:	bf00      	nop
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b082      	sub	sp, #8
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007656:	3b01      	subs	r3, #1
 8007658:	2b02      	cmp	r3, #2
 800765a:	d81e      	bhi.n	800769a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	88db      	ldrh	r3, [r3, #6]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d004      	beq.n	800766e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f892 	bl	8007790 <USBD_CtlError>
        break;
 800766c:	e01a      	b.n	80076a4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f043 0202 	orr.w	r2, r3, #2
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	330c      	adds	r3, #12
 800768e:	2202      	movs	r2, #2
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f8e7 	bl	8007866 <USBD_CtlSendData>
      break;
 8007698:	e004      	b.n	80076a4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f877 	bl	8007790 <USBD_CtlError>
      break;
 80076a2:	bf00      	nop
  }
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	885b      	ldrh	r3, [r3, #2]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d106      	bne.n	80076cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f92b 	bl	8007922 <USBD_CtlSendStatus>
  }
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e4:	3b01      	subs	r3, #1
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d80b      	bhi.n	8007702 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	885b      	ldrh	r3, [r3, #2]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d10c      	bne.n	800770c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f911 	bl	8007922 <USBD_CtlSendStatus>
      }
      break;
 8007700:	e004      	b.n	800770c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f843 	bl	8007790 <USBD_CtlError>
      break;
 800770a:	e000      	b.n	800770e <USBD_ClrFeature+0x3a>
      break;
 800770c:	bf00      	nop
  }
}
 800770e:	bf00      	nop
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781a      	ldrb	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	785a      	ldrb	r2, [r3, #1]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	3302      	adds	r3, #2
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	b29a      	uxth	r2, r3
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	3303      	adds	r3, #3
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	b29b      	uxth	r3, r3
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	b29b      	uxth	r3, r3
 8007744:	4413      	add	r3, r2
 8007746:	b29a      	uxth	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	3304      	adds	r3, #4
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	b29a      	uxth	r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	3305      	adds	r3, #5
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	b29b      	uxth	r3, r3
 8007760:	4413      	add	r3, r2
 8007762:	b29a      	uxth	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	3306      	adds	r3, #6
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	b29a      	uxth	r2, r3
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	3307      	adds	r3, #7
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	b29b      	uxth	r3, r3
 800777c:	4413      	add	r3, r2
 800777e:	b29a      	uxth	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	80da      	strh	r2, [r3, #6]

}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800779a:	2180      	movs	r1, #128	; 0x80
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fcdf 	bl	8008160 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80077a2:	2100      	movs	r1, #0
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fcdb 	bl	8008160 <USBD_LL_StallEP>
}
 80077aa:	bf00      	nop
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b086      	sub	sp, #24
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d032      	beq.n	800782e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f834 	bl	8007836 <USBD_GetLen>
 80077ce:	4603      	mov	r3, r0
 80077d0:	3301      	adds	r3, #1
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	75fa      	strb	r2, [r7, #23]
 80077e2:	461a      	mov	r2, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4413      	add	r3, r2
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	7812      	ldrb	r2, [r2, #0]
 80077ec:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	75fa      	strb	r2, [r7, #23]
 80077f4:	461a      	mov	r2, r3
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	4413      	add	r3, r2
 80077fa:	2203      	movs	r2, #3
 80077fc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80077fe:	e012      	b.n	8007826 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	60fa      	str	r2, [r7, #12]
 8007806:	7dfa      	ldrb	r2, [r7, #23]
 8007808:	1c51      	adds	r1, r2, #1
 800780a:	75f9      	strb	r1, [r7, #23]
 800780c:	4611      	mov	r1, r2
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	440a      	add	r2, r1
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	1c5a      	adds	r2, r3, #1
 800781a:	75fa      	strb	r2, [r7, #23]
 800781c:	461a      	mov	r2, r3
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	4413      	add	r3, r2
 8007822:	2200      	movs	r2, #0
 8007824:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e8      	bne.n	8007800 <USBD_GetString+0x4e>
    }
  }
}
 800782e:	bf00      	nop
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007836:	b480      	push	{r7}
 8007838:	b085      	sub	sp, #20
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007842:	e005      	b.n	8007850 <USBD_GetLen+0x1a>
  {
    len++;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	3301      	adds	r3, #1
 8007848:	73fb      	strb	r3, [r7, #15]
    buf++;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	3301      	adds	r3, #1
 800784e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1f5      	bne.n	8007844 <USBD_GetLen+0xe>
  }

  return len;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	4613      	mov	r3, r2
 8007872:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2202      	movs	r2, #2
 8007878:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800787c:	88fa      	ldrh	r2, [r7, #6]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007882:	88fa      	ldrh	r2, [r7, #6]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007888:	88fb      	ldrh	r3, [r7, #6]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	2100      	movs	r1, #0
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 fcf0 	bl	8008274 <USBD_LL_Transmit>

  return USBD_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b084      	sub	sp, #16
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	4613      	mov	r3, r2
 80078aa:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078ac:	88fb      	ldrh	r3, [r7, #6]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	2100      	movs	r1, #0
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 fcde 	bl	8008274 <USBD_LL_Transmit>

  return USBD_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	4613      	mov	r3, r2
 80078ce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2203      	movs	r2, #3
 80078d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80078d8:	88fa      	ldrh	r2, [r7, #6]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80078e0:	88fa      	ldrh	r2, [r7, #6]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078e8:	88fb      	ldrh	r3, [r7, #6]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	2100      	movs	r1, #0
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 fce3 	bl	80082ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	60b9      	str	r1, [r7, #8]
 8007908:	4613      	mov	r3, r2
 800790a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800790c:	88fb      	ldrh	r3, [r7, #6]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	2100      	movs	r1, #0
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 fcd1 	bl	80082ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b082      	sub	sp, #8
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2204      	movs	r2, #4
 800792e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007932:	2300      	movs	r3, #0
 8007934:	2200      	movs	r2, #0
 8007936:	2100      	movs	r1, #0
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fc9b 	bl	8008274 <USBD_LL_Transmit>

  return USBD_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2205      	movs	r2, #5
 8007954:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007958:	2300      	movs	r3, #0
 800795a:	2200      	movs	r2, #0
 800795c:	2100      	movs	r1, #0
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fcab 	bl	80082ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007974:	2200      	movs	r2, #0
 8007976:	4912      	ldr	r1, [pc, #72]	; (80079c0 <MX_USB_DEVICE_Init+0x50>)
 8007978:	4812      	ldr	r0, [pc, #72]	; (80079c4 <MX_USB_DEVICE_Init+0x54>)
 800797a:	f7fe ff57 	bl	800682c <USBD_Init>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007984:	f7f8 fd26 	bl	80003d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007988:	490f      	ldr	r1, [pc, #60]	; (80079c8 <MX_USB_DEVICE_Init+0x58>)
 800798a:	480e      	ldr	r0, [pc, #56]	; (80079c4 <MX_USB_DEVICE_Init+0x54>)
 800798c:	f7fe ff79 	bl	8006882 <USBD_RegisterClass>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007996:	f7f8 fd1d 	bl	80003d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800799a:	490c      	ldr	r1, [pc, #48]	; (80079cc <MX_USB_DEVICE_Init+0x5c>)
 800799c:	4809      	ldr	r0, [pc, #36]	; (80079c4 <MX_USB_DEVICE_Init+0x54>)
 800799e:	f7fe fea7 	bl	80066f0 <USBD_CDC_RegisterInterface>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079a8:	f7f8 fd14 	bl	80003d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079ac:	4805      	ldr	r0, [pc, #20]	; (80079c4 <MX_USB_DEVICE_Init+0x54>)
 80079ae:	f7fe ff82 	bl	80068b6 <USBD_Start>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80079b8:	f7f8 fd0c 	bl	80003d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079bc:	bf00      	nop
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000134 	.word	0x20000134
 80079c4:	200001a8 	.word	0x200001a8
 80079c8:	20000018 	.word	0x20000018
 80079cc:	20000124 	.word	0x20000124

080079d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80079d4:	2200      	movs	r2, #0
 80079d6:	4905      	ldr	r1, [pc, #20]	; (80079ec <CDC_Init_FS+0x1c>)
 80079d8:	4805      	ldr	r0, [pc, #20]	; (80079f0 <CDC_Init_FS+0x20>)
 80079da:	f7fe fea0 	bl	800671e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80079de:	4905      	ldr	r1, [pc, #20]	; (80079f4 <CDC_Init_FS+0x24>)
 80079e0:	4803      	ldr	r0, [pc, #12]	; (80079f0 <CDC_Init_FS+0x20>)
 80079e2:	f7fe feb6 	bl	8006752 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	2000086c 	.word	0x2000086c
 80079f0:	200001a8 	.word	0x200001a8
 80079f4:	2000046c 	.word	0x2000046c

080079f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	6039      	str	r1, [r7, #0]
 8007a12:	71fb      	strb	r3, [r7, #7]
 8007a14:	4613      	mov	r3, r2
 8007a16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	2b23      	cmp	r3, #35	; 0x23
 8007a1c:	f200 80a2 	bhi.w	8007b64 <CDC_Control_FS+0x15c>
 8007a20:	a201      	add	r2, pc, #4	; (adr r2, 8007a28 <CDC_Control_FS+0x20>)
 8007a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a26:	bf00      	nop
 8007a28:	08007b65 	.word	0x08007b65
 8007a2c:	08007b65 	.word	0x08007b65
 8007a30:	08007b65 	.word	0x08007b65
 8007a34:	08007b65 	.word	0x08007b65
 8007a38:	08007b65 	.word	0x08007b65
 8007a3c:	08007b65 	.word	0x08007b65
 8007a40:	08007b65 	.word	0x08007b65
 8007a44:	08007b65 	.word	0x08007b65
 8007a48:	08007b65 	.word	0x08007b65
 8007a4c:	08007b65 	.word	0x08007b65
 8007a50:	08007b65 	.word	0x08007b65
 8007a54:	08007b65 	.word	0x08007b65
 8007a58:	08007b65 	.word	0x08007b65
 8007a5c:	08007b65 	.word	0x08007b65
 8007a60:	08007b65 	.word	0x08007b65
 8007a64:	08007b65 	.word	0x08007b65
 8007a68:	08007b65 	.word	0x08007b65
 8007a6c:	08007b65 	.word	0x08007b65
 8007a70:	08007b65 	.word	0x08007b65
 8007a74:	08007b65 	.word	0x08007b65
 8007a78:	08007b65 	.word	0x08007b65
 8007a7c:	08007b65 	.word	0x08007b65
 8007a80:	08007b65 	.word	0x08007b65
 8007a84:	08007b65 	.word	0x08007b65
 8007a88:	08007b65 	.word	0x08007b65
 8007a8c:	08007b65 	.word	0x08007b65
 8007a90:	08007b65 	.word	0x08007b65
 8007a94:	08007b65 	.word	0x08007b65
 8007a98:	08007b65 	.word	0x08007b65
 8007a9c:	08007b65 	.word	0x08007b65
 8007aa0:	08007b65 	.word	0x08007b65
 8007aa4:	08007b65 	.word	0x08007b65
 8007aa8:	08007ab9 	.word	0x08007ab9
 8007aac:	08007b07 	.word	0x08007b07
 8007ab0:	08007b65 	.word	0x08007b65
 8007ab4:	08007b65 	.word	0x08007b65
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    {

    	HAL_GPIO_WritePin(GPIOB,LED_GREEN_Pin,GPIO_PIN_SET);
 8007ab8:	2201      	movs	r2, #1
 8007aba:	2120      	movs	r1, #32
 8007abc:	482c      	ldr	r0, [pc, #176]	; (8007b70 <CDC_Control_FS+0x168>)
 8007abe:	f7f9 f839 	bl	8000b34 <HAL_GPIO_WritePin>
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	3301      	adds	r3, #1
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	021b      	lsls	r3, r3, #8
 8007ad0:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	3302      	adds	r3, #2
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8007ada:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	3303      	adds	r3, #3
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	061b      	lsls	r3, r3, #24
 8007ae4:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4b22      	ldr	r3, [pc, #136]	; (8007b74 <CDC_Control_FS+0x16c>)
 8007aea:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	791a      	ldrb	r2, [r3, #4]
 8007af0:	4b20      	ldr	r3, [pc, #128]	; (8007b74 <CDC_Control_FS+0x16c>)
 8007af2:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	795a      	ldrb	r2, [r3, #5]
 8007af8:	4b1e      	ldr	r3, [pc, #120]	; (8007b74 <CDC_Control_FS+0x16c>)
 8007afa:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	799a      	ldrb	r2, [r3, #6]
 8007b00:	4b1c      	ldr	r3, [pc, #112]	; (8007b74 <CDC_Control_FS+0x16c>)
 8007b02:	719a      	strb	r2, [r3, #6]
    }
    break;
 8007b04:	e02f      	b.n	8007b66 <CDC_Control_FS+0x15e>

    case CDC_GET_LINE_CODING:
    {


    	HAL_GPIO_WritePin(GPIOB,LED_GREEN_Pin,GPIO_PIN_SET);
 8007b06:	2201      	movs	r2, #1
 8007b08:	2120      	movs	r1, #32
 8007b0a:	4819      	ldr	r0, [pc, #100]	; (8007b70 <CDC_Control_FS+0x168>)
 8007b0c:	f7f9 f812 	bl	8000b34 <HAL_GPIO_WritePin>
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 8007b10:	4b18      	ldr	r3, [pc, #96]	; (8007b74 <CDC_Control_FS+0x16c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8007b1a:	4b16      	ldr	r3, [pc, #88]	; (8007b74 <CDC_Control_FS+0x16c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	0a1a      	lsrs	r2, r3, #8
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	3301      	adds	r3, #1
 8007b24:	b2d2      	uxtb	r2, r2
 8007b26:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8007b28:	4b12      	ldr	r3, [pc, #72]	; (8007b74 <CDC_Control_FS+0x16c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	0c1a      	lsrs	r2, r3, #16
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	3302      	adds	r3, #2
 8007b32:	b2d2      	uxtb	r2, r2
 8007b34:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8007b36:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <CDC_Control_FS+0x16c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	0e1a      	lsrs	r2, r3, #24
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	3303      	adds	r3, #3
 8007b40:	b2d2      	uxtb	r2, r2
 8007b42:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4a0a      	ldr	r2, [pc, #40]	; (8007b74 <CDC_Control_FS+0x16c>)
 8007b4a:	7912      	ldrb	r2, [r2, #4]
 8007b4c:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	3305      	adds	r3, #5
 8007b52:	4a08      	ldr	r2, [pc, #32]	; (8007b74 <CDC_Control_FS+0x16c>)
 8007b54:	7952      	ldrb	r2, [r2, #5]
 8007b56:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	3306      	adds	r3, #6
 8007b5c:	4a05      	ldr	r2, [pc, #20]	; (8007b74 <CDC_Control_FS+0x16c>)
 8007b5e:	7992      	ldrb	r2, [r2, #6]
 8007b60:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007b62:	e000      	b.n	8007b66 <CDC_Control_FS+0x15e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b64:	bf00      	nop
  }

  return (USBD_OK);
 8007b66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	48000400 	.word	0x48000400
 8007b74:	2000011c 	.word	0x2000011c

08007b78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	4805      	ldr	r0, [pc, #20]	; (8007b9c <CDC_Receive_FS+0x24>)
 8007b86:	f7fe fde4 	bl	8006752 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b8a:	4804      	ldr	r0, [pc, #16]	; (8007b9c <CDC_Receive_FS+0x24>)
 8007b8c:	f7fe fe24 	bl	80067d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	200001a8 	.word	0x200001a8

08007ba0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007bb0:	4b0d      	ldr	r3, [pc, #52]	; (8007be8 <CDC_Transmit_FS+0x48>)
 8007bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e00b      	b.n	8007bde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007bc6:	887b      	ldrh	r3, [r7, #2]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	6879      	ldr	r1, [r7, #4]
 8007bcc:	4806      	ldr	r0, [pc, #24]	; (8007be8 <CDC_Transmit_FS+0x48>)
 8007bce:	f7fe fda6 	bl	800671e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007bd2:	4805      	ldr	r0, [pc, #20]	; (8007be8 <CDC_Transmit_FS+0x48>)
 8007bd4:	f7fe fdd1 	bl	800677a <USBD_CDC_TransmitPacket>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	200001a8 	.word	0x200001a8

08007bec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	6039      	str	r1, [r7, #0]
 8007bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	2212      	movs	r2, #18
 8007bfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007bfe:	4b03      	ldr	r3, [pc, #12]	; (8007c0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	20000150 	.word	0x20000150

08007c10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	6039      	str	r1, [r7, #0]
 8007c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2204      	movs	r2, #4
 8007c20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c22:	4b03      	ldr	r3, [pc, #12]	; (8007c30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	20000164 	.word	0x20000164

08007c34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d105      	bne.n	8007c52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	4907      	ldr	r1, [pc, #28]	; (8007c68 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c4a:	4808      	ldr	r0, [pc, #32]	; (8007c6c <USBD_FS_ProductStrDescriptor+0x38>)
 8007c4c:	f7ff fdb1 	bl	80077b2 <USBD_GetString>
 8007c50:	e004      	b.n	8007c5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	4904      	ldr	r1, [pc, #16]	; (8007c68 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c56:	4805      	ldr	r0, [pc, #20]	; (8007c6c <USBD_FS_ProductStrDescriptor+0x38>)
 8007c58:	f7ff fdab 	bl	80077b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c5c:	4b02      	ldr	r3, [pc, #8]	; (8007c68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20000c6c 	.word	0x20000c6c
 8007c6c:	08008460 	.word	0x08008460

08007c70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	6039      	str	r1, [r7, #0]
 8007c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	4904      	ldr	r1, [pc, #16]	; (8007c90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c80:	4804      	ldr	r0, [pc, #16]	; (8007c94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c82:	f7ff fd96 	bl	80077b2 <USBD_GetString>
  return USBD_StrDesc;
 8007c86:	4b02      	ldr	r3, [pc, #8]	; (8007c90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20000c6c 	.word	0x20000c6c
 8007c94:	08008478 	.word	0x08008478

08007c98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	6039      	str	r1, [r7, #0]
 8007ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	221a      	movs	r2, #26
 8007ca8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007caa:	f000 f843 	bl	8007d34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007cae:	4b02      	ldr	r3, [pc, #8]	; (8007cb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20000168 	.word	0x20000168

08007cbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	6039      	str	r1, [r7, #0]
 8007cc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d105      	bne.n	8007cda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	4907      	ldr	r1, [pc, #28]	; (8007cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cd2:	4808      	ldr	r0, [pc, #32]	; (8007cf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cd4:	f7ff fd6d 	bl	80077b2 <USBD_GetString>
 8007cd8:	e004      	b.n	8007ce4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	4904      	ldr	r1, [pc, #16]	; (8007cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cde:	4805      	ldr	r0, [pc, #20]	; (8007cf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ce0:	f7ff fd67 	bl	80077b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ce4:	4b02      	ldr	r3, [pc, #8]	; (8007cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20000c6c 	.word	0x20000c6c
 8007cf4:	0800848c 	.word	0x0800848c

08007cf8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	6039      	str	r1, [r7, #0]
 8007d02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d105      	bne.n	8007d16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	4907      	ldr	r1, [pc, #28]	; (8007d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d0e:	4808      	ldr	r0, [pc, #32]	; (8007d30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d10:	f7ff fd4f 	bl	80077b2 <USBD_GetString>
 8007d14:	e004      	b.n	8007d20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	4904      	ldr	r1, [pc, #16]	; (8007d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d1a:	4805      	ldr	r0, [pc, #20]	; (8007d30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d1c:	f7ff fd49 	bl	80077b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d20:	4b02      	ldr	r3, [pc, #8]	; (8007d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000c6c 	.word	0x20000c6c
 8007d30:	08008498 	.word	0x08008498

08007d34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d3a:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <Get_SerialNum+0x44>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d40:	4b0e      	ldr	r3, [pc, #56]	; (8007d7c <Get_SerialNum+0x48>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d46:	4b0e      	ldr	r3, [pc, #56]	; (8007d80 <Get_SerialNum+0x4c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4413      	add	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d5a:	2208      	movs	r2, #8
 8007d5c:	4909      	ldr	r1, [pc, #36]	; (8007d84 <Get_SerialNum+0x50>)
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 f814 	bl	8007d8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d64:	2204      	movs	r2, #4
 8007d66:	4908      	ldr	r1, [pc, #32]	; (8007d88 <Get_SerialNum+0x54>)
 8007d68:	68b8      	ldr	r0, [r7, #8]
 8007d6a:	f000 f80f 	bl	8007d8c <IntToUnicode>
  }
}
 8007d6e:	bf00      	nop
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	1ffff7ac 	.word	0x1ffff7ac
 8007d7c:	1ffff7b0 	.word	0x1ffff7b0
 8007d80:	1ffff7b4 	.word	0x1ffff7b4
 8007d84:	2000016a 	.word	0x2000016a
 8007d88:	2000017a 	.word	0x2000017a

08007d8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b087      	sub	sp, #28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	4613      	mov	r3, r2
 8007d98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75fb      	strb	r3, [r7, #23]
 8007da2:	e027      	b.n	8007df4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	0f1b      	lsrs	r3, r3, #28
 8007da8:	2b09      	cmp	r3, #9
 8007daa:	d80b      	bhi.n	8007dc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	0f1b      	lsrs	r3, r3, #28
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	4619      	mov	r1, r3
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	440b      	add	r3, r1
 8007dbc:	3230      	adds	r2, #48	; 0x30
 8007dbe:	b2d2      	uxtb	r2, r2
 8007dc0:	701a      	strb	r2, [r3, #0]
 8007dc2:	e00a      	b.n	8007dda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	0f1b      	lsrs	r3, r3, #28
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	4619      	mov	r1, r3
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	440b      	add	r3, r1
 8007dd4:	3237      	adds	r2, #55	; 0x37
 8007dd6:	b2d2      	uxtb	r2, r2
 8007dd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	3301      	adds	r3, #1
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	4413      	add	r3, r2
 8007dea:	2200      	movs	r2, #0
 8007dec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	3301      	adds	r3, #1
 8007df2:	75fb      	strb	r3, [r7, #23]
 8007df4:	7dfa      	ldrb	r2, [r7, #23]
 8007df6:	79fb      	ldrb	r3, [r7, #7]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d3d3      	bcc.n	8007da4 <IntToUnicode+0x18>
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	bf00      	nop
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
	...

08007e0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08a      	sub	sp, #40	; 0x28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e14:	f107 0314 	add.w	r3, r7, #20
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	605a      	str	r2, [r3, #4]
 8007e1e:	609a      	str	r2, [r3, #8]
 8007e20:	60da      	str	r2, [r3, #12]
 8007e22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a1f      	ldr	r2, [pc, #124]	; (8007ea8 <HAL_PCD_MspInit+0x9c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d137      	bne.n	8007e9e <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e2e:	4b1f      	ldr	r3, [pc, #124]	; (8007eac <HAL_PCD_MspInit+0xa0>)
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	4a1e      	ldr	r2, [pc, #120]	; (8007eac <HAL_PCD_MspInit+0xa0>)
 8007e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e38:	6153      	str	r3, [r2, #20]
 8007e3a:	4b1c      	ldr	r3, [pc, #112]	; (8007eac <HAL_PCD_MspInit+0xa0>)
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e42:	613b      	str	r3, [r7, #16]
 8007e44:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007e46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e50:	2300      	movs	r3, #0
 8007e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007e54:	2303      	movs	r3, #3
 8007e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8007e58:	230e      	movs	r3, #14
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e5c:	f107 0314 	add.w	r3, r7, #20
 8007e60:	4619      	mov	r1, r3
 8007e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e66:	f7f8 fceb 	bl	8000840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e6a:	4b10      	ldr	r3, [pc, #64]	; (8007eac <HAL_PCD_MspInit+0xa0>)
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	4a0f      	ldr	r2, [pc, #60]	; (8007eac <HAL_PCD_MspInit+0xa0>)
 8007e70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e74:	61d3      	str	r3, [r2, #28]
 8007e76:	4b0d      	ldr	r3, [pc, #52]	; (8007eac <HAL_PCD_MspInit+0xa0>)
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 8007e82:	4b0b      	ldr	r3, [pc, #44]	; (8007eb0 <HAL_PCD_MspInit+0xa4>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a0a      	ldr	r2, [pc, #40]	; (8007eb0 <HAL_PCD_MspInit+0xa4>)
 8007e88:	f043 0320 	orr.w	r3, r3, #32
 8007e8c:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2101      	movs	r1, #1
 8007e92:	204b      	movs	r0, #75	; 0x4b
 8007e94:	f7f8 fc9d 	bl	80007d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007e98:	204b      	movs	r0, #75	; 0x4b
 8007e9a:	f7f8 fcb6 	bl	800080a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e9e:	bf00      	nop
 8007ea0:	3728      	adds	r7, #40	; 0x28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	40005c00 	.word	0x40005c00
 8007eac:	40021000 	.word	0x40021000
 8007eb0:	40010000 	.word	0x40010000

08007eb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007ec8:	4619      	mov	r1, r3
 8007eca:	4610      	mov	r0, r2
 8007ecc:	f7fe fd3c 	bl	8006948 <USBD_LL_SetupStage>
}
 8007ed0:	bf00      	nop
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007eea:	78fa      	ldrb	r2, [r7, #3]
 8007eec:	6879      	ldr	r1, [r7, #4]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	00db      	lsls	r3, r3, #3
 8007ef6:	440b      	add	r3, r1
 8007ef8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	4619      	mov	r1, r3
 8007f02:	f7fe fd6e 	bl	80069e2 <USBD_LL_DataOutStage>
}
 8007f06:	bf00      	nop
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b082      	sub	sp, #8
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	460b      	mov	r3, r1
 8007f18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007f20:	78fa      	ldrb	r2, [r7, #3]
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	4613      	mov	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	440b      	add	r3, r1
 8007f2e:	333c      	adds	r3, #60	; 0x3c
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	78fb      	ldrb	r3, [r7, #3]
 8007f34:	4619      	mov	r1, r3
 8007f36:	f7fe fdc5 	bl	8006ac4 <USBD_LL_DataInStage>
}
 8007f3a:	bf00      	nop
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b082      	sub	sp, #8
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe fed8 	bl	8006d06 <USBD_LL_SOF>
}
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f66:	2301      	movs	r3, #1
 8007f68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d001      	beq.n	8007f76 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f72:	f7f8 fa2f 	bl	80003d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f7c:	7bfa      	ldrb	r2, [r7, #15]
 8007f7e:	4611      	mov	r1, r2
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fe fe85 	bl	8006c90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fe fe3e 	bl	8006c0e <USBD_LL_Reset>
}
 8007f92:	bf00      	nop
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fe fe80 	bl	8006cb0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d005      	beq.n	8007fc4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fb8:	4b04      	ldr	r3, [pc, #16]	; (8007fcc <HAL_PCD_SuspendCallback+0x30>)
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	4a03      	ldr	r2, [pc, #12]	; (8007fcc <HAL_PCD_SuspendCallback+0x30>)
 8007fbe:	f043 0306 	orr.w	r3, r3, #6
 8007fc2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	e000ed00 	.word	0xe000ed00

08007fd0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe fe7b 	bl	8006cda <USBD_LL_Resume>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007ff4:	4a28      	ldr	r2, [pc, #160]	; (8008098 <USBD_LL_Init+0xac>)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a26      	ldr	r2, [pc, #152]	; (8008098 <USBD_LL_Init+0xac>)
 8008000:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008004:	4b24      	ldr	r3, [pc, #144]	; (8008098 <USBD_LL_Init+0xac>)
 8008006:	4a25      	ldr	r2, [pc, #148]	; (800809c <USBD_LL_Init+0xb0>)
 8008008:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800800a:	4b23      	ldr	r3, [pc, #140]	; (8008098 <USBD_LL_Init+0xac>)
 800800c:	2208      	movs	r2, #8
 800800e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008010:	4b21      	ldr	r3, [pc, #132]	; (8008098 <USBD_LL_Init+0xac>)
 8008012:	2202      	movs	r2, #2
 8008014:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008016:	4b20      	ldr	r3, [pc, #128]	; (8008098 <USBD_LL_Init+0xac>)
 8008018:	2202      	movs	r2, #2
 800801a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800801c:	4b1e      	ldr	r3, [pc, #120]	; (8008098 <USBD_LL_Init+0xac>)
 800801e:	2200      	movs	r2, #0
 8008020:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008022:	4b1d      	ldr	r3, [pc, #116]	; (8008098 <USBD_LL_Init+0xac>)
 8008024:	2200      	movs	r2, #0
 8008026:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008028:	481b      	ldr	r0, [pc, #108]	; (8008098 <USBD_LL_Init+0xac>)
 800802a:	f7f8 fdb5 	bl	8000b98 <HAL_PCD_Init>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008034:	f7f8 f9ce 	bl	80003d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800803e:	2318      	movs	r3, #24
 8008040:	2200      	movs	r2, #0
 8008042:	2100      	movs	r1, #0
 8008044:	f7fa fa50 	bl	80024e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800804e:	2358      	movs	r3, #88	; 0x58
 8008050:	2200      	movs	r2, #0
 8008052:	2180      	movs	r1, #128	; 0x80
 8008054:	f7fa fa48 	bl	80024e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800805e:	23c0      	movs	r3, #192	; 0xc0
 8008060:	2200      	movs	r2, #0
 8008062:	2181      	movs	r1, #129	; 0x81
 8008064:	f7fa fa40 	bl	80024e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800806e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008072:	2200      	movs	r2, #0
 8008074:	2101      	movs	r1, #1
 8008076:	f7fa fa37 	bl	80024e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008084:	2200      	movs	r2, #0
 8008086:	2182      	movs	r1, #130	; 0x82
 8008088:	f7fa fa2e 	bl	80024e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000e6c 	.word	0x20000e6c
 800809c:	40005c00 	.word	0x40005c00

080080a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7f8 fe4c 	bl	8000d54 <HAL_PCD_Start>
 80080bc:	4603      	mov	r3, r0
 80080be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 f964 	bl	8008390 <USBD_Get_USB_Status>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	4608      	mov	r0, r1
 80080e0:	4611      	mov	r1, r2
 80080e2:	461a      	mov	r2, r3
 80080e4:	4603      	mov	r3, r0
 80080e6:	70fb      	strb	r3, [r7, #3]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70bb      	strb	r3, [r7, #2]
 80080ec:	4613      	mov	r3, r2
 80080ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080fe:	78bb      	ldrb	r3, [r7, #2]
 8008100:	883a      	ldrh	r2, [r7, #0]
 8008102:	78f9      	ldrb	r1, [r7, #3]
 8008104:	f7f8 ff68 	bl	8000fd8 <HAL_PCD_EP_Open>
 8008108:	4603      	mov	r3, r0
 800810a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	4618      	mov	r0, r3
 8008110:	f000 f93e 	bl	8008390 <USBD_Get_USB_Status>
 8008114:	4603      	mov	r3, r0
 8008116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008118:	7bbb      	ldrb	r3, [r7, #14]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	4611      	mov	r1, r2
 8008140:	4618      	mov	r0, r3
 8008142:	f7f8 ffaf 	bl	80010a4 <HAL_PCD_EP_Close>
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	4618      	mov	r0, r3
 800814e:	f000 f91f 	bl	8008390 <USBD_Get_USB_Status>
 8008152:	4603      	mov	r3, r0
 8008154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008156:	7bbb      	ldrb	r3, [r7, #14]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800817a:	78fa      	ldrb	r2, [r7, #3]
 800817c:	4611      	mov	r1, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f7f9 f870 	bl	8001264 <HAL_PCD_EP_SetStall>
 8008184:	4603      	mov	r3, r0
 8008186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 f900 	bl	8008390 <USBD_Get_USB_Status>
 8008190:	4603      	mov	r3, r0
 8008192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008194:	7bbb      	ldrb	r3, [r7, #14]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	460b      	mov	r3, r1
 80081a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081b8:	78fa      	ldrb	r2, [r7, #3]
 80081ba:	4611      	mov	r1, r2
 80081bc:	4618      	mov	r0, r3
 80081be:	f7f9 f8a3 	bl	8001308 <HAL_PCD_EP_ClrStall>
 80081c2:	4603      	mov	r3, r0
 80081c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 f8e1 	bl	8008390 <USBD_Get_USB_Status>
 80081ce:	4603      	mov	r3, r0
 80081d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	da0c      	bge.n	8008212 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081f8:	78fb      	ldrb	r3, [r7, #3]
 80081fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081fe:	68f9      	ldr	r1, [r7, #12]
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	4613      	mov	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	00db      	lsls	r3, r3, #3
 800820a:	440b      	add	r3, r1
 800820c:	3302      	adds	r3, #2
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	e00b      	b.n	800822a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008212:	78fb      	ldrb	r3, [r7, #3]
 8008214:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008218:	68f9      	ldr	r1, [r7, #12]
 800821a:	4613      	mov	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	440b      	add	r3, r1
 8008224:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008228:	781b      	ldrb	r3, [r3, #0]
  }
}
 800822a:	4618      	mov	r0, r3
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008250:	78fa      	ldrb	r2, [r7, #3]
 8008252:	4611      	mov	r1, r2
 8008254:	4618      	mov	r0, r3
 8008256:	f7f8 fe9a 	bl	8000f8e <HAL_PCD_SetAddress>
 800825a:	4603      	mov	r3, r0
 800825c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800825e:	7bfb      	ldrb	r3, [r7, #15]
 8008260:	4618      	mov	r0, r3
 8008262:	f000 f895 	bl	8008390 <USBD_Get_USB_Status>
 8008266:	4603      	mov	r3, r0
 8008268:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800826a:	7bbb      	ldrb	r3, [r7, #14]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	607a      	str	r2, [r7, #4]
 800827e:	461a      	mov	r2, r3
 8008280:	460b      	mov	r3, r1
 8008282:	72fb      	strb	r3, [r7, #11]
 8008284:	4613      	mov	r3, r2
 8008286:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008296:	893b      	ldrh	r3, [r7, #8]
 8008298:	7af9      	ldrb	r1, [r7, #11]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	f7f8 ff9f 	bl	80011de <HAL_PCD_EP_Transmit>
 80082a0:	4603      	mov	r3, r0
 80082a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 f872 	bl	8008390 <USBD_Get_USB_Status>
 80082ac:	4603      	mov	r3, r0
 80082ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b086      	sub	sp, #24
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	461a      	mov	r2, r3
 80082c6:	460b      	mov	r3, r1
 80082c8:	72fb      	strb	r3, [r7, #11]
 80082ca:	4613      	mov	r3, r2
 80082cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082dc:	893b      	ldrh	r3, [r7, #8]
 80082de:	7af9      	ldrb	r1, [r7, #11]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	f7f8 ff27 	bl	8001134 <HAL_PCD_EP_Receive>
 80082e6:	4603      	mov	r3, r0
 80082e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 f84f 	bl	8008390 <USBD_Get_USB_Status>
 80082f2:	4603      	mov	r3, r0
 80082f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008312:	78fa      	ldrb	r2, [r7, #3]
 8008314:	4611      	mov	r1, r2
 8008316:	4618      	mov	r0, r3
 8008318:	f7f8 ff49 	bl	80011ae <HAL_PCD_EP_GetRxCount>
 800831c:	4603      	mov	r3, r0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008330:	4b03      	ldr	r3, [pc, #12]	; (8008340 <USBD_static_malloc+0x18>)
}
 8008332:	4618      	mov	r0, r3
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	20001158 	.word	0x20001158

08008344 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]

}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8008364:	78fb      	ldrb	r3, [r7, #3]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d107      	bne.n	800837a <HAL_PCDEx_SetConnectionState+0x22>
  {
	/* Configure Low connection state. */
	 HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_SET);
 800836a:	2201      	movs	r2, #1
 800836c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008374:	f7f8 fbde 	bl	8000b34 <HAL_GPIO_WritePin>
  {
	/* Configure High connection state. */
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_RESET);
  }
  /* USER CODE END 6 */
}
 8008378:	e006      	b.n	8008388 <HAL_PCDEx_SetConnectionState+0x30>
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_RESET);
 800837a:	2200      	movs	r2, #0
 800837c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008384:	f7f8 fbd6 	bl	8000b34 <HAL_GPIO_WritePin>
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d817      	bhi.n	80083d4 <USBD_Get_USB_Status+0x44>
 80083a4:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <USBD_Get_USB_Status+0x1c>)
 80083a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083aa:	bf00      	nop
 80083ac:	080083bd 	.word	0x080083bd
 80083b0:	080083c3 	.word	0x080083c3
 80083b4:	080083c9 	.word	0x080083c9
 80083b8:	080083cf 	.word	0x080083cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]
    break;
 80083c0:	e00b      	b.n	80083da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083c2:	2302      	movs	r3, #2
 80083c4:	73fb      	strb	r3, [r7, #15]
    break;
 80083c6:	e008      	b.n	80083da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083c8:	2301      	movs	r3, #1
 80083ca:	73fb      	strb	r3, [r7, #15]
    break;
 80083cc:	e005      	b.n	80083da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083ce:	2302      	movs	r3, #2
 80083d0:	73fb      	strb	r3, [r7, #15]
    break;
 80083d2:	e002      	b.n	80083da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083d4:	2302      	movs	r3, #2
 80083d6:	73fb      	strb	r3, [r7, #15]
    break;
 80083d8:	bf00      	nop
  }
  return usb_status;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <__libc_init_array>:
 80083e8:	b570      	push	{r4, r5, r6, lr}
 80083ea:	4d0d      	ldr	r5, [pc, #52]	; (8008420 <__libc_init_array+0x38>)
 80083ec:	4c0d      	ldr	r4, [pc, #52]	; (8008424 <__libc_init_array+0x3c>)
 80083ee:	1b64      	subs	r4, r4, r5
 80083f0:	10a4      	asrs	r4, r4, #2
 80083f2:	2600      	movs	r6, #0
 80083f4:	42a6      	cmp	r6, r4
 80083f6:	d109      	bne.n	800840c <__libc_init_array+0x24>
 80083f8:	4d0b      	ldr	r5, [pc, #44]	; (8008428 <__libc_init_array+0x40>)
 80083fa:	4c0c      	ldr	r4, [pc, #48]	; (800842c <__libc_init_array+0x44>)
 80083fc:	f000 f820 	bl	8008440 <_init>
 8008400:	1b64      	subs	r4, r4, r5
 8008402:	10a4      	asrs	r4, r4, #2
 8008404:	2600      	movs	r6, #0
 8008406:	42a6      	cmp	r6, r4
 8008408:	d105      	bne.n	8008416 <__libc_init_array+0x2e>
 800840a:	bd70      	pop	{r4, r5, r6, pc}
 800840c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008410:	4798      	blx	r3
 8008412:	3601      	adds	r6, #1
 8008414:	e7ee      	b.n	80083f4 <__libc_init_array+0xc>
 8008416:	f855 3b04 	ldr.w	r3, [r5], #4
 800841a:	4798      	blx	r3
 800841c:	3601      	adds	r6, #1
 800841e:	e7f2      	b.n	8008406 <__libc_init_array+0x1e>
 8008420:	080084d8 	.word	0x080084d8
 8008424:	080084d8 	.word	0x080084d8
 8008428:	080084d8 	.word	0x080084d8
 800842c:	080084dc 	.word	0x080084dc

08008430 <memset>:
 8008430:	4402      	add	r2, r0
 8008432:	4603      	mov	r3, r0
 8008434:	4293      	cmp	r3, r2
 8008436:	d100      	bne.n	800843a <memset+0xa>
 8008438:	4770      	bx	lr
 800843a:	f803 1b01 	strb.w	r1, [r3], #1
 800843e:	e7f9      	b.n	8008434 <memset+0x4>

08008440 <_init>:
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	bf00      	nop
 8008444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008446:	bc08      	pop	{r3}
 8008448:	469e      	mov	lr, r3
 800844a:	4770      	bx	lr

0800844c <_fini>:
 800844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844e:	bf00      	nop
 8008450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008452:	bc08      	pop	{r3}
 8008454:	469e      	mov	lr, r3
 8008456:	4770      	bx	lr
