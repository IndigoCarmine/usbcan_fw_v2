
usbcan_fw_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b68  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d68  08004d68  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  08004d68  08004d68  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d68  08004d68  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08004d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000127c  200001c8  08004f38  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  20001444  08004f38  00021444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f59  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dfc  00000000  00000000  00035151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000acec  00000000  00000000  00038f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  00043c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f70  00000000  00000000  000447b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a25  00000000  00000000  00045728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000154ad  00000000  00000000  0006814d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8a45  00000000  00000000  0007d5fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012603f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a3c  00000000  00000000  00126090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001c8 	.word	0x200001c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cd8 	.word	0x08004cd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001cc 	.word	0x200001cc
 80001c4:	08004cd8 	.word	0x08004cd8

080001c8 <cobs_encode>:
#include <stdint.h>

void cobs_encode(const uint8_t data[], uint8_t return_data[], int data_size){
    int zero_index = data_size + 1;//this is return_data index
 80001c8:	f102 0c01 	add.w	ip, r2, #1
    return_data[zero_index] = 0x00;
 80001cc:	2300      	movs	r3, #0
 80001ce:	f801 300c 	strb.w	r3, [r1, ip]
    for(int i = data_size; i >0; i--){
 80001d2:	429a      	cmp	r2, r3
 80001d4:	dd16      	ble.n	8000204 <cobs_encode+0x3c>
void cobs_encode(const uint8_t data[], uint8_t return_data[], int data_size){
 80001d6:	b410      	push	{r4}
 80001d8:	4410      	add	r0, r2
 80001da:	188b      	adds	r3, r1, r2
 80001dc:	e003      	b.n	80001e6 <cobs_encode+0x1e>
        if(data[i-1] == 0x00){
            return_data[i] = (uint8_t)(zero_index - i);
            zero_index = i;
        }else{
            return_data[i] = data[i-1];
 80001de:	701c      	strb	r4, [r3, #0]
    for(int i = data_size; i >0; i--){
 80001e0:	3b01      	subs	r3, #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	d009      	beq.n	80001fa <cobs_encode+0x32>
        if(data[i-1] == 0x00){
 80001e6:	f810 4d01 	ldrb.w	r4, [r0, #-1]!
 80001ea:	2c00      	cmp	r4, #0
 80001ec:	d1f7      	bne.n	80001de <cobs_encode+0x16>
            return_data[i] = (uint8_t)(zero_index - i);
 80001ee:	ebac 0c02 	sub.w	ip, ip, r2
 80001f2:	f883 c000 	strb.w	ip, [r3]
            zero_index = i;
 80001f6:	4694      	mov	ip, r2
 80001f8:	e7f2      	b.n	80001e0 <cobs_encode+0x18>
        }
    }
    return_data[0] = zero_index;
 80001fa:	f881 c000 	strb.w	ip, [r1]
}
 80001fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000202:	4770      	bx	lr
    return_data[0] = zero_index;
 8000204:	f881 c000 	strb.w	ip, [r1]
 8000208:	4770      	bx	lr

0800020a <can_process>:


//it process all can messages
//the Data is used for USB buffer. can_process set header infomation to Data[0~5].
//It is a terrible code. Sorry for hard work to read the code.
void can_process(const CAN_RxHeaderTypeDef *RxHeader,uint8_t Data[]){
 800020a:	b500      	push	{lr}
 800020c:	b087      	sub	sp, #28
 800020e:	4603      	mov	r3, r0
 8000210:	4608      	mov	r0, r1
    uint8_t id[4] : can id
    uint8_t dlc : data length
    uint8_t data[8] : data (it is pre-writtten.)
    */

    if(RxHeader->IDE == CAN_ID_STD){
 8000212:	689a      	ldr	r2, [r3, #8]
 8000214:	b9b2      	cbnz	r2, 8000244 <can_process+0x3a>
        //standard id
        Data[1] = (RxHeader->StdId >> 24) & 0xFF;
 8000216:	78da      	ldrb	r2, [r3, #3]
 8000218:	704a      	strb	r2, [r1, #1]
        Data[3] = (RxHeader->StdId >> 8) & 0xFF;
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	0a12      	lsrs	r2, r2, #8
 800021e:	70ca      	strb	r2, [r1, #3]
        Data[4] = (RxHeader->StdId >> 0) & 0xFF;
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	710a      	strb	r2, [r1, #4]
        //is_extended set
        Data[0] = 0x02; // 0x02 = 0b00000010
    }

    //is_rtr
    if(RxHeader->RTR == CAN_RTR_REMOTE){
 8000224:	68da      	ldr	r2, [r3, #12]
 8000226:	2a02      	cmp	r2, #2
 8000228:	d018      	beq.n	800025c <can_process+0x52>

    //is_error
    //? 

    //dlc
    Data[5] = RxHeader->DLC;
 800022a:	691b      	ldr	r3, [r3, #16]
 800022c:	7143      	strb	r3, [r0, #5]


    //encode data
    uint8_t encoded_data[15+2];

    cobs_encode(Data, encoded_data,15);
 800022e:	220f      	movs	r2, #15
 8000230:	a901      	add	r1, sp, #4
 8000232:	f7ff ffc9 	bl	80001c8 <cobs_encode>


    if(CDC_Transmit_FS(encoded_data,15+2)== USBD_OK){
 8000236:	2111      	movs	r1, #17
 8000238:	a801      	add	r0, sp, #4
 800023a:	f004 fb45 	bl	80048c8 <CDC_Transmit_FS>
        

    }else{
        //transmit fail
    }
}
 800023e:	b007      	add	sp, #28
 8000240:	f85d fb04 	ldr.w	pc, [sp], #4
        Data[1] = (RxHeader->ExtId >> 24) & 0xFF;
 8000244:	79da      	ldrb	r2, [r3, #7]
 8000246:	704a      	strb	r2, [r1, #1]
        Data[2] = (RxHeader->ExtId >> 16) & 0xFF;
 8000248:	88da      	ldrh	r2, [r3, #6]
 800024a:	708a      	strb	r2, [r1, #2]
        Data[3] = (RxHeader->ExtId >> 8) & 0xFF;
 800024c:	685a      	ldr	r2, [r3, #4]
 800024e:	0a12      	lsrs	r2, r2, #8
 8000250:	70ca      	strb	r2, [r1, #3]
        Data[4] = (RxHeader->ExtId >> 0) & 0xFF;
 8000252:	685a      	ldr	r2, [r3, #4]
 8000254:	710a      	strb	r2, [r1, #4]
        Data[0] = 0x02; // 0x02 = 0b00000010
 8000256:	2202      	movs	r2, #2
 8000258:	700a      	strb	r2, [r1, #0]
 800025a:	e7e3      	b.n	8000224 <can_process+0x1a>
        Data[0] |= 0x04; // 0x04 = 0b00000100
 800025c:	7802      	ldrb	r2, [r0, #0]
 800025e:	f042 0204 	orr.w	r2, r2, #4
 8000262:	7002      	strb	r2, [r0, #0]
 8000264:	e7e1      	b.n	800022a <can_process+0x20>
	...

08000268 <usb_to_can>:


CAN_TxHeaderTypeDef TxHeader;
uint32_t TxMailbox;
//it process usb messages to normal can messages
void usb_to_can(uint8_t usb_msg[], const uint8_t len){
 8000268:	b510      	push	{r4, lr}
 800026a:	4604      	mov	r4, r0
    uint8_t command & frame_type: (command: if it is normal can frame, it is 0x00.)<<4 | is_rtr << 2 | is_extended << 1 | is_error
    uint8_t id[4] : can id
    uint8_t dlc : data length
    uint8_t data[8] : data
    */
   if(usb_msg[0] & 0x02){
 800026c:	7803      	ldrb	r3, [r0, #0]
 800026e:	f013 0f02 	tst.w	r3, #2
 8000272:	d01e      	beq.n	80002b2 <usb_to_can+0x4a>
       //extended id
       TxHeader.IDE = CAN_ID_EXT;
 8000274:	4a1b      	ldr	r2, [pc, #108]	; (80002e4 <usb_to_can+0x7c>)
 8000276:	2304      	movs	r3, #4
 8000278:	6093      	str	r3, [r2, #8]
       TxHeader.ExtId = (usb_msg[1] << 24) | (usb_msg[2] << 16) | (usb_msg[3] << 8) | (usb_msg[4] << 0);
 800027a:	7841      	ldrb	r1, [r0, #1]
 800027c:	7883      	ldrb	r3, [r0, #2]
 800027e:	041b      	lsls	r3, r3, #16
 8000280:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000284:	7901      	ldrb	r1, [r0, #4]
 8000286:	430b      	orrs	r3, r1
 8000288:	78c1      	ldrb	r1, [r0, #3]
 800028a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800028e:	6053      	str	r3, [r2, #4]
        TxHeader.IDE = CAN_ID_STD;
        TxHeader.StdId = (usb_msg[1] << 24) | (usb_msg[2] << 16) | (usb_msg[3] << 8) | (usb_msg[4] << 0);
    }

    //is_rtr
    if(usb_msg[0] & 0x04){
 8000290:	7823      	ldrb	r3, [r4, #0]
        TxHeader.RTR = CAN_RTR_REMOTE;
    }else{
        TxHeader.RTR = CAN_RTR_DATA;
 8000292:	f013 0f04 	tst.w	r3, #4
 8000296:	bf14      	ite	ne
 8000298:	2202      	movne	r2, #2
 800029a:	2200      	moveq	r2, #0
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <usb_to_can+0x7c>)
 800029e:	60da      	str	r2, [r3, #12]
    }

    //is_error
    //?

    TxHeader.TransmitGlobalTime = DISABLE;
 80002a0:	2200      	movs	r2, #0
 80002a2:	751a      	strb	r2, [r3, #20]
    //dlc
    TxHeader.DLC = usb_msg[5];
 80002a4:	7962      	ldrb	r2, [r4, #5]
 80002a6:	611a      	str	r2, [r3, #16]
//	TxHeader.IDE = CAN_ID_STD;
//	TxHeader.StdId = 0x00;
//	TxHeader.TransmitGlobalTime = DISABLE;
//	uint8_t data[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

    if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80002a8:	480f      	ldr	r0, [pc, #60]	; (80002e8 <usb_to_can+0x80>)
 80002aa:	f000 fcc3 	bl	8000c34 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002ae:	b978      	cbnz	r0, 80002d0 <usb_to_can+0x68>

    	HAL_CAN_AddTxMessage(&hcan, &TxHeader, usb_msg+6, &TxMailbox);
    }


}
 80002b0:	bd10      	pop	{r4, pc}
        TxHeader.IDE = CAN_ID_STD;
 80002b2:	4a0c      	ldr	r2, [pc, #48]	; (80002e4 <usb_to_can+0x7c>)
 80002b4:	2300      	movs	r3, #0
 80002b6:	6093      	str	r3, [r2, #8]
        TxHeader.StdId = (usb_msg[1] << 24) | (usb_msg[2] << 16) | (usb_msg[3] << 8) | (usb_msg[4] << 0);
 80002b8:	7841      	ldrb	r1, [r0, #1]
 80002ba:	7883      	ldrb	r3, [r0, #2]
 80002bc:	041b      	lsls	r3, r3, #16
 80002be:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80002c2:	7901      	ldrb	r1, [r0, #4]
 80002c4:	430b      	orrs	r3, r1
 80002c6:	78c1      	ldrb	r1, [r0, #3]
 80002c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80002cc:	6013      	str	r3, [r2, #0]
 80002ce:	e7df      	b.n	8000290 <usb_to_can+0x28>
    	led_on(green);
 80002d0:	2001      	movs	r0, #1
 80002d2:	f000 f829 	bl	8000328 <led_on>
    	HAL_CAN_AddTxMessage(&hcan, &TxHeader, usb_msg+6, &TxMailbox);
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <usb_to_can+0x84>)
 80002d8:	1da2      	adds	r2, r4, #6
 80002da:	4902      	ldr	r1, [pc, #8]	; (80002e4 <usb_to_can+0x7c>)
 80002dc:	4802      	ldr	r0, [pc, #8]	; (80002e8 <usb_to_can+0x80>)
 80002de:	f000 fc29 	bl	8000b34 <HAL_CAN_AddTxMessage>
}
 80002e2:	e7e5      	b.n	80002b0 <usb_to_can+0x48>
 80002e4:	200001e4 	.word	0x200001e4
 80002e8:	20000200 	.word	0x20000200
 80002ec:	200001fc 	.word	0x200001fc

080002f0 <usb_process>:
void usb_process(uint8_t usb_msg[], const uint8_t len){
 80002f0:	b500      	push	{lr}
 80002f2:	b085      	sub	sp, #20
    switch (usb_msg[0]>>4)
 80002f4:	7803      	ldrb	r3, [r0, #0]
 80002f6:	091b      	lsrs	r3, r3, #4
 80002f8:	d004      	beq.n	8000304 <usb_process+0x14>
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d005      	beq.n	800030a <usb_process+0x1a>
}
 80002fe:	b005      	add	sp, #20
 8000300:	f85d fb04 	ldr.w	pc, [sp], #4
            usb_to_can(usb_msg, len);
 8000304:	f7ff ffb0 	bl	8000268 <usb_to_can>
        break;
 8000308:	e7f9      	b.n	80002fe <usb_process+0xe>
            uint8_t HelloUSBCAN_encode[] = {0x0b,'H','e','l','l','o','U','S','B','C','A','N',0x00};
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <usb_process+0x34>)
 800030c:	46ec      	mov	ip, sp
 800030e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000310:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000314:	f88c 3000 	strb.w	r3, [ip]
            CDC_Transmit_FS(HelloUSBCAN_encode,11+2);
 8000318:	210d      	movs	r1, #13
 800031a:	4668      	mov	r0, sp
 800031c:	f004 fad4 	bl	80048c8 <CDC_Transmit_FS>
}
 8000320:	e7ed      	b.n	80002fe <usb_process+0xe>
 8000322:	bf00      	nop
 8000324:	08004cf0 	.word	0x08004cf0

08000328 <led_on>:
};


void led_on(led name){
    //if the led is off.
    if(led_list[name].is_high == 0){
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <led_on+0x2c>)
 800032a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800032e:	7b1b      	ldrb	r3, [r3, #12]
 8000330:	b103      	cbz	r3, 8000334 <led_on+0xc>
 8000332:	4770      	bx	lr
void led_on(led name){
 8000334:	b510      	push	{r4, lr}
        HAL_GPIO_WritePin(led_list[name].gpio,led_list[name].pin,GPIO_PIN_SET);
 8000336:	4b07      	ldr	r3, [pc, #28]	; (8000354 <led_on+0x2c>)
 8000338:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 800033c:	eb03 1400 	add.w	r4, r3, r0, lsl #4
 8000340:	2201      	movs	r2, #1
 8000342:	88a1      	ldrh	r1, [r4, #4]
 8000344:	f853 000c 	ldr.w	r0, [r3, ip]
 8000348:	f000 ffb4 	bl	80012b4 <HAL_GPIO_WritePin>
        led_list[name].before_tick = HAL_GetTick();
 800034c:	f000 faac 	bl	80008a8 <HAL_GetTick>
 8000350:	60a0      	str	r0, [r4, #8]
    }
}
 8000352:	bd10      	pop	{r4, pc}
 8000354:	20000000 	.word	0x20000000

08000358 <led_process>:


void led_process(void){
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(int i=0;i < LED_LIST_SIZE; i++){
 800035a:	4c0d      	ldr	r4, [pc, #52]	; (8000390 <led_process+0x38>)
 800035c:	f104 0740 	add.w	r7, r4, #64	; 0x40
        if(led_list[i].is_high || HAL_GetTick() - led_list[i].before_tick > LED_INTERVAL){
            HAL_GPIO_WritePin(led_list[i].gpio,led_list[i].pin,GPIO_PIN_RESET);
 8000360:	2600      	movs	r6, #0
 8000362:	e008      	b.n	8000376 <led_process+0x1e>
 8000364:	4632      	mov	r2, r6
 8000366:	88a9      	ldrh	r1, [r5, #4]
 8000368:	6828      	ldr	r0, [r5, #0]
 800036a:	f000 ffa3 	bl	80012b4 <HAL_GPIO_WritePin>
            led_list[i].is_high = 0;
 800036e:	732e      	strb	r6, [r5, #12]
    for(int i=0;i < LED_LIST_SIZE; i++){
 8000370:	3410      	adds	r4, #16
 8000372:	42bc      	cmp	r4, r7
 8000374:	d00b      	beq.n	800038e <led_process+0x36>
        if(led_list[i].is_high || HAL_GetTick() - led_list[i].before_tick > LED_INTERVAL){
 8000376:	4625      	mov	r5, r4
 8000378:	7b23      	ldrb	r3, [r4, #12]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d1f2      	bne.n	8000364 <led_process+0xc>
 800037e:	f000 fa93 	bl	80008a8 <HAL_GetTick>
 8000382:	68a3      	ldr	r3, [r4, #8]
 8000384:	1ac0      	subs	r0, r0, r3
 8000386:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 800038a:	d9f1      	bls.n	8000370 <led_process+0x18>
 800038c:	e7ea      	b.n	8000364 <led_process+0xc>
        }
        
    }
}
 800038e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000390:	20000000 	.word	0x20000000

08000394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000394:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000396:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000398:	4e04      	ldr	r6, [pc, #16]	; (80003ac <Error_Handler+0x18>)
 800039a:	2501      	movs	r5, #1
 800039c:	2480      	movs	r4, #128	; 0x80
 800039e:	462a      	mov	r2, r5
 80003a0:	4621      	mov	r1, r4
 80003a2:	4630      	mov	r0, r6
 80003a4:	f000 ff86 	bl	80012b4 <HAL_GPIO_WritePin>
  while (1)
 80003a8:	e7f9      	b.n	800039e <Error_Handler+0xa>
 80003aa:	bf00      	nop
 80003ac:	48000400 	.word	0x48000400

080003b0 <SystemClock_Config>:
{
 80003b0:	b500      	push	{lr}
 80003b2:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b4:	2100      	movs	r1, #0
 80003b6:	9114      	str	r1, [sp, #80]	; 0x50
 80003b8:	9115      	str	r1, [sp, #84]	; 0x54
 80003ba:	9117      	str	r1, [sp, #92]	; 0x5c
 80003bc:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003be:	910d      	str	r1, [sp, #52]	; 0x34
 80003c0:	910e      	str	r1, [sp, #56]	; 0x38
 80003c2:	910f      	str	r1, [sp, #60]	; 0x3c
 80003c4:	9110      	str	r1, [sp, #64]	; 0x40
 80003c6:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c8:	2234      	movs	r2, #52	; 0x34
 80003ca:	4668      	mov	r0, sp
 80003cc:	f004 fc7c 	bl	8004cc8 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003d0:	2201      	movs	r2, #1
 80003d2:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003da:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003dc:	2202      	movs	r2, #2
 80003de:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e0:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e6:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e8:	a812      	add	r0, sp, #72	; 0x48
 80003ea:	f001 ff83 	bl	80022f4 <HAL_RCC_OscConfig>
 80003ee:	b9c8      	cbnz	r0, 8000424 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f0:	230f      	movs	r3, #15
 80003f2:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f4:	2102      	movs	r1, #2
 80003f6:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000400:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000402:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000404:	a80d      	add	r0, sp, #52	; 0x34
 8000406:	f002 fac5 	bl	8002994 <HAL_RCC_ClockConfig>
 800040a:	b968      	cbnz	r0, 8000428 <SystemClock_Config+0x78>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800040c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000410:	9300      	str	r3, [sp, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000412:	2300      	movs	r3, #0
 8000414:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000416:	4668      	mov	r0, sp
 8000418:	f002 fb8c 	bl	8002b34 <HAL_RCCEx_PeriphCLKConfig>
 800041c:	b930      	cbnz	r0, 800042c <SystemClock_Config+0x7c>
}
 800041e:	b01d      	add	sp, #116	; 0x74
 8000420:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000424:	f7ff ffb6 	bl	8000394 <Error_Handler>
    Error_Handler();
 8000428:	f7ff ffb4 	bl	8000394 <Error_Handler>
    Error_Handler();
 800042c:	f7ff ffb2 	bl	8000394 <Error_Handler>

08000430 <main>:
{
 8000430:	b500      	push	{lr}
 8000432:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8000434:	f000 fa1a 	bl	800086c <HAL_Init>
  SystemClock_Config();
 8000438:	f7ff ffba 	bl	80003b0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	2400      	movs	r4, #0
 800043e:	9403      	str	r4, [sp, #12]
 8000440:	9404      	str	r4, [sp, #16]
 8000442:	9405      	str	r4, [sp, #20]
 8000444:	9406      	str	r4, [sp, #24]
 8000446:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000448:	4b40      	ldr	r3, [pc, #256]	; (800054c <main+0x11c>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000450:	615a      	str	r2, [r3, #20]
 8000452:	695a      	ldr	r2, [r3, #20]
 8000454:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000458:	9200      	str	r2, [sp, #0]
 800045a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	695a      	ldr	r2, [r3, #20]
 800045e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800046a:	9201      	str	r2, [sp, #4]
 800046c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000474:	615a      	str	r2, [r3, #20]
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800047c:	9302      	str	r3, [sp, #8]
 800047e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_RESET);
 8000480:	4622      	mov	r2, r4
 8000482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f000 ff13 	bl	80012b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_CAN_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800048e:	4e30      	ldr	r6, [pc, #192]	; (8000550 <main+0x120>)
 8000490:	4622      	mov	r2, r4
 8000492:	21f0      	movs	r1, #240	; 0xf0
 8000494:	4630      	mov	r0, r6
 8000496:	f000 ff0d 	bl	80012b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USB_PULLUP_Pin;
 800049a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2501      	movs	r5, #1
 80004a2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(USB_PULLUP_GPIO_Port, &GPIO_InitStruct);
 80004a8:	a903      	add	r1, sp, #12
 80004aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ae:	f000 fe27 	bl	8001100 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_CAN_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 80004b2:	23f0      	movs	r3, #240	; 0xf0
 80004b4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004bc:	a903      	add	r1, sp, #12
 80004be:	4630      	mov	r0, r6
 80004c0:	f000 fe1e 	bl	8001100 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004c4:	f004 f92c 	bl	8004720 <MX_USB_DEVICE_Init>
  hcan.Instance = CAN;
 80004c8:	4822      	ldr	r0, [pc, #136]	; (8000554 <main+0x124>)
 80004ca:	4b23      	ldr	r3, [pc, #140]	; (8000558 <main+0x128>)
 80004cc:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 2;
 80004ce:	2302      	movs	r3, #2
 80004d0:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004d2:	6084      	str	r4, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004d4:	60c4      	str	r4, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 80004d6:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 80004da:	6103      	str	r3, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80004dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80004e0:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004e2:	7604      	strb	r4, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004e4:	7644      	strb	r4, [r0, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 80004e6:	7685      	strb	r5, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004e8:	76c4      	strb	r4, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004ea:	7704      	strb	r4, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004ec:	7744      	strb	r4, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004ee:	f000 f9e1 	bl	80008b4 <HAL_CAN_Init>
 80004f2:	b9f8      	cbnz	r0, 8000534 <main+0x104>
  led_on(green);
 80004f4:	2001      	movs	r0, #1
 80004f6:	f7ff ff17 	bl	8000328 <led_on>
  led_on(yellow);
 80004fa:	2002      	movs	r0, #2
 80004fc:	f7ff ff14 	bl	8000328 <led_on>
  led_on(red);
 8000500:	2003      	movs	r0, #3
 8000502:	f7ff ff11 	bl	8000328 <led_on>
  led_on(can);
 8000506:	2000      	movs	r0, #0
 8000508:	f7ff ff0e 	bl	8000328 <led_on>
  filter.FilterIdHigh         = 0;                        // フィルターID(上�?16ビッ??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 800050c:	2300      	movs	r3, #0
 800050e:	9308      	str	r3, [sp, #32]
  filter.FilterIdLow          = 0;                        // フィルターID(下�?16ビッ??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 8000510:	9309      	str	r3, [sp, #36]	; 0x24
  filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上�?16ビッ??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 8000512:	930a      	str	r3, [sp, #40]	; 0x28
  filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下�?16ビッ??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 8000514:	930b      	str	r3, [sp, #44]	; 0x2c
  filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 8000516:	2201      	movs	r2, #1
 8000518:	920f      	str	r2, [sp, #60]	; 0x3c
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 800051a:	930c      	str	r3, [sp, #48]	; 0x30
  filter.FilterBank           = 0;                        // フィルターバンクNo
 800051c:	930d      	str	r3, [sp, #52]	; 0x34
  filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモー??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 800051e:	930e      	str	r3, [sp, #56]	; 0x38
  filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 8000520:	230e      	movs	r3, #14
 8000522:	9311      	str	r3, [sp, #68]	; 0x44
  filter.FilterActivation     = ENABLE;                   // フィルター無効???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��有効
 8000524:	9210      	str	r2, [sp, #64]	; 0x40
  if(HAL_CAN_ConfigFilter(&hcan, &filter)!=HAL_OK ){
 8000526:	a908      	add	r1, sp, #32
 8000528:	480a      	ldr	r0, [pc, #40]	; (8000554 <main+0x124>)
 800052a:	f000 fa52 	bl	80009d2 <HAL_CAN_ConfigFilter>
 800052e:	b118      	cbz	r0, 8000538 <main+0x108>
	  Error_Handler();
 8000530:	f7ff ff30 	bl	8000394 <Error_Handler>
    Error_Handler();
 8000534:	f7ff ff2e 	bl	8000394 <Error_Handler>
  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK){
 8000538:	2102      	movs	r1, #2
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <main+0x124>)
 800053c:	f000 fc33 	bl	8000da6 <HAL_CAN_ActivateNotification>
 8000540:	b108      	cbz	r0, 8000546 <main+0x116>
	  Error_Handler();
 8000542:	f7ff ff27 	bl	8000394 <Error_Handler>
  main_cpp();
 8000546:	f000 f8b7 	bl	80006b8 <main_cpp>
  while (1)
 800054a:	e7fe      	b.n	800054a <main+0x11a>
 800054c:	40021000 	.word	0x40021000
 8000550:	48000400 	.word	0x48000400
 8000554:	20000200 	.word	0x20000200
 8000558:	40006400 	.word	0x40006400

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <HAL_MspInit+0x2c>)
 8000560:	699a      	ldr	r2, [r3, #24]
 8000562:	f042 0201 	orr.w	r2, r2, #1
 8000566:	619a      	str	r2, [r3, #24]
 8000568:	699a      	ldr	r2, [r3, #24]
 800056a:	f002 0201 	and.w	r2, r2, #1
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	69da      	ldr	r2, [r3, #28]
 8000574:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000578:	61da      	str	r2, [r3, #28]
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000584:	b002      	add	sp, #8
 8000586:	4770      	bx	lr
 8000588:	40021000 	.word	0x40021000

0800058c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800058c:	b500      	push	{lr}
 800058e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	2300      	movs	r3, #0
 8000592:	9303      	str	r3, [sp, #12]
 8000594:	9304      	str	r3, [sp, #16]
 8000596:	9305      	str	r3, [sp, #20]
 8000598:	9306      	str	r3, [sp, #24]
 800059a:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN)
 800059c:	6802      	ldr	r2, [r0, #0]
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <HAL_CAN_MspInit+0xa4>)
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d002      	beq.n	80005aa <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80005a4:	b009      	add	sp, #36	; 0x24
 80005a6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005aa:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80005ae:	69da      	ldr	r2, [r3, #28]
 80005b0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80005b4:	61da      	str	r2, [r3, #28]
 80005b6:	69da      	ldr	r2, [r3, #28]
 80005b8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80005bc:	9201      	str	r2, [sp, #4]
 80005be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005c6:	615a      	str	r2, [r3, #20]
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ce:	9302      	str	r3, [sp, #8]
 80005d0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d8:	2302      	movs	r3, #2
 80005da:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005dc:	2303      	movs	r3, #3
 80005de:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80005e0:	2309      	movs	r3, #9
 80005e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e4:	a903      	add	r1, sp, #12
 80005e6:	4813      	ldr	r0, [pc, #76]	; (8000634 <HAL_CAN_MspInit+0xa8>)
 80005e8:	f000 fd8a 	bl	8001100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	4611      	mov	r1, r2
 80005f0:	2013      	movs	r0, #19
 80005f2:	f000 fd2d 	bl	8001050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 80005f6:	2013      	movs	r0, #19
 80005f8:	f000 fd60 	bl	80010bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 1, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2101      	movs	r1, #1
 8000600:	2014      	movs	r0, #20
 8000602:	f000 fd25 	bl	8001050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000606:	2014      	movs	r0, #20
 8000608:	f000 fd58 	bl	80010bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 1, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2101      	movs	r1, #1
 8000610:	2015      	movs	r0, #21
 8000612:	f000 fd1d 	bl	8001050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000616:	2015      	movs	r0, #21
 8000618:	f000 fd50 	bl	80010bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 1, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2101      	movs	r1, #1
 8000620:	2016      	movs	r0, #22
 8000622:	f000 fd15 	bl	8001050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000626:	2016      	movs	r0, #22
 8000628:	f000 fd48 	bl	80010bc <HAL_NVIC_EnableIRQ>
}
 800062c:	e7ba      	b.n	80005a4 <HAL_CAN_MspInit+0x18>
 800062e:	bf00      	nop
 8000630:	40006400 	.word	0x40006400
 8000634:	48000400 	.word	0x48000400

08000638 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <NMI_Handler>

0800063a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <HardFault_Handler>

0800063c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <MemManage_Handler>

0800063e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063e:	e7fe      	b.n	800063e <BusFault_Handler>

08000640 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <UsageFault_Handler>

08000642 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000642:	4770      	bx	lr

08000644 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000644:	4770      	bx	lr

08000646 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000646:	4770      	bx	lr

08000648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000648:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064a:	f000 f921 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064e:	bd08      	pop	{r3, pc}

08000650 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 8000650:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000652:	4802      	ldr	r0, [pc, #8]	; (800065c <USB_HP_CAN_TX_IRQHandler+0xc>)
 8000654:	f000 fbc4 	bl	8000de0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 8000658:	bd08      	pop	{r3, pc}
 800065a:	bf00      	nop
 800065c:	20000200 	.word	0x20000200

08000660 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000660:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */
	led_on(green);
 8000662:	2001      	movs	r0, #1
 8000664:	f7ff fe60 	bl	8000328 <led_on>
  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000668:	4801      	ldr	r0, [pc, #4]	; (8000670 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800066a:	f000 fbb9 	bl	8000de0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800066e:	bd08      	pop	{r3, pc}
 8000670:	20000200 	.word	0x20000200

08000674 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000674:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000676:	4802      	ldr	r0, [pc, #8]	; (8000680 <CAN_RX1_IRQHandler+0xc>)
 8000678:	f000 fbb2 	bl	8000de0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 800067c:	bd08      	pop	{r3, pc}
 800067e:	bf00      	nop
 8000680:	20000200 	.word	0x20000200

08000684 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8000684:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000686:	4802      	ldr	r0, [pc, #8]	; (8000690 <CAN_SCE_IRQHandler+0xc>)
 8000688:	f000 fbaa 	bl	8000de0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 800068c:	bd08      	pop	{r3, pc}
 800068e:	bf00      	nop
 8000690:	20000200 	.word	0x20000200

08000694 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000694:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000696:	4802      	ldr	r0, [pc, #8]	; (80006a0 <USB_LP_IRQHandler+0xc>)
 8000698:	f000 fea3 	bl	80013e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800069c:	bd08      	pop	{r3, pc}
 800069e:	bf00      	nop
 80006a0:	20000f38 	.word	0x20000f38

080006a4 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <SystemInit+0x10>)
 80006a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80006aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <main_cpp>:
extern CAN_HandleTypeDef hcan;
extern USBD_HandleTypeDef hUsbDeviceFS;


void main_cpp()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
//    };
//
//    FilterManager::config_filter_bank(15, filter_arg);
//    [[maybe_unused]] const u32 fmi = filter_arg.filter_match_index;
//
    HAL_CAN_Start(&hcan);
 80006be:	482a      	ldr	r0, [pc, #168]	; (8000768 <main_cpp+0xb0>)
 80006c0:	f000 fa0a 	bl	8000ad8 <HAL_CAN_Start>
//    RxFrame rx_frame{};
    uint8_t debug_state = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	71fb      	strb	r3, [r7, #7]
    while(true)
    {
    	if(READ_BIT(CAN->MSR,CAN_MSR_INAK)==1){
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <main_cpp+0xb4>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	bf0c      	ite	eq
 80006d4:	2301      	moveq	r3, #1
 80006d6:	2300      	movne	r3, #0
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d008      	beq.n	80006f0 <main_cpp+0x38>
    	    //can start
    	    CLEAR_BIT(CAN->MCR, CAN_MCR_INRQ);
 80006de:	4b23      	ldr	r3, [pc, #140]	; (800076c <main_cpp+0xb4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a22      	ldr	r2, [pc, #136]	; (800076c <main_cpp+0xb4>)
 80006e4:	f023 0301 	bic.w	r3, r3, #1
 80006e8:	6013      	str	r3, [r2, #0]
    	    led_on(green);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff fe1c 	bl	8000328 <led_on>
    	}
    	if(debug_state==0){
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d122      	bne.n	800073c <main_cpp+0x84>
    		switch(hUsbDeviceFS.dev_state){
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <main_cpp+0xb8>)
 80006f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80006fc:	3b01      	subs	r3, #1
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d82e      	bhi.n	8000760 <main_cpp+0xa8>
 8000702:	a201      	add	r2, pc, #4	; (adr r2, 8000708 <main_cpp+0x50>)
 8000704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000708:	08000719 	.word	0x08000719
 800070c:	08000721 	.word	0x08000721
 8000710:	08000731 	.word	0x08000731
 8000714:	08000729 	.word	0x08000729
    		case USBD_STATE_DEFAULT:
    			led_on(red);
 8000718:	2003      	movs	r0, #3
 800071a:	f7ff fe05 	bl	8000328 <led_on>
    			break;
 800071e:	e01f      	b.n	8000760 <main_cpp+0xa8>
    		case USBD_STATE_ADDRESSED :
    			led_on(yellow);
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff fe01 	bl	8000328 <led_on>
    			break;
 8000726:	e01b      	b.n	8000760 <main_cpp+0xa8>
    		case USBD_STATE_SUSPENDED  :
    			led_on(yellow);
 8000728:	2002      	movs	r0, #2
 800072a:	f7ff fdfd 	bl	8000328 <led_on>
    			break;
 800072e:	e017      	b.n	8000760 <main_cpp+0xa8>
    		case USBD_STATE_CONFIGURED :
    			led_on(green);
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff fdf9 	bl	8000328 <led_on>
    			debug_state =1;
 8000736:	2301      	movs	r3, #1
 8000738:	71fb      	strb	r3, [r7, #7]
    			break;
 800073a:	e011      	b.n	8000760 <main_cpp+0xa8>
    		}
    	}else if(debug_state==1){
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d10e      	bne.n	8000760 <main_cpp+0xa8>
    		switch(hcan.ErrorCode){
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <main_cpp+0xb0>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	2b20      	cmp	r3, #32
 8000748:	d005      	beq.n	8000756 <main_cpp+0x9e>
 800074a:	2b80      	cmp	r3, #128	; 0x80
 800074c:	d107      	bne.n	800075e <main_cpp+0xa6>
    		case HAL_CAN_ERROR_BD: //bit dominant
    			led_on(green);
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff fdea 	bl	8000328 <led_on>
    			break;
 8000754:	e004      	b.n	8000760 <main_cpp+0xa8>
    		case HAL_CAN_ERROR_ACK: //a
    			led_on(yellow);
 8000756:	2002      	movs	r0, #2
 8000758:	f7ff fde6 	bl	8000328 <led_on>
    			break;
 800075c:	e000      	b.n	8000760 <main_cpp+0xa8>
    		default:
    			break;
 800075e:	bf00      	nop
    	}
//    	uint8_t data[] = {0x00,0x00,0x00,0x07,0xff,0x08,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
//    	uint8_t len = 14;
//    	usb_process(data, len);

        led_process();
 8000760:	f7ff fdfa 	bl	8000358 <led_process>
    	if(READ_BIT(CAN->MSR,CAN_MSR_INAK)==1){
 8000764:	e7b0      	b.n	80006c8 <main_cpp+0x10>
 8000766:	bf00      	nop
 8000768:	20000200 	.word	0x20000200
 800076c:	40006400 	.word	0x40006400
 8000770:	20000230 	.word	0x20000230

08000774 <HAL_CAN_RxFifo0MsgPendingCallback>:
#include "usbd_cdc_if.h"

#include "led.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000774:	b510      	push	{r4, lr}
 8000776:	b08c      	sub	sp, #48	; 0x30
 8000778:	4604      	mov	r4, r0

    uint8_t Data[15];
    CAN_RxHeaderTypeDef RxHeader;
    //the Data is used for USB buffer. can_process set header infomation to Data[0~5].
    //It is a terrible code. Sorry for hard work to read the code.
    led_on(green);
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff fdd4 	bl	8000328 <led_on>
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Data+6) == HAL_OK)
 8000780:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000784:	aa01      	add	r2, sp, #4
 8000786:	2100      	movs	r1, #0
 8000788:	4620      	mov	r0, r4
 800078a:	f000 fa6a 	bl	8000c62 <HAL_CAN_GetRxMessage>
 800078e:	b108      	cbz	r0, 8000794 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
    {

        can_process(&RxHeader,Data);
    }
}
 8000790:	b00c      	add	sp, #48	; 0x30
 8000792:	bd10      	pop	{r4, pc}
        can_process(&RxHeader,Data);
 8000794:	a908      	add	r1, sp, #32
 8000796:	a801      	add	r0, sp, #4
 8000798:	f7ff fd37 	bl	800020a <can_process>
}
 800079c:	e7f8      	b.n	8000790 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>

0800079e <HAL_CAN_ErrorCallback>:

uint8_t send_buf[4]={0};

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 800079e:	b510      	push	{r4, lr}
 80007a0:	4604      	mov	r4, r0
	led_on(can);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff fdc0 	bl	8000328 <led_on>
	if(hcan->ErrorCode == HAL_CAN_ERROR_NONE )led_on(yellow);
 80007a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007aa:	b133      	cbz	r3, 80007ba <HAL_CAN_ErrorCallback+0x1c>
	if(hcan->ErrorCode == HAL_CAN_ERROR_BD)led_on(red);
 80007ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007ae:	2b80      	cmp	r3, #128	; 0x80
 80007b0:	d007      	beq.n	80007c2 <HAL_CAN_ErrorCallback+0x24>
	uint32_t errorcode = hcan->ErrorCode;
 80007b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
	uint32_t MSR = hcan->Instance->MSR;
 80007b4:	6823      	ldr	r3, [r4, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
//	memcpy(send_buf,&errorcode,4);
//	CDC_Transmit_FS(send_buf, 4);
//	memcpy(send_buf,&MSR,4);
//	CDC_Transmit_FS(send_buf, 4);

}
 80007b8:	bd10      	pop	{r4, pc}
	if(hcan->ErrorCode == HAL_CAN_ERROR_NONE )led_on(yellow);
 80007ba:	2002      	movs	r0, #2
 80007bc:	f7ff fdb4 	bl	8000328 <led_on>
 80007c0:	e7f4      	b.n	80007ac <HAL_CAN_ErrorCallback+0xe>
	if(hcan->ErrorCode == HAL_CAN_ERROR_BD)led_on(red);
 80007c2:	2003      	movs	r0, #3
 80007c4:	f7ff fdb0 	bl	8000328 <led_on>
 80007c8:	e7f3      	b.n	80007b2 <HAL_CAN_ErrorCallback+0x14>
	...

080007cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000804 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <LoopForever+0x6>)
  ldr r1, =_edata
 80007d2:	490e      	ldr	r1, [pc, #56]	; (800080c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d4:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <LoopForever+0xe>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e8:	4c0b      	ldr	r4, [pc, #44]	; (8000818 <LoopForever+0x16>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007f6:	f7ff ff55 	bl	80006a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007fa:	f004 fa41 	bl	8004c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007fe:	f7ff fe17 	bl	8000430 <main>

08000802 <LoopForever>:

LoopForever:
    b LoopForever
 8000802:	e7fe      	b.n	8000802 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000804:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800080c:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8000810:	08004d70 	.word	0x08004d70
  ldr r2, =_sbss
 8000814:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000818:	20001444 	.word	0x20001444

0800081c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800081c:	e7fe      	b.n	800081c <ADC1_2_IRQHandler>
	...

08000820 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b510      	push	{r4, lr}
 8000822:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <HAL_InitTick+0x40>)
 8000826:	7818      	ldrb	r0, [r3, #0]
 8000828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000830:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <HAL_InitTick+0x44>)
 8000832:	6810      	ldr	r0, [r2, #0]
 8000834:	fbb0 f0f3 	udiv	r0, r0, r3
 8000838:	f000 fc4e 	bl	80010d8 <HAL_SYSTICK_Config>
 800083c:	b968      	cbnz	r0, 800085a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083e:	2c0f      	cmp	r4, #15
 8000840:	d901      	bls.n	8000846 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000842:	2001      	movs	r0, #1
 8000844:	e00a      	b.n	800085c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000846:	2200      	movs	r2, #0
 8000848:	4621      	mov	r1, r4
 800084a:	f04f 30ff 	mov.w	r0, #4294967295
 800084e:	f000 fbff 	bl	8001050 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_InitTick+0x48>)
 8000854:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8000856:	2000      	movs	r0, #0
 8000858:	e000      	b.n	800085c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800085a:	2001      	movs	r0, #1
}
 800085c:	bd10      	pop	{r4, pc}
 800085e:	bf00      	nop
 8000860:	20000044 	.word	0x20000044
 8000864:	20000040 	.word	0x20000040
 8000868:	20000048 	.word	0x20000048

0800086c <HAL_Init>:
{
 800086c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086e:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_Init+0x20>)
 8000870:	6813      	ldr	r3, [r2, #0]
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 fbd7 	bl	800102c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800087e:	200f      	movs	r0, #15
 8000880:	f7ff ffce 	bl	8000820 <HAL_InitTick>
  HAL_MspInit();
 8000884:	f7ff fe6a 	bl	800055c <HAL_MspInit>
}
 8000888:	2000      	movs	r0, #0
 800088a:	bd08      	pop	{r3, pc}
 800088c:	40022000 	.word	0x40022000

08000890 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000890:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <HAL_IncTick+0x10>)
 8000892:	6811      	ldr	r1, [r2, #0]
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_IncTick+0x14>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	440b      	add	r3, r1
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000228 	.word	0x20000228
 80008a4:	20000044 	.word	0x20000044

080008a8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80008a8:	4b01      	ldr	r3, [pc, #4]	; (80008b0 <HAL_GetTick+0x8>)
 80008aa:	6818      	ldr	r0, [r3, #0]
}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000228 	.word	0x20000228

080008b4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80008b4:	2800      	cmp	r0, #0
 80008b6:	f000 808a 	beq.w	80009ce <HAL_CAN_Init+0x11a>
{
 80008ba:	b538      	push	{r3, r4, r5, lr}
 80008bc:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80008be:	f890 3020 	ldrb.w	r3, [r0, #32]
 80008c2:	b1d3      	cbz	r3, 80008fa <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008c4:	6822      	ldr	r2, [r4, #0]
 80008c6:	6813      	ldr	r3, [r2, #0]
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008ce:	f7ff ffeb 	bl	80008a8 <HAL_GetTick>
 80008d2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008d4:	6823      	ldr	r3, [r4, #0]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	f012 0f01 	tst.w	r2, #1
 80008dc:	d110      	bne.n	8000900 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008de:	f7ff ffe3 	bl	80008a8 <HAL_GetTick>
 80008e2:	1b40      	subs	r0, r0, r5
 80008e4:	280a      	cmp	r0, #10
 80008e6:	d9f5      	bls.n	80008d4 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ee:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008f0:	2305      	movs	r3, #5
 80008f2:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80008f6:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80008f8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80008fa:	f7ff fe47 	bl	800058c <HAL_CAN_MspInit>
 80008fe:	e7e1      	b.n	80008c4 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	f022 0202 	bic.w	r2, r2, #2
 8000906:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000908:	f7ff ffce 	bl	80008a8 <HAL_GetTick>
 800090c:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800090e:	6823      	ldr	r3, [r4, #0]
 8000910:	685a      	ldr	r2, [r3, #4]
 8000912:	f012 0f02 	tst.w	r2, #2
 8000916:	d00d      	beq.n	8000934 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000918:	f7ff ffc6 	bl	80008a8 <HAL_GetTick>
 800091c:	1b40      	subs	r0, r0, r5
 800091e:	280a      	cmp	r0, #10
 8000920:	d9f5      	bls.n	800090e <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800092a:	2305      	movs	r3, #5
 800092c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000930:	2001      	movs	r0, #1
 8000932:	e7e1      	b.n	80008f8 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000934:	7e22      	ldrb	r2, [r4, #24]
 8000936:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	bf0c      	ite	eq
 800093c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000940:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000944:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000946:	7e63      	ldrb	r3, [r4, #25]
 8000948:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800094a:	6822      	ldr	r2, [r4, #0]
 800094c:	6813      	ldr	r3, [r2, #0]
 800094e:	bf0c      	ite	eq
 8000950:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000954:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8000958:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800095a:	7ea3      	ldrb	r3, [r4, #26]
 800095c:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800095e:	6822      	ldr	r2, [r4, #0]
 8000960:	6813      	ldr	r3, [r2, #0]
 8000962:	bf0c      	ite	eq
 8000964:	f043 0320 	orreq.w	r3, r3, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000968:	f023 0320 	bicne.w	r3, r3, #32
 800096c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800096e:	7ee3      	ldrb	r3, [r4, #27]
 8000970:	2b01      	cmp	r3, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000972:	6822      	ldr	r2, [r4, #0]
 8000974:	6813      	ldr	r3, [r2, #0]
 8000976:	bf0c      	ite	eq
 8000978:	f023 0310 	biceq.w	r3, r3, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800097c:	f043 0310 	orrne.w	r3, r3, #16
 8000980:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000982:	7f23      	ldrb	r3, [r4, #28]
 8000984:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000986:	6822      	ldr	r2, [r4, #0]
 8000988:	6813      	ldr	r3, [r2, #0]
 800098a:	bf0c      	ite	eq
 800098c:	f043 0308 	orreq.w	r3, r3, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000990:	f023 0308 	bicne.w	r3, r3, #8
 8000994:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000996:	7f63      	ldrb	r3, [r4, #29]
 8000998:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800099a:	6822      	ldr	r2, [r4, #0]
 800099c:	6813      	ldr	r3, [r2, #0]
 800099e:	bf0c      	ite	eq
 80009a0:	f043 0304 	orreq.w	r3, r3, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009a4:	f023 0304 	bicne.w	r3, r3, #4
 80009a8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80009aa:	6821      	ldr	r1, [r4, #0]
 80009ac:	68a3      	ldr	r3, [r4, #8]
 80009ae:	68e2      	ldr	r2, [r4, #12]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	6922      	ldr	r2, [r4, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	6962      	ldr	r2, [r4, #20]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	6862      	ldr	r2, [r4, #4]
 80009bc:	3a01      	subs	r2, #1
 80009be:	4313      	orrs	r3, r2
 80009c0:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009c2:	2000      	movs	r0, #0
 80009c4:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80009c6:	2301      	movs	r3, #1
 80009c8:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 80009cc:	e794      	b.n	80008f8 <HAL_CAN_Init+0x44>
    return HAL_ERROR;
 80009ce:	2001      	movs	r0, #1
}
 80009d0:	4770      	bx	lr

080009d2 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80009d2:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80009d6:	3b01      	subs	r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d905      	bls.n	80009ea <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80009e6:	2001      	movs	r0, #1
  }
}
 80009e8:	4770      	bx	lr
{
 80009ea:	b430      	push	{r4, r5}
  CAN_TypeDef *can_ip = hcan->Instance;
 80009ec:	6803      	ldr	r3, [r0, #0]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009ee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80009f2:	f042 0201 	orr.w	r2, r2, #1
 80009f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80009fa:	694a      	ldr	r2, [r1, #20]
 80009fc:	f002 021f 	and.w	r2, r2, #31
 8000a00:	2001      	movs	r0, #1
 8000a02:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a06:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 8000a0a:	ea6f 0c02 	mvn.w	ip, r2
 8000a0e:	ea20 0002 	bic.w	r0, r0, r2
 8000a12:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a16:	69c8      	ldr	r0, [r1, #28]
 8000a18:	b9b0      	cbnz	r0, 8000a48 <HAL_CAN_ConfigFilter+0x76>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a1a:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8000a1e:	ea0c 0000 	and.w	r0, ip, r0
 8000a22:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a26:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a28:	888c      	ldrh	r4, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a2a:	68cd      	ldr	r5, [r1, #12]
 8000a2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a30:	3048      	adds	r0, #72	; 0x48
 8000a32:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a36:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a38:	880c      	ldrh	r4, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a3a:	688d      	ldr	r5, [r1, #8]
 8000a3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a40:	3048      	adds	r0, #72	; 0x48
 8000a42:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000a46:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a48:	69c8      	ldr	r0, [r1, #28]
 8000a4a:	2801      	cmp	r0, #1
 8000a4c:	d01b      	beq.n	8000a86 <HAL_CAN_ConfigFilter+0xb4>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a4e:	6988      	ldr	r0, [r1, #24]
 8000a50:	bb80      	cbnz	r0, 8000ab4 <HAL_CAN_ConfigFilter+0xe2>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a52:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000a56:	ea0c 0000 	and.w	r0, ip, r0
 8000a5a:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a5e:	6908      	ldr	r0, [r1, #16]
 8000a60:	bb70      	cbnz	r0, 8000ac0 <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a62:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8000a66:	ea0c 0000 	and.w	r0, ip, r0
 8000a6a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a6e:	6a09      	ldr	r1, [r1, #32]
 8000a70:	2901      	cmp	r1, #1
 8000a72:	d02b      	beq.n	8000acc <HAL_CAN_ConfigFilter+0xfa>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a74:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000a78:	f022 0201 	bic.w	r2, r2, #1
 8000a7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8000a80:	2000      	movs	r0, #0
}
 8000a82:	bc30      	pop	{r4, r5}
 8000a84:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a86:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8000a8a:	4310      	orrs	r0, r2
 8000a8c:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a90:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a92:	888c      	ldrh	r4, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a94:	680d      	ldr	r5, [r1, #0]
 8000a96:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a9a:	3048      	adds	r0, #72	; 0x48
 8000a9c:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000aa0:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000aa2:	898c      	ldrh	r4, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000aa4:	688d      	ldr	r5, [r1, #8]
 8000aa6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000aaa:	3048      	adds	r0, #72	; 0x48
 8000aac:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000ab0:	6044      	str	r4, [r0, #4]
 8000ab2:	e7cc      	b.n	8000a4e <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ab4:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000ab8:	4310      	orrs	r0, r2
 8000aba:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 8000abe:	e7ce      	b.n	8000a5e <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ac0:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8000ac4:	4310      	orrs	r0, r2
 8000ac6:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 8000aca:	e7d0      	b.n	8000a6e <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000acc:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8000ad6:	e7cd      	b.n	8000a74 <HAL_CAN_ConfigFilter+0xa2>

08000ad8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ad8:	b570      	push	{r4, r5, r6, lr}
 8000ada:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000adc:	f890 5020 	ldrb.w	r5, [r0, #32]
 8000ae0:	b2ed      	uxtb	r5, r5
 8000ae2:	2d01      	cmp	r5, #1
 8000ae4:	d006      	beq.n	8000af4 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ae6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ae8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000aec:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000aee:	2501      	movs	r5, #1
  }
}
 8000af0:	4628      	mov	r0, r5
 8000af2:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000af4:	2302      	movs	r3, #2
 8000af6:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000afa:	6802      	ldr	r2, [r0, #0]
 8000afc:	6813      	ldr	r3, [r2, #0]
 8000afe:	f023 0301 	bic.w	r3, r3, #1
 8000b02:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000b04:	f7ff fed0 	bl	80008a8 <HAL_GetTick>
 8000b08:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b0a:	6823      	ldr	r3, [r4, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f013 0f01 	tst.w	r3, #1
 8000b12:	d00c      	beq.n	8000b2e <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b14:	f7ff fec8 	bl	80008a8 <HAL_GetTick>
 8000b18:	1b83      	subs	r3, r0, r6
 8000b1a:	2b0a      	cmp	r3, #10
 8000b1c:	d9f5      	bls.n	8000b0a <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b26:	2305      	movs	r3, #5
 8000b28:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8000b2c:	e7e0      	b.n	8000af0 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b2e:	2500      	movs	r5, #0
 8000b30:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 8000b32:	e7dd      	b.n	8000af0 <HAL_CAN_Start+0x18>

08000b34 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b34:	b570      	push	{r4, r5, r6, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b36:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b3a:	6804      	ldr	r4, [r0, #0]
 8000b3c:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b3e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000b42:	fa5f fc8c 	uxtb.w	ip, ip
 8000b46:	f1bc 0f01 	cmp.w	ip, #1
 8000b4a:	d86d      	bhi.n	8000c28 <HAL_CAN_AddTxMessage+0xf4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b4c:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000b50:	d064      	beq.n	8000c1c <HAL_CAN_AddTxMessage+0xe8>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000b52:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000b56:	f1bc 0f02 	cmp.w	ip, #2
 8000b5a:	d905      	bls.n	8000b68 <HAL_CAN_AddTxMessage+0x34>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000b5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b62:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8000b64:	2001      	movs	r0, #1
 8000b66:	e064      	b.n	8000c32 <HAL_CAN_AddTxMessage+0xfe>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000b68:	2401      	movs	r4, #1
 8000b6a:	fa04 f40c 	lsl.w	r4, r4, ip
 8000b6e:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000b70:	688b      	ldr	r3, [r1, #8]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d13b      	bne.n	8000bee <HAL_CAN_AddTxMessage+0xba>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b76:	6804      	ldr	r4, [r0, #0]
 8000b78:	680d      	ldr	r5, [r1, #0]
 8000b7a:	68cb      	ldr	r3, [r1, #12]
 8000b7c:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 8000b80:	f10c 0318 	add.w	r3, ip, #24
 8000b84:	011b      	lsls	r3, r3, #4
 8000b86:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b88:	6803      	ldr	r3, [r0, #0]
 8000b8a:	690c      	ldr	r4, [r1, #16]
 8000b8c:	f10c 0e18 	add.w	lr, ip, #24
 8000b90:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8000b94:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b96:	7d0b      	ldrb	r3, [r1, #20]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d035      	beq.n	8000c08 <HAL_CAN_AddTxMessage+0xd4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000b9c:	6801      	ldr	r1, [r0, #0]
 8000b9e:	79d4      	ldrb	r4, [r2, #7]
 8000ba0:	7993      	ldrb	r3, [r2, #6]
 8000ba2:	041b      	lsls	r3, r3, #16
 8000ba4:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8000ba8:	7914      	ldrb	r4, [r2, #4]
 8000baa:	4323      	orrs	r3, r4
 8000bac:	7954      	ldrb	r4, [r2, #5]
 8000bae:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8000bb2:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8000bb6:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000bba:	6801      	ldr	r1, [r0, #0]
 8000bbc:	78d4      	ldrb	r4, [r2, #3]
 8000bbe:	7893      	ldrb	r3, [r2, #2]
 8000bc0:	041b      	lsls	r3, r3, #16
 8000bc2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8000bc6:	7814      	ldrb	r4, [r2, #0]
 8000bc8:	4323      	orrs	r3, r4
 8000bca:	7852      	ldrb	r2, [r2, #1]
 8000bcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000bd0:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8000bd4:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000bd8:	6803      	ldr	r3, [r0, #0]
 8000bda:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8000bde:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180

      /* Return function status */
      return HAL_OK;
 8000bea:	2000      	movs	r0, #0
 8000bec:	e021      	b.n	8000c32 <HAL_CAN_AddTxMessage+0xfe>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bee:	6804      	ldr	r4, [r0, #0]
 8000bf0:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000bf2:	68ce      	ldr	r6, [r1, #12]
 8000bf4:	4333      	orrs	r3, r6
 8000bf6:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bfa:	f10c 0e18 	add.w	lr, ip, #24
 8000bfe:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
 8000c02:	f844 300e 	str.w	r3, [r4, lr]
 8000c06:	e7bf      	b.n	8000b88 <HAL_CAN_AddTxMessage+0x54>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c08:	6803      	ldr	r3, [r0, #0]
 8000c0a:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 8000c0e:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8000c12:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000c16:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
 8000c1a:	e7bf      	b.n	8000b9c <HAL_CAN_AddTxMessage+0x68>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c22:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 8000c24:	2001      	movs	r0, #1
 8000c26:	e004      	b.n	8000c32 <HAL_CAN_AddTxMessage+0xfe>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c2e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000c30:	2001      	movs	r0, #1
  }
}
 8000c32:	bd70      	pop	{r4, r5, r6, pc}

08000c34 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c34:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d901      	bls.n	8000c44 <HAL_CAN_GetTxMailboxesFreeLevel+0x10>
  uint32_t freelevel = 0U;
 8000c40:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8000c42:	4770      	bx	lr
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000c44:	6803      	ldr	r3, [r0, #0]
 8000c46:	6898      	ldr	r0, [r3, #8]
 8000c48:	f3c0 6080 	ubfx	r0, r0, #26, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
      freelevel++;
 8000c52:	bf18      	it	ne
 8000c54:	3001      	addne	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000c5c:	d0f1      	beq.n	8000c42 <HAL_CAN_GetTxMailboxesFreeLevel+0xe>
      freelevel++;
 8000c5e:	3001      	adds	r0, #1
 8000c60:	4770      	bx	lr

08000c62 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c62:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c66:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000c6a:	fa5f fc8c 	uxtb.w	ip, ip
 8000c6e:	f1bc 0f01 	cmp.w	ip, #1
 8000c72:	f200 8092 	bhi.w	8000d9a <HAL_CAN_GetRxMessage+0x138>
{
 8000c76:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c78:	b959      	cbnz	r1, 8000c92 <HAL_CAN_GetRxMessage+0x30>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000c7a:	6804      	ldr	r4, [r0, #0]
 8000c7c:	68e4      	ldr	r4, [r4, #12]
 8000c7e:	f014 0f03 	tst.w	r4, #3
 8000c82:	d111      	bne.n	8000ca8 <HAL_CAN_GetRxMessage+0x46>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c8a:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8000c8c:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000c8e:	bc30      	pop	{r4, r5}
 8000c90:	4770      	bx	lr
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000c92:	6804      	ldr	r4, [r0, #0]
 8000c94:	6924      	ldr	r4, [r4, #16]
 8000c96:	f014 0f03 	tst.w	r4, #3
 8000c9a:	d105      	bne.n	8000ca8 <HAL_CAN_GetRxMessage+0x46>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ca2:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	e7f2      	b.n	8000c8e <HAL_CAN_GetRxMessage+0x2c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ca8:	f101 041b 	add.w	r4, r1, #27
 8000cac:	0124      	lsls	r4, r4, #4
 8000cae:	6805      	ldr	r5, [r0, #0]
 8000cb0:	592c      	ldr	r4, [r5, r4]
 8000cb2:	f004 0404 	and.w	r4, r4, #4
 8000cb6:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000cb8:	2c00      	cmp	r4, #0
 8000cba:	d15f      	bne.n	8000d7c <HAL_CAN_GetRxMessage+0x11a>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000cbc:	f101 041b 	add.w	r4, r1, #27
 8000cc0:	0124      	lsls	r4, r4, #4
 8000cc2:	6805      	ldr	r5, [r0, #0]
 8000cc4:	592c      	ldr	r4, [r5, r4]
 8000cc6:	0d64      	lsrs	r4, r4, #21
 8000cc8:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000cca:	6804      	ldr	r4, [r0, #0]
 8000ccc:	f101 0c1b 	add.w	ip, r1, #27
 8000cd0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8000cd4:	f854 400c 	ldr.w	r4, [r4, ip]
 8000cd8:	f004 0402 	and.w	r4, r4, #2
 8000cdc:	60d4      	str	r4, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000cde:	6804      	ldr	r4, [r0, #0]
 8000ce0:	4464      	add	r4, ip
 8000ce2:	6864      	ldr	r4, [r4, #4]
 8000ce4:	f004 040f 	and.w	r4, r4, #15
 8000ce8:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000cea:	6804      	ldr	r4, [r0, #0]
 8000cec:	4464      	add	r4, ip
 8000cee:	6864      	ldr	r4, [r4, #4]
 8000cf0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8000cf4:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000cf6:	6804      	ldr	r4, [r0, #0]
 8000cf8:	4464      	add	r4, ip
 8000cfa:	6864      	ldr	r4, [r4, #4]
 8000cfc:	0c24      	lsrs	r4, r4, #16
 8000cfe:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000d00:	6802      	ldr	r2, [r0, #0]
 8000d02:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000d06:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000d0a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000d0c:	6802      	ldr	r2, [r0, #0]
 8000d0e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000d12:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000d16:	0a12      	lsrs	r2, r2, #8
 8000d18:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000d1a:	6802      	ldr	r2, [r0, #0]
 8000d1c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000d20:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000d24:	0c12      	lsrs	r2, r2, #16
 8000d26:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000d28:	6802      	ldr	r2, [r0, #0]
 8000d2a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000d2e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000d32:	0e12      	lsrs	r2, r2, #24
 8000d34:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000d36:	6802      	ldr	r2, [r0, #0]
 8000d38:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000d3c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000d40:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000d42:	6802      	ldr	r2, [r0, #0]
 8000d44:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000d48:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000d4c:	0a12      	lsrs	r2, r2, #8
 8000d4e:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000d50:	6802      	ldr	r2, [r0, #0]
 8000d52:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000d56:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000d5a:	0c12      	lsrs	r2, r2, #16
 8000d5c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000d5e:	6802      	ldr	r2, [r0, #0]
 8000d60:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000d64:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000d68:	0e12      	lsrs	r2, r2, #24
 8000d6a:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d6c:	b971      	cbnz	r1, 8000d8c <HAL_CAN_GetRxMessage+0x12a>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000d6e:	6802      	ldr	r2, [r0, #0]
 8000d70:	68d3      	ldr	r3, [r2, #12]
 8000d72:	f043 0320 	orr.w	r3, r3, #32
 8000d76:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8000d78:	2000      	movs	r0, #0
 8000d7a:	e788      	b.n	8000c8e <HAL_CAN_GetRxMessage+0x2c>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d7c:	f101 041b 	add.w	r4, r1, #27
 8000d80:	0124      	lsls	r4, r4, #4
 8000d82:	6805      	ldr	r5, [r0, #0]
 8000d84:	592c      	ldr	r4, [r5, r4]
 8000d86:	08e4      	lsrs	r4, r4, #3
 8000d88:	6054      	str	r4, [r2, #4]
 8000d8a:	e79e      	b.n	8000cca <HAL_CAN_GetRxMessage+0x68>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000d8c:	6802      	ldr	r2, [r0, #0]
 8000d8e:	6913      	ldr	r3, [r2, #16]
 8000d90:	f043 0320 	orr.w	r3, r3, #32
 8000d94:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8000d96:	2000      	movs	r0, #0
 8000d98:	e779      	b.n	8000c8e <HAL_CAN_GetRxMessage+0x2c>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da0:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000da2:	2001      	movs	r0, #1
}
 8000da4:	4770      	bx	lr

08000da6 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000da6:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000daa:	3b01      	subs	r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d905      	bls.n	8000dbe <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000db2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000dba:	2001      	movs	r0, #1
  }
}
 8000dbc:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000dbe:	6802      	ldr	r2, [r0, #0]
 8000dc0:	6953      	ldr	r3, [r2, #20]
 8000dc2:	4319      	orrs	r1, r3
 8000dc4:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	4770      	bx	lr

08000dca <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000dca:	4770      	bx	lr

08000dcc <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000dcc:	4770      	bx	lr

08000dce <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000dce:	4770      	bx	lr

08000dd0 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000dd4:	4770      	bx	lr

08000dd6 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000dd8:	4770      	bx	lr

08000dda <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000dda:	4770      	bx	lr

08000ddc <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000ddc:	4770      	bx	lr

08000dde <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000dde:	4770      	bx	lr

08000de0 <HAL_CAN_IRQHandler>:
{
 8000de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de4:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000de6:	6803      	ldr	r3, [r0, #0]
 8000de8:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000dea:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000dee:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000df0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000df4:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000df8:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000dfc:	f014 0601 	ands.w	r6, r4, #1
 8000e00:	d03b      	beq.n	8000e7a <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000e02:	f017 0601 	ands.w	r6, r7, #1
 8000e06:	d016      	beq.n	8000e36 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000e0c:	f017 0f02 	tst.w	r7, #2
 8000e10:	d108      	bne.n	8000e24 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e12:	f017 0f04 	tst.w	r7, #4
 8000e16:	d10c      	bne.n	8000e32 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e18:	f017 0608 	ands.w	r6, r7, #8
 8000e1c:	d006      	beq.n	8000e2c <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e1e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8000e22:	e008      	b.n	8000e36 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e24:	f7ff ffd1 	bl	8000dca <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e004      	b.n	8000e36 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e2c:	f7ff ffd0 	bl	8000dd0 <HAL_CAN_TxMailbox0AbortCallback>
 8000e30:	e001      	b.n	8000e36 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e32:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e36:	f417 7f80 	tst.w	r7, #256	; 0x100
 8000e3a:	d00d      	beq.n	8000e58 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e3c:	682b      	ldr	r3, [r5, #0]
 8000e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e42:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e44:	f417 7f00 	tst.w	r7, #512	; 0x200
 8000e48:	f040 8087 	bne.w	8000f5a <HAL_CAN_IRQHandler+0x17a>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e4c:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8000e50:	f000 8087 	beq.w	8000f62 <HAL_CAN_IRQHandler+0x182>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e54:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e58:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000e5c:	d00d      	beq.n	8000e7a <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e5e:	682b      	ldr	r3, [r5, #0]
 8000e60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e64:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e66:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000e6a:	f040 8084 	bne.w	8000f76 <HAL_CAN_IRQHandler+0x196>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000e6e:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 8000e72:	f000 8084 	beq.w	8000f7e <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000e76:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000e7a:	f014 0f08 	tst.w	r4, #8
 8000e7e:	d007      	beq.n	8000e90 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000e80:	f01b 0f10 	tst.w	fp, #16
 8000e84:	d004      	beq.n	8000e90 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000e86:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000e8a:	682b      	ldr	r3, [r5, #0]
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000e90:	f014 0f04 	tst.w	r4, #4
 8000e94:	d002      	beq.n	8000e9c <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000e96:	f01b 0f08 	tst.w	fp, #8
 8000e9a:	d17a      	bne.n	8000f92 <HAL_CAN_IRQHandler+0x1b2>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000e9c:	f014 0f02 	tst.w	r4, #2
 8000ea0:	d004      	beq.n	8000eac <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000ea2:	682b      	ldr	r3, [r5, #0]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	f013 0f03 	tst.w	r3, #3
 8000eaa:	d179      	bne.n	8000fa0 <HAL_CAN_IRQHandler+0x1c0>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000eac:	f014 0f40 	tst.w	r4, #64	; 0x40
 8000eb0:	d007      	beq.n	8000ec2 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000eb2:	f01a 0f10 	tst.w	sl, #16
 8000eb6:	d004      	beq.n	8000ec2 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000eb8:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000ebc:	682b      	ldr	r3, [r5, #0]
 8000ebe:	2210      	movs	r2, #16
 8000ec0:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000ec2:	f014 0f20 	tst.w	r4, #32
 8000ec6:	d002      	beq.n	8000ece <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000ec8:	f01a 0f08 	tst.w	sl, #8
 8000ecc:	d16c      	bne.n	8000fa8 <HAL_CAN_IRQHandler+0x1c8>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000ece:	f014 0f10 	tst.w	r4, #16
 8000ed2:	d004      	beq.n	8000ede <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000ed4:	682b      	ldr	r3, [r5, #0]
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	f013 0f03 	tst.w	r3, #3
 8000edc:	d16b      	bne.n	8000fb6 <HAL_CAN_IRQHandler+0x1d6>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000ede:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8000ee2:	d002      	beq.n	8000eea <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000ee4:	f018 0f10 	tst.w	r8, #16
 8000ee8:	d169      	bne.n	8000fbe <HAL_CAN_IRQHandler+0x1de>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000eea:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8000eee:	d002      	beq.n	8000ef6 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ef0:	f018 0f08 	tst.w	r8, #8
 8000ef4:	d16a      	bne.n	8000fcc <HAL_CAN_IRQHandler+0x1ec>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000ef6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000efa:	f000 8084 	beq.w	8001006 <HAL_CAN_IRQHandler+0x226>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000efe:	f018 0f04 	tst.w	r8, #4
 8000f02:	d07d      	beq.n	8001000 <HAL_CAN_IRQHandler+0x220>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f04:	f414 7f80 	tst.w	r4, #256	; 0x100
 8000f08:	d004      	beq.n	8000f14 <HAL_CAN_IRQHandler+0x134>
 8000f0a:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000f0e:	bf18      	it	ne
 8000f10:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f14:	f414 7f00 	tst.w	r4, #512	; 0x200
 8000f18:	d004      	beq.n	8000f24 <HAL_CAN_IRQHandler+0x144>
 8000f1a:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8000f1e:	bf18      	it	ne
 8000f20:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f24:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8000f28:	d004      	beq.n	8000f34 <HAL_CAN_IRQHandler+0x154>
 8000f2a:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8000f2e:	bf18      	it	ne
 8000f30:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f34:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8000f38:	d062      	beq.n	8001000 <HAL_CAN_IRQHandler+0x220>
 8000f3a:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8000f3e:	d05f      	beq.n	8001000 <HAL_CAN_IRQHandler+0x220>
        switch (esrflags & CAN_ESR_LEC)
 8000f40:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8000f44:	d065      	beq.n	8001012 <HAL_CAN_IRQHandler+0x232>
 8000f46:	d84e      	bhi.n	8000fe6 <HAL_CAN_IRQHandler+0x206>
 8000f48:	f1b9 0f20 	cmp.w	r9, #32
 8000f4c:	d05e      	beq.n	800100c <HAL_CAN_IRQHandler+0x22c>
 8000f4e:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8000f52:	d142      	bne.n	8000fda <HAL_CAN_IRQHandler+0x1fa>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000f54:	f046 0620 	orr.w	r6, r6, #32
            break;
 8000f58:	e04d      	b.n	8000ff6 <HAL_CAN_IRQHandler+0x216>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	f7ff ff36 	bl	8000dcc <HAL_CAN_TxMailbox1CompleteCallback>
 8000f60:	e77a      	b.n	8000e58 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000f62:	f417 6f00 	tst.w	r7, #2048	; 0x800
 8000f66:	d002      	beq.n	8000f6e <HAL_CAN_IRQHandler+0x18e>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000f68:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000f6c:	e774      	b.n	8000e58 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000f6e:	4628      	mov	r0, r5
 8000f70:	f7ff ff2f 	bl	8000dd2 <HAL_CAN_TxMailbox1AbortCallback>
 8000f74:	e770      	b.n	8000e58 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000f76:	4628      	mov	r0, r5
 8000f78:	f7ff ff29 	bl	8000dce <HAL_CAN_TxMailbox2CompleteCallback>
 8000f7c:	e77d      	b.n	8000e7a <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000f7e:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 8000f82:	d002      	beq.n	8000f8a <HAL_CAN_IRQHandler+0x1aa>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000f84:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8000f88:	e777      	b.n	8000e7a <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	f7ff ff22 	bl	8000dd4 <HAL_CAN_TxMailbox2AbortCallback>
 8000f90:	e773      	b.n	8000e7a <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f92:	682b      	ldr	r3, [r5, #0]
 8000f94:	2208      	movs	r2, #8
 8000f96:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f98:	4628      	mov	r0, r5
 8000f9a:	f7ff ff1c 	bl	8000dd6 <HAL_CAN_RxFifo0FullCallback>
 8000f9e:	e77d      	b.n	8000e9c <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	f7ff fbe7 	bl	8000774 <HAL_CAN_RxFifo0MsgPendingCallback>
 8000fa6:	e781      	b.n	8000eac <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000fa8:	682b      	ldr	r3, [r5, #0]
 8000faa:	2208      	movs	r2, #8
 8000fac:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000fae:	4628      	mov	r0, r5
 8000fb0:	f7ff ff13 	bl	8000dda <HAL_CAN_RxFifo1FullCallback>
 8000fb4:	e78b      	b.n	8000ece <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	f7ff ff0e 	bl	8000dd8 <HAL_CAN_RxFifo1MsgPendingCallback>
 8000fbc:	e78f      	b.n	8000ede <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000fbe:	682b      	ldr	r3, [r5, #0]
 8000fc0:	2210      	movs	r2, #16
 8000fc2:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000fc4:	4628      	mov	r0, r5
 8000fc6:	f7ff ff09 	bl	8000ddc <HAL_CAN_SleepCallback>
 8000fca:	e78e      	b.n	8000eea <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fcc:	682b      	ldr	r3, [r5, #0]
 8000fce:	2208      	movs	r2, #8
 8000fd0:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	f7ff ff03 	bl	8000dde <HAL_CAN_WakeUpFromRxMsgCallback>
 8000fd8:	e78d      	b.n	8000ef6 <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8000fda:	f1b9 0f10 	cmp.w	r9, #16
 8000fde:	d10a      	bne.n	8000ff6 <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_STF;
 8000fe0:	f046 0608 	orr.w	r6, r6, #8
            break;
 8000fe4:	e007      	b.n	8000ff6 <HAL_CAN_IRQHandler+0x216>
        switch (esrflags & CAN_ESR_LEC)
 8000fe6:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8000fea:	d015      	beq.n	8001018 <HAL_CAN_IRQHandler+0x238>
 8000fec:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8000ff0:	bf08      	it	eq
 8000ff2:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000ff6:	682a      	ldr	r2, [r5, #0]
 8000ff8:	6993      	ldr	r3, [r2, #24]
 8000ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ffe:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001000:	682b      	ldr	r3, [r5, #0]
 8001002:	2204      	movs	r2, #4
 8001004:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001006:	b956      	cbnz	r6, 800101e <HAL_CAN_IRQHandler+0x23e>
}
 8001008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_FOR;
 800100c:	f046 0610 	orr.w	r6, r6, #16
            break;
 8001010:	e7f1      	b.n	8000ff6 <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_BR;
 8001012:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8001016:	e7ee      	b.n	8000ff6 <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_BD;
 8001018:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 800101c:	e7eb      	b.n	8000ff6 <HAL_CAN_IRQHandler+0x216>
    hcan->ErrorCode |= errorcode;
 800101e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001020:	431e      	orrs	r6, r3
 8001022:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001024:	4628      	mov	r0, r5
 8001026:	f7ff fbba 	bl	800079e <HAL_CAN_ErrorCallback>
}
 800102a:	e7ed      	b.n	8001008 <HAL_CAN_IRQHandler+0x228>

0800102c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4907      	ldr	r1, [pc, #28]	; (800104c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800102e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	0203      	lsls	r3, r0, #8
 8001032:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800103a:	0412      	lsls	r2, r2, #16
 800103c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001048:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_NVIC_SetPriority+0x64>)
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105a:	f1c3 0c07 	rsb	ip, r3, #7
 800105e:	f1bc 0f04 	cmp.w	ip, #4
 8001062:	bf28      	it	cs
 8001064:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001068:	f103 0e04 	add.w	lr, r3, #4
 800106c:	f1be 0f06 	cmp.w	lr, #6
 8001070:	bf8c      	ite	hi
 8001072:	3b03      	subhi	r3, #3
 8001074:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001076:	f04f 3eff 	mov.w	lr, #4294967295
 800107a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800107e:	ea21 010c 	bic.w	r1, r1, ip
 8001082:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	fa0e f303 	lsl.w	r3, lr, r3
 8001088:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800108e:	2800      	cmp	r0, #0
 8001090:	db09      	blt.n	80010a6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	0109      	lsls	r1, r1, #4
 8001094:	b2c9      	uxtb	r1, r1
 8001096:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800109a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800109e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80010a2:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	f000 000f 	and.w	r0, r0, #15
 80010aa:	0109      	lsls	r1, r1, #4
 80010ac:	b2c9      	uxtb	r1, r1
 80010ae:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <HAL_NVIC_SetPriority+0x68>)
 80010b0:	5419      	strb	r1, [r3, r0]
 80010b2:	e7f6      	b.n	80010a2 <HAL_NVIC_SetPriority+0x52>
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	e000ed14 	.word	0xe000ed14

080010bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010bc:	2800      	cmp	r0, #0
 80010be:	db08      	blt.n	80010d2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c0:	0942      	lsrs	r2, r0, #5
 80010c2:	f000 001f 	and.w	r0, r0, #31
 80010c6:	2301      	movs	r3, #1
 80010c8:	fa03 f000 	lsl.w	r0, r3, r0
 80010cc:	4b01      	ldr	r3, [pc, #4]	; (80010d4 <HAL_NVIC_EnableIRQ+0x18>)
 80010ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100

080010d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	3801      	subs	r0, #1
 80010da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010de:	d20b      	bcs.n	80010f8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80010e4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <HAL_SYSTICK_Config+0x24>)
 80010e8:	21f0      	movs	r1, #240	; 0xf0
 80010ea:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ee:	2000      	movs	r0, #0
 80010f0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	2207      	movs	r2, #7
 80010f4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010f8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001100:	680b      	ldr	r3, [r1, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 80cf 	beq.w	80012a6 <HAL_GPIO_Init+0x1a6>
{
 8001108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800110c:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00u;
 8001112:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001114:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001116:	f04f 0e03 	mov.w	lr, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800111a:	f04f 080f 	mov.w	r8, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111e:	4c62      	ldr	r4, [pc, #392]	; (80012a8 <HAL_GPIO_Init+0x1a8>)
 8001120:	e048      	b.n	80011b4 <HAL_GPIO_Init+0xb4>
        temp = GPIOx->OSPEEDR;
 8001122:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001124:	fa0e fa0c 	lsl.w	sl, lr, ip
 8001128:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 800112c:	68cb      	ldr	r3, [r1, #12]
 800112e:	fa03 f30c 	lsl.w	r3, r3, ip
 8001132:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8001136:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8001138:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800113a:	ea23 0a07 	bic.w	sl, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113e:	684b      	ldr	r3, [r1, #4]
 8001140:	f3c3 1700 	ubfx	r7, r3, #4, #1
 8001144:	4097      	lsls	r7, r2
 8001146:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800114a:	6047      	str	r7, [r0, #4]
 800114c:	e03d      	b.n	80011ca <HAL_GPIO_Init+0xca>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800114e:	2700      	movs	r7, #0
 8001150:	fa07 f70b 	lsl.w	r7, r7, fp
 8001154:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001158:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800115a:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
 800115c:	ea6f 0709 	mvn.w	r7, r9
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001160:	684e      	ldr	r6, [r1, #4]
 8001162:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001166:	bf0c      	ite	eq
 8001168:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800116a:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->IMR = temp;
 800116e:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 8001170:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001172:	684e      	ldr	r6, [r1, #4]
 8001174:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001178:	bf0c      	ite	eq
 800117a:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800117c:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR = temp;
 8001180:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001182:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001184:	684e      	ldr	r6, [r1, #4]
 8001186:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800118a:	bf0c      	ite	eq
 800118c:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800118e:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR = temp;
 8001192:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 8001194:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001196:	684e      	ldr	r6, [r1, #4]
 8001198:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 800119c:	bf0c      	ite	eq
 800119e:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 80011a0:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->FTSR = temp;
 80011a4:	60e7      	str	r7, [r4, #12]
      }
    }

    position++;
 80011a6:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a8:	680b      	ldr	r3, [r1, #0]
 80011aa:	f10c 0c02 	add.w	ip, ip, #2
 80011ae:	fa33 f602 	lsrs.w	r6, r3, r2
 80011b2:	d075      	beq.n	80012a0 <HAL_GPIO_Init+0x1a0>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011b4:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 80011b8:	ea17 0903 	ands.w	r9, r7, r3
 80011bc:	d0f3      	beq.n	80011a6 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011be:	684b      	ldr	r3, [r1, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	3b01      	subs	r3, #1
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d9ab      	bls.n	8001122 <HAL_GPIO_Init+0x22>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ca:	684b      	ldr	r3, [r1, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d020      	beq.n	8001216 <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 80011d4:	68c3      	ldr	r3, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011d6:	fa0e f70c 	lsl.w	r7, lr, ip
 80011da:	ea23 0707 	bic.w	r7, r3, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011de:	688b      	ldr	r3, [r1, #8]
 80011e0:	fa03 f30c 	lsl.w	r3, r3, ip
 80011e4:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 80011e6:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	684b      	ldr	r3, [r1, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d111      	bne.n	8001216 <HAL_GPIO_Init+0x116>
        temp = GPIOx->AFR[position >> 3u];
 80011f2:	08d7      	lsrs	r7, r2, #3
 80011f4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80011f8:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011fa:	f002 0b07 	and.w	fp, r2, #7
 80011fe:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001202:	fa08 fa0b 	lsl.w	sl, r8, fp
 8001206:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800120a:	690b      	ldr	r3, [r1, #16]
 800120c:	fa03 f30b 	lsl.w	r3, r3, fp
 8001210:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 8001214:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 8001216:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001218:	fa0e f70c 	lsl.w	r7, lr, ip
 800121c:	ea23 0707 	bic.w	r7, r3, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001220:	684b      	ldr	r3, [r1, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	fa03 f30c 	lsl.w	r3, r3, ip
 800122a:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 800122c:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800122e:	684b      	ldr	r3, [r1, #4]
 8001230:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8001234:	d0b7      	beq.n	80011a6 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	4e1d      	ldr	r6, [pc, #116]	; (80012ac <HAL_GPIO_Init+0x1ac>)
 8001238:	69b3      	ldr	r3, [r6, #24]
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	61b3      	str	r3, [r6, #24]
 8001240:	69b3      	ldr	r3, [r6, #24]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800124a:	f022 0303 	bic.w	r3, r2, #3
 800124e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001252:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001256:	689f      	ldr	r7, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001258:	f002 0b03 	and.w	fp, r2, #3
 800125c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001260:	fa08 fa0b 	lsl.w	sl, r8, fp
 8001264:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001268:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800126c:	f43f af6f 	beq.w	800114e <HAL_GPIO_Init+0x4e>
 8001270:	4e0f      	ldr	r6, [pc, #60]	; (80012b0 <HAL_GPIO_Init+0x1b0>)
 8001272:	42b0      	cmp	r0, r6
 8001274:	d00e      	beq.n	8001294 <HAL_GPIO_Init+0x194>
 8001276:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800127a:	42b0      	cmp	r0, r6
 800127c:	d00c      	beq.n	8001298 <HAL_GPIO_Init+0x198>
 800127e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001282:	42b0      	cmp	r0, r6
 8001284:	d00a      	beq.n	800129c <HAL_GPIO_Init+0x19c>
 8001286:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800128a:	42b0      	cmp	r0, r6
 800128c:	bf0c      	ite	eq
 800128e:	2704      	moveq	r7, #4
 8001290:	2705      	movne	r7, #5
 8001292:	e75d      	b.n	8001150 <HAL_GPIO_Init+0x50>
 8001294:	462f      	mov	r7, r5
 8001296:	e75b      	b.n	8001150 <HAL_GPIO_Init+0x50>
 8001298:	2702      	movs	r7, #2
 800129a:	e759      	b.n	8001150 <HAL_GPIO_Init+0x50>
 800129c:	4677      	mov	r7, lr
 800129e:	e757      	b.n	8001150 <HAL_GPIO_Init+0x50>
  }
}
 80012a0:	b003      	add	sp, #12
 80012a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012a6:	4770      	bx	lr
 80012a8:	40010400 	.word	0x40010400
 80012ac:	40021000 	.word	0x40021000
 80012b0:	48000400 	.word	0x48000400

080012b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b4:	b10a      	cbz	r2, 80012ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012b6:	6181      	str	r1, [r0, #24]
 80012b8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ba:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80012bc:	4770      	bx	lr

080012be <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012be:	2800      	cmp	r0, #0
 80012c0:	d060      	beq.n	8001384 <HAL_PCD_Init+0xc6>
{
 80012c2:	b530      	push	{r4, r5, lr}
 80012c4:	b087      	sub	sp, #28
 80012c6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012c8:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d054      	beq.n	800137a <HAL_PCD_Init+0xbc>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012d0:	2303      	movs	r3, #3
 80012d2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012d6:	6820      	ldr	r0, [r4, #0]
 80012d8:	f001 fd51 	bl	8002d7e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012dc:	6860      	ldr	r0, [r4, #4]
 80012de:	b398      	cbz	r0, 8001348 <HAL_PCD_Init+0x8a>
 80012e0:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012e2:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012e6:	4619      	mov	r1, r3
    hpcd->IN_ep[i].is_in = 1U;
 80012e8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80012ec:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80012f0:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80012f4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012f8:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012fa:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 80012fe:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001300:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001302:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001306:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800130a:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800130c:	3301      	adds	r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4283      	cmp	r3, r0
 8001312:	d3e9      	bcc.n	80012e8 <HAL_PCD_Init+0x2a>
 8001314:	2300      	movs	r3, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001316:	4619      	mov	r1, r3
 8001318:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800131c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001320:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001324:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001328:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800132c:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001330:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001334:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001338:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800133c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001340:	3301      	adds	r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4283      	cmp	r3, r0
 8001346:	d3e7      	bcc.n	8001318 <HAL_PCD_Init+0x5a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001348:	46a4      	mov	ip, r4
 800134a:	f85c 5b10 	ldr.w	r5, [ip], #16
 800134e:	46ee      	mov	lr, sp
 8001350:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001354:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001358:	f8dc 3000 	ldr.w	r3, [ip]
 800135c:	f8ce 3000 	str.w	r3, [lr]
 8001360:	1d23      	adds	r3, r4, #4
 8001362:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001364:	4628      	mov	r0, r5
 8001366:	f001 fd14 	bl	8002d92 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800136a:	2000      	movs	r0, #0
 800136c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001370:	2301      	movs	r3, #1
 8001372:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 8001376:	b007      	add	sp, #28
 8001378:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800137a:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 800137e:	f003 fb39 	bl	80049f4 <HAL_PCD_MspInit>
 8001382:	e7a5      	b.n	80012d0 <HAL_PCD_Init+0x12>
    return HAL_ERROR;
 8001384:	2001      	movs	r0, #1
}
 8001386:	4770      	bx	lr

08001388 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001388:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 800138a:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800138e:	2b01      	cmp	r3, #1
 8001390:	d011      	beq.n	80013b6 <HAL_PCD_Start+0x2e>
 8001392:	4604      	mov	r4, r0
 8001394:	2501      	movs	r5, #1
 8001396:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800139a:	6800      	ldr	r0, [r0, #0]
 800139c:	f001 fce6 	bl	8002d6c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80013a0:	4629      	mov	r1, r5
 80013a2:	4620      	mov	r0, r4
 80013a4:	f003 fc5f 	bl	8004c66 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80013a8:	6820      	ldr	r0, [r4, #0]
 80013aa:	f002 f821 	bl	80033f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80013b4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80013b6:	2002      	movs	r0, #2
 80013b8:	e7fc      	b.n	80013b4 <HAL_PCD_Start+0x2c>

080013ba <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80013ba:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d00d      	beq.n	80013de <HAL_PCD_SetAddress+0x24>
{
 80013c2:	b510      	push	{r4, lr}
 80013c4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80013c6:	2301      	movs	r3, #1
 80013c8:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80013cc:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013d0:	6800      	ldr	r0, [r0, #0]
 80013d2:	f002 f807 	bl	80033e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80013dc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80013de:	2002      	movs	r0, #2
}
 80013e0:	4770      	bx	lr

080013e2 <HAL_PCD_IRQHandler>:
{
 80013e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013e6:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80013e8:	6800      	ldr	r0, [r0, #0]
 80013ea:	f002 f803 	bl	80033f4 <USB_ReadInterrupts>
 80013ee:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80013f2:	d14a      	bne.n	800148a <HAL_PCD_IRQHandler+0xa8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80013f4:	6820      	ldr	r0, [r4, #0]
 80013f6:	f001 fffd 	bl	80033f4 <USB_ReadInterrupts>
 80013fa:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80013fe:	f040 8504 	bne.w	8001e0a <HAL_PCD_IRQHandler+0xa28>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001402:	6820      	ldr	r0, [r4, #0]
 8001404:	f001 fff6 	bl	80033f4 <USB_ReadInterrupts>
 8001408:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800140c:	d008      	beq.n	8001420 <HAL_PCD_IRQHandler+0x3e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800140e:	6822      	ldr	r2, [r4, #0]
 8001410:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001418:	041b      	lsls	r3, r3, #16
 800141a:	0c1b      	lsrs	r3, r3, #16
 800141c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001420:	6820      	ldr	r0, [r4, #0]
 8001422:	f001 ffe7 	bl	80033f4 <USB_ReadInterrupts>
 8001426:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800142a:	d008      	beq.n	800143e <HAL_PCD_IRQHandler+0x5c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800142c:	6822      	ldr	r2, [r4, #0]
 800142e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001436:	041b      	lsls	r3, r3, #16
 8001438:	0c1b      	lsrs	r3, r3, #16
 800143a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800143e:	6820      	ldr	r0, [r4, #0]
 8001440:	f001 ffd8 	bl	80033f4 <USB_ReadInterrupts>
 8001444:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001448:	f040 84f1 	bne.w	8001e2e <HAL_PCD_IRQHandler+0xa4c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800144c:	6820      	ldr	r0, [r4, #0]
 800144e:	f001 ffd1 	bl	80033f4 <USB_ReadInterrupts>
 8001452:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001456:	f040 850a 	bne.w	8001e6e <HAL_PCD_IRQHandler+0xa8c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800145a:	6820      	ldr	r0, [r4, #0]
 800145c:	f001 ffca 	bl	80033f4 <USB_ReadInterrupts>
 8001460:	f410 7f00 	tst.w	r0, #512	; 0x200
 8001464:	f040 8521 	bne.w	8001eaa <HAL_PCD_IRQHandler+0xac8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001468:	6820      	ldr	r0, [r4, #0]
 800146a:	f001 ffc3 	bl	80033f4 <USB_ReadInterrupts>
 800146e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001472:	d008      	beq.n	8001486 <HAL_PCD_IRQHandler+0xa4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001474:	6822      	ldr	r2, [r4, #0]
 8001476:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800147a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800147e:	041b      	lsls	r3, r3, #16
 8001480:	0c1b      	lsrs	r3, r3, #16
 8001482:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800148a:	6820      	ldr	r0, [r4, #0]
 800148c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001490:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001494:	d0ae      	beq.n	80013f4 <HAL_PCD_IRQHandler+0x12>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001496:	f248 0780 	movw	r7, #32896	; 0x8080
 800149a:	2600      	movs	r6, #0
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800149c:	f24c 0880 	movw	r8, #49280	; 0xc080
 80014a0:	e0bf      	b.n	8001622 <HAL_PCD_IRQHandler+0x240>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014a2:	8803      	ldrh	r3, [r0, #0]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80014aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014ba:	6823      	ldr	r3, [r4, #0]
 80014bc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80014c0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80014c4:	00c9      	lsls	r1, r1, #3
 80014c6:	fa11 f282 	uxtah	r2, r1, r2
 80014ca:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80014ce:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80014d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014d6:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80014d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80014da:	4413      	add	r3, r2
 80014dc:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014de:	4631      	mov	r1, r6
 80014e0:	4620      	mov	r0, r4
 80014e2:	f003 fadf 	bl	8004aa4 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014e6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8092 	beq.w	8001614 <HAL_PCD_IRQHandler+0x232>
 80014f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 808e 	bne.w	8001614 <HAL_PCD_IRQHandler+0x232>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80014f8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80014fc:	6822      	ldr	r2, [r4, #0]
 80014fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001502:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001506:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 800150a:	e083      	b.n	8001614 <HAL_PCD_IRQHandler+0x232>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800150c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001510:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001514:	00d2      	lsls	r2, r2, #3
 8001516:	fa12 f383 	uxtah	r3, r2, r3
 800151a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800151e:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001526:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800152a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800152e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8001532:	f002 fa9d 	bl	8003a70 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001536:	6822      	ldr	r2, [r4, #0]
 8001538:	8813      	ldrh	r3, [r2, #0]
 800153a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800153e:	051b      	lsls	r3, r3, #20
 8001540:	0d1b      	lsrs	r3, r3, #20
 8001542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001546:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001548:	4620      	mov	r0, r4
 800154a:	f003 fa97 	bl	8004a7c <HAL_PCD_SetupStageCallback>
 800154e:	e061      	b.n	8001614 <HAL_PCD_IRQHandler+0x232>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001550:	293e      	cmp	r1, #62	; 0x3e
 8001552:	d808      	bhi.n	8001566 <HAL_PCD_IRQHandler+0x184>
 8001554:	0848      	lsrs	r0, r1, #1
 8001556:	f011 0f01 	tst.w	r1, #1
 800155a:	bf18      	it	ne
 800155c:	3001      	addne	r0, #1
 800155e:	0281      	lsls	r1, r0, #10
 8001560:	b289      	uxth	r1, r1
 8001562:	5299      	strh	r1, [r3, r2]
 8001564:	e0b7      	b.n	80016d6 <HAL_PCD_IRQHandler+0x2f4>
 8001566:	0948      	lsrs	r0, r1, #5
 8001568:	f011 0f1f 	tst.w	r1, #31
 800156c:	bf08      	it	eq
 800156e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8001572:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 8001576:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800157a:	b289      	uxth	r1, r1
 800157c:	5299      	strh	r1, [r3, r2]
 800157e:	e0aa      	b.n	80016d6 <HAL_PCD_IRQHandler+0x2f4>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001580:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001584:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001588:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800158c:	f040 80af 	bne.w	80016ee <HAL_PCD_IRQHandler+0x30c>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001590:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001594:	d03e      	beq.n	8001614 <HAL_PCD_IRQHandler+0x232>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001596:	6822      	ldr	r2, [r4, #0]
 8001598:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 800159c:	b29b      	uxth	r3, r3
 800159e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80015a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        if (ep->type != EP_TYPE_BULK)
 80015b4:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 80015b8:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
 80015bc:	f89a 302b 	ldrb.w	r3, [sl, #43]	; 0x2b
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	f000 8223 	beq.w	8001a0c <HAL_PCD_IRQHandler+0x62a>
          ep->xfer_len = 0U;
 80015c6:	f8ca 6040 	str.w	r6, [sl, #64]	; 0x40
          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80015ca:	f019 0f40 	tst.w	r9, #64	; 0x40
 80015ce:	f000 81f4 	beq.w	80019ba <HAL_PCD_IRQHandler+0x5d8>
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80015d2:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f040 81e0 	bne.w	800199c <HAL_PCD_IRQHandler+0x5ba>
 80015dc:	6823      	ldr	r3, [r4, #0]
 80015de:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80015e2:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80015e6:	0109      	lsls	r1, r1, #4
 80015e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80015ec:	fa13 f282 	uxtah	r2, r3, r2
 80015f0:	5a8b      	ldrh	r3, [r1, r2]
 80015f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80015f6:	041b      	lsls	r3, r3, #16
 80015f8:	0c1b      	lsrs	r3, r3, #16
 80015fa:	528b      	strh	r3, [r1, r2]
 80015fc:	5a8b      	ldrh	r3, [r1, r2]
 80015fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001606:	b29b      	uxth	r3, r3
 8001608:	528b      	strh	r3, [r1, r2]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800160a:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 800160e:	4620      	mov	r0, r4
 8001610:	f003 fa48 	bl	8004aa4 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001614:	6820      	ldr	r0, [r4, #0]
 8001616:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800161a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800161e:	f43f aee9 	beq.w	80013f4 <HAL_PCD_IRQHandler+0x12>
    wIstr = hpcd->Instance->ISTR;
 8001622:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8001626:	b2ab      	uxth	r3, r5
    if (epindex == 0U)
 8001628:	f015 050f 	ands.w	r5, r5, #15
 800162c:	d1a8      	bne.n	8001580 <HAL_PCD_IRQHandler+0x19e>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800162e:	f013 0f10 	tst.w	r3, #16
 8001632:	f43f af36 	beq.w	80014a2 <HAL_PCD_IRQHandler+0xc0>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001636:	8803      	ldrh	r3, [r0, #0]
 8001638:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800163a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800163e:	f47f af65 	bne.w	800150c <HAL_PCD_IRQHandler+0x12a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001642:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001646:	d0e5      	beq.n	8001614 <HAL_PCD_IRQHandler+0x232>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001648:	8803      	ldrh	r3, [r0, #0]
 800164a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800164e:	051b      	lsls	r3, r3, #20
 8001650:	0d1b      	lsrs	r3, r3, #20
 8001652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001656:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001658:	6820      	ldr	r0, [r4, #0]
 800165a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800165e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8001662:	00d2      	lsls	r2, r2, #3
 8001664:	fa12 f383 	uxtah	r3, r2, r3
 8001668:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800166c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001674:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001678:	b18b      	cbz	r3, 800169e <HAL_PCD_IRQHandler+0x2bc>
 800167a:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 800167e:	b171      	cbz	r1, 800169e <HAL_PCD_IRQHandler+0x2bc>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001680:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8001684:	f002 f9f4 	bl	8003a70 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001688:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800168c:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8001690:	4413      	add	r3, r2
 8001692:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001696:	4631      	mov	r1, r6
 8001698:	4620      	mov	r0, r4
 800169a:	f003 f9f7 	bl	8004a8c <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	881a      	ldrh	r2, [r3, #0]
 80016a2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80016a6:	d1b5      	bne.n	8001614 <HAL_PCD_IRQHandler+0x232>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80016a8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80016ac:	b292      	uxth	r2, r2
 80016ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80016b2:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 80016b6:	2900      	cmp	r1, #0
 80016b8:	f47f af4a 	bne.w	8001550 <HAL_PCD_IRQHandler+0x16e>
 80016bc:	5a99      	ldrh	r1, [r3, r2]
 80016be:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80016c2:	0409      	lsls	r1, r1, #16
 80016c4:	0c09      	lsrs	r1, r1, #16
 80016c6:	5299      	strh	r1, [r3, r2]
 80016c8:	5a99      	ldrh	r1, [r3, r2]
 80016ca:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80016ce:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80016d2:	b289      	uxth	r1, r1
 80016d4:	5299      	strh	r1, [r3, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016d6:	6822      	ldr	r2, [r4, #0]
 80016d8:	8813      	ldrh	r3, [r2, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016e4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80016e8:	433b      	orrs	r3, r7
 80016ea:	8013      	strh	r3, [r2, #0]
 80016ec:	e792      	b.n	8001614 <HAL_PCD_IRQHandler+0x232>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80016ee:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80016f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016f6:	051b      	lsls	r3, r3, #20
 80016f8:	0d1b      	lsrs	r3, r3, #20
 80016fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fe:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001702:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001706:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800170a:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 800170e:	2b00      	cmp	r3, #0
 8001710:	d145      	bne.n	800179e <HAL_PCD_IRQHandler+0x3bc>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001712:	6820      	ldr	r0, [r4, #0]
 8001714:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001718:	b29b      	uxth	r3, r3
 800171a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800171e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001722:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8001726:	3306      	adds	r3, #6
 8001728:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800172c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001730:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001734:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8001738:	f1ba 0f00 	cmp.w	sl, #0
 800173c:	d123      	bne.n	8001786 <HAL_PCD_IRQHandler+0x3a4>
        ep->xfer_count += count;
 800173e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001742:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001746:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800174a:	4452      	add	r2, sl
 800174c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8001750:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8001754:	4452      	add	r2, sl
 8001756:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800175a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800175e:	b143      	cbz	r3, 8001772 <HAL_PCD_IRQHandler+0x390>
 8001760:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001764:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001768:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800176c:	459a      	cmp	sl, r3
 800176e:	f080 810b 	bcs.w	8001988 <HAL_PCD_IRQHandler+0x5a6>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001772:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001776:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800177a:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800177e:	4620      	mov	r0, r4
 8001780:	f003 f984 	bl	8004a8c <HAL_PCD_DataOutStageCallback>
 8001784:	e704      	b.n	8001590 <HAL_PCD_IRQHandler+0x1ae>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001786:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800178a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800178e:	4653      	mov	r3, sl
 8001790:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8001794:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001798:	f002 f96a 	bl	8003a70 <USB_ReadPMA>
 800179c:	e7cf      	b.n	800173e <HAL_PCD_IRQHandler+0x35c>
          if (ep->type == EP_TYPE_BULK)
 800179e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80017a2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80017a6:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d037      	beq.n	800181e <HAL_PCD_IRQHandler+0x43c>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017ae:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80017b2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80017b6:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 80017ba:	6821      	ldr	r1, [r4, #0]
 80017bc:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017d2:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017d6:	6820      	ldr	r0, [r4, #0]
 80017d8:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 80017dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017e0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80017e4:	f000 80b4 	beq.w	8001950 <HAL_PCD_IRQHandler+0x56e>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017e8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	3302      	adds	r3, #2
 80017f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80017f4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80017f8:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 80017fc:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8001800:	f1ba 0f00 	cmp.w	sl, #0
 8001804:	d09b      	beq.n	800173e <HAL_PCD_IRQHandler+0x35c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001806:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800180a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800180e:	4653      	mov	r3, sl
 8001810:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001814:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001818:	f002 f92a 	bl	8003a70 <USB_ReadPMA>
 800181c:	e78f      	b.n	800173e <HAL_PCD_IRQHandler+0x35c>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800181e:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001822:	d04a      	beq.n	80018ba <HAL_PCD_IRQHandler+0x4d8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001824:	6822      	ldr	r2, [r4, #0]
 8001826:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800182a:	b29b      	uxth	r3, r3
 800182c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8001830:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001834:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 8001838:	3302      	adds	r3, #2
 800183a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800183e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001842:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001846:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 800184a:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 800184e:	4553      	cmp	r3, sl
 8001850:	f0c0 83e7 	bcc.w	8002022 <HAL_PCD_IRQHandler+0xc40>
      ep->xfer_len -= count;
 8001854:	eba3 030a 	sub.w	r3, r3, sl
 8001858:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800185c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001860:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 83e2 	beq.w	800202e <HAL_PCD_IRQHandler+0xc4c>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800186a:	f019 0f40 	tst.w	r9, #64	; 0x40
 800186e:	d013      	beq.n	8001898 <HAL_PCD_IRQHandler+0x4b6>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001870:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001874:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001878:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800187c:	6822      	ldr	r2, [r4, #0]
 800187e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001882:	b29b      	uxth	r3, r3
 8001884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800188c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001890:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001894:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8001898:	f1ba 0f00 	cmp.w	sl, #0
 800189c:	f43f af4f 	beq.w	800173e <HAL_PCD_IRQHandler+0x35c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80018a0:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80018a4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80018a8:	4653      	mov	r3, sl
 80018aa:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80018ae:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80018b2:	6820      	ldr	r0, [r4, #0]
 80018b4:	f002 f8dc 	bl	8003a70 <USB_ReadPMA>
 80018b8:	e741      	b.n	800173e <HAL_PCD_IRQHandler+0x35c>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80018ba:	6822      	ldr	r2, [r4, #0]
 80018bc:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 80018c6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80018ca:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 80018ce:	3306      	adds	r3, #6
 80018d0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80018d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80018d8:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 80018dc:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 80018e0:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 80018e4:	4553      	cmp	r3, sl
 80018e6:	f0c0 83af 	bcc.w	8002048 <HAL_PCD_IRQHandler+0xc66>
      ep->xfer_len -= count;
 80018ea:	eba3 030a 	sub.w	r3, r3, sl
 80018ee:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 80018f2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80018f6:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 83aa 	beq.w	8002054 <HAL_PCD_IRQHandler+0xc72>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001900:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001904:	d113      	bne.n	800192e <HAL_PCD_IRQHandler+0x54c>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001906:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800190a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800190e:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001912:	6822      	ldr	r2, [r4, #0]
 8001914:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001918:	b29b      	uxth	r3, r3
 800191a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800191e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001926:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800192a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 800192e:	f1ba 0f00 	cmp.w	sl, #0
 8001932:	f43f af04 	beq.w	800173e <HAL_PCD_IRQHandler+0x35c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001936:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800193a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800193e:	4653      	mov	r3, sl
 8001940:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001944:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001948:	6820      	ldr	r0, [r4, #0]
 800194a:	f002 f891 	bl	8003a70 <USB_ReadPMA>
 800194e:	e6f6      	b.n	800173e <HAL_PCD_IRQHandler+0x35c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001950:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001954:	b29b      	uxth	r3, r3
 8001956:	3306      	adds	r3, #6
 8001958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800195c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001960:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001964:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8001968:	f1ba 0f00 	cmp.w	sl, #0
 800196c:	f43f aee7 	beq.w	800173e <HAL_PCD_IRQHandler+0x35c>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001970:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8001974:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001978:	4653      	mov	r3, sl
 800197a:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800197e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001982:	f002 f875 	bl	8003a70 <USB_ReadPMA>
 8001986:	e6da      	b.n	800173e <HAL_PCD_IRQHandler+0x35c>
        ep = &hpcd->OUT_ep[epindex];
 8001988:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800198c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001990:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8001994:	6820      	ldr	r0, [r4, #0]
 8001996:	f001 fd48 	bl	800342a <USB_EPStartXfer>
 800199a:	e5f9      	b.n	8001590 <HAL_PCD_IRQHandler+0x1ae>
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800199c:	2b01      	cmp	r3, #1
 800199e:	f47f ae34 	bne.w	800160a <HAL_PCD_IRQHandler+0x228>
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80019a8:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80019ac:	0109      	lsls	r1, r1, #4
 80019ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80019b2:	fa13 f382 	uxtah	r3, r3, r2
 80019b6:	52ce      	strh	r6, [r1, r3]
 80019b8:	e627      	b.n	800160a <HAL_PCD_IRQHandler+0x228>
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 80019c0:	b9b2      	cbnz	r2, 80019f0 <HAL_PCD_IRQHandler+0x60e>
 80019c2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80019c6:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80019ca:	0109      	lsls	r1, r1, #4
 80019cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019d0:	fa13 f282 	uxtah	r2, r3, r2
 80019d4:	5a8b      	ldrh	r3, [r1, r2]
 80019d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80019da:	041b      	lsls	r3, r3, #16
 80019dc:	0c1b      	lsrs	r3, r3, #16
 80019de:	528b      	strh	r3, [r1, r2]
 80019e0:	5a8b      	ldrh	r3, [r1, r2]
 80019e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	528b      	strh	r3, [r1, r2]
 80019ee:	e60c      	b.n	800160a <HAL_PCD_IRQHandler+0x228>
 80019f0:	2a01      	cmp	r2, #1
 80019f2:	f47f ae0a 	bne.w	800160a <HAL_PCD_IRQHandler+0x228>
 80019f6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80019fa:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80019fe:	0109      	lsls	r1, r1, #4
 8001a00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a04:	fa13 f382 	uxtah	r3, r3, r2
 8001a08:	52ce      	strh	r6, [r1, r3]
 8001a0a:	e5fe      	b.n	800160a <HAL_PCD_IRQHandler+0x228>
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8001a0c:	f419 7f80 	tst.w	r9, #256	; 0x100
 8001a10:	d132      	bne.n	8001a78 <HAL_PCD_IRQHandler+0x696>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a12:	6820      	ldr	r0, [r4, #0]
 8001a14:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
          if (ep->xfer_len > TxByteNbre)
 8001a1e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001a22:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001a26:	6c12      	ldr	r2, [r2, #64]	; 0x40
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a28:	3302      	adds	r3, #2
 8001a2a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001a2e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001a32:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8001a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	f240 8243 	bls.w	8001ec6 <HAL_PCD_IRQHandler+0xae4>
            ep->xfer_len -= TxByteNbre;
 8001a40:	1ad2      	subs	r2, r2, r3
 8001a42:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8001a46:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8001a4a:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8001a4e:	2a00      	cmp	r2, #0
 8001a50:	f000 823e 	beq.w	8001ed0 <HAL_PCD_IRQHandler+0xaee>
            ep->xfer_buff += TxByteNbre;
 8001a54:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001a58:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001a5c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a5e:	4419      	add	r1, r3
 8001a60:	63d1      	str	r1, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8001a62:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001a64:	440b      	add	r3, r1
 8001a66:	6453      	str	r3, [r2, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8001a68:	3501      	adds	r5, #1
 8001a6a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8001a72:	f001 fcda 	bl	800342a <USB_EPStartXfer>
 8001a76:	e5cd      	b.n	8001614 <HAL_PCD_IRQHandler+0x232>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a78:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001a7c:	f000 80e7 	beq.w	8001c4e <HAL_PCD_IRQHandler+0x86c>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a80:	6822      	ldr	r2, [r4, #0]
 8001a82:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    if (ep->xfer_len > TxByteNbre)
 8001a8c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8001a90:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001a94:	6c00      	ldr	r0, [r0, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a96:	3302      	adds	r3, #2
 8001a98:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001a9c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001aa0:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len > TxByteNbre)
 8001aa4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001aa8:	4560      	cmp	r0, ip
 8001aaa:	f240 8216 	bls.w	8001eda <HAL_PCD_IRQHandler+0xaf8>
      ep->xfer_len -= TxByteNbre;
 8001aae:	eba0 000c 	sub.w	r0, r0, ip
 8001ab2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001ab6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001aba:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001abc:	2800      	cmp	r0, #0
 8001abe:	f000 8211 	beq.w	8001ee4 <HAL_PCD_IRQHandler+0xb02>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ac2:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001ac6:	d00a      	beq.n	8001ade <HAL_PCD_IRQHandler+0x6fc>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001ac8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad6:	ea48 0303 	orr.w	r3, r8, r3
 8001ada:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001ade:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001ae2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001ae6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d029      	beq.n	8001b42 <HAL_PCD_IRQHandler+0x760>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001aee:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001af2:	6822      	ldr	r2, [r4, #0]
 8001af4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b02:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001b06:	433b      	orrs	r3, r7
 8001b08:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001b0c:	e582      	b.n	8001614 <HAL_PCD_IRQHandler+0x232>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	f040 821d 	bne.w	8001f4e <HAL_PCD_IRQHandler+0xb6c>
 8001b14:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001b18:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8001b1c:	fa12 f383 	uxtah	r3, r2, r3
 8001b20:	0109      	lsls	r1, r1, #4
 8001b22:	525e      	strh	r6, [r3, r1]
 8001b24:	e1f7      	b.n	8001f16 <HAL_PCD_IRQHandler+0xb34>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b26:	2a01      	cmp	r2, #1
 8001b28:	f040 8211 	bne.w	8001f4e <HAL_PCD_IRQHandler+0xb6c>
 8001b2c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001b30:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001b34:	0109      	lsls	r1, r1, #4
 8001b36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b3a:	fa13 f382 	uxtah	r3, r3, r2
 8001b3e:	52ce      	strh	r6, [r1, r3]
 8001b40:	e205      	b.n	8001f4e <HAL_PCD_IRQHandler+0xb6c>
        ep->xfer_buff += TxByteNbre;
 8001b42:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001b46:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b4c:	4462      	add	r2, ip
 8001b4e:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b52:	4462      	add	r2, ip
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b56:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	4299      	cmp	r1, r3
 8001b5c:	d324      	bcc.n	8001ba8 <HAL_PCD_IRQHandler+0x7c6>
          ep->xfer_len_db -= len;
 8001b5e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001b62:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001b66:	1ac9      	subs	r1, r1, r3
 8001b68:	6491      	str	r1, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001b6a:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8001b6e:	2a00      	cmp	r2, #0
 8001b70:	d145      	bne.n	8001bfe <HAL_PCD_IRQHandler+0x81c>
 8001b72:	6822      	ldr	r2, [r4, #0]
 8001b74:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001b78:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8001b7c:	fa12 f181 	uxtah	r1, r2, r1
 8001b80:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8001b84:	0110      	lsls	r0, r2, #4
 8001b86:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8001b8a:	bb63      	cbnz	r3, 8001be6 <HAL_PCD_IRQHandler+0x804>
 8001b8c:	5a0a      	ldrh	r2, [r1, r0]
 8001b8e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001b92:	0412      	lsls	r2, r2, #16
 8001b94:	0c12      	lsrs	r2, r2, #16
 8001b96:	520a      	strh	r2, [r1, r0]
 8001b98:	5a0a      	ldrh	r2, [r1, r0]
 8001b9a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001b9e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	520a      	strh	r2, [r1, r0]
 8001ba6:	e02c      	b.n	8001c02 <HAL_PCD_IRQHandler+0x820>
        else if (ep->xfer_len_db == 0U)
 8001ba8:	b939      	cbnz	r1, 8001bba <HAL_PCD_IRQHandler+0x7d8>
          ep->xfer_fill_db = 0U;
 8001baa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001bae:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001bb2:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 8001bb6:	4663      	mov	r3, ip
 8001bb8:	e7d7      	b.n	8001b6a <HAL_PCD_IRQHandler+0x788>
          ep->xfer_fill_db = 0U;
 8001bba:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001bbe:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001bc2:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8001bc6:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001bc8:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8001bcc:	b9b2      	cbnz	r2, 8001bfc <HAL_PCD_IRQHandler+0x81a>
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001bd4:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
 8001bd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001bdc:	fa13 f382 	uxtah	r3, r3, r2
 8001be0:	eb03 1200 	add.w	r2, r3, r0, lsl #4
          len = ep->xfer_len_db;
 8001be4:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001be6:	2b3e      	cmp	r3, #62	; 0x3e
 8001be8:	d817      	bhi.n	8001c1a <HAL_PCD_IRQHandler+0x838>
 8001bea:	0859      	lsrs	r1, r3, #1
 8001bec:	f013 0f01 	tst.w	r3, #1
 8001bf0:	bf18      	it	ne
 8001bf2:	3101      	addne	r1, #1
 8001bf4:	0289      	lsls	r1, r1, #10
 8001bf6:	b289      	uxth	r1, r1
 8001bf8:	8011      	strh	r1, [r2, #0]
 8001bfa:	e002      	b.n	8001c02 <HAL_PCD_IRQHandler+0x820>
          len = ep->xfer_len_db;
 8001bfc:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001bfe:	2a01      	cmp	r2, #1
 8001c00:	d018      	beq.n	8001c34 <HAL_PCD_IRQHandler+0x852>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001c02:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001c06:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8001c10:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001c12:	6820      	ldr	r0, [r4, #0]
 8001c14:	f001 fbf2 	bl	80033fc <USB_WritePMA>
 8001c18:	e769      	b.n	8001aee <HAL_PCD_IRQHandler+0x70c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001c1a:	0959      	lsrs	r1, r3, #5
 8001c1c:	f013 0f1f 	tst.w	r3, #31
 8001c20:	bf08      	it	eq
 8001c22:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001c26:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8001c2a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001c2e:	b289      	uxth	r1, r1
 8001c30:	8011      	strh	r1, [r2, #0]
 8001c32:	e7e6      	b.n	8001c02 <HAL_PCD_IRQHandler+0x820>
 8001c34:	6822      	ldr	r2, [r4, #0]
 8001c36:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001c3a:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8001c3e:	fa12 f181 	uxtah	r1, r2, r1
 8001c42:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b298      	uxth	r0, r3
 8001c4a:	5288      	strh	r0, [r1, r2]
 8001c4c:	e7d9      	b.n	8001c02 <HAL_PCD_IRQHandler+0x820>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c4e:	6822      	ldr	r2, [r4, #0]
 8001c50:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 8001c5a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8001c5e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001c62:	6c00      	ldr	r0, [r0, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c64:	3306      	adds	r3, #6
 8001c66:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001c6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001c6e:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len >= TxByteNbre)
 8001c72:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001c76:	4560      	cmp	r0, ip
 8001c78:	f0c0 8181 	bcc.w	8001f7e <HAL_PCD_IRQHandler+0xb9c>
      ep->xfer_len -= TxByteNbre;
 8001c7c:	eba0 000c 	sub.w	r0, r0, ip
 8001c80:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001c84:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001c88:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	f000 817c 	beq.w	8001f88 <HAL_PCD_IRQHandler+0xba6>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001c90:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001c94:	d10a      	bne.n	8001cac <HAL_PCD_IRQHandler+0x8ca>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001c96:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ca4:	ea48 0303 	orr.w	r3, r8, r3
 8001ca8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001cac:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001cb0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001cb4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	f47f af18 	bne.w	8001aee <HAL_PCD_IRQHandler+0x70c>
        ep->xfer_buff += TxByteNbre;
 8001cbe:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001cc2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cc8:	4462      	add	r2, ip
 8001cca:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cce:	4462      	add	r2, ip
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001cd2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	4299      	cmp	r1, r3
 8001cd8:	d341      	bcc.n	8001d5e <HAL_PCD_IRQHandler+0x97c>
          ep->xfer_len_db -= len;
 8001cda:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001cde:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001ce2:	1ac9      	subs	r1, r1, r3
 8001ce4:	6491      	str	r1, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ce6:	6822      	ldr	r2, [r4, #0]
 8001ce8:	4610      	mov	r0, r2
 8001cea:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 8001cee:	f1bc 0f00 	cmp.w	ip, #0
 8001cf2:	d162      	bne.n	8001dba <HAL_PCD_IRQHandler+0x9d8>
 8001cf4:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001cf8:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8001cfc:	fa12 f181 	uxtah	r1, r2, r1
 8001d00:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8001d04:	0110      	lsls	r0, r2, #4
 8001d06:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d149      	bne.n	8001da2 <HAL_PCD_IRQHandler+0x9c0>
 8001d0e:	5a0a      	ldrh	r2, [r1, r0]
 8001d10:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001d14:	0412      	lsls	r2, r2, #16
 8001d16:	0c12      	lsrs	r2, r2, #16
 8001d18:	520a      	strh	r2, [r1, r0]
 8001d1a:	5a0a      	ldrh	r2, [r1, r0]
 8001d1c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001d20:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001d24:	b292      	uxth	r2, r2
 8001d26:	520a      	strh	r2, [r1, r0]
 8001d28:	e04a      	b.n	8001dc0 <HAL_PCD_IRQHandler+0x9de>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	f040 8161 	bne.w	8001ff2 <HAL_PCD_IRQHandler+0xc10>
 8001d30:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001d34:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8001d38:	fa12 f383 	uxtah	r3, r2, r3
 8001d3c:	0109      	lsls	r1, r1, #4
 8001d3e:	525e      	strh	r6, [r3, r1]
 8001d40:	e13b      	b.n	8001fba <HAL_PCD_IRQHandler+0xbd8>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d42:	2a01      	cmp	r2, #1
 8001d44:	f040 8155 	bne.w	8001ff2 <HAL_PCD_IRQHandler+0xc10>
 8001d48:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001d4c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001d50:	0109      	lsls	r1, r1, #4
 8001d52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d56:	fa13 f382 	uxtah	r3, r3, r2
 8001d5a:	52ce      	strh	r6, [r1, r3]
 8001d5c:	e149      	b.n	8001ff2 <HAL_PCD_IRQHandler+0xc10>
        else if (ep->xfer_len_db == 0U)
 8001d5e:	b939      	cbnz	r1, 8001d70 <HAL_PCD_IRQHandler+0x98e>
          ep->xfer_fill_db = 0U;
 8001d60:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001d64:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001d68:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxByteNbre;
 8001d6c:	4663      	mov	r3, ip
 8001d6e:	e7ba      	b.n	8001ce6 <HAL_PCD_IRQHandler+0x904>
          ep->xfer_len_db = 0U;
 8001d70:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001d74:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001d78:	649e      	str	r6, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8001d7a:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d7e:	6822      	ldr	r2, [r4, #0]
 8001d80:	4610      	mov	r0, r2
 8001d82:	f89a c029 	ldrb.w	ip, [sl, #41]	; 0x29
 8001d86:	f1bc 0f00 	cmp.w	ip, #0
 8001d8a:	d115      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x9d6>
 8001d8c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001d90:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
 8001d94:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8001d98:	fa12 f283 	uxtah	r2, r2, r3
 8001d9c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
          len = ep->xfer_len_db;
 8001da0:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001da2:	2b3e      	cmp	r3, #62	; 0x3e
 8001da4:	d818      	bhi.n	8001dd8 <HAL_PCD_IRQHandler+0x9f6>
 8001da6:	0859      	lsrs	r1, r3, #1
 8001da8:	f013 0f01 	tst.w	r3, #1
 8001dac:	bf18      	it	ne
 8001dae:	3101      	addne	r1, #1
 8001db0:	0289      	lsls	r1, r1, #10
 8001db2:	b289      	uxth	r1, r1
 8001db4:	8011      	strh	r1, [r2, #0]
 8001db6:	e003      	b.n	8001dc0 <HAL_PCD_IRQHandler+0x9de>
          len = ep->xfer_len_db;
 8001db8:	460b      	mov	r3, r1
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001dba:	f1bc 0f01 	cmp.w	ip, #1
 8001dbe:	d018      	beq.n	8001df2 <HAL_PCD_IRQHandler+0xa10>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001dc0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8001dc4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001dc8:	4611      	mov	r1, r2
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8001dce:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001dd0:	6820      	ldr	r0, [r4, #0]
 8001dd2:	f001 fb13 	bl	80033fc <USB_WritePMA>
 8001dd6:	e68a      	b.n	8001aee <HAL_PCD_IRQHandler+0x70c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001dd8:	0959      	lsrs	r1, r3, #5
 8001dda:	f013 0f1f 	tst.w	r3, #31
 8001dde:	bf08      	it	eq
 8001de0:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001de4:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8001de8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001dec:	b289      	uxth	r1, r1
 8001dee:	8011      	strh	r1, [r2, #0]
 8001df0:	e7e6      	b.n	8001dc0 <HAL_PCD_IRQHandler+0x9de>
 8001df2:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001df6:	b289      	uxth	r1, r1
 8001df8:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8001dfc:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001e00:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8001e04:	b298      	uxth	r0, r3
 8001e06:	5250      	strh	r0, [r2, r1]
 8001e08:	e7da      	b.n	8001dc0 <HAL_PCD_IRQHandler+0x9de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e0a:	6822      	ldr	r2, [r4, #0]
 8001e0c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f002 fe52 	bl	8004ac6 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e22:	2100      	movs	r1, #0
 8001e24:	4620      	mov	r0, r4
 8001e26:	f7ff fac8 	bl	80013ba <HAL_PCD_SetAddress>
 8001e2a:	f7ff baea 	b.w	8001402 <HAL_PCD_IRQHandler+0x20>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e2e:	6822      	ldr	r2, [r4, #0]
 8001e30:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	041b      	lsls	r3, r3, #16
 8001e3a:	0c1b      	lsrs	r3, r3, #16
 8001e3c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e40:	6822      	ldr	r2, [r4, #0]
 8001e42:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001e46:	f023 0308 	bic.w	r3, r3, #8
 8001e4a:	041b      	lsls	r3, r3, #16
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001e52:	4620      	mov	r0, r4
 8001e54:	f002 fe5a 	bl	8004b0c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e58:	6822      	ldr	r2, [r4, #0]
 8001e5a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e62:	041b      	lsls	r3, r3, #16
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001e6a:	f7ff baef 	b.w	800144c <HAL_PCD_IRQHandler+0x6a>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e6e:	6822      	ldr	r2, [r4, #0]
 8001e70:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	f043 0308 	orr.w	r3, r3, #8
 8001e7a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e7e:	6822      	ldr	r2, [r4, #0]
 8001e80:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e88:	041b      	lsls	r3, r3, #16
 8001e8a:	0c1b      	lsrs	r3, r3, #16
 8001e8c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e90:	6822      	ldr	r2, [r4, #0]
 8001e92:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f002 fe23 	bl	8004aec <HAL_PCD_SuspendCallback>
 8001ea6:	f7ff bad8 	b.w	800145a <HAL_PCD_IRQHandler+0x78>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001eaa:	6822      	ldr	r2, [r4, #0]
 8001eac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001eb4:	041b      	lsls	r3, r3, #16
 8001eb6:	0c1b      	lsrs	r3, r3, #16
 8001eb8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	f002 fdfc 	bl	8004aba <HAL_PCD_SOFCallback>
 8001ec2:	f7ff bad1 	b.w	8001468 <HAL_PCD_IRQHandler+0x86>
 8001ec6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001eca:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8001ece:	642e      	str	r6, [r5, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f002 fde7 	bl	8004aa4 <HAL_PCD_DataInStageCallback>
 8001ed6:	f7ff bb9d 	b.w	8001614 <HAL_PCD_IRQHandler+0x232>
 8001eda:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001ede:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8001ee2:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ee4:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f47f ae10 	bne.w	8001b0e <HAL_PCD_IRQHandler+0x72c>
 8001eee:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001ef2:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8001ef6:	fa12 f283 	uxtah	r2, r2, r3
 8001efa:	0109      	lsls	r1, r1, #4
 8001efc:	5a53      	ldrh	r3, [r2, r1]
 8001efe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f02:	041b      	lsls	r3, r3, #16
 8001f04:	0c1b      	lsrs	r3, r3, #16
 8001f06:	5253      	strh	r3, [r2, r1]
 8001f08:	5a53      	ldrh	r3, [r2, r1]
 8001f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	5253      	strh	r3, [r2, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8001f1c:	2a00      	cmp	r2, #0
 8001f1e:	f47f ae02 	bne.w	8001b26 <HAL_PCD_IRQHandler+0x744>
 8001f22:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001f26:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001f2a:	0109      	lsls	r1, r1, #4
 8001f2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f30:	fa13 f282 	uxtah	r2, r3, r2
 8001f34:	5a8b      	ldrh	r3, [r1, r2]
 8001f36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f3a:	041b      	lsls	r3, r3, #16
 8001f3c:	0c1b      	lsrs	r3, r3, #16
 8001f3e:	528b      	strh	r3, [r1, r2]
 8001f40:	5a8b      	ldrh	r3, [r1, r2]
 8001f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f4e:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001f52:	4620      	mov	r0, r4
 8001f54:	f002 fda6 	bl	8004aa4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f58:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001f5c:	f43f adc7 	beq.w	8001aee <HAL_PCD_IRQHandler+0x70c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f60:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001f64:	6822      	ldr	r2, [r4, #0]
 8001f66:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f74:	ea48 0303 	orr.w	r3, r8, r3
 8001f78:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001f7c:	e5b7      	b.n	8001aee <HAL_PCD_IRQHandler+0x70c>
 8001f7e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001f82:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8001f86:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f88:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f47f aecc 	bne.w	8001d2a <HAL_PCD_IRQHandler+0x948>
 8001f92:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001f96:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8001f9a:	fa12 f283 	uxtah	r2, r2, r3
 8001f9e:	0109      	lsls	r1, r1, #4
 8001fa0:	5a53      	ldrh	r3, [r2, r1]
 8001fa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fa6:	041b      	lsls	r3, r3, #16
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	5253      	strh	r3, [r2, r1]
 8001fac:	5a53      	ldrh	r3, [r2, r1]
 8001fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	5253      	strh	r3, [r2, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8001fc0:	2a00      	cmp	r2, #0
 8001fc2:	f47f aebe 	bne.w	8001d42 <HAL_PCD_IRQHandler+0x960>
 8001fc6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001fca:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001fce:	0109      	lsls	r1, r1, #4
 8001fd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fd4:	fa13 f282 	uxtah	r2, r3, r2
 8001fd8:	5a8b      	ldrh	r3, [r1, r2]
 8001fda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fde:	041b      	lsls	r3, r3, #16
 8001fe0:	0c1b      	lsrs	r3, r3, #16
 8001fe2:	528b      	strh	r3, [r1, r2]
 8001fe4:	5a8b      	ldrh	r3, [r1, r2]
 8001fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ff2:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f002 fd54 	bl	8004aa4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001ffc:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8002000:	f47f ad75 	bne.w	8001aee <HAL_PCD_IRQHandler+0x70c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002004:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8002008:	6822      	ldr	r2, [r4, #0]
 800200a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800200e:	b29b      	uxth	r3, r3
 8002010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002018:	ea48 0303 	orr.w	r3, r8, r3
 800201c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002020:	e565      	b.n	8001aee <HAL_PCD_IRQHandler+0x70c>
 8002022:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002026:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800202a:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800202e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002032:	b29b      	uxth	r3, r3
 8002034:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002040:	433b      	orrs	r3, r7
 8002042:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002046:	e410      	b.n	800186a <HAL_PCD_IRQHandler+0x488>
 8002048:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800204c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002050:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002054:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002058:	b29b      	uxth	r3, r3
 800205a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800205e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002062:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002066:	433b      	orrs	r3, r7
 8002068:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800206c:	e448      	b.n	8001900 <HAL_PCD_IRQHandler+0x51e>

0800206e <HAL_PCD_EP_Open>:
{
 800206e:	b510      	push	{r4, lr}
 8002070:	4604      	mov	r4, r0
 8002072:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002074:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002078:	d12a      	bne.n	80020d0 <HAL_PCD_EP_Open+0x62>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800207a:	f001 0e07 	and.w	lr, r1, #7
 800207e:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 8002082:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002086:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800208a:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 800208e:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8002092:	2000      	movs	r0, #0
 8002094:	f88e 0169 	strb.w	r0, [lr, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002098:	f00c 0c07 	and.w	ip, ip, #7
 800209c:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 80020a0:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80020a2:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80020a4:	784a      	ldrb	r2, [r1, #1]
 80020a6:	b10a      	cbz	r2, 80020ac <HAL_PCD_EP_Open+0x3e>
    ep->tx_fifo_num = ep->num;
 80020a8:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80020ac:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80020ae:	bf04      	itt	eq
 80020b0:	2300      	moveq	r3, #0
 80020b2:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80020b4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d016      	beq.n	80020ea <HAL_PCD_EP_Open+0x7c>
 80020bc:	2301      	movs	r3, #1
 80020be:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020c2:	6820      	ldr	r0, [r4, #0]
 80020c4:	f000 fe76 	bl	8002db4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020c8:	2000      	movs	r0, #0
 80020ca:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80020ce:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d0:	f001 0e07 	and.w	lr, r1, #7
 80020d4:	f10e 0001 	add.w	r0, lr, #1
 80020d8:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
 80020dc:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
    ep->is_in = 1U;
 80020e0:	f04f 0e01 	mov.w	lr, #1
 80020e4:	f881 e001 	strb.w	lr, [r1, #1]
 80020e8:	e7d6      	b.n	8002098 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 80020ea:	2002      	movs	r0, #2
 80020ec:	e7ef      	b.n	80020ce <HAL_PCD_EP_Open+0x60>

080020ee <HAL_PCD_EP_Close>:
{
 80020ee:	b510      	push	{r4, lr}
 80020f0:	4604      	mov	r4, r0
 80020f2:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80020f4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80020f8:	d11c      	bne.n	8002134 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020fa:	f001 0007 	and.w	r0, r1, #7
 80020fe:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8002102:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002106:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 800210a:	4618      	mov	r0, r3
 800210c:	2300      	movs	r3, #0
 800210e:	f880 3169 	strb.w	r3, [r0, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002112:	f002 0207 	and.w	r2, r2, #7
 8002116:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002118:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800211c:	2b01      	cmp	r3, #1
 800211e:	d013      	beq.n	8002148 <HAL_PCD_EP_Close+0x5a>
 8002120:	2301      	movs	r3, #1
 8002122:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002126:	6820      	ldr	r0, [r4, #0]
 8002128:	f000 fffd 	bl	8003126 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800212c:	2000      	movs	r0, #0
 800212e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002132:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002134:	f001 0307 	and.w	r3, r1, #7
 8002138:	1c58      	adds	r0, r3, #1
 800213a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800213e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    ep->is_in = 1U;
 8002142:	2301      	movs	r3, #1
 8002144:	704b      	strb	r3, [r1, #1]
 8002146:	e7e4      	b.n	8002112 <HAL_PCD_EP_Close+0x24>
  __HAL_LOCK(hpcd);
 8002148:	2002      	movs	r0, #2
 800214a:	e7f2      	b.n	8002132 <HAL_PCD_EP_Close+0x44>

0800214c <HAL_PCD_EP_Receive>:
{
 800214c:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800214e:	f001 0407 	and.w	r4, r1, #7
 8002152:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002156:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800215a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  ep->xfer_buff = pBuf;
 800215e:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8002162:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8002166:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 800216a:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
  ep->is_in = 0U;
 8002174:	f88c 3169 	strb.w	r3, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002178:	f88c 4168 	strb.w	r4, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800217c:	6800      	ldr	r0, [r0, #0]
 800217e:	f001 f954 	bl	800342a <USB_EPStartXfer>
}
 8002182:	2000      	movs	r0, #0
 8002184:	bd10      	pop	{r4, pc}

08002186 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002186:	f001 0107 	and.w	r1, r1, #7
 800218a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800218e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8002192:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8002196:	4770      	bx	lr

08002198 <HAL_PCD_EP_Transmit>:
{
 8002198:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219a:	f001 0407 	and.w	r4, r1, #7
 800219e:	1c61      	adds	r1, r4, #1
 80021a0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80021a4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 80021a8:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 80021ac:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80021b0:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->xfer_len = len;
 80021b4:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80021b8:	2201      	movs	r2, #1
 80021ba:	f88c 204c 	strb.w	r2, [ip, #76]	; 0x4c
  ep->xfer_len_db = len;
 80021be:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
  ep->is_in = 1U;
 80021c8:	f88c 2029 	strb.w	r2, [ip, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 80021cc:	f88c 4028 	strb.w	r4, [ip, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021d0:	6800      	ldr	r0, [r0, #0]
 80021d2:	f001 f92a 	bl	800342a <USB_EPStartXfer>
}
 80021d6:	2000      	movs	r0, #0
 80021d8:	bd10      	pop	{r4, pc}

080021da <HAL_PCD_EP_SetStall>:
{
 80021da:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021dc:	f001 0207 	and.w	r2, r1, #7
 80021e0:	6841      	ldr	r1, [r0, #4]
 80021e2:	428a      	cmp	r2, r1
 80021e4:	d82a      	bhi.n	800223c <HAL_PCD_EP_SetStall+0x62>
{
 80021e6:	b510      	push	{r4, lr}
 80021e8:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80021ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80021ee:	d11d      	bne.n	800222c <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 80021f0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80021f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80021f8:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80021fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002200:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002204:	2000      	movs	r0, #0
 8002206:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 800220a:	2301      	movs	r3, #1
 800220c:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800220e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002210:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002214:	2b01      	cmp	r3, #1
 8002216:	d013      	beq.n	8002240 <HAL_PCD_EP_SetStall+0x66>
 8002218:	2301      	movs	r3, #1
 800221a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800221e:	6820      	ldr	r0, [r4, #0]
 8002220:	f001 f86a 	bl	80032f8 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8002224:	2000      	movs	r0, #0
 8002226:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800222a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222c:	1c51      	adds	r1, r2, #1
 800222e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002232:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8002236:	2001      	movs	r0, #1
 8002238:	7048      	strb	r0, [r1, #1]
 800223a:	e7e6      	b.n	800220a <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 800223c:	2001      	movs	r0, #1
}
 800223e:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8002240:	2002      	movs	r0, #2
 8002242:	e7f2      	b.n	800222a <HAL_PCD_EP_SetStall+0x50>

08002244 <HAL_PCD_EP_ClrStall>:
{
 8002244:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002246:	f001 010f 	and.w	r1, r1, #15
 800224a:	6842      	ldr	r2, [r0, #4]
 800224c:	4291      	cmp	r1, r2
 800224e:	d830      	bhi.n	80022b2 <HAL_PCD_EP_ClrStall+0x6e>
{
 8002250:	b510      	push	{r4, lr}
 8002252:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8002254:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002258:	d121      	bne.n	800229e <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225a:	f003 0207 	and.w	r2, r3, #7
 800225e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002262:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002266:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800226a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800226e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002272:	2000      	movs	r0, #0
 8002274:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8002278:	2200      	movs	r2, #0
 800227a:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002282:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002286:	2b01      	cmp	r3, #1
 8002288:	d015      	beq.n	80022b6 <HAL_PCD_EP_ClrStall+0x72>
 800228a:	2301      	movs	r3, #1
 800228c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002290:	6820      	ldr	r0, [r4, #0]
 8002292:	f001 f856 	bl	8003342 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002296:	2000      	movs	r0, #0
 8002298:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800229c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800229e:	f003 0107 	and.w	r1, r3, #7
 80022a2:	1c4a      	adds	r2, r1, #1
 80022a4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80022a8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80022ac:	2001      	movs	r0, #1
 80022ae:	7048      	strb	r0, [r1, #1]
 80022b0:	e7e2      	b.n	8002278 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 80022b2:	2001      	movs	r0, #1
}
 80022b4:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80022b6:	2002      	movs	r0, #2
 80022b8:	e7f0      	b.n	800229c <HAL_PCD_EP_ClrStall+0x58>

080022ba <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80022ba:	f011 0f80 	tst.w	r1, #128	; 0x80
 80022be:	d00b      	beq.n	80022d8 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c0:	f001 0107 	and.w	r1, r1, #7
 80022c4:	3101      	adds	r1, #1
 80022c6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80022ca:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80022ce:	b952      	cbnz	r2, 80022e6 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80022d0:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80022d2:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80022d4:	2000      	movs	r0, #0
 80022d6:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80022d8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80022dc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80022e0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80022e4:	e7f3      	b.n	80022ce <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 80022e6:	2201      	movs	r2, #1
 80022e8:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80022ea:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	814b      	strh	r3, [r1, #10]
 80022f0:	e7f0      	b.n	80022d4 <HAL_PCDEx_PMAConfig+0x1a>
	...

080022f4 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f4:	2800      	cmp	r0, #0
 80022f6:	f000 8305 	beq.w	8002904 <HAL_RCC_OscConfig+0x610>
{
 80022fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022fe:	b083      	sub	sp, #12
 8002300:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002302:	6803      	ldr	r3, [r0, #0]
 8002304:	f013 0f01 	tst.w	r3, #1
 8002308:	d039      	beq.n	800237e <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800230a:	4bb5      	ldr	r3, [pc, #724]	; (80025e0 <HAL_RCC_OscConfig+0x2ec>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d01e      	beq.n	8002354 <HAL_RCC_OscConfig+0x60>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002316:	4bb2      	ldr	r3, [pc, #712]	; (80025e0 <HAL_RCC_OscConfig+0x2ec>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b08      	cmp	r3, #8
 8002320:	d013      	beq.n	800234a <HAL_RCC_OscConfig+0x56>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002322:	6863      	ldr	r3, [r4, #4]
 8002324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002328:	d067      	beq.n	80023fa <HAL_RCC_OscConfig+0x106>
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 8091 	bne.w	8002452 <HAL_RCC_OscConfig+0x15e>
 8002330:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002334:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e05c      	b.n	8002404 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800234a:	4ba5      	ldr	r3, [pc, #660]	; (80025e0 <HAL_RCC_OscConfig+0x2ec>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002352:	d0e6      	beq.n	8002322 <HAL_RCC_OscConfig+0x2e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002358:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	4aa0      	ldr	r2, [pc, #640]	; (80025e0 <HAL_RCC_OscConfig+0x2ec>)
 800235e:	6811      	ldr	r1, [r2, #0]
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	2201      	movs	r2, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	420b      	tst	r3, r1
 8002374:	d003      	beq.n	800237e <HAL_RCC_OscConfig+0x8a>
 8002376:	6863      	ldr	r3, [r4, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 82c5 	beq.w	8002908 <HAL_RCC_OscConfig+0x614>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237e:	6823      	ldr	r3, [r4, #0]
 8002380:	f013 0f02 	tst.w	r3, #2
 8002384:	f000 80c4 	beq.w	8002510 <HAL_RCC_OscConfig+0x21c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002388:	4b95      	ldr	r3, [pc, #596]	; (80025e0 <HAL_RCC_OscConfig+0x2ec>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f013 0f0c 	tst.w	r3, #12
 8002390:	f000 809d 	beq.w	80024ce <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002394:	4b92      	ldr	r3, [pc, #584]	; (80025e0 <HAL_RCC_OscConfig+0x2ec>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b08      	cmp	r3, #8
 800239e:	f000 8090 	beq.w	80024c2 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a2:	6923      	ldr	r3, [r4, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80f2 	beq.w	800258e <HAL_RCC_OscConfig+0x29a>
 80023aa:	2201      	movs	r2, #1
 80023ac:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fa72 	bl	80008a8 <HAL_GetTick>
 80023c4:	4606      	mov	r6, r0
 80023c6:	2502      	movs	r5, #2
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c8:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80025e0 <HAL_RCC_OscConfig+0x2ec>
 80023cc:	2701      	movs	r7, #1
 80023ce:	fa95 f3a5 	rbit	r3, r5
 80023d2:	f8d8 2000 	ldr.w	r2, [r8]
 80023d6:	fa95 f3a5 	rbit	r3, r5
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	fa07 f303 	lsl.w	r3, r7, r3
 80023e6:	4213      	tst	r3, r2
 80023e8:	f040 80c3 	bne.w	8002572 <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ec:	f7fe fa5c 	bl	80008a8 <HAL_GetTick>
 80023f0:	1b80      	subs	r0, r0, r6
 80023f2:	2802      	cmp	r0, #2
 80023f4:	d9eb      	bls.n	80023ce <HAL_RCC_OscConfig+0xda>
          {
            return HAL_TIMEOUT;
 80023f6:	2003      	movs	r0, #3
 80023f8:	e28f      	b.n	800291a <HAL_RCC_OscConfig+0x626>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fa:	4a79      	ldr	r2, [pc, #484]	; (80025e0 <HAL_RCC_OscConfig+0x2ec>)
 80023fc:	6813      	ldr	r3, [r2, #0]
 80023fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002402:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002404:	4a76      	ldr	r2, [pc, #472]	; (80025e0 <HAL_RCC_OscConfig+0x2ec>)
 8002406:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002408:	f023 030f 	bic.w	r3, r3, #15
 800240c:	68a1      	ldr	r1, [r4, #8]
 800240e:	430b      	orrs	r3, r1
 8002410:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002412:	6863      	ldr	r3, [r4, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d036      	beq.n	8002486 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8002418:	f7fe fa46 	bl	80008a8 <HAL_GetTick>
 800241c:	4606      	mov	r6, r0
 800241e:	f44f 3500 	mov.w	r5, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80025e0 <HAL_RCC_OscConfig+0x2ec>
 8002426:	2701      	movs	r7, #1
 8002428:	fa95 f3a5 	rbit	r3, r5
 800242c:	f8d8 2000 	ldr.w	r2, [r8]
 8002430:	fa95 f3a5 	rbit	r3, r5
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	fa07 f303 	lsl.w	r3, r7, r3
 8002440:	4213      	tst	r3, r2
 8002442:	d19c      	bne.n	800237e <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002444:	f7fe fa30 	bl	80008a8 <HAL_GetTick>
 8002448:	1b80      	subs	r0, r0, r6
 800244a:	2864      	cmp	r0, #100	; 0x64
 800244c:	d9ec      	bls.n	8002428 <HAL_RCC_OscConfig+0x134>
            return HAL_TIMEOUT;
 800244e:	2003      	movs	r0, #3
 8002450:	e263      	b.n	800291a <HAL_RCC_OscConfig+0x626>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002456:	d009      	beq.n	800246c <HAL_RCC_OscConfig+0x178>
 8002458:	4b61      	ldr	r3, [pc, #388]	; (80025e0 <HAL_RCC_OscConfig+0x2ec>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	e7cb      	b.n	8002404 <HAL_RCC_OscConfig+0x110>
 800246c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002470:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e7be      	b.n	8002404 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8002486:	f7fe fa0f 	bl	80008a8 <HAL_GetTick>
 800248a:	4606      	mov	r6, r0
 800248c:	f44f 3500 	mov.w	r5, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002490:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80025e0 <HAL_RCC_OscConfig+0x2ec>
 8002494:	2701      	movs	r7, #1
 8002496:	fa95 f3a5 	rbit	r3, r5
 800249a:	f8d8 2000 	ldr.w	r2, [r8]
 800249e:	fa95 f3a5 	rbit	r3, r5
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	fa07 f303 	lsl.w	r3, r7, r3
 80024ae:	4213      	tst	r3, r2
 80024b0:	f43f af65 	beq.w	800237e <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b4:	f7fe f9f8 	bl	80008a8 <HAL_GetTick>
 80024b8:	1b80      	subs	r0, r0, r6
 80024ba:	2864      	cmp	r0, #100	; 0x64
 80024bc:	d9eb      	bls.n	8002496 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
 80024be:	2003      	movs	r0, #3
 80024c0:	e22b      	b.n	800291a <HAL_RCC_OscConfig+0x626>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024c2:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <HAL_RCC_OscConfig+0x2ec>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80024ca:	f47f af6a 	bne.w	80023a2 <HAL_RCC_OscConfig+0xae>
 80024ce:	2302      	movs	r3, #2
 80024d0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d4:	4a42      	ldr	r2, [pc, #264]	; (80025e0 <HAL_RCC_OscConfig+0x2ec>)
 80024d6:	6811      	ldr	r1, [r2, #0]
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2201      	movs	r2, #1
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	420b      	tst	r3, r1
 80024ec:	d003      	beq.n	80024f6 <HAL_RCC_OscConfig+0x202>
 80024ee:	6923      	ldr	r3, [r4, #16]
 80024f0:	4293      	cmp	r3, r2
 80024f2:	f040 820b 	bne.w	800290c <HAL_RCC_OscConfig+0x618>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	483a      	ldr	r0, [pc, #232]	; (80025e0 <HAL_RCC_OscConfig+0x2ec>)
 80024f8:	6801      	ldr	r1, [r0, #0]
 80024fa:	23f8      	movs	r3, #248	; 0xf8
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	fab3 f283 	clz	r2, r3
 8002504:	6963      	ldr	r3, [r4, #20]
 8002506:	4093      	lsls	r3, r2
 8002508:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800250c:	4313      	orrs	r3, r2
 800250e:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	f013 0f08 	tst.w	r3, #8
 8002516:	f000 8091 	beq.w	800263c <HAL_RCC_OscConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251a:	69a3      	ldr	r3, [r4, #24]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d063      	beq.n	80025e8 <HAL_RCC_OscConfig+0x2f4>
 8002520:	2101      	movs	r1, #1
 8002522:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002526:	fab2 f282 	clz	r2, r2
 800252a:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <HAL_RCC_OscConfig+0x2f0>)
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7fe f9b9 	bl	80008a8 <HAL_GetTick>
 8002536:	4606      	mov	r6, r0
 8002538:	2502      	movs	r5, #2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80025e0 <HAL_RCC_OscConfig+0x2ec>
 800253e:	2701      	movs	r7, #1
 8002540:	fa95 f3a5 	rbit	r3, r5
 8002544:	fa95 f3a5 	rbit	r3, r5
 8002548:	fa95 f3a5 	rbit	r3, r5
 800254c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8002550:	fa95 f3a5 	rbit	r3, r5
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	fa07 f303 	lsl.w	r3, r7, r3
 8002560:	4213      	tst	r3, r2
 8002562:	d16b      	bne.n	800263c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002564:	f7fe f9a0 	bl	80008a8 <HAL_GetTick>
 8002568:	1b80      	subs	r0, r0, r6
 800256a:	2802      	cmp	r0, #2
 800256c:	d9e8      	bls.n	8002540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800256e:	2003      	movs	r0, #3
 8002570:	e1d3      	b.n	800291a <HAL_RCC_OscConfig+0x626>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	481b      	ldr	r0, [pc, #108]	; (80025e0 <HAL_RCC_OscConfig+0x2ec>)
 8002574:	6801      	ldr	r1, [r0, #0]
 8002576:	23f8      	movs	r3, #248	; 0xf8
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	fab3 f283 	clz	r2, r3
 8002580:	6963      	ldr	r3, [r4, #20]
 8002582:	4093      	lsls	r3, r2
 8002584:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8002588:	4313      	orrs	r3, r2
 800258a:	6003      	str	r3, [r0, #0]
 800258c:	e7c0      	b.n	8002510 <HAL_RCC_OscConfig+0x21c>
 800258e:	2301      	movs	r3, #1
 8002590:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800259c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025a6:	f7fe f97f 	bl	80008a8 <HAL_GetTick>
 80025aa:	4606      	mov	r6, r0
 80025ac:	2502      	movs	r5, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80025e0 <HAL_RCC_OscConfig+0x2ec>
 80025b2:	2701      	movs	r7, #1
 80025b4:	fa95 f3a5 	rbit	r3, r5
 80025b8:	f8d8 2000 	ldr.w	r2, [r8]
 80025bc:	fa95 f3a5 	rbit	r3, r5
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	fa07 f303 	lsl.w	r3, r7, r3
 80025cc:	4213      	tst	r3, r2
 80025ce:	d09f      	beq.n	8002510 <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d0:	f7fe f96a 	bl	80008a8 <HAL_GetTick>
 80025d4:	1b80      	subs	r0, r0, r6
 80025d6:	2802      	cmp	r0, #2
 80025d8:	d9ec      	bls.n	80025b4 <HAL_RCC_OscConfig+0x2c0>
            return HAL_TIMEOUT;
 80025da:	2003      	movs	r0, #3
 80025dc:	e19d      	b.n	800291a <HAL_RCC_OscConfig+0x626>
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
 80025e4:	10908120 	.word	0x10908120
 80025e8:	2201      	movs	r2, #1
 80025ea:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ee:	fab2 f282 	clz	r2, r2
 80025f2:	4bb9      	ldr	r3, [pc, #740]	; (80028d8 <HAL_RCC_OscConfig+0x5e4>)
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fc:	f7fe f954 	bl	80008a8 <HAL_GetTick>
 8002600:	4606      	mov	r6, r0
 8002602:	2502      	movs	r5, #2
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 80028dc <HAL_RCC_OscConfig+0x5e8>
 8002608:	2701      	movs	r7, #1
 800260a:	fa95 f3a5 	rbit	r3, r5
 800260e:	fa95 f3a5 	rbit	r3, r5
 8002612:	fa95 f3a5 	rbit	r3, r5
 8002616:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 800261a:	fa95 f3a5 	rbit	r3, r5
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	fa07 f303 	lsl.w	r3, r7, r3
 800262a:	4213      	tst	r3, r2
 800262c:	d006      	beq.n	800263c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262e:	f7fe f93b 	bl	80008a8 <HAL_GetTick>
 8002632:	1b80      	subs	r0, r0, r6
 8002634:	2802      	cmp	r0, #2
 8002636:	d9e8      	bls.n	800260a <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8002638:	2003      	movs	r0, #3
 800263a:	e16e      	b.n	800291a <HAL_RCC_OscConfig+0x626>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263c:	6823      	ldr	r3, [r4, #0]
 800263e:	f013 0f04 	tst.w	r3, #4
 8002642:	f000 80ae 	beq.w	80027a2 <HAL_RCC_OscConfig+0x4ae>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002646:	4ba5      	ldr	r3, [pc, #660]	; (80028dc <HAL_RCC_OscConfig+0x5e8>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800264e:	d122      	bne.n	8002696 <HAL_RCC_OscConfig+0x3a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002650:	4ba2      	ldr	r3, [pc, #648]	; (80028dc <HAL_RCC_OscConfig+0x5e8>)
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002658:	61da      	str	r2, [r3, #28]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002664:	f04f 0901 	mov.w	r9, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	4b9d      	ldr	r3, [pc, #628]	; (80028e0 <HAL_RCC_OscConfig+0x5ec>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002670:	d014      	beq.n	800269c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002672:	68e3      	ldr	r3, [r4, #12]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d025      	beq.n	80026c4 <HAL_RCC_OscConfig+0x3d0>
 8002678:	2b00      	cmp	r3, #0
 800267a:	d133      	bne.n	80026e4 <HAL_RCC_OscConfig+0x3f0>
 800267c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002680:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002684:	6a1a      	ldr	r2, [r3, #32]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	621a      	str	r2, [r3, #32]
 800268c:	6a1a      	ldr	r2, [r3, #32]
 800268e:	f022 0204 	bic.w	r2, r2, #4
 8002692:	621a      	str	r2, [r3, #32]
 8002694:	e01b      	b.n	80026ce <HAL_RCC_OscConfig+0x3da>
    FlagStatus       pwrclkchanged = RESET;
 8002696:	f04f 0900 	mov.w	r9, #0
 800269a:	e7e5      	b.n	8002668 <HAL_RCC_OscConfig+0x374>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269c:	4a90      	ldr	r2, [pc, #576]	; (80028e0 <HAL_RCC_OscConfig+0x5ec>)
 800269e:	6813      	ldr	r3, [r2, #0]
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80026a6:	f7fe f8ff 	bl	80008a8 <HAL_GetTick>
 80026aa:	4605      	mov	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4e8c      	ldr	r6, [pc, #560]	; (80028e0 <HAL_RCC_OscConfig+0x5ec>)
 80026ae:	6833      	ldr	r3, [r6, #0]
 80026b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80026b4:	d1dd      	bne.n	8002672 <HAL_RCC_OscConfig+0x37e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7fe f8f7 	bl	80008a8 <HAL_GetTick>
 80026ba:	1b40      	subs	r0, r0, r5
 80026bc:	2864      	cmp	r0, #100	; 0x64
 80026be:	d9f6      	bls.n	80026ae <HAL_RCC_OscConfig+0x3ba>
          return HAL_TIMEOUT;
 80026c0:	2003      	movs	r0, #3
 80026c2:	e12a      	b.n	800291a <HAL_RCC_OscConfig+0x626>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c4:	4a85      	ldr	r2, [pc, #532]	; (80028dc <HAL_RCC_OscConfig+0x5e8>)
 80026c6:	6a13      	ldr	r3, [r2, #32]
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ce:	68e3      	ldr	r3, [r4, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d03c      	beq.n	800274e <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d4:	f7fe f8e8 	bl	80008a8 <HAL_GetTick>
 80026d8:	4606      	mov	r6, r0
 80026da:	2502      	movs	r5, #2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 80028dc <HAL_RCC_OscConfig+0x5e8>
 80026e0:	2701      	movs	r7, #1
 80026e2:	e029      	b.n	8002738 <HAL_RCC_OscConfig+0x444>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d009      	beq.n	80026fc <HAL_RCC_OscConfig+0x408>
 80026e8:	4b7c      	ldr	r3, [pc, #496]	; (80028dc <HAL_RCC_OscConfig+0x5e8>)
 80026ea:	6a1a      	ldr	r2, [r3, #32]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	621a      	str	r2, [r3, #32]
 80026f2:	6a1a      	ldr	r2, [r3, #32]
 80026f4:	f022 0204 	bic.w	r2, r2, #4
 80026f8:	621a      	str	r2, [r3, #32]
 80026fa:	e7e8      	b.n	80026ce <HAL_RCC_OscConfig+0x3da>
 80026fc:	4b77      	ldr	r3, [pc, #476]	; (80028dc <HAL_RCC_OscConfig+0x5e8>)
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	f042 0204 	orr.w	r2, r2, #4
 8002704:	621a      	str	r2, [r3, #32]
 8002706:	6a1a      	ldr	r2, [r3, #32]
 8002708:	f042 0201 	orr.w	r2, r2, #1
 800270c:	621a      	str	r2, [r3, #32]
 800270e:	e7de      	b.n	80026ce <HAL_RCC_OscConfig+0x3da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8002714:	fa95 f3a5 	rbit	r3, r5
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	fa07 f303 	lsl.w	r3, r7, r3
 8002724:	4213      	tst	r3, r2
 8002726:	d139      	bne.n	800279c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002728:	f7fe f8be 	bl	80008a8 <HAL_GetTick>
 800272c:	1b80      	subs	r0, r0, r6
 800272e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002732:	4298      	cmp	r0, r3
 8002734:	f200 80ec 	bhi.w	8002910 <HAL_RCC_OscConfig+0x61c>
 8002738:	fa95 f3a5 	rbit	r3, r5
 800273c:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e5      	bne.n	8002710 <HAL_RCC_OscConfig+0x41c>
 8002744:	fa95 f3a5 	rbit	r3, r5
 8002748:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 800274c:	e7e2      	b.n	8002714 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274e:	f7fe f8ab 	bl	80008a8 <HAL_GetTick>
 8002752:	4606      	mov	r6, r0
 8002754:	2502      	movs	r5, #2
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002756:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80028dc <HAL_RCC_OscConfig+0x5e8>
 800275a:	2701      	movs	r7, #1
 800275c:	e013      	b.n	8002786 <HAL_RCC_OscConfig+0x492>
 800275e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8002762:	fa95 f3a5 	rbit	r3, r5
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	fa07 f303 	lsl.w	r3, r7, r3
 8002772:	4213      	tst	r3, r2
 8002774:	d012      	beq.n	800279c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe f897 	bl	80008a8 <HAL_GetTick>
 800277a:	1b80      	subs	r0, r0, r6
 800277c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002780:	4298      	cmp	r0, r3
 8002782:	f200 80c7 	bhi.w	8002914 <HAL_RCC_OscConfig+0x620>
 8002786:	fa95 f3a5 	rbit	r3, r5
 800278a:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1e5      	bne.n	800275e <HAL_RCC_OscConfig+0x46a>
 8002792:	fa95 f3a5 	rbit	r3, r5
 8002796:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 800279a:	e7e2      	b.n	8002762 <HAL_RCC_OscConfig+0x46e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800279c:	f1b9 0f00 	cmp.w	r9, #0
 80027a0:	d134      	bne.n	800280c <HAL_RCC_OscConfig+0x518>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a2:	69e3      	ldr	r3, [r4, #28]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80b7 	beq.w	8002918 <HAL_RCC_OscConfig+0x624>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027aa:	4a4c      	ldr	r2, [pc, #304]	; (80028dc <HAL_RCC_OscConfig+0x5e8>)
 80027ac:	6852      	ldr	r2, [r2, #4]
 80027ae:	f002 020c 	and.w	r2, r2, #12
 80027b2:	2a08      	cmp	r2, #8
 80027b4:	f000 8096 	beq.w	80028e4 <HAL_RCC_OscConfig+0x5f0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d02d      	beq.n	8002818 <HAL_RCC_OscConfig+0x524>
 80027bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c0:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7fe f867 	bl	80008a8 <HAL_GetTick>
 80027da:	4605      	mov	r5, r0
 80027dc:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e0:	4f3e      	ldr	r7, [pc, #248]	; (80028dc <HAL_RCC_OscConfig+0x5e8>)
 80027e2:	2601      	movs	r6, #1
 80027e4:	fa94 f3a4 	rbit	r3, r4
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	fa94 f3a4 	rbit	r3, r4
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	fa06 f303 	lsl.w	r3, r6, r3
 80027fa:	4213      	tst	r3, r2
 80027fc:	d069      	beq.n	80028d2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe f853 	bl	80008a8 <HAL_GetTick>
 8002802:	1b40      	subs	r0, r0, r5
 8002804:	2802      	cmp	r0, #2
 8002806:	d9ed      	bls.n	80027e4 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
 8002808:	2003      	movs	r0, #3
 800280a:	e086      	b.n	800291a <HAL_RCC_OscConfig+0x626>
      __HAL_RCC_PWR_CLK_DISABLE();
 800280c:	4a33      	ldr	r2, [pc, #204]	; (80028dc <HAL_RCC_OscConfig+0x5e8>)
 800280e:	69d3      	ldr	r3, [r2, #28]
 8002810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002814:	61d3      	str	r3, [r2, #28]
 8002816:	e7c4      	b.n	80027a2 <HAL_RCC_OscConfig+0x4ae>
 8002818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800281c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002828:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002832:	f7fe f839 	bl	80008a8 <HAL_GetTick>
 8002836:	4606      	mov	r6, r0
 8002838:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800283c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80028dc <HAL_RCC_OscConfig+0x5e8>
 8002840:	2701      	movs	r7, #1
 8002842:	fa95 f3a5 	rbit	r3, r5
 8002846:	f8d8 2000 	ldr.w	r2, [r8]
 800284a:	fa95 f3a5 	rbit	r3, r5
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	fa07 f303 	lsl.w	r3, r7, r3
 800285a:	4213      	tst	r3, r2
 800285c:	d006      	beq.n	800286c <HAL_RCC_OscConfig+0x578>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe f823 	bl	80008a8 <HAL_GetTick>
 8002862:	1b80      	subs	r0, r0, r6
 8002864:	2802      	cmp	r0, #2
 8002866:	d9ec      	bls.n	8002842 <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 8002868:	2003      	movs	r0, #3
 800286a:	e056      	b.n	800291a <HAL_RCC_OscConfig+0x626>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800286c:	491b      	ldr	r1, [pc, #108]	; (80028dc <HAL_RCC_OscConfig+0x5e8>)
 800286e:	684a      	ldr	r2, [r1, #4]
 8002870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002872:	6a20      	ldr	r0, [r4, #32]
 8002874:	4303      	orrs	r3, r0
 8002876:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
 800287e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002882:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800288e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002898:	f7fe f806 	bl	80008a8 <HAL_GetTick>
 800289c:	4605      	mov	r5, r0
 800289e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a2:	4f0e      	ldr	r7, [pc, #56]	; (80028dc <HAL_RCC_OscConfig+0x5e8>)
 80028a4:	2601      	movs	r6, #1
 80028a6:	fa94 f3a4 	rbit	r3, r4
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	fa94 f3a4 	rbit	r3, r4
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	fa06 f303 	lsl.w	r3, r6, r3
 80028bc:	4213      	tst	r3, r2
 80028be:	d106      	bne.n	80028ce <HAL_RCC_OscConfig+0x5da>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fd fff2 	bl	80008a8 <HAL_GetTick>
 80028c4:	1b40      	subs	r0, r0, r5
 80028c6:	2802      	cmp	r0, #2
 80028c8:	d9ed      	bls.n	80028a6 <HAL_RCC_OscConfig+0x5b2>
            return HAL_TIMEOUT;
 80028ca:	2003      	movs	r0, #3
 80028cc:	e025      	b.n	800291a <HAL_RCC_OscConfig+0x626>
        }
      }
    }
  }

  return HAL_OK;
 80028ce:	2000      	movs	r0, #0
 80028d0:	e023      	b.n	800291a <HAL_RCC_OscConfig+0x626>
 80028d2:	2000      	movs	r0, #0
 80028d4:	e021      	b.n	800291a <HAL_RCC_OscConfig+0x626>
 80028d6:	bf00      	nop
 80028d8:	10908120 	.word	0x10908120
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d01b      	beq.n	8002920 <HAL_RCC_OscConfig+0x62c>
        pll_config = RCC->CFGR;
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <HAL_RCC_OscConfig+0x634>)
 80028ea:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028ec:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80028f0:	6a22      	ldr	r2, [r4, #32]
 80028f2:	4291      	cmp	r1, r2
 80028f4:	d116      	bne.n	8002924 <HAL_RCC_OscConfig+0x630>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028f6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 80028fc:	1a18      	subs	r0, r3, r0
 80028fe:	bf18      	it	ne
 8002900:	2001      	movne	r0, #1
 8002902:	e00a      	b.n	800291a <HAL_RCC_OscConfig+0x626>
    return HAL_ERROR;
 8002904:	2001      	movs	r0, #1
}
 8002906:	4770      	bx	lr
        return HAL_ERROR;
 8002908:	2001      	movs	r0, #1
 800290a:	e006      	b.n	800291a <HAL_RCC_OscConfig+0x626>
        return HAL_ERROR;
 800290c:	2001      	movs	r0, #1
 800290e:	e004      	b.n	800291a <HAL_RCC_OscConfig+0x626>
          return HAL_TIMEOUT;
 8002910:	2003      	movs	r0, #3
 8002912:	e002      	b.n	800291a <HAL_RCC_OscConfig+0x626>
          return HAL_TIMEOUT;
 8002914:	2003      	movs	r0, #3
 8002916:	e000      	b.n	800291a <HAL_RCC_OscConfig+0x626>
  return HAL_OK;
 8002918:	2000      	movs	r0, #0
}
 800291a:	b003      	add	sp, #12
 800291c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_ERROR;
 8002920:	2001      	movs	r0, #1
 8002922:	e7fa      	b.n	800291a <HAL_RCC_OscConfig+0x626>
          return HAL_ERROR;
 8002924:	2001      	movs	r0, #1
 8002926:	e7f8      	b.n	800291a <HAL_RCC_OscConfig+0x626>
 8002928:	40021000 	.word	0x40021000

0800292c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800292c:	4b14      	ldr	r3, [pc, #80]	; (8002980 <HAL_RCC_GetSysClockFreq+0x54>)
 800292e:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002930:	f003 020c 	and.w	r2, r3, #12
 8002934:	2a08      	cmp	r2, #8
 8002936:	d001      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002938:	4812      	ldr	r0, [pc, #72]	; (8002984 <HAL_RCC_GetSysClockFreq+0x58>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800293a:	4770      	bx	lr
 800293c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002940:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002944:	fab2 f282 	clz	r2, r2
 8002948:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 800294c:	fa21 f202 	lsr.w	r2, r1, r2
 8002950:	490d      	ldr	r1, [pc, #52]	; (8002988 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002952:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <HAL_RCC_GetSysClockFreq+0x54>)
 8002956:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002958:	210f      	movs	r1, #15
 800295a:	fa91 f1a1 	rbit	r1, r1
 800295e:	fab1 f181 	clz	r1, r1
 8002962:	f002 020f 	and.w	r2, r2, #15
 8002966:	40ca      	lsrs	r2, r1
 8002968:	4908      	ldr	r1, [pc, #32]	; (800298c <HAL_RCC_GetSysClockFreq+0x60>)
 800296a:	5c8a      	ldrb	r2, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800296c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002970:	bf1a      	itte	ne
 8002972:	4b04      	ldrne	r3, [pc, #16]	; (8002984 <HAL_RCC_GetSysClockFreq+0x58>)
 8002974:	fbb3 f3f2 	udivne	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002978:	4b05      	ldreq	r3, [pc, #20]	; (8002990 <HAL_RCC_GetSysClockFreq+0x64>)
 800297a:	fb03 f000 	mul.w	r0, r3, r0
 800297e:	4770      	bx	lr
 8002980:	40021000 	.word	0x40021000
 8002984:	007a1200 	.word	0x007a1200
 8002988:	08004d10 	.word	0x08004d10
 800298c:	08004d20 	.word	0x08004d20
 8002990:	003d0900 	.word	0x003d0900

08002994 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002994:	2800      	cmp	r0, #0
 8002996:	f000 80bb 	beq.w	8002b10 <HAL_RCC_ClockConfig+0x17c>
{
 800299a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800299e:	460d      	mov	r5, r1
 80029a0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a2:	4b5f      	ldr	r3, [pc, #380]	; (8002b20 <HAL_RCC_ClockConfig+0x18c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	428b      	cmp	r3, r1
 80029ac:	d20b      	bcs.n	80029c6 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4a5c      	ldr	r2, [pc, #368]	; (8002b20 <HAL_RCC_ClockConfig+0x18c>)
 80029b0:	6813      	ldr	r3, [r2, #0]
 80029b2:	f023 0307 	bic.w	r3, r3, #7
 80029b6:	430b      	orrs	r3, r1
 80029b8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	6813      	ldr	r3, [r2, #0]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	428b      	cmp	r3, r1
 80029c2:	f040 80a7 	bne.w	8002b14 <HAL_RCC_ClockConfig+0x180>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	f013 0f02 	tst.w	r3, #2
 80029cc:	d006      	beq.n	80029dc <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ce:	4a55      	ldr	r2, [pc, #340]	; (8002b24 <HAL_RCC_ClockConfig+0x190>)
 80029d0:	6853      	ldr	r3, [r2, #4]
 80029d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029d6:	68a1      	ldr	r1, [r4, #8]
 80029d8:	430b      	orrs	r3, r1
 80029da:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029dc:	6823      	ldr	r3, [r4, #0]
 80029de:	f013 0f01 	tst.w	r3, #1
 80029e2:	d055      	beq.n	8002a90 <HAL_RCC_ClockConfig+0xfc>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e4:	6861      	ldr	r1, [r4, #4]
 80029e6:	2901      	cmp	r1, #1
 80029e8:	d02c      	beq.n	8002a44 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ea:	2902      	cmp	r1, #2
 80029ec:	d03d      	beq.n	8002a6a <HAL_RCC_ClockConfig+0xd6>
 80029ee:	2202      	movs	r2, #2
 80029f0:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f4:	4b4b      	ldr	r3, [pc, #300]	; (8002b24 <HAL_RCC_ClockConfig+0x190>)
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	fa92 f2a2 	rbit	r2, r2
 80029fc:	fab2 f282 	clz	r2, r2
 8002a00:	f002 021f 	and.w	r2, r2, #31
 8002a04:	2301      	movs	r3, #1
 8002a06:	fa03 f202 	lsl.w	r2, r3, r2
 8002a0a:	4202      	tst	r2, r0
 8002a0c:	f000 8084 	beq.w	8002b18 <HAL_RCC_ClockConfig+0x184>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a10:	4a44      	ldr	r2, [pc, #272]	; (8002b24 <HAL_RCC_ClockConfig+0x190>)
 8002a12:	6853      	ldr	r3, [r2, #4]
 8002a14:	f023 0303 	bic.w	r3, r3, #3
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	6053      	str	r3, [r2, #4]
    tickstart = HAL_GetTick();
 8002a1c:	f7fd ff44 	bl	80008a8 <HAL_GetTick>
 8002a20:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4f40      	ldr	r7, [pc, #256]	; (8002b24 <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a24:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	6862      	ldr	r2, [r4, #4]
 8002a30:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a34:	d02c      	beq.n	8002a90 <HAL_RCC_ClockConfig+0xfc>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a36:	f7fd ff37 	bl	80008a8 <HAL_GetTick>
 8002a3a:	1b80      	subs	r0, r0, r6
 8002a3c:	4540      	cmp	r0, r8
 8002a3e:	d9f3      	bls.n	8002a28 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8002a40:	2003      	movs	r0, #3
 8002a42:	e063      	b.n	8002b0c <HAL_RCC_ClockConfig+0x178>
 8002a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a48:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4c:	4a35      	ldr	r2, [pc, #212]	; (8002b24 <HAL_RCC_ClockConfig+0x190>)
 8002a4e:	6810      	ldr	r0, [r2, #0]
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	fab3 f383 	clz	r3, r3
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	4203      	tst	r3, r0
 8002a64:	d1d4      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8002a66:	2001      	movs	r0, #1
 8002a68:	e050      	b.n	8002b0c <HAL_RCC_ClockConfig+0x178>
 8002a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a6e:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a72:	4a2c      	ldr	r2, [pc, #176]	; (8002b24 <HAL_RCC_ClockConfig+0x190>)
 8002a74:	6810      	ldr	r0, [r2, #0]
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	2201      	movs	r2, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	4203      	tst	r3, r0
 8002a8a:	d1c1      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	e03d      	b.n	8002b0c <HAL_RCC_ClockConfig+0x178>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a90:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <HAL_RCC_ClockConfig+0x18c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	42ab      	cmp	r3, r5
 8002a9a:	d90a      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0x11e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9c:	4a20      	ldr	r2, [pc, #128]	; (8002b20 <HAL_RCC_ClockConfig+0x18c>)
 8002a9e:	6813      	ldr	r3, [r2, #0]
 8002aa0:	f023 0307 	bic.w	r3, r3, #7
 8002aa4:	432b      	orrs	r3, r5
 8002aa6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa8:	6813      	ldr	r3, [r2, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	42ab      	cmp	r3, r5
 8002ab0:	d134      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	f013 0f04 	tst.w	r3, #4
 8002ab8:	d006      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x134>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aba:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <HAL_RCC_ClockConfig+0x190>)
 8002abc:	6853      	ldr	r3, [r2, #4]
 8002abe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ac2:	68e1      	ldr	r1, [r4, #12]
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	6823      	ldr	r3, [r4, #0]
 8002aca:	f013 0f08 	tst.w	r3, #8
 8002ace:	d007      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x14c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad0:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <HAL_RCC_ClockConfig+0x190>)
 8002ad2:	6853      	ldr	r3, [r2, #4]
 8002ad4:	6921      	ldr	r1, [r4, #16]
 8002ad6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002ada:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002ade:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ae0:	f7ff ff24 	bl	800292c <HAL_RCC_GetSysClockFreq>
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_RCC_ClockConfig+0x190>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	22f0      	movs	r2, #240	; 0xf0
 8002aea:	fa92 f2a2 	rbit	r2, r2
 8002aee:	fab2 f282 	clz	r2, r2
 8002af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af6:	40d3      	lsrs	r3, r2
 8002af8:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <HAL_RCC_ClockConfig+0x194>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	40d8      	lsrs	r0, r3
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_ClockConfig+0x198>)
 8002b00:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_ClockConfig+0x19c>)
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	f7fd fe8b 	bl	8000820 <HAL_InitTick>
  return HAL_OK;
 8002b0a:	2000      	movs	r0, #0
}
 8002b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002b10:	2001      	movs	r0, #1
}
 8002b12:	4770      	bx	lr
      return HAL_ERROR;
 8002b14:	2001      	movs	r0, #1
 8002b16:	e7f9      	b.n	8002b0c <HAL_RCC_ClockConfig+0x178>
        return HAL_ERROR;
 8002b18:	2001      	movs	r0, #1
 8002b1a:	e7f7      	b.n	8002b0c <HAL_RCC_ClockConfig+0x178>
      return HAL_ERROR;
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	e7f5      	b.n	8002b0c <HAL_RCC_ClockConfig+0x178>
 8002b20:	40022000 	.word	0x40022000
 8002b24:	40021000 	.word	0x40021000
 8002b28:	08004d00 	.word	0x08004d00
 8002b2c:	20000040 	.word	0x20000040
 8002b30:	20000048 	.word	0x20000048

08002b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b3c:	6803      	ldr	r3, [r0, #0]
 8002b3e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002b42:	d048      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xa2>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b44:	4b86      	ldr	r3, [pc, #536]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002b4c:	f040 80be 	bne.w	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b50:	4b83      	ldr	r3, [pc, #524]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b58:	61da      	str	r2, [r3, #28]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b64:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b66:	4b7f      	ldr	r3, [pc, #508]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b6e:	f000 80af 	beq.w	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b72:	4b7b      	ldr	r3, [pc, #492]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b74:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b76:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002b7a:	d022      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8002b7c:	6862      	ldr	r2, [r4, #4]
 8002b7e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d01d      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b86:	4876      	ldr	r0, [pc, #472]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b88:	6a01      	ldr	r1, [r0, #32]
 8002b8a:	f421 7540 	bic.w	r5, r1, #768	; 0x300
 8002b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b92:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b96:	fab2 f282 	clz	r2, r2
 8002b9a:	4f73      	ldr	r7, [pc, #460]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002b9c:	443a      	add	r2, r7
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	f04f 0c01 	mov.w	ip, #1
 8002ba4:	f8c2 c000 	str.w	ip, [r2]
 8002ba8:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	443b      	add	r3, r7
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bb8:	6205      	str	r5, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bba:	f011 0f01 	tst.w	r1, #1
 8002bbe:	f040 809c 	bne.w	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bc2:	4a67      	ldr	r2, [pc, #412]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bc4:	6a13      	ldr	r3, [r2, #32]
 8002bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bca:	6861      	ldr	r1, [r4, #4]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bd0:	2e00      	cmp	r6, #0
 8002bd2:	f040 80ba 	bne.w	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	f013 0f01 	tst.w	r3, #1
 8002bdc:	d006      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bde:	4a60      	ldr	r2, [pc, #384]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002be0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	68a1      	ldr	r1, [r4, #8]
 8002be8:	430b      	orrs	r3, r1
 8002bea:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	f013 0f02 	tst.w	r3, #2
 8002bf2:	d006      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bf4:	4a5a      	ldr	r2, [pc, #360]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bf6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002bf8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002bfc:	68e1      	ldr	r1, [r4, #12]
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	f013 0f04 	tst.w	r3, #4
 8002c08:	d006      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c0a:	4a55      	ldr	r2, [pc, #340]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002c0e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002c12:	6921      	ldr	r1, [r4, #16]
 8002c14:	430b      	orrs	r3, r1
 8002c16:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	f013 0f20 	tst.w	r3, #32
 8002c1e:	d006      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c20:	4a4f      	ldr	r2, [pc, #316]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c22:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002c24:	f023 0310 	bic.w	r3, r3, #16
 8002c28:	69e1      	ldr	r1, [r4, #28]
 8002c2a:	430b      	orrs	r3, r1
 8002c2c:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c34:	d006      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c36:	4a4a      	ldr	r2, [pc, #296]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c38:	6853      	ldr	r3, [r2, #4]
 8002c3a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002c40:	430b      	orrs	r3, r1
 8002c42:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002c4a:	d006      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c4c:	4a44      	ldr	r2, [pc, #272]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002c50:	f023 0320 	bic.w	r3, r3, #32
 8002c54:	6a21      	ldr	r1, [r4, #32]
 8002c56:	430b      	orrs	r3, r1
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	f013 0f08 	tst.w	r3, #8
 8002c60:	d006      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c62:	4a3f      	ldr	r2, [pc, #252]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c64:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002c66:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002c6a:	6961      	ldr	r1, [r4, #20]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	f013 0f10 	tst.w	r3, #16
 8002c76:	d006      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c78:	4a39      	ldr	r2, [pc, #228]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002c7c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002c80:	69a1      	ldr	r1, [r4, #24]
 8002c82:	430b      	orrs	r3, r1
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002c8c:	d006      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c8e:	4a34      	ldr	r2, [pc, #208]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c90:	6853      	ldr	r3, [r2, #4]
 8002c92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c96:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ca2:	d006      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ca4:	4a2e      	ldr	r2, [pc, #184]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ca6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002ca8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002cac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002cb8:	d04e      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cba:	4a29      	ldr	r2, [pc, #164]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cc2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002cc8:	2000      	movs	r0, #0
 8002cca:	e046      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  FlagStatus       pwrclkchanged = RESET;
 8002ccc:	2600      	movs	r6, #0
 8002cce:	e74a      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x32>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd0:	4a24      	ldr	r2, [pc, #144]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cd2:	6813      	ldr	r3, [r2, #0]
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002cda:	f7fd fde5 	bl	80008a8 <HAL_GetTick>
 8002cde:	4605      	mov	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	4f20      	ldr	r7, [pc, #128]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ce8:	f47f af43 	bne.w	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x3e>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cec:	f7fd fddc 	bl	80008a8 <HAL_GetTick>
 8002cf0:	1b40      	subs	r0, r0, r5
 8002cf2:	2864      	cmp	r0, #100	; 0x64
 8002cf4:	d9f5      	bls.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
          return HAL_TIMEOUT;
 8002cf6:	2003      	movs	r0, #3
 8002cf8:	e02f      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x226>
        tickstart = HAL_GetTick();
 8002cfa:	f7fd fdd5 	bl	80008a8 <HAL_GetTick>
 8002cfe:	4607      	mov	r7, r0
 8002d00:	2502      	movs	r5, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8002d06:	f04f 0801 	mov.w	r8, #1
 8002d0a:	e013      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d0c:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8002d10:	fa95 f3a5 	rbit	r3, r5
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	fa08 f303 	lsl.w	r3, r8, r3
 8002d20:	4213      	tst	r3, r2
 8002d22:	f47f af4e 	bne.w	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fd fdbf 	bl	80008a8 <HAL_GetTick>
 8002d2a:	1bc0      	subs	r0, r0, r7
 8002d2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d30:	4298      	cmp	r0, r3
 8002d32:	d80f      	bhi.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002d34:	fa95 f3a5 	rbit	r3, r5
 8002d38:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e5      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002d40:	fa95 f3a5 	rbit	r3, r5
 8002d44:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8002d48:	e7e2      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4a:	69d3      	ldr	r3, [r2, #28]
 8002d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d50:	61d3      	str	r3, [r2, #28]
 8002d52:	e740      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
            return HAL_TIMEOUT;
 8002d54:	2003      	movs	r0, #3
 8002d56:	e000      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  return HAL_OK;
 8002d58:	2000      	movs	r0, #0
}
 8002d5a:	b003      	add	sp, #12
 8002d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40007000 	.word	0x40007000
 8002d68:	10908100 	.word	0x10908100

08002d6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002d6c:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002d74:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8002d78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8002d7c:	4770      	bx	lr

08002d7e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002d7e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002d82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d86:	045b      	lsls	r3, r3, #17
 8002d88:	0c5b      	lsrs	r3, r3, #17
 8002d8a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002d8e:	2000      	movs	r0, #0
 8002d90:	4770      	bx	lr

08002d92 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d92:	b084      	sub	sp, #16
 8002d94:	4684      	mov	ip, r0
 8002d96:	a801      	add	r0, sp, #4
 8002d98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002da2:	2000      	movs	r0, #0
 8002da4:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002da8:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002dac:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 8002db0:	b004      	add	sp, #16
 8002db2:	4770      	bx	lr

08002db4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002db4:	b510      	push	{r4, lr}
 8002db6:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002db8:	f891 e000 	ldrb.w	lr, [r1]
 8002dbc:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 8002dc0:	b292      	uxth	r2, r2
 8002dc2:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002dc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dca:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8002dcc:	78c8      	ldrb	r0, [r1, #3]
 8002dce:	2803      	cmp	r0, #3
 8002dd0:	d863      	bhi.n	8002e9a <USB_ActivateEndpoint+0xe6>
 8002dd2:	e8df f000 	tbb	[pc, r0]
 8002dd6:	5e57      	.short	0x5e57
 8002dd8:	5a02      	.short	0x5a02
 8002dda:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002ddc:	f248 0c80 	movw	ip, #32896	; 0x8080
 8002de0:	ea42 020c 	orr.w	r2, r2, ip
 8002de4:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002de8:	f891 e000 	ldrb.w	lr, [r1]
 8002dec:	f833 202e 	ldrh.w	r2, [r3, lr, lsl #2]
 8002df0:	b292      	uxth	r2, r2
 8002df2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002df6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dfa:	ea42 020e 	orr.w	r2, r2, lr
 8002dfe:	ea4c 0202 	orr.w	r2, ip, r2
 8002e02:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  if (ep->doublebuffer == 0U)
 8002e06:	7b0a      	ldrb	r2, [r1, #12]
 8002e08:	2a00      	cmp	r2, #0
 8002e0a:	f040 80bb 	bne.w	8002f84 <USB_ActivateEndpoint+0x1d0>
  {
    if (ep->is_in != 0U)
 8002e0e:	784a      	ldrb	r2, [r1, #1]
 8002e10:	2a00      	cmp	r2, #0
 8002e12:	d044      	beq.n	8002e9e <USB_ActivateEndpoint+0xea>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e14:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8002e18:	fa1f fe8e 	uxth.w	lr, lr
 8002e1c:	780a      	ldrb	r2, [r1, #0]
 8002e1e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e26:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8002e2a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8002e2e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002e32:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e36:	780c      	ldrb	r4, [r1, #0]
 8002e38:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002e3c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002e40:	d00c      	beq.n	8002e5c <USB_ActivateEndpoint+0xa8>
 8002e42:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002e46:	b292      	uxth	r2, r2
 8002e48:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002e4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e54:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002e58:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002e5c:	78ca      	ldrb	r2, [r1, #3]
 8002e5e:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e60:	7809      	ldrb	r1, [r1, #0]
 8002e62:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002e66:	b292      	uxth	r2, r2
 8002e68:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e70:	bf18      	it	ne
 8002e72:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e7e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8002e82:	bd10      	pop	{r4, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8002e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8002e88:	e7a8      	b.n	8002ddc <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 8002e8a:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8002e8e:	2000      	movs	r0, #0
      break;
 8002e90:	e7a4      	b.n	8002ddc <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002e92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8002e96:	2000      	movs	r0, #0
      break;
 8002e98:	e7a0      	b.n	8002ddc <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	e79e      	b.n	8002ddc <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e9e:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8002ea2:	fa1f fe8e 	uxth.w	lr, lr
 8002ea6:	780a      	ldrb	r2, [r1, #0]
 8002ea8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002eac:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8002eb0:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8002eb4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8002eb8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002ebc:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002ec0:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8002ec4:	fa1f fe8e 	uxth.w	lr, lr
 8002ec8:	780a      	ldrb	r2, [r1, #0]
 8002eca:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002ece:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8002ed2:	690c      	ldr	r4, [r1, #16]
 8002ed4:	bbbc      	cbnz	r4, 8002f46 <USB_ActivateEndpoint+0x192>
 8002ed6:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8002eda:	f42c 4cf8 	bic.w	ip, ip, #31744	; 0x7c00
 8002ede:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8002ee2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8002ee6:	f822 c00e 	strh.w	ip, [r2, lr]
 8002eea:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8002eee:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 8002ef2:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8002ef6:	fa1f fc8c 	uxth.w	ip, ip
 8002efa:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002efe:	780c      	ldrb	r4, [r1, #0]
 8002f00:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f04:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002f08:	d00c      	beq.n	8002f24 <USB_ActivateEndpoint+0x170>
 8002f0a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f0e:	b292      	uxth	r2, r2
 8002f10:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002f14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f18:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f20:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f24:	7809      	ldrb	r1, [r1, #0]
 8002f26:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002f2a:	b292      	uxth	r2, r2
 8002f2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f34:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002f38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f40:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8002f44:	e79d      	b.n	8002e82 <USB_ActivateEndpoint+0xce>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f46:	2c3e      	cmp	r4, #62	; 0x3e
 8002f48:	d80d      	bhi.n	8002f66 <USB_ActivateEndpoint+0x1b2>
 8002f4a:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8002f4e:	f014 0f01 	tst.w	r4, #1
 8002f52:	bf18      	it	ne
 8002f54:	f10c 0c01 	addne.w	ip, ip, #1
 8002f58:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8002f5c:	fa1f fc8c 	uxth.w	ip, ip
 8002f60:	f822 c00e 	strh.w	ip, [r2, lr]
 8002f64:	e7cb      	b.n	8002efe <USB_ActivateEndpoint+0x14a>
 8002f66:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8002f6a:	f014 0f1f 	tst.w	r4, #31
 8002f6e:	bf08      	it	eq
 8002f70:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002f74:	ea6f 64cc 	mvn.w	r4, ip, lsl #27
 8002f78:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002f7c:	b2a4      	uxth	r4, r4
 8002f7e:	f822 400e 	strh.w	r4, [r2, lr]
 8002f82:	e7bc      	b.n	8002efe <USB_ActivateEndpoint+0x14a>
    if (ep->type == EP_TYPE_BULK)
 8002f84:	78ca      	ldrb	r2, [r1, #3]
 8002f86:	2a02      	cmp	r2, #2
 8002f88:	d076      	beq.n	8003078 <USB_ActivateEndpoint+0x2c4>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002f8a:	f891 c000 	ldrb.w	ip, [r1]
 8002f8e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8002f92:	b292      	uxth	r2, r2
 8002f94:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8002f98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fa4:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002fa8:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8002fac:	fa1f fe8e 	uxth.w	lr, lr
 8002fb0:	780a      	ldrb	r2, [r1, #0]
 8002fb2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002fb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fba:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8002fbe:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8002fc2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002fc6:	f822 c00e 	strh.w	ip, [r2, lr]
 8002fca:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8002fce:	fa1f fe8e 	uxth.w	lr, lr
 8002fd2:	780a      	ldrb	r2, [r1, #0]
 8002fd4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002fd8:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8002fdc:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8002fe0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8002fe4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002fe8:	f822 c00e 	strh.w	ip, [r2, lr]
    if (ep->is_in == 0U)
 8002fec:	784a      	ldrb	r2, [r1, #1]
 8002fee:	2a00      	cmp	r2, #0
 8002ff0:	d151      	bne.n	8003096 <USB_ActivateEndpoint+0x2e2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ff2:	780c      	ldrb	r4, [r1, #0]
 8002ff4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002ff8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8002ffc:	d00c      	beq.n	8003018 <USB_ActivateEndpoint+0x264>
 8002ffe:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003002:	b292      	uxth	r2, r2
 8003004:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003008:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800300c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003010:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003014:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003018:	780c      	ldrb	r4, [r1, #0]
 800301a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800301e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003022:	d00c      	beq.n	800303e <USB_ActivateEndpoint+0x28a>
 8003024:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003028:	b292      	uxth	r2, r2
 800302a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800302e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003036:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800303a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800303e:	780c      	ldrb	r4, [r1, #0]
 8003040:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003044:	b292      	uxth	r2, r2
 8003046:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800304a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800304e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003052:	f248 0c80 	movw	ip, #32896	; 0x8080
 8003056:	ea4c 0202 	orr.w	r2, ip, r2
 800305a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800305e:	7809      	ldrb	r1, [r1, #0]
 8003060:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003064:	b292      	uxth	r2, r2
 8003066:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800306a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800306e:	ea4c 0202 	orr.w	r2, ip, r2
 8003072:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003076:	e704      	b.n	8002e82 <USB_ActivateEndpoint+0xce>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003078:	780c      	ldrb	r4, [r1, #0]
 800307a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800307e:	b292      	uxth	r2, r2
 8003080:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003084:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003088:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800308c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003090:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8003094:	e788      	b.n	8002fa8 <USB_ActivateEndpoint+0x1f4>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003096:	780c      	ldrb	r4, [r1, #0]
 8003098:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800309c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80030a0:	d00c      	beq.n	80030bc <USB_ActivateEndpoint+0x308>
 80030a2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030a6:	b292      	uxth	r2, r2
 80030a8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80030ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030b0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80030b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030b8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030bc:	780c      	ldrb	r4, [r1, #0]
 80030be:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80030c6:	d00c      	beq.n	80030e2 <USB_ActivateEndpoint+0x32e>
 80030c8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030cc:	b292      	uxth	r2, r2
 80030ce:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80030d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030da:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80030de:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80030e2:	78ca      	ldrb	r2, [r1, #3]
 80030e4:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80030e6:	780c      	ldrb	r4, [r1, #0]
 80030e8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030ec:	b292      	uxth	r2, r2
 80030ee:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80030f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f6:	bf18      	it	ne
 80030f8:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003100:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003104:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003108:	7809      	ldrb	r1, [r1, #0]
 800310a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800310e:	b292      	uxth	r2, r2
 8003110:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003114:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003118:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800311c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003120:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003124:	e6ad      	b.n	8002e82 <USB_ActivateEndpoint+0xce>

08003126 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003126:	7b0b      	ldrb	r3, [r1, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d146      	bne.n	80031ba <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 800312c:	784b      	ldrb	r3, [r1, #1]
 800312e:	b313      	cbz	r3, 8003176 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003130:	780a      	ldrb	r2, [r1, #0]
 8003132:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003136:	f013 0f40 	tst.w	r3, #64	; 0x40
 800313a:	d00c      	beq.n	8003156 <USB_DeactivateEndpoint+0x30>
 800313c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003140:	b29b      	uxth	r3, r3
 8003142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800314e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003152:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003156:	780a      	ldrb	r2, [r1, #0]
 8003158:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800315c:	b29b      	uxth	r3, r3
 800315e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8003172:	2000      	movs	r0, #0
 8003174:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003176:	780a      	ldrb	r2, [r1, #0]
 8003178:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800317c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003180:	d00c      	beq.n	800319c <USB_DeactivateEndpoint+0x76>
 8003182:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003186:	b29b      	uxth	r3, r3
 8003188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003190:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003198:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800319c:	780a      	ldrb	r2, [r1, #0]
 800319e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80031b8:	e7db      	b.n	8003172 <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 80031ba:	784b      	ldrb	r3, [r1, #1]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d14d      	bne.n	800325c <USB_DeactivateEndpoint+0x136>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031c0:	780a      	ldrb	r2, [r1, #0]
 80031c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031c6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80031ca:	d00c      	beq.n	80031e6 <USB_DeactivateEndpoint+0xc0>
 80031cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031e6:	780a      	ldrb	r2, [r1, #0]
 80031e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80031f0:	d00c      	beq.n	800320c <USB_DeactivateEndpoint+0xe6>
 80031f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003204:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003208:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800320c:	780a      	ldrb	r2, [r1, #0]
 800320e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003212:	b29b      	uxth	r3, r3
 8003214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003220:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003224:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003228:	f891 c000 	ldrb.w	ip, [r1]
 800322c:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8003230:	b29b      	uxth	r3, r3
 8003232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323a:	f248 0280 	movw	r2, #32896	; 0x8080
 800323e:	4313      	orrs	r3, r2
 8003240:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003244:	7809      	ldrb	r1, [r1, #0]
 8003246:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800324a:	b29b      	uxth	r3, r3
 800324c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003254:	4313      	orrs	r3, r2
 8003256:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 800325a:	e78a      	b.n	8003172 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800325c:	780a      	ldrb	r2, [r1, #0]
 800325e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003262:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003266:	d00c      	beq.n	8003282 <USB_DeactivateEndpoint+0x15c>
 8003268:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800327a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003282:	780a      	ldrb	r2, [r1, #0]
 8003284:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003288:	f013 0f40 	tst.w	r3, #64	; 0x40
 800328c:	d00c      	beq.n	80032a8 <USB_DeactivateEndpoint+0x182>
 800328e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003292:	b29b      	uxth	r3, r3
 8003294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80032a8:	780a      	ldrb	r2, [r1, #0]
 80032aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032c4:	f891 c000 	ldrb.w	ip, [r1]
 80032c8:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032d6:	f248 0280 	movw	r2, #32896	; 0x8080
 80032da:	4313      	orrs	r3, r2
 80032dc:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032e0:	7809      	ldrb	r1, [r1, #0]
 80032e2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80032f6:	e73c      	b.n	8003172 <USB_DeactivateEndpoint+0x4c>

080032f8 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80032f8:	784b      	ldrb	r3, [r1, #1]
 80032fa:	b18b      	cbz	r3, 8003320 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80032fc:	780a      	ldrb	r2, [r1, #0]
 80032fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003302:	b29b      	uxth	r3, r3
 8003304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800330c:	f083 0310 	eor.w	r3, r3, #16
 8003310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003318:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 800331c:	2000      	movs	r0, #0
 800331e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003320:	780a      	ldrb	r2, [r1, #0]
 8003322:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003326:	b29b      	uxth	r3, r3
 8003328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800332c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003330:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003340:	e7ec      	b.n	800331c <USB_EPSetStall+0x24>

08003342 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003342:	7b0b      	ldrb	r3, [r1, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d14b      	bne.n	80033e0 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8003348:	784b      	ldrb	r3, [r1, #1]
 800334a:	b333      	cbz	r3, 800339a <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800334c:	780a      	ldrb	r2, [r1, #0]
 800334e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003352:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003356:	d00c      	beq.n	8003372 <USB_EPClearStall+0x30>
 8003358:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800335c:	b29b      	uxth	r3, r3
 800335e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800336e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003372:	78cb      	ldrb	r3, [r1, #3]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d033      	beq.n	80033e0 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003378:	780a      	ldrb	r2, [r1, #0]
 800337a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800337e:	b29b      	uxth	r3, r3
 8003380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003388:	f083 0320 	eor.w	r3, r3, #32
 800338c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003394:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003398:	e022      	b.n	80033e0 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800339a:	780a      	ldrb	r2, [r1, #0]
 800339c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80033a0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80033a4:	d00c      	beq.n	80033c0 <USB_EPClearStall+0x7e>
 80033a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033bc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80033c0:	780a      	ldrb	r2, [r1, #0]
 80033c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80033d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80033e0:	2000      	movs	r0, #0
 80033e2:	4770      	bx	lr

080033e4 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80033e4:	b911      	cbnz	r1, 80033ec <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80033ec:	2000      	movs	r0, #0
 80033ee:	4770      	bx	lr

080033f0 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80033f0:	2000      	movs	r0, #0
 80033f2:	4770      	bx	lr

080033f4 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80033f4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80033f8:	b280      	uxth	r0, r0
 80033fa:	4770      	bx	lr

080033fc <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80033fc:	3301      	adds	r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80033fe:	eb00 0c42 	add.w	ip, r0, r2, lsl #1
 8003402:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 8003406:	4662      	mov	r2, ip

  for (i = n; i != 0U; i--)
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	d00d      	beq.n	8003428 <USB_WritePMA+0x2c>
 800340c:	3102      	adds	r1, #2
 800340e:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003412:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    temp1 = *pBuf;
 8003416:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    *pdwVal = (uint16_t)temp2;
 800341a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800341e:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 8003422:	3102      	adds	r1, #2
 8003424:	4594      	cmp	ip, r2
 8003426:	d1f4      	bne.n	8003412 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8003428:	4770      	bx	lr

0800342a <USB_EPStartXfer>:
{
 800342a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342c:	4605      	mov	r5, r0
 800342e:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8003430:	784b      	ldrb	r3, [r1, #1]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d035      	beq.n	80034a2 <USB_EPStartXfer+0x78>
    if (ep->doublebuffer == 0U)
 8003436:	7b0a      	ldrb	r2, [r1, #12]
 8003438:	2a00      	cmp	r2, #0
 800343a:	f040 81fb 	bne.w	8003834 <USB_EPStartXfer+0x40a>
      if (ep->xfer_len > ep->maxpacket)
 800343e:	698a      	ldr	r2, [r1, #24]
 8003440:	690b      	ldr	r3, [r1, #16]
 8003442:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 8003444:	bf86      	itte	hi
 8003446:	1ad1      	subhi	r1, r2, r3
        len = ep->maxpacket;
 8003448:	461a      	movhi	r2, r3
        ep->xfer_len = 0U;
 800344a:	2100      	movls	r1, #0
 800344c:	61a1      	str	r1, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800344e:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8003452:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 8003456:	fa13 f080 	uxtah	r0, r3, r0
 800345a:	7823      	ldrb	r3, [r4, #0]
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	2a00      	cmp	r2, #0
 8003460:	f040 81d0 	bne.w	8003804 <USB_EPStartXfer+0x3da>
 8003464:	5ac2      	ldrh	r2, [r0, r3]
 8003466:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800346a:	0412      	lsls	r2, r2, #16
 800346c:	0c12      	lsrs	r2, r2, #16
 800346e:	52c2      	strh	r2, [r0, r3]
 8003470:	5ac2      	ldrh	r2, [r0, r3]
 8003472:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003476:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800347a:	b292      	uxth	r2, r2
 800347c:	52c2      	strh	r2, [r0, r3]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800347e:	7822      	ldrb	r2, [r4, #0]
 8003480:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003484:	b29b      	uxth	r3, r3
 8003486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800349e:	2000      	movs	r0, #0
}
 80034a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 80034a2:	690a      	ldr	r2, [r1, #16]
 80034a4:	698e      	ldr	r6, [r1, #24]
 80034a6:	4296      	cmp	r6, r2
 80034a8:	bf28      	it	cs
 80034aa:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 80034ac:	7b0b      	ldrb	r3, [r1, #12]
 80034ae:	b1d3      	cbz	r3, 80034e6 <USB_EPStartXfer+0xbc>
      if (ep->type == EP_TYPE_BULK)
 80034b0:	78cb      	ldrb	r3, [r1, #3]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d038      	beq.n	8003528 <USB_EPStartXfer+0xfe>
        ep->xfer_len_db -= len;
 80034b6:	6a0b      	ldr	r3, [r1, #32]
 80034b8:	1b9b      	subs	r3, r3, r6
 80034ba:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80034bc:	780b      	ldrb	r3, [r1, #0]
 80034be:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80034c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80034c6:	f000 818f 	beq.w	80037e8 <USB_EPStartXfer+0x3be>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80034ca:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80034ce:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80034d2:	fa12 f181 	uxtah	r1, r2, r1
 80034d6:	011a      	lsls	r2, r3, #4
 80034d8:	b2b3      	uxth	r3, r6
 80034da:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80034dc:	8962      	ldrh	r2, [r4, #10]
 80034de:	6961      	ldr	r1, [r4, #20]
 80034e0:	f7ff ff8c 	bl	80033fc <USB_WritePMA>
 80034e4:	e00e      	b.n	8003504 <USB_EPStartXfer+0xda>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80034e6:	b2b6      	uxth	r6, r6
 80034e8:	4633      	mov	r3, r6
 80034ea:	88ca      	ldrh	r2, [r1, #6]
 80034ec:	6949      	ldr	r1, [r1, #20]
 80034ee:	f7ff ff85 	bl	80033fc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80034f2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80034f6:	7822      	ldrb	r2, [r4, #0]
 80034f8:	0112      	lsls	r2, r2, #4
 80034fa:	f205 4104 	addw	r1, r5, #1028	; 0x404
 80034fe:	fa11 f383 	uxtah	r3, r1, r3
 8003502:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003504:	7822      	ldrb	r2, [r4, #0]
 8003506:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800350a:	b29b      	uxth	r3, r3
 800350c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003514:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800351c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003520:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8003524:	2000      	movs	r0, #0
 8003526:	e7bb      	b.n	80034a0 <USB_EPStartXfer+0x76>
        if (ep->xfer_len_db > ep->maxpacket)
 8003528:	6a0b      	ldr	r3, [r1, #32]
 800352a:	429a      	cmp	r2, r3
 800352c:	f080 813e 	bcs.w	80037ac <USB_EPStartXfer+0x382>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003530:	780a      	ldrb	r2, [r1, #0]
 8003532:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003536:	b29b      	uxth	r3, r3
 8003538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800353c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003540:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003548:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 800354c:	6a0b      	ldr	r3, [r1, #32]
 800354e:	1b9b      	subs	r3, r3, r6
 8003550:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003552:	780b      	ldrb	r3, [r1, #0]
 8003554:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003558:	f012 0f40 	tst.w	r2, #64	; 0x40
 800355c:	f000 8093 	beq.w	8003686 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003560:	784a      	ldrb	r2, [r1, #1]
 8003562:	bb6a      	cbnz	r2, 80035c0 <USB_EPStartXfer+0x196>
 8003564:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003568:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800356c:	fa12 f181 	uxtah	r1, r2, r1
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	b96e      	cbnz	r6, 8003590 <USB_EPStartXfer+0x166>
 8003574:	5aca      	ldrh	r2, [r1, r3]
 8003576:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800357a:	0412      	lsls	r2, r2, #16
 800357c:	0c12      	lsrs	r2, r2, #16
 800357e:	52ca      	strh	r2, [r1, r3]
 8003580:	5aca      	ldrh	r2, [r1, r3]
 8003582:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003586:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800358a:	b292      	uxth	r2, r2
 800358c:	52ca      	strh	r2, [r1, r3]
 800358e:	e019      	b.n	80035c4 <USB_EPStartXfer+0x19a>
 8003590:	2e3e      	cmp	r6, #62	; 0x3e
 8003592:	d808      	bhi.n	80035a6 <USB_EPStartXfer+0x17c>
 8003594:	0872      	lsrs	r2, r6, #1
 8003596:	f016 0f01 	tst.w	r6, #1
 800359a:	bf18      	it	ne
 800359c:	3201      	addne	r2, #1
 800359e:	0292      	lsls	r2, r2, #10
 80035a0:	b292      	uxth	r2, r2
 80035a2:	52ca      	strh	r2, [r1, r3]
 80035a4:	e00e      	b.n	80035c4 <USB_EPStartXfer+0x19a>
 80035a6:	0972      	lsrs	r2, r6, #5
 80035a8:	f016 0f1f 	tst.w	r6, #31
 80035ac:	bf08      	it	eq
 80035ae:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80035b2:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80035b6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80035ba:	b292      	uxth	r2, r2
 80035bc:	52ca      	strh	r2, [r1, r3]
 80035be:	e001      	b.n	80035c4 <USB_EPStartXfer+0x19a>
 80035c0:	2a01      	cmp	r2, #1
 80035c2:	d02a      	beq.n	800361a <USB_EPStartXfer+0x1f0>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80035c4:	b2b3      	uxth	r3, r6
 80035c6:	8962      	ldrh	r2, [r4, #10]
 80035c8:	6961      	ldr	r1, [r4, #20]
 80035ca:	4628      	mov	r0, r5
 80035cc:	f7ff ff16 	bl	80033fc <USB_WritePMA>
            ep->xfer_buff += len;
 80035d0:	6963      	ldr	r3, [r4, #20]
 80035d2:	4433      	add	r3, r6
 80035d4:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80035d6:	6a23      	ldr	r3, [r4, #32]
 80035d8:	6922      	ldr	r2, [r4, #16]
 80035da:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 80035dc:	bf86      	itte	hi
 80035de:	1b9a      	subhi	r2, r3, r6
 80035e0:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 80035e2:	2200      	movls	r2, #0
 80035e4:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80035e6:	7862      	ldrb	r2, [r4, #1]
 80035e8:	2a00      	cmp	r2, #0
 80035ea:	d138      	bne.n	800365e <USB_EPStartXfer+0x234>
 80035ec:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80035f0:	7820      	ldrb	r0, [r4, #0]
 80035f2:	0100      	lsls	r0, r0, #4
 80035f4:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80035f8:	fa12 f281 	uxtah	r2, r2, r1
 80035fc:	b9bb      	cbnz	r3, 800362e <USB_EPStartXfer+0x204>
 80035fe:	5a81      	ldrh	r1, [r0, r2]
 8003600:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003604:	0409      	lsls	r1, r1, #16
 8003606:	0c09      	lsrs	r1, r1, #16
 8003608:	5281      	strh	r1, [r0, r2]
 800360a:	5a81      	ldrh	r1, [r0, r2]
 800360c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003610:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003614:	b289      	uxth	r1, r1
 8003616:	5281      	strh	r1, [r0, r2]
 8003618:	e023      	b.n	8003662 <USB_EPStartXfer+0x238>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800361a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800361e:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 8003622:	fa11 f282 	uxtah	r2, r1, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	b2b1      	uxth	r1, r6
 800362a:	52d1      	strh	r1, [r2, r3]
 800362c:	e7ca      	b.n	80035c4 <USB_EPStartXfer+0x19a>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800362e:	2b3e      	cmp	r3, #62	; 0x3e
 8003630:	d808      	bhi.n	8003644 <USB_EPStartXfer+0x21a>
 8003632:	0859      	lsrs	r1, r3, #1
 8003634:	f013 0f01 	tst.w	r3, #1
 8003638:	bf18      	it	ne
 800363a:	3101      	addne	r1, #1
 800363c:	0289      	lsls	r1, r1, #10
 800363e:	b289      	uxth	r1, r1
 8003640:	5281      	strh	r1, [r0, r2]
 8003642:	e00e      	b.n	8003662 <USB_EPStartXfer+0x238>
 8003644:	0959      	lsrs	r1, r3, #5
 8003646:	f013 0f1f 	tst.w	r3, #31
 800364a:	bf08      	it	eq
 800364c:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003650:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8003654:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003658:	b289      	uxth	r1, r1
 800365a:	5281      	strh	r1, [r0, r2]
 800365c:	e001      	b.n	8003662 <USB_EPStartXfer+0x238>
 800365e:	2a01      	cmp	r2, #1
 8003660:	d006      	beq.n	8003670 <USB_EPStartXfer+0x246>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003662:	b29b      	uxth	r3, r3
 8003664:	8922      	ldrh	r2, [r4, #8]
 8003666:	6961      	ldr	r1, [r4, #20]
 8003668:	4628      	mov	r0, r5
 800366a:	f7ff fec7 	bl	80033fc <USB_WritePMA>
 800366e:	e749      	b.n	8003504 <USB_EPStartXfer+0xda>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003670:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003674:	7821      	ldrb	r1, [r4, #0]
 8003676:	0109      	lsls	r1, r1, #4
 8003678:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800367c:	fa10 f282 	uxtah	r2, r0, r2
 8003680:	b298      	uxth	r0, r3
 8003682:	5288      	strh	r0, [r1, r2]
 8003684:	e7ed      	b.n	8003662 <USB_EPStartXfer+0x238>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003686:	784a      	ldrb	r2, [r1, #1]
 8003688:	bb6a      	cbnz	r2, 80036e6 <USB_EPStartXfer+0x2bc>
 800368a:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800368e:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003692:	fa12 f181 	uxtah	r1, r2, r1
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	b96e      	cbnz	r6, 80036b6 <USB_EPStartXfer+0x28c>
 800369a:	5aca      	ldrh	r2, [r1, r3]
 800369c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80036a0:	0412      	lsls	r2, r2, #16
 80036a2:	0c12      	lsrs	r2, r2, #16
 80036a4:	52ca      	strh	r2, [r1, r3]
 80036a6:	5aca      	ldrh	r2, [r1, r3]
 80036a8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80036ac:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80036b0:	b292      	uxth	r2, r2
 80036b2:	52ca      	strh	r2, [r1, r3]
 80036b4:	e019      	b.n	80036ea <USB_EPStartXfer+0x2c0>
 80036b6:	2e3e      	cmp	r6, #62	; 0x3e
 80036b8:	d808      	bhi.n	80036cc <USB_EPStartXfer+0x2a2>
 80036ba:	0872      	lsrs	r2, r6, #1
 80036bc:	f016 0f01 	tst.w	r6, #1
 80036c0:	bf18      	it	ne
 80036c2:	3201      	addne	r2, #1
 80036c4:	0292      	lsls	r2, r2, #10
 80036c6:	b292      	uxth	r2, r2
 80036c8:	52ca      	strh	r2, [r1, r3]
 80036ca:	e00e      	b.n	80036ea <USB_EPStartXfer+0x2c0>
 80036cc:	0972      	lsrs	r2, r6, #5
 80036ce:	f016 0f1f 	tst.w	r6, #31
 80036d2:	bf08      	it	eq
 80036d4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80036d8:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80036dc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80036e0:	b292      	uxth	r2, r2
 80036e2:	52ca      	strh	r2, [r1, r3]
 80036e4:	e001      	b.n	80036ea <USB_EPStartXfer+0x2c0>
 80036e6:	2a01      	cmp	r2, #1
 80036e8:	d02a      	beq.n	8003740 <USB_EPStartXfer+0x316>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80036ea:	b2b3      	uxth	r3, r6
 80036ec:	8922      	ldrh	r2, [r4, #8]
 80036ee:	6961      	ldr	r1, [r4, #20]
 80036f0:	4628      	mov	r0, r5
 80036f2:	f7ff fe83 	bl	80033fc <USB_WritePMA>
            ep->xfer_buff += len;
 80036f6:	6963      	ldr	r3, [r4, #20]
 80036f8:	4433      	add	r3, r6
 80036fa:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80036fc:	6a23      	ldr	r3, [r4, #32]
 80036fe:	6922      	ldr	r2, [r4, #16]
 8003700:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 8003702:	bf86      	itte	hi
 8003704:	1b9a      	subhi	r2, r3, r6
 8003706:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 8003708:	2200      	movls	r2, #0
 800370a:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800370c:	7862      	ldrb	r2, [r4, #1]
 800370e:	2a00      	cmp	r2, #0
 8003710:	d138      	bne.n	8003784 <USB_EPStartXfer+0x35a>
 8003712:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003716:	7821      	ldrb	r1, [r4, #0]
 8003718:	0109      	lsls	r1, r1, #4
 800371a:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 800371e:	fa12 f280 	uxtah	r2, r2, r0
 8003722:	b9bb      	cbnz	r3, 8003754 <USB_EPStartXfer+0x32a>
 8003724:	5a88      	ldrh	r0, [r1, r2]
 8003726:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800372a:	0400      	lsls	r0, r0, #16
 800372c:	0c00      	lsrs	r0, r0, #16
 800372e:	5288      	strh	r0, [r1, r2]
 8003730:	5a88      	ldrh	r0, [r1, r2]
 8003732:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8003736:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800373a:	b280      	uxth	r0, r0
 800373c:	5288      	strh	r0, [r1, r2]
 800373e:	e023      	b.n	8003788 <USB_EPStartXfer+0x35e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003740:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003744:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8003748:	fa11 f282 	uxtah	r2, r1, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	b2b1      	uxth	r1, r6
 8003750:	52d1      	strh	r1, [r2, r3]
 8003752:	e7ca      	b.n	80036ea <USB_EPStartXfer+0x2c0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003754:	2b3e      	cmp	r3, #62	; 0x3e
 8003756:	d808      	bhi.n	800376a <USB_EPStartXfer+0x340>
 8003758:	0858      	lsrs	r0, r3, #1
 800375a:	f013 0f01 	tst.w	r3, #1
 800375e:	bf18      	it	ne
 8003760:	3001      	addne	r0, #1
 8003762:	0280      	lsls	r0, r0, #10
 8003764:	b280      	uxth	r0, r0
 8003766:	5288      	strh	r0, [r1, r2]
 8003768:	e00e      	b.n	8003788 <USB_EPStartXfer+0x35e>
 800376a:	0958      	lsrs	r0, r3, #5
 800376c:	f013 0f1f 	tst.w	r3, #31
 8003770:	bf08      	it	eq
 8003772:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003776:	ea6f 60c0 	mvn.w	r0, r0, lsl #27
 800377a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800377e:	b280      	uxth	r0, r0
 8003780:	5288      	strh	r0, [r1, r2]
 8003782:	e001      	b.n	8003788 <USB_EPStartXfer+0x35e>
 8003784:	2a01      	cmp	r2, #1
 8003786:	d006      	beq.n	8003796 <USB_EPStartXfer+0x36c>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003788:	b29b      	uxth	r3, r3
 800378a:	8962      	ldrh	r2, [r4, #10]
 800378c:	6961      	ldr	r1, [r4, #20]
 800378e:	4628      	mov	r0, r5
 8003790:	f7ff fe34 	bl	80033fc <USB_WritePMA>
 8003794:	e6b6      	b.n	8003504 <USB_EPStartXfer+0xda>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003796:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800379a:	7821      	ldrb	r1, [r4, #0]
 800379c:	0109      	lsls	r1, r1, #4
 800379e:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 80037a2:	fa10 f282 	uxtah	r2, r0, r2
 80037a6:	b298      	uxth	r0, r3
 80037a8:	5288      	strh	r0, [r1, r2]
 80037aa:	e7ed      	b.n	8003788 <USB_EPStartXfer+0x35e>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80037ac:	7809      	ldrb	r1, [r1, #0]
 80037ae:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80037b2:	b292      	uxth	r2, r2
 80037b4:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80037b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037c4:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80037c8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80037cc:	7821      	ldrb	r1, [r4, #0]
 80037ce:	0109      	lsls	r1, r1, #4
 80037d0:	f200 4004 	addw	r0, r0, #1028	; 0x404
 80037d4:	fa10 f282 	uxtah	r2, r0, r2
 80037d8:	b29b      	uxth	r3, r3
 80037da:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037dc:	8922      	ldrh	r2, [r4, #8]
 80037de:	6961      	ldr	r1, [r4, #20]
 80037e0:	4628      	mov	r0, r5
 80037e2:	f7ff fe0b 	bl	80033fc <USB_WritePMA>
 80037e6:	e68d      	b.n	8003504 <USB_EPStartXfer+0xda>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80037e8:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80037ec:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80037f0:	fa12 f181 	uxtah	r1, r2, r1
 80037f4:	011a      	lsls	r2, r3, #4
 80037f6:	b2b3      	uxth	r3, r6
 80037f8:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037fa:	8922      	ldrh	r2, [r4, #8]
 80037fc:	6961      	ldr	r1, [r4, #20]
 80037fe:	f7ff fdfd 	bl	80033fc <USB_WritePMA>
 8003802:	e67f      	b.n	8003504 <USB_EPStartXfer+0xda>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003804:	2a3e      	cmp	r2, #62	; 0x3e
 8003806:	d808      	bhi.n	800381a <USB_EPStartXfer+0x3f0>
 8003808:	0851      	lsrs	r1, r2, #1
 800380a:	f012 0f01 	tst.w	r2, #1
 800380e:	bf18      	it	ne
 8003810:	3101      	addne	r1, #1
 8003812:	0289      	lsls	r1, r1, #10
 8003814:	b289      	uxth	r1, r1
 8003816:	52c1      	strh	r1, [r0, r3]
 8003818:	e631      	b.n	800347e <USB_EPStartXfer+0x54>
 800381a:	0951      	lsrs	r1, r2, #5
 800381c:	f012 0f1f 	tst.w	r2, #31
 8003820:	bf08      	it	eq
 8003822:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003826:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800382a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800382e:	b289      	uxth	r1, r1
 8003830:	52c1      	strh	r1, [r0, r3]
 8003832:	e624      	b.n	800347e <USB_EPStartXfer+0x54>
      if (ep->type == EP_TYPE_BULK)
 8003834:	78ca      	ldrb	r2, [r1, #3]
 8003836:	2a02      	cmp	r2, #2
 8003838:	d03f      	beq.n	80038ba <USB_EPStartXfer+0x490>
      else if (ep->type == EP_TYPE_ISOC)
 800383a:	2a01      	cmp	r2, #1
 800383c:	f040 8116 	bne.w	8003a6c <USB_EPStartXfer+0x642>
        if (ep->xfer_len > ep->maxpacket)
 8003840:	698a      	ldr	r2, [r1, #24]
 8003842:	6909      	ldr	r1, [r1, #16]
 8003844:	428a      	cmp	r2, r1
          ep->xfer_len -= len;
 8003846:	bf86      	itte	hi
 8003848:	1a50      	subhi	r0, r2, r1
          len = ep->maxpacket;
 800384a:	460a      	movhi	r2, r1
          ep->xfer_len = 0U;
 800384c:	2000      	movls	r0, #0
 800384e:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003850:	2b00      	cmp	r3, #0
 8003852:	f47f ae14 	bne.w	800347e <USB_EPStartXfer+0x54>
 8003856:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800385a:	7820      	ldrb	r0, [r4, #0]
 800385c:	0100      	lsls	r0, r0, #4
 800385e:	f205 4304 	addw	r3, r5, #1028	; 0x404
 8003862:	fa13 f181 	uxtah	r1, r3, r1
 8003866:	2a00      	cmp	r2, #0
 8003868:	f040 80b7 	bne.w	80039da <USB_EPStartXfer+0x5b0>
 800386c:	5a43      	ldrh	r3, [r0, r1]
 800386e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003872:	041b      	lsls	r3, r3, #16
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	5243      	strh	r3, [r0, r1]
 8003878:	5a43      	ldrh	r3, [r0, r1]
 800387a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800387e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003882:	b29b      	uxth	r3, r3
 8003884:	5243      	strh	r3, [r0, r1]
 8003886:	7861      	ldrb	r1, [r4, #1]
 8003888:	2900      	cmp	r1, #0
 800388a:	f040 80e1 	bne.w	8003a50 <USB_EPStartXfer+0x626>
 800388e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003892:	7821      	ldrb	r1, [r4, #0]
 8003894:	0109      	lsls	r1, r1, #4
 8003896:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 800389a:	fa13 f282 	uxtah	r2, r3, r2
 800389e:	5a8b      	ldrh	r3, [r1, r2]
 80038a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	0c1b      	lsrs	r3, r3, #16
 80038a8:	528b      	strh	r3, [r1, r2]
 80038aa:	5a8b      	ldrh	r3, [r1, r2]
 80038ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	528b      	strh	r3, [r1, r2]
 80038b8:	e5e1      	b.n	800347e <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d132      	bne.n	8003924 <USB_EPStartXfer+0x4fa>
 80038be:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80038c2:	7808      	ldrb	r0, [r1, #0]
 80038c4:	0100      	lsls	r0, r0, #4
 80038c6:	f205 4304 	addw	r3, r5, #1028	; 0x404
 80038ca:	fa13 f382 	uxtah	r3, r3, r2
 80038ce:	690a      	ldr	r2, [r1, #16]
 80038d0:	2a00      	cmp	r2, #0
 80038d2:	d145      	bne.n	8003960 <USB_EPStartXfer+0x536>
 80038d4:	5ac2      	ldrh	r2, [r0, r3]
 80038d6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80038da:	0412      	lsls	r2, r2, #16
 80038dc:	0c12      	lsrs	r2, r2, #16
 80038de:	52c2      	strh	r2, [r0, r3]
 80038e0:	5ac2      	ldrh	r2, [r0, r3]
 80038e2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80038e6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80038ea:	b292      	uxth	r2, r2
 80038ec:	52c2      	strh	r2, [r0, r3]
 80038ee:	7863      	ldrb	r3, [r4, #1]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d165      	bne.n	80039c0 <USB_EPStartXfer+0x596>
 80038f4:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80038f8:	7822      	ldrb	r2, [r4, #0]
 80038fa:	0112      	lsls	r2, r2, #4
 80038fc:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 8003900:	fa13 f381 	uxtah	r3, r3, r1
 8003904:	6921      	ldr	r1, [r4, #16]
 8003906:	2900      	cmp	r1, #0
 8003908:	d142      	bne.n	8003990 <USB_EPStartXfer+0x566>
 800390a:	5ad1      	ldrh	r1, [r2, r3]
 800390c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003910:	0409      	lsls	r1, r1, #16
 8003912:	0c09      	lsrs	r1, r1, #16
 8003914:	52d1      	strh	r1, [r2, r3]
 8003916:	5ad1      	ldrh	r1, [r2, r3]
 8003918:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800391c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003920:	b289      	uxth	r1, r1
 8003922:	52d1      	strh	r1, [r2, r3]
        if (ep->xfer_count != 0U)
 8003924:	69e3      	ldr	r3, [r4, #28]
 8003926:	2b00      	cmp	r3, #0
 8003928:	f43f ada9 	beq.w	800347e <USB_EPStartXfer+0x54>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800392c:	7822      	ldrb	r2, [r4, #0]
 800392e:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003932:	f244 0340 	movw	r3, #16448	; 0x4040
 8003936:	ea03 0001 	and.w	r0, r3, r1
 800393a:	438b      	bics	r3, r1
 800393c:	d002      	beq.n	8003944 <USB_EPStartXfer+0x51a>
 800393e:	2800      	cmp	r0, #0
 8003940:	f47f ad9d 	bne.w	800347e <USB_EPStartXfer+0x54>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8003944:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003948:	b29b      	uxth	r3, r3
 800394a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003956:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800395a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 800395e:	e58e      	b.n	800347e <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003960:	2a3e      	cmp	r2, #62	; 0x3e
 8003962:	d808      	bhi.n	8003976 <USB_EPStartXfer+0x54c>
 8003964:	0851      	lsrs	r1, r2, #1
 8003966:	f012 0f01 	tst.w	r2, #1
 800396a:	bf18      	it	ne
 800396c:	3101      	addne	r1, #1
 800396e:	028a      	lsls	r2, r1, #10
 8003970:	b292      	uxth	r2, r2
 8003972:	52c2      	strh	r2, [r0, r3]
 8003974:	e7bb      	b.n	80038ee <USB_EPStartXfer+0x4c4>
 8003976:	0951      	lsrs	r1, r2, #5
 8003978:	f012 0f1f 	tst.w	r2, #31
 800397c:	bf08      	it	eq
 800397e:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8003982:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8003986:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800398a:	b292      	uxth	r2, r2
 800398c:	52c2      	strh	r2, [r0, r3]
 800398e:	e7ae      	b.n	80038ee <USB_EPStartXfer+0x4c4>
 8003990:	293e      	cmp	r1, #62	; 0x3e
 8003992:	d808      	bhi.n	80039a6 <USB_EPStartXfer+0x57c>
 8003994:	0848      	lsrs	r0, r1, #1
 8003996:	f011 0f01 	tst.w	r1, #1
 800399a:	bf18      	it	ne
 800399c:	3001      	addne	r0, #1
 800399e:	0281      	lsls	r1, r0, #10
 80039a0:	b289      	uxth	r1, r1
 80039a2:	52d1      	strh	r1, [r2, r3]
 80039a4:	e7be      	b.n	8003924 <USB_EPStartXfer+0x4fa>
 80039a6:	0948      	lsrs	r0, r1, #5
 80039a8:	f011 0f1f 	tst.w	r1, #31
 80039ac:	bf08      	it	eq
 80039ae:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80039b2:	ea6f 61c0 	mvn.w	r1, r0, lsl #27
 80039b6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80039ba:	b289      	uxth	r1, r1
 80039bc:	52d1      	strh	r1, [r2, r3]
 80039be:	e7b1      	b.n	8003924 <USB_EPStartXfer+0x4fa>
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d1af      	bne.n	8003924 <USB_EPStartXfer+0x4fa>
 80039c4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80039c8:	7822      	ldrb	r2, [r4, #0]
 80039ca:	0112      	lsls	r2, r2, #4
 80039cc:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 80039d0:	fa11 f383 	uxtah	r3, r1, r3
 80039d4:	8a21      	ldrh	r1, [r4, #16]
 80039d6:	52d1      	strh	r1, [r2, r3]
 80039d8:	e7a4      	b.n	8003924 <USB_EPStartXfer+0x4fa>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80039da:	2a3e      	cmp	r2, #62	; 0x3e
 80039dc:	d818      	bhi.n	8003a10 <USB_EPStartXfer+0x5e6>
 80039de:	0853      	lsrs	r3, r2, #1
 80039e0:	f012 0701 	ands.w	r7, r2, #1
 80039e4:	bf14      	ite	ne
 80039e6:	1c5e      	addne	r6, r3, #1
 80039e8:	461e      	moveq	r6, r3
 80039ea:	02b6      	lsls	r6, r6, #10
 80039ec:	b2b6      	uxth	r6, r6
 80039ee:	5246      	strh	r6, [r0, r1]
 80039f0:	7861      	ldrb	r1, [r4, #1]
 80039f2:	bb69      	cbnz	r1, 8003a50 <USB_EPStartXfer+0x626>
 80039f4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80039f8:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 80039fc:	fa11 f282 	uxtah	r2, r1, r2
 8003a00:	7821      	ldrb	r1, [r4, #0]
 8003a02:	0109      	lsls	r1, r1, #4
 8003a04:	b107      	cbz	r7, 8003a08 <USB_EPStartXfer+0x5de>
 8003a06:	3301      	adds	r3, #1
 8003a08:	029b      	lsls	r3, r3, #10
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	5253      	strh	r3, [r2, r1]
 8003a0e:	e536      	b.n	800347e <USB_EPStartXfer+0x54>
 8003a10:	0953      	lsrs	r3, r2, #5
 8003a12:	f012 071f 	ands.w	r7, r2, #31
 8003a16:	bf0c      	ite	eq
 8003a18:	f103 36ff 	addeq.w	r6, r3, #4294967295
 8003a1c:	461e      	movne	r6, r3
 8003a1e:	ea6f 66c6 	mvn.w	r6, r6, lsl #27
 8003a22:	ea6f 4656 	mvn.w	r6, r6, lsr #17
 8003a26:	b2b6      	uxth	r6, r6
 8003a28:	5246      	strh	r6, [r0, r1]
 8003a2a:	7861      	ldrb	r1, [r4, #1]
 8003a2c:	b981      	cbnz	r1, 8003a50 <USB_EPStartXfer+0x626>
 8003a2e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003a32:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8003a36:	fa11 f282 	uxtah	r2, r1, r2
 8003a3a:	7821      	ldrb	r1, [r4, #0]
 8003a3c:	0109      	lsls	r1, r1, #4
 8003a3e:	b907      	cbnz	r7, 8003a42 <USB_EPStartXfer+0x618>
 8003a40:	3b01      	subs	r3, #1
 8003a42:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8003a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	5253      	strh	r3, [r2, r1]
 8003a4e:	e516      	b.n	800347e <USB_EPStartXfer+0x54>
 8003a50:	2901      	cmp	r1, #1
 8003a52:	f47f ad14 	bne.w	800347e <USB_EPStartXfer+0x54>
 8003a56:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	7821      	ldrb	r1, [r4, #0]
 8003a5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a62:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003a66:	b292      	uxth	r2, r2
 8003a68:	52ea      	strh	r2, [r5, r3]
 8003a6a:	e508      	b.n	800347e <USB_EPStartXfer+0x54>
        return HAL_ERROR;
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	e517      	b.n	80034a0 <USB_EPStartXfer+0x76>

08003a70 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003a70:	b530      	push	{r4, r5, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a72:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8003a76:	f500 6480 	add.w	r4, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8003a7a:	085d      	lsrs	r5, r3, #1
 8003a7c:	d012      	beq.n	8003aa4 <USB_ReadPMA+0x34>
 8003a7e:	1c88      	adds	r0, r1, #2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a80:	46a6      	mov	lr, r4
  for (i = n; i != 0U; i--)
 8003a82:	46ac      	mov	ip, r5
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003a84:	f83e 2b04 	ldrh.w	r2, [lr], #4
 8003a88:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003a8a:	f800 2c02 	strb.w	r2, [r0, #-2]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003a8e:	0a12      	lsrs	r2, r2, #8
 8003a90:	f800 2c01 	strb.w	r2, [r0, #-1]
  for (i = n; i != 0U; i--)
 8003a94:	3002      	adds	r0, #2
 8003a96:	f1bc 0c01 	subs.w	ip, ip, #1
 8003a9a:	d1f3      	bne.n	8003a84 <USB_ReadPMA+0x14>
    pBuf++;
 8003a9c:	eb01 0145 	add.w	r1, r1, r5, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 8003aa0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003aa4:	f013 0f01 	tst.w	r3, #1
  {
    temp = *pdwVal;
 8003aa8:	bf1c      	itt	ne
 8003aaa:	8823      	ldrhne	r3, [r4, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003aac:	700b      	strbne	r3, [r1, #0]
  }
}
 8003aae:	bd30      	pop	{r4, r5, pc}

08003ab0 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003ab0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003ab4:	b183      	cbz	r3, 8003ad8 <USBD_CDC_EP0_RxReady+0x28>
{
 8003ab6:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ab8:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003abc:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003ac0:	28ff      	cmp	r0, #255	; 0xff
 8003ac2:	d007      	beq.n	8003ad4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003aca:	4621      	mov	r1, r4
 8003acc:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003ace:	23ff      	movs	r3, #255	; 0xff
 8003ad0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	bd10      	pop	{r4, pc}
 8003ad8:	2000      	movs	r0, #0
 8003ada:	4770      	bx	lr

08003adc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003adc:	2343      	movs	r3, #67	; 0x43
 8003ade:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003ae0:	4800      	ldr	r0, [pc, #0]	; (8003ae4 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003ae2:	4770      	bx	lr
 8003ae4:	20000084 	.word	0x20000084

08003ae8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003ae8:	2343      	movs	r3, #67	; 0x43
 8003aea:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003aec:	4800      	ldr	r0, [pc, #0]	; (8003af0 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003aee:	4770      	bx	lr
 8003af0:	200000c8 	.word	0x200000c8

08003af4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003af4:	2343      	movs	r3, #67	; 0x43
 8003af6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003af8:	4800      	ldr	r0, [pc, #0]	; (8003afc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003afa:	4770      	bx	lr
 8003afc:	20000118 	.word	0x20000118

08003b00 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003b00:	230a      	movs	r3, #10
 8003b02:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003b04:	4800      	ldr	r0, [pc, #0]	; (8003b08 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003b06:	4770      	bx	lr
 8003b08:	2000010c 	.word	0x2000010c

08003b0c <USBD_CDC_DataOut>:
{
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003b10:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003b14:	f001 f89c 	bl	8004c50 <USBD_LL_GetRxDataSize>
 8003b18:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003b1c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003b20:	b14b      	cbz	r3, 8003b36 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003b22:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8003b2c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8003b30:	4798      	blx	r3
    return USBD_OK;
 8003b32:	2000      	movs	r0, #0
}
 8003b34:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003b36:	2002      	movs	r0, #2
 8003b38:	e7fc      	b.n	8003b34 <USBD_CDC_DataOut+0x28>

08003b3a <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003b3a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8003b3e:	b312      	cbz	r2, 8003b86 <USBD_CDC_DataIn+0x4c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003b40:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003b44:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	b1f3      	cbz	r3, 8003b8a <USBD_CDC_DataIn+0x50>
{
 8003b4c:	b510      	push	{r4, lr}
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003b4e:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8003b52:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8003b56:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 8003b5a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003b5c:	fbb3 fcf4 	udiv	ip, r3, r4
 8003b60:	fb04 331c 	mls	r3, r4, ip, r3
 8003b64:	b11b      	cbz	r3, 8003b6e <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8003b66:	2000      	movs	r0, #0
 8003b68:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 8003b6c:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8003b6e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003b72:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003b76:	2400      	movs	r4, #0
 8003b78:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	4622      	mov	r2, r4
 8003b7e:	f001 f857 	bl	8004c30 <USBD_LL_Transmit>
    return USBD_OK;
 8003b82:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003b84:	e7f2      	b.n	8003b6c <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8003b86:	2002      	movs	r0, #2
 8003b88:	4770      	bx	lr
      hcdc->TxState = 0U;
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 8003b90:	4770      	bx	lr

08003b92 <USBD_CDC_Setup>:
{
 8003b92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b94:	b083      	sub	sp, #12
 8003b96:	4606      	mov	r6, r0
 8003b98:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003b9a:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8003ba4:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ba8:	780b      	ldrb	r3, [r1, #0]
 8003baa:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8003bae:	d027      	beq.n	8003c00 <USBD_CDC_Setup+0x6e>
 8003bb0:	2d20      	cmp	r5, #32
 8003bb2:	d153      	bne.n	8003c5c <USBD_CDC_Setup+0xca>
      if (req->wLength)
 8003bb4:	88ca      	ldrh	r2, [r1, #6]
 8003bb6:	b1da      	cbz	r2, 8003bf0 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8003bb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003bbc:	d00c      	beq.n	8003bd8 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003bbe:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4639      	mov	r1, r7
 8003bc6:	7860      	ldrb	r0, [r4, #1]
 8003bc8:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003bca:	88e2      	ldrh	r2, [r4, #6]
 8003bcc:	4639      	mov	r1, r7
 8003bce:	4630      	mov	r0, r6
 8003bd0:	f000 fd64 	bl	800469c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003bd4:	2500      	movs	r5, #0
 8003bd6:	e044      	b.n	8003c62 <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 8003bd8:	784b      	ldrb	r3, [r1, #1]
 8003bda:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003bde:	88cb      	ldrh	r3, [r1, #6]
 8003be0:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003be4:	88ca      	ldrh	r2, [r1, #6]
 8003be6:	4639      	mov	r1, r7
 8003be8:	f000 fd6d 	bl	80046c6 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8003bec:	2500      	movs	r5, #0
 8003bee:	e038      	b.n	8003c62 <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003bf0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	7848      	ldrb	r0, [r1, #1]
 8003bfa:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8003bfc:	2500      	movs	r5, #0
 8003bfe:	e030      	b.n	8003c62 <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8003c00:	784f      	ldrb	r7, [r1, #1]
 8003c02:	2f0a      	cmp	r7, #10
 8003c04:	d014      	beq.n	8003c30 <USBD_CDC_Setup+0x9e>
 8003c06:	2f0b      	cmp	r7, #11
 8003c08:	d020      	beq.n	8003c4c <USBD_CDC_Setup+0xba>
 8003c0a:	b11f      	cbz	r7, 8003c14 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8003c0c:	f000 fa58 	bl	80040c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8003c10:	2502      	movs	r5, #2
          break;
 8003c12:	e026      	b.n	8003c62 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003c14:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d003      	beq.n	8003c24 <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8003c1c:	f000 fa50 	bl	80040c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8003c20:	2502      	movs	r5, #2
 8003c22:	e01e      	b.n	8003c62 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003c24:	2202      	movs	r2, #2
 8003c26:	a901      	add	r1, sp, #4
 8003c28:	f000 fd38 	bl	800469c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003c2c:	463d      	mov	r5, r7
 8003c2e:	e018      	b.n	8003c62 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003c30:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d003      	beq.n	8003c40 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8003c38:	f000 fa42 	bl	80040c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8003c3c:	2502      	movs	r5, #2
 8003c3e:	e010      	b.n	8003c62 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003c40:	2201      	movs	r2, #1
 8003c42:	f10d 0107 	add.w	r1, sp, #7
 8003c46:	f000 fd29 	bl	800469c <USBD_CtlSendData>
 8003c4a:	e00a      	b.n	8003c62 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003c4c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d006      	beq.n	8003c62 <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 8003c54:	f000 fa34 	bl	80040c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8003c58:	2502      	movs	r5, #2
 8003c5a:	e002      	b.n	8003c62 <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8003c5c:	f000 fa30 	bl	80040c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8003c60:	2502      	movs	r5, #2
}
 8003c62:	4628      	mov	r0, r5
 8003c64:	b003      	add	sp, #12
 8003c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c68 <USBD_CDC_DeInit>:
{
 8003c68:	b538      	push	{r3, r4, r5, lr}
 8003c6a:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003c6c:	2181      	movs	r1, #129	; 0x81
 8003c6e:	f000 ffa8 	bl	8004bc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003c72:	2500      	movs	r5, #0
 8003c74:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003c76:	2101      	movs	r1, #1
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f000 ffa2 	bl	8004bc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003c7e:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003c82:	2182      	movs	r1, #130	; 0x82
 8003c84:	4620      	mov	r0, r4
 8003c86:	f000 ff9c 	bl	8004bc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003c8a:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003c8c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003c90:	b14b      	cbz	r3, 8003ca6 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003c92:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003c9a:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003c9e:	f000 ffe1 	bl	8004c64 <USBD_static_free>
    pdev->pClassData = NULL;
 8003ca2:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	bd38      	pop	{r3, r4, r5, pc}

08003caa <USBD_CDC_Init>:
{
 8003caa:	b570      	push	{r4, r5, r6, lr}
 8003cac:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003cae:	7c03      	ldrb	r3, [r0, #16]
 8003cb0:	bbab      	cbnz	r3, 8003d1e <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	2181      	movs	r1, #129	; 0x81
 8003cba:	f000 ff77 	bl	8004bac <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003cbe:	2501      	movs	r5, #1
 8003cc0:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	4629      	mov	r1, r5
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f000 ff6e 	bl	8004bac <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003cd0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003cd4:	2308      	movs	r3, #8
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	2182      	movs	r1, #130	; 0x82
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f000 ff66 	bl	8004bac <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003ce4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003ce8:	f000 ffb8 	bl	8004c5c <USBD_static_malloc>
 8003cec:	4605      	mov	r5, r0
 8003cee:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003cf2:	b368      	cbz	r0, 8003d50 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003cf4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4798      	blx	r3
    hcdc->TxState = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8003d02:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d06:	7c26      	ldrb	r6, [r4, #16]
 8003d08:	b9ce      	cbnz	r6, 8003d3e <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d0e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003d12:	2101      	movs	r1, #1
 8003d14:	4620      	mov	r0, r4
 8003d16:	f000 ff93 	bl	8004c40 <USBD_LL_PrepareReceive>
}
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003d1e:	2340      	movs	r3, #64	; 0x40
 8003d20:	2202      	movs	r2, #2
 8003d22:	2181      	movs	r1, #129	; 0x81
 8003d24:	f000 ff42 	bl	8004bac <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003d28:	2501      	movs	r5, #1
 8003d2a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003d2c:	2340      	movs	r3, #64	; 0x40
 8003d2e:	2202      	movs	r2, #2
 8003d30:	4629      	mov	r1, r5
 8003d32:	4620      	mov	r0, r4
 8003d34:	f000 ff3a 	bl	8004bac <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003d38:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8003d3c:	e7ca      	b.n	8003cd4 <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003d3e:	2340      	movs	r3, #64	; 0x40
 8003d40:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003d44:	2101      	movs	r1, #1
 8003d46:	4620      	mov	r0, r4
 8003d48:	f000 ff7a 	bl	8004c40 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003d4c:	2600      	movs	r6, #0
 8003d4e:	e7e4      	b.n	8003d1a <USBD_CDC_Init+0x70>
    ret = 1U;
 8003d50:	2601      	movs	r6, #1
 8003d52:	e7e2      	b.n	8003d1a <USBD_CDC_Init+0x70>

08003d54 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8003d54:	b119      	cbz	r1, 8003d5e <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8003d56:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003d5e:	2002      	movs	r0, #2
  }

  return ret;
}
 8003d60:	4770      	bx	lr

08003d62 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003d62:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8003d66:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003d6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8003d6e:	2000      	movs	r0, #0
 8003d70:	4770      	bx	lr

08003d72 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003d72:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8003d76:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	4770      	bx	lr

08003d7e <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003d7e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 8003d82:	b1a2      	cbz	r2, 8003dae <USBD_CDC_TransmitPacket+0x30>
{
 8003d84:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 8003d86:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8003d8a:	b10b      	cbz	r3, 8003d90 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8003d8c:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003d8e:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003d96:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8003d9a:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003d9c:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8003da0:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003da4:	2181      	movs	r1, #129	; 0x81
 8003da6:	f000 ff43 	bl	8004c30 <USBD_LL_Transmit>
      return USBD_OK;
 8003daa:	2000      	movs	r0, #0
 8003dac:	e7ef      	b.n	8003d8e <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 8003dae:	2002      	movs	r0, #2
}
 8003db0:	4770      	bx	lr

08003db2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003db2:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003db4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003db8:	b192      	cbz	r2, 8003de0 <USBD_CDC_ReceivePacket+0x2e>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003dba:	7c04      	ldrb	r4, [r0, #16]
 8003dbc:	b944      	cbnz	r4, 8003dd0 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dc2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	f000 ff3a 	bl	8004c40 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003dcc:	4620      	mov	r0, r4
 8003dce:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003dd0:	2340      	movs	r3, #64	; 0x40
 8003dd2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	f000 ff32 	bl	8004c40 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8003ddc:	2400      	movs	r4, #0
 8003dde:	e7f5      	b.n	8003dcc <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8003de0:	2402      	movs	r4, #2
 8003de2:	e7f3      	b.n	8003dcc <USBD_CDC_ReceivePacket+0x1a>

08003de4 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003de4:	b198      	cbz	r0, 8003e0e <USBD_Init+0x2a>
{
 8003de6:	b508      	push	{r3, lr}
 8003de8:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003dea:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 8003dee:	b110      	cbz	r0, 8003df6 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8003df0:	2000      	movs	r0, #0
 8003df2:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003df6:	b109      	cbz	r1, 8003dfc <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8003df8:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8003e02:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fe87 	bl	8004b18 <USBD_LL_Init>

  return USBD_OK;
 8003e0a:	2000      	movs	r0, #0
}
 8003e0c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003e0e:	2002      	movs	r0, #2
}
 8003e10:	4770      	bx	lr

08003e12 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003e12:	b119      	cbz	r1, 8003e1c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003e14:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003e18:	2000      	movs	r0, #0
 8003e1a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003e1c:	2002      	movs	r0, #2
  }

  return status;
}
 8003e1e:	4770      	bx	lr

08003e20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003e20:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003e22:	f000 febb 	bl	8004b9c <USBD_LL_Start>

  return USBD_OK;
}
 8003e26:	2000      	movs	r0, #0
 8003e28:	bd08      	pop	{r3, pc}

08003e2a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003e2a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003e2c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e30:	b12b      	cbz	r3, 8003e3e <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003e36:	2800      	cmp	r0, #0
 8003e38:	bf18      	it	ne
 8003e3a:	2002      	movne	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003e3c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003e3e:	2002      	movs	r0, #2
 8003e40:	e7fc      	b.n	8003e3c <USBD_SetClassConfig+0x12>

08003e42 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003e42:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003e44:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4798      	blx	r3

  return USBD_OK;
}
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	bd08      	pop	{r3, pc}

08003e50 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003e54:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f000 f91d 	bl	8004098 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003e64:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003e68:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003e6c:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8003e70:	f001 031f 	and.w	r3, r1, #31
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d00e      	beq.n	8003e96 <USBD_LL_SetupStage+0x46>
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d011      	beq.n	8003ea0 <USBD_LL_SetupStage+0x50>
 8003e7c:	b12b      	cbz	r3, 8003e8a <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003e7e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003e82:	4620      	mov	r0, r4
 8003e84:	f000 fea5 	bl	8004bd2 <USBD_LL_StallEP>
      break;
 8003e88:	e003      	b.n	8003e92 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f000 f921 	bl	80040d4 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003e92:	2000      	movs	r0, #0
 8003e94:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003e96:	4629      	mov	r1, r5
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f000 fad5 	bl	8004448 <USBD_StdItfReq>
      break;
 8003e9e:	e7f8      	b.n	8003e92 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f000 fb00 	bl	80044a8 <USBD_StdEPReq>
      break;
 8003ea8:	e7f3      	b.n	8003e92 <USBD_LL_SetupStage+0x42>

08003eaa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003eaa:	b538      	push	{r3, r4, r5, lr}
 8003eac:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003eae:	460d      	mov	r5, r1
 8003eb0:	bb81      	cbnz	r1, 8003f14 <USBD_LL_DataOutStage+0x6a>
 8003eb2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003eb4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003eb8:	2a03      	cmp	r2, #3
 8003eba:	d003      	beq.n	8003ec4 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003ebc:	2a05      	cmp	r2, #5
 8003ebe:	d022      	beq.n	8003f06 <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	e031      	b.n	8003f28 <USBD_LL_DataOutStage+0x7e>
      if (pep->rem_length > pep->maxpacket)
 8003ec4:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 8003ec8:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8003ecc:	4291      	cmp	r1, r2
 8003ece:	d90b      	bls.n	8003ee8 <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 8003ed0:	1a89      	subs	r1, r1, r2
 8003ed2:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8003ed6:	428a      	cmp	r2, r1
 8003ed8:	bf8c      	ite	hi
 8003eda:	b28a      	uxthhi	r2, r1
 8003edc:	b292      	uxthls	r2, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f000 fc00 	bl	80046e4 <USBD_CtlContinueRx>
  return USBD_OK;
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	e01f      	b.n	8003f28 <USBD_LL_DataOutStage+0x7e>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003ee8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	b11b      	cbz	r3, 8003ef8 <USBD_LL_DataOutStage+0x4e>
 8003ef0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003ef4:	2a03      	cmp	r2, #3
 8003ef6:	d004      	beq.n	8003f02 <USBD_LL_DataOutStage+0x58>
        USBD_CtlSendStatus(pdev);
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f000 fbfb 	bl	80046f4 <USBD_CtlSendStatus>
  return USBD_OK;
 8003efe:	4628      	mov	r0, r5
 8003f00:	e012      	b.n	8003f28 <USBD_LL_DataOutStage+0x7e>
          pdev->pClass->EP0_RxReady(pdev);
 8003f02:	4798      	blx	r3
 8003f04:	e7f8      	b.n	8003ef8 <USBD_LL_DataOutStage+0x4e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003f06:	2100      	movs	r1, #0
 8003f08:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003f0c:	f000 fe61 	bl	8004bd2 <USBD_LL_StallEP>
  return USBD_OK;
 8003f10:	4628      	mov	r0, r5
 8003f12:	e009      	b.n	8003f28 <USBD_LL_DataOutStage+0x7e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003f14:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	b133      	cbz	r3, 8003f2a <USBD_LL_DataOutStage+0x80>
 8003f1c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003f20:	2a03      	cmp	r2, #3
 8003f22:	d104      	bne.n	8003f2e <USBD_LL_DataOutStage+0x84>
    pdev->pClass->DataOut(pdev, epnum);
 8003f24:	4798      	blx	r3
  return USBD_OK;
 8003f26:	2000      	movs	r0, #0
}
 8003f28:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003f2a:	2002      	movs	r0, #2
 8003f2c:	e7fc      	b.n	8003f28 <USBD_LL_DataOutStage+0x7e>
 8003f2e:	2002      	movs	r0, #2
 8003f30:	e7fa      	b.n	8003f28 <USBD_LL_DataOutStage+0x7e>

08003f32 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003f32:	b538      	push	{r3, r4, r5, lr}
 8003f34:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003f36:	460d      	mov	r5, r1
 8003f38:	2900      	cmp	r1, #0
 8003f3a:	d152      	bne.n	8003fe2 <USBD_LL_DataInStage+0xb0>
 8003f3c:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003f3e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003f42:	2a02      	cmp	r2, #2
 8003f44:	d00b      	beq.n	8003f5e <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003f46:	f032 0304 	bics.w	r3, r2, #4
 8003f4a:	d102      	bne.n	8003f52 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003f4c:	2180      	movs	r1, #128	; 0x80
 8003f4e:	f000 fe40 	bl	8004bd2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003f52:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d03e      	beq.n	8003fd8 <USBD_LL_DataInStage+0xa6>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003f5a:	4628      	mov	r0, r5
}
 8003f5c:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8003f5e:	6a01      	ldr	r1, [r0, #32]
 8003f60:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003f62:	4291      	cmp	r1, r2
 8003f64:	d81b      	bhi.n	8003f9e <USBD_LL_DataInStage+0x6c>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003f66:	69c1      	ldr	r1, [r0, #28]
 8003f68:	fbb1 f3f2 	udiv	r3, r1, r2
 8003f6c:	fb02 1313 	mls	r3, r2, r3, r1
 8003f70:	b92b      	cbnz	r3, 8003f7e <USBD_LL_DataInStage+0x4c>
 8003f72:	428a      	cmp	r2, r1
 8003f74:	d803      	bhi.n	8003f7e <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 8003f76:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8003f7a:	4299      	cmp	r1, r3
 8003f7c:	d31c      	bcc.n	8003fb8 <USBD_LL_DataInStage+0x86>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003f7e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	b11b      	cbz	r3, 8003f8e <USBD_LL_DataInStage+0x5c>
 8003f86:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8003f8a:	2a03      	cmp	r2, #3
 8003f8c:	d021      	beq.n	8003fd2 <USBD_LL_DataInStage+0xa0>
          USBD_LL_StallEP(pdev, 0x80U);
 8003f8e:	2180      	movs	r1, #128	; 0x80
 8003f90:	4620      	mov	r0, r4
 8003f92:	f000 fe1e 	bl	8004bd2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003f96:	4620      	mov	r0, r4
 8003f98:	f000 fbb7 	bl	800470a <USBD_CtlReceiveStatus>
 8003f9c:	e7d9      	b.n	8003f52 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 8003f9e:	1a8a      	subs	r2, r1, r2
 8003fa0:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003fa2:	b292      	uxth	r2, r2
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f000 fb86 	bl	80046b6 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003faa:	2300      	movs	r3, #0
 8003fac:	461a      	mov	r2, r3
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f000 fe45 	bl	8004c40 <USBD_LL_PrepareReceive>
 8003fb6:	e7cc      	b.n	8003f52 <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003fb8:	2200      	movs	r2, #0
 8003fba:	4611      	mov	r1, r2
 8003fbc:	f000 fb7b 	bl	80046b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	460a      	mov	r2, r1
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f000 fe38 	bl	8004c40 <USBD_LL_PrepareReceive>
 8003fd0:	e7bf      	b.n	8003f52 <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	4798      	blx	r3
 8003fd6:	e7da      	b.n	8003f8e <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8003fde:	4628      	mov	r0, r5
 8003fe0:	e7bc      	b.n	8003f5c <USBD_LL_DataInStage+0x2a>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003fe2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	b133      	cbz	r3, 8003ff8 <USBD_LL_DataInStage+0xc6>
 8003fea:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003fee:	2a03      	cmp	r2, #3
 8003ff0:	d104      	bne.n	8003ffc <USBD_LL_DataInStage+0xca>
    pdev->pClass->DataIn(pdev, epnum);
 8003ff2:	4798      	blx	r3
  return USBD_OK;
 8003ff4:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003ff6:	e7b1      	b.n	8003f5c <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 8003ff8:	2002      	movs	r0, #2
 8003ffa:	e7af      	b.n	8003f5c <USBD_LL_DataInStage+0x2a>
 8003ffc:	2002      	movs	r0, #2
 8003ffe:	e7ad      	b.n	8003f5c <USBD_LL_DataInStage+0x2a>

08004000 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004000:	b570      	push	{r4, r5, r6, lr}
 8004002:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004004:	2340      	movs	r3, #64	; 0x40
 8004006:	2200      	movs	r2, #0
 8004008:	4611      	mov	r1, r2
 800400a:	f000 fdcf 	bl	8004bac <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800400e:	2501      	movs	r5, #1
 8004010:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004014:	2640      	movs	r6, #64	; 0x40
 8004016:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800401a:	4633      	mov	r3, r6
 800401c:	2200      	movs	r2, #0
 800401e:	2180      	movs	r1, #128	; 0x80
 8004020:	4620      	mov	r0, r4
 8004022:	f000 fdc3 	bl	8004bac <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004026:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004028:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800402a:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800402e:	2300      	movs	r3, #0
 8004030:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004034:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004036:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 800403a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800403e:	b12b      	cbz	r3, 800404c <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004040:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2100      	movs	r1, #0
 8004048:	4620      	mov	r0, r4
 800404a:	4798      	blx	r3
  }

  return USBD_OK;
}
 800404c:	2000      	movs	r0, #0
 800404e:	bd70      	pop	{r4, r5, r6, pc}

08004050 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004050:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004052:	2000      	movs	r0, #0
 8004054:	4770      	bx	lr

08004056 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004056:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800405a:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800405e:	2304      	movs	r3, #4
 8004060:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004064:	2000      	movs	r0, #0
 8004066:	4770      	bx	lr

08004068 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004068:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800406c:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800406e:	bf04      	itt	eq
 8004070:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004074:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004078:	2000      	movs	r0, #0
 800407a:	4770      	bx	lr

0800407c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800407c:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800407e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004082:	2b03      	cmp	r3, #3
 8004084:	d001      	beq.n	800408a <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8004086:	2000      	movs	r0, #0
 8004088:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800408a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f8      	beq.n	8004086 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8004094:	4798      	blx	r3
 8004096:	e7f6      	b.n	8004086 <USBD_LL_SOF+0xa>

08004098 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 8004098:	780b      	ldrb	r3, [r1, #0]
 800409a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800409c:	784b      	ldrb	r3, [r1, #1]
 800409e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80040a0:	78ca      	ldrb	r2, [r1, #3]
 80040a2:	788b      	ldrb	r3, [r1, #2]
 80040a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80040a8:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80040aa:	794a      	ldrb	r2, [r1, #5]
 80040ac:	790b      	ldrb	r3, [r1, #4]
 80040ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80040b2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80040b4:	79ca      	ldrb	r2, [r1, #7]
 80040b6:	798b      	ldrb	r3, [r1, #6]
 80040b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80040bc:	80c3      	strh	r3, [r0, #6]

}
 80040be:	4770      	bx	lr

080040c0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80040c0:	b510      	push	{r4, lr}
 80040c2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80040c4:	2180      	movs	r1, #128	; 0x80
 80040c6:	f000 fd84 	bl	8004bd2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80040ca:	2100      	movs	r1, #0
 80040cc:	4620      	mov	r0, r4
 80040ce:	f000 fd80 	bl	8004bd2 <USBD_LL_StallEP>
}
 80040d2:	bd10      	pop	{r4, pc}

080040d4 <USBD_StdDevReq>:
{
 80040d4:	b530      	push	{r4, r5, lr}
 80040d6:	b083      	sub	sp, #12
 80040d8:	4605      	mov	r5, r0
 80040da:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040dc:	780b      	ldrb	r3, [r1, #0]
 80040de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d005      	beq.n	80040f2 <USBD_StdDevReq+0x1e>
 80040e6:	2b40      	cmp	r3, #64	; 0x40
 80040e8:	d003      	beq.n	80040f2 <USBD_StdDevReq+0x1e>
 80040ea:	b15b      	cbz	r3, 8004104 <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 80040ec:	f7ff ffe8 	bl	80040c0 <USBD_CtlError>
      break;
 80040f0:	e005      	b.n	80040fe <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 80040f2:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4621      	mov	r1, r4
 80040fa:	4628      	mov	r0, r5
 80040fc:	4798      	blx	r3
}
 80040fe:	2000      	movs	r0, #0
 8004100:	b003      	add	sp, #12
 8004102:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8004104:	784b      	ldrb	r3, [r1, #1]
 8004106:	2b09      	cmp	r3, #9
 8004108:	f200 8198 	bhi.w	800443c <USBD_StdDevReq+0x368>
 800410c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004110:	0184015f 	.word	0x0184015f
 8004114:	017b0196 	.word	0x017b0196
 8004118:	00c90196 	.word	0x00c90196
 800411c:	0196000a 	.word	0x0196000a
 8004120:	00ee0140 	.word	0x00ee0140
  uint16_t len = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800412a:	884a      	ldrh	r2, [r1, #2]
 800412c:	0a13      	lsrs	r3, r2, #8
 800412e:	3b01      	subs	r3, #1
 8004130:	2b06      	cmp	r3, #6
 8004132:	f200 80a4 	bhi.w	800427e <USBD_StdDevReq+0x1aa>
 8004136:	e8df f003 	tbb	[pc, r3]
 800413a:	1804      	.short	0x1804
 800413c:	86a2a22c 	.word	0x86a2a22c
 8004140:	93          	.byte	0x93
 8004141:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004142:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f10d 0106 	add.w	r1, sp, #6
 800414c:	7c00      	ldrb	r0, [r0, #16]
 800414e:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8004150:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004154:	2a00      	cmp	r2, #0
 8004156:	f000 809f 	beq.w	8004298 <USBD_StdDevReq+0x1c4>
 800415a:	88e3      	ldrh	r3, [r4, #6]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f040 8092 	bne.w	8004286 <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 8004162:	4628      	mov	r0, r5
 8004164:	f000 fac6 	bl	80046f4 <USBD_CtlSendStatus>
 8004168:	e7c9      	b.n	80040fe <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800416a:	7c03      	ldrb	r3, [r0, #16]
 800416c:	b943      	cbnz	r3, 8004180 <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800416e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	f10d 0006 	add.w	r0, sp, #6
 8004178:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800417a:	2302      	movs	r3, #2
 800417c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800417e:	e7e7      	b.n	8004150 <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004180:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	f10d 0006 	add.w	r0, sp, #6
 800418a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800418c:	2302      	movs	r3, #2
 800418e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004190:	e7de      	b.n	8004150 <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	2a05      	cmp	r2, #5
 8004196:	d852      	bhi.n	800423e <USBD_StdDevReq+0x16a>
 8004198:	e8df f002 	tbb	[pc, r2]
 800419c:	2a1d1003 	.word	0x2a1d1003
 80041a0:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80041a2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	b123      	cbz	r3, 80041b4 <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80041aa:	f10d 0106 	add.w	r1, sp, #6
 80041ae:	7c00      	ldrb	r0, [r0, #16]
 80041b0:	4798      	blx	r3
  if (err != 0U)
 80041b2:	e7cd      	b.n	8004150 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 80041b4:	4621      	mov	r1, r4
 80041b6:	f7ff ff83 	bl	80040c0 <USBD_CtlError>
  if (err != 0U)
 80041ba:	e7a0      	b.n	80040fe <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80041bc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	b123      	cbz	r3, 80041ce <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80041c4:	f10d 0106 	add.w	r1, sp, #6
 80041c8:	7c00      	ldrb	r0, [r0, #16]
 80041ca:	4798      	blx	r3
  if (err != 0U)
 80041cc:	e7c0      	b.n	8004150 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 80041ce:	4621      	mov	r1, r4
 80041d0:	f7ff ff76 	bl	80040c0 <USBD_CtlError>
  if (err != 0U)
 80041d4:	e793      	b.n	80040fe <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80041d6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	b123      	cbz	r3, 80041e8 <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80041de:	f10d 0106 	add.w	r1, sp, #6
 80041e2:	7c00      	ldrb	r0, [r0, #16]
 80041e4:	4798      	blx	r3
  if (err != 0U)
 80041e6:	e7b3      	b.n	8004150 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 80041e8:	4621      	mov	r1, r4
 80041ea:	f7ff ff69 	bl	80040c0 <USBD_CtlError>
  if (err != 0U)
 80041ee:	e786      	b.n	80040fe <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80041f0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	b123      	cbz	r3, 8004202 <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80041f8:	f10d 0106 	add.w	r1, sp, #6
 80041fc:	7c00      	ldrb	r0, [r0, #16]
 80041fe:	4798      	blx	r3
  if (err != 0U)
 8004200:	e7a6      	b.n	8004150 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004202:	4621      	mov	r1, r4
 8004204:	f7ff ff5c 	bl	80040c0 <USBD_CtlError>
  if (err != 0U)
 8004208:	e779      	b.n	80040fe <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800420a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	b123      	cbz	r3, 800421c <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004212:	f10d 0106 	add.w	r1, sp, #6
 8004216:	7c00      	ldrb	r0, [r0, #16]
 8004218:	4798      	blx	r3
  if (err != 0U)
 800421a:	e799      	b.n	8004150 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 800421c:	4621      	mov	r1, r4
 800421e:	f7ff ff4f 	bl	80040c0 <USBD_CtlError>
  if (err != 0U)
 8004222:	e76c      	b.n	80040fe <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004224:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	b123      	cbz	r3, 8004236 <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800422c:	f10d 0106 	add.w	r1, sp, #6
 8004230:	7c00      	ldrb	r0, [r0, #16]
 8004232:	4798      	blx	r3
  if (err != 0U)
 8004234:	e78c      	b.n	8004150 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004236:	4621      	mov	r1, r4
 8004238:	f7ff ff42 	bl	80040c0 <USBD_CtlError>
  if (err != 0U)
 800423c:	e75f      	b.n	80040fe <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 800423e:	4621      	mov	r1, r4
 8004240:	f7ff ff3e 	bl	80040c0 <USBD_CtlError>
  if (err != 0U)
 8004244:	e75b      	b.n	80040fe <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004246:	7c03      	ldrb	r3, [r0, #16]
 8004248:	b933      	cbnz	r3, 8004258 <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800424a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800424e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004250:	f10d 0006 	add.w	r0, sp, #6
 8004254:	4798      	blx	r3
  if (err != 0U)
 8004256:	e77b      	b.n	8004150 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8004258:	4621      	mov	r1, r4
 800425a:	f7ff ff31 	bl	80040c0 <USBD_CtlError>
  if (err != 0U)
 800425e:	e74e      	b.n	80040fe <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004260:	7c03      	ldrb	r3, [r0, #16]
 8004262:	b943      	cbnz	r3, 8004276 <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004264:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	f10d 0006 	add.w	r0, sp, #6
 800426e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004270:	2307      	movs	r3, #7
 8004272:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004274:	e76c      	b.n	8004150 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8004276:	4621      	mov	r1, r4
 8004278:	f7ff ff22 	bl	80040c0 <USBD_CtlError>
  if (err != 0U)
 800427c:	e73f      	b.n	80040fe <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 800427e:	4621      	mov	r1, r4
 8004280:	f7ff ff1e 	bl	80040c0 <USBD_CtlError>
    return;
 8004284:	e73b      	b.n	80040fe <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 8004286:	429a      	cmp	r2, r3
 8004288:	bf28      	it	cs
 800428a:	461a      	movcs	r2, r3
 800428c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004290:	4601      	mov	r1, r0
 8004292:	4628      	mov	r0, r5
 8004294:	f000 fa02 	bl	800469c <USBD_CtlSendData>
    if (req->wLength == 0U)
 8004298:	88e3      	ldrh	r3, [r4, #6]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f47f af2f 	bne.w	80040fe <USBD_StdDevReq+0x2a>
 80042a0:	e75f      	b.n	8004162 <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80042a2:	888b      	ldrh	r3, [r1, #4]
 80042a4:	b9eb      	cbnz	r3, 80042e2 <USBD_StdDevReq+0x20e>
 80042a6:	88cb      	ldrh	r3, [r1, #6]
 80042a8:	b9db      	cbnz	r3, 80042e2 <USBD_StdDevReq+0x20e>
 80042aa:	884b      	ldrh	r3, [r1, #2]
 80042ac:	2b7f      	cmp	r3, #127	; 0x7f
 80042ae:	d818      	bhi.n	80042e2 <USBD_StdDevReq+0x20e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042b0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80042b4:	2a03      	cmp	r2, #3
 80042b6:	d00d      	beq.n	80042d4 <USBD_StdDevReq+0x200>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80042b8:	b2dc      	uxtb	r4, r3
      pdev->dev_address = dev_addr;
 80042ba:	f880 429e 	strb.w	r4, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80042be:	4621      	mov	r1, r4
 80042c0:	f000 fcae 	bl	8004c20 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80042c4:	4628      	mov	r0, r5
 80042c6:	f000 fa15 	bl	80046f4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80042ca:	b134      	cbz	r4, 80042da <USBD_StdDevReq+0x206>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80042cc:	2302      	movs	r3, #2
 80042ce:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80042d2:	e714      	b.n	80040fe <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 80042d4:	f7ff fef4 	bl	80040c0 <USBD_CtlError>
 80042d8:	e711      	b.n	80040fe <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80042da:	2301      	movs	r3, #1
 80042dc:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 80042e0:	e70d      	b.n	80040fe <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 80042e2:	4621      	mov	r1, r4
 80042e4:	4628      	mov	r0, r5
 80042e6:	f7ff feeb 	bl	80040c0 <USBD_CtlError>
 80042ea:	e708      	b.n	80040fe <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 80042ec:	788b      	ldrb	r3, [r1, #2]
 80042ee:	4a55      	ldr	r2, [pc, #340]	; (8004444 <USBD_StdDevReq+0x370>)
 80042f0:	7013      	strb	r3, [r2, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d80d      	bhi.n	8004312 <USBD_StdDevReq+0x23e>
    switch (pdev->dev_state)
 80042f6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80042fa:	2a02      	cmp	r2, #2
 80042fc:	d00c      	beq.n	8004318 <USBD_StdDevReq+0x244>
 80042fe:	2a03      	cmp	r2, #3
 8004300:	d020      	beq.n	8004344 <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 8004302:	f7ff fedd 	bl	80040c0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004306:	4b4f      	ldr	r3, [pc, #316]	; (8004444 <USBD_StdDevReq+0x370>)
 8004308:	7819      	ldrb	r1, [r3, #0]
 800430a:	4628      	mov	r0, r5
 800430c:	f7ff fd99 	bl	8003e42 <USBD_ClrClassConfig>
        break;
 8004310:	e6f5      	b.n	80040fe <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8004312:	f7ff fed5 	bl	80040c0 <USBD_CtlError>
 8004316:	e6f2      	b.n	80040fe <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8004318:	b18b      	cbz	r3, 800433e <USBD_StdDevReq+0x26a>
          pdev->dev_config = cfgidx;
 800431a:	2101      	movs	r1, #1
 800431c:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800431e:	2303      	movs	r3, #3
 8004320:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004324:	f7ff fd81 	bl	8003e2a <USBD_SetClassConfig>
 8004328:	2802      	cmp	r0, #2
 800432a:	d003      	beq.n	8004334 <USBD_StdDevReq+0x260>
          USBD_CtlSendStatus(pdev);
 800432c:	4628      	mov	r0, r5
 800432e:	f000 f9e1 	bl	80046f4 <USBD_CtlSendStatus>
 8004332:	e6e4      	b.n	80040fe <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8004334:	4621      	mov	r1, r4
 8004336:	4628      	mov	r0, r5
 8004338:	f7ff fec2 	bl	80040c0 <USBD_CtlError>
            return;
 800433c:	e6df      	b.n	80040fe <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 800433e:	f000 f9d9 	bl	80046f4 <USBD_CtlSendStatus>
 8004342:	e6dc      	b.n	80040fe <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 8004344:	b18b      	cbz	r3, 800436a <USBD_StdDevReq+0x296>
        else if (cfgidx != pdev->dev_config)
 8004346:	6841      	ldr	r1, [r0, #4]
 8004348:	2901      	cmp	r1, #1
 800434a:	d01e      	beq.n	800438a <USBD_StdDevReq+0x2b6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800434c:	b2c9      	uxtb	r1, r1
 800434e:	f7ff fd78 	bl	8003e42 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004352:	4b3c      	ldr	r3, [pc, #240]	; (8004444 <USBD_StdDevReq+0x370>)
 8004354:	7819      	ldrb	r1, [r3, #0]
 8004356:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004358:	4628      	mov	r0, r5
 800435a:	f7ff fd66 	bl	8003e2a <USBD_SetClassConfig>
 800435e:	2802      	cmp	r0, #2
 8004360:	d00e      	beq.n	8004380 <USBD_StdDevReq+0x2ac>
          USBD_CtlSendStatus(pdev);
 8004362:	4628      	mov	r0, r5
 8004364:	f000 f9c6 	bl	80046f4 <USBD_CtlSendStatus>
 8004368:	e6c9      	b.n	80040fe <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800436a:	2302      	movs	r3, #2
 800436c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004370:	2100      	movs	r1, #0
 8004372:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004374:	f7ff fd65 	bl	8003e42 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004378:	4628      	mov	r0, r5
 800437a:	f000 f9bb 	bl	80046f4 <USBD_CtlSendStatus>
 800437e:	e6be      	b.n	80040fe <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8004380:	4621      	mov	r1, r4
 8004382:	4628      	mov	r0, r5
 8004384:	f7ff fe9c 	bl	80040c0 <USBD_CtlError>
            return;
 8004388:	e6b9      	b.n	80040fe <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 800438a:	f000 f9b3 	bl	80046f4 <USBD_CtlSendStatus>
 800438e:	e6b6      	b.n	80040fe <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 8004390:	88cb      	ldrh	r3, [r1, #6]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d10a      	bne.n	80043ac <USBD_StdDevReq+0x2d8>
    switch (pdev->dev_state)
 8004396:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800439a:	2b02      	cmp	r3, #2
 800439c:	d909      	bls.n	80043b2 <USBD_StdDevReq+0x2de>
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d108      	bne.n	80043b4 <USBD_StdDevReq+0x2e0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80043a2:	2201      	movs	r2, #1
 80043a4:	1d01      	adds	r1, r0, #4
 80043a6:	f000 f979 	bl	800469c <USBD_CtlSendData>
        break;
 80043aa:	e6a8      	b.n	80040fe <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 80043ac:	f7ff fe88 	bl	80040c0 <USBD_CtlError>
 80043b0:	e6a5      	b.n	80040fe <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 80043b2:	b923      	cbnz	r3, 80043be <USBD_StdDevReq+0x2ea>
        USBD_CtlError(pdev, req);
 80043b4:	4621      	mov	r1, r4
 80043b6:	4628      	mov	r0, r5
 80043b8:	f7ff fe82 	bl	80040c0 <USBD_CtlError>
        break;
 80043bc:	e69f      	b.n	80040fe <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 80043be:	4601      	mov	r1, r0
 80043c0:	2300      	movs	r3, #0
 80043c2:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80043c6:	2201      	movs	r2, #1
 80043c8:	f000 f968 	bl	800469c <USBD_CtlSendData>
        break;
 80043cc:	e697      	b.n	80040fe <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80043ce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80043d2:	3b01      	subs	r3, #1
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d813      	bhi.n	8004400 <USBD_StdDevReq+0x32c>
      if (req->wLength != 0x2U)
 80043d8:	88cb      	ldrh	r3, [r1, #6]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d10d      	bne.n	80043fa <USBD_StdDevReq+0x326>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80043de:	2301      	movs	r3, #1
 80043e0:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80043e2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80043e6:	b10b      	cbz	r3, 80043ec <USBD_StdDevReq+0x318>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80043e8:	2303      	movs	r3, #3
 80043ea:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80043ec:	2202      	movs	r2, #2
 80043ee:	f105 010c 	add.w	r1, r5, #12
 80043f2:	4628      	mov	r0, r5
 80043f4:	f000 f952 	bl	800469c <USBD_CtlSendData>
      break;
 80043f8:	e681      	b.n	80040fe <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 80043fa:	f7ff fe61 	bl	80040c0 <USBD_CtlError>
        break;
 80043fe:	e67e      	b.n	80040fe <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8004400:	f7ff fe5e 	bl	80040c0 <USBD_CtlError>
      break;
 8004404:	e67b      	b.n	80040fe <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004406:	884b      	ldrh	r3, [r1, #2]
 8004408:	2b01      	cmp	r3, #1
 800440a:	f47f ae78 	bne.w	80040fe <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 800440e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004412:	f000 f96f 	bl	80046f4 <USBD_CtlSendStatus>
 8004416:	e672      	b.n	80040fe <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8004418:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800441c:	3b01      	subs	r3, #1
 800441e:	2b02      	cmp	r3, #2
 8004420:	d809      	bhi.n	8004436 <USBD_StdDevReq+0x362>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004422:	884b      	ldrh	r3, [r1, #2]
 8004424:	2b01      	cmp	r3, #1
 8004426:	f47f ae6a 	bne.w	80040fe <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004430:	f000 f960 	bl	80046f4 <USBD_CtlSendStatus>
 8004434:	e663      	b.n	80040fe <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8004436:	f7ff fe43 	bl	80040c0 <USBD_CtlError>
      break;
 800443a:	e660      	b.n	80040fe <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 800443c:	f7ff fe40 	bl	80040c0 <USBD_CtlError>
          break;
 8004440:	e65d      	b.n	80040fe <USBD_StdDevReq+0x2a>
 8004442:	bf00      	nop
 8004444:	2000022c 	.word	0x2000022c

08004448 <USBD_StdItfReq>:
{
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	4605      	mov	r5, r0
 800444c:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800444e:	780b      	ldrb	r3, [r1, #0]
 8004450:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004454:	2a40      	cmp	r2, #64	; 0x40
 8004456:	d006      	beq.n	8004466 <USBD_StdItfReq+0x1e>
 8004458:	f013 0f40 	tst.w	r3, #64	; 0x40
 800445c:	d003      	beq.n	8004466 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 800445e:	f7ff fe2f 	bl	80040c0 <USBD_CtlError>
}
 8004462:	2000      	movs	r0, #0
 8004464:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8004466:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800446a:	3b01      	subs	r3, #1
 800446c:	2b02      	cmp	r3, #2
 800446e:	d816      	bhi.n	800449e <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004470:	7923      	ldrb	r3, [r4, #4]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d80e      	bhi.n	8004494 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004476:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	4621      	mov	r1, r4
 800447e:	4628      	mov	r0, r5
 8004480:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004482:	88e3      	ldrh	r3, [r4, #6]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1ec      	bne.n	8004462 <USBD_StdItfReq+0x1a>
 8004488:	2800      	cmp	r0, #0
 800448a:	d1ea      	bne.n	8004462 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 800448c:	4628      	mov	r0, r5
 800448e:	f000 f931 	bl	80046f4 <USBD_CtlSendStatus>
 8004492:	e7e6      	b.n	8004462 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8004494:	4621      	mov	r1, r4
 8004496:	4628      	mov	r0, r5
 8004498:	f7ff fe12 	bl	80040c0 <USBD_CtlError>
 800449c:	e7e1      	b.n	8004462 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 800449e:	4621      	mov	r1, r4
 80044a0:	4628      	mov	r0, r5
 80044a2:	f7ff fe0d 	bl	80040c0 <USBD_CtlError>
          break;
 80044a6:	e7dc      	b.n	8004462 <USBD_StdItfReq+0x1a>

080044a8 <USBD_StdEPReq>:
{
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044ac:	780b      	ldrb	r3, [r1, #0]
 80044ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d005      	beq.n	80044c2 <USBD_StdEPReq+0x1a>
 80044b6:	2b40      	cmp	r3, #64	; 0x40
 80044b8:	d003      	beq.n	80044c2 <USBD_StdEPReq+0x1a>
 80044ba:	b14b      	cbz	r3, 80044d0 <USBD_StdEPReq+0x28>
      USBD_CtlError(pdev, req);
 80044bc:	f7ff fe00 	bl	80040c0 <USBD_CtlError>
      break;
 80044c0:	e004      	b.n	80044cc <USBD_StdEPReq+0x24>
      pdev->pClass->Setup(pdev, req);
 80044c2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4620      	mov	r0, r4
 80044ca:	4798      	blx	r3
}
 80044cc:	2000      	movs	r0, #0
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 80044d0:	888a      	ldrh	r2, [r1, #4]
 80044d2:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 80044d4:	784b      	ldrb	r3, [r1, #1]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d031      	beq.n	800453e <USBD_StdEPReq+0x96>
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d005      	beq.n	80044ea <USBD_StdEPReq+0x42>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d056      	beq.n	8004590 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 80044e2:	4620      	mov	r0, r4
 80044e4:	f7ff fdec 	bl	80040c0 <USBD_CtlError>
          break;
 80044e8:	e7f0      	b.n	80044cc <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 80044ea:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d005      	beq.n	80044fe <USBD_StdEPReq+0x56>
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d013      	beq.n	800451e <USBD_StdEPReq+0x76>
              USBD_CtlError(pdev, req);
 80044f6:	4620      	mov	r0, r4
 80044f8:	f7ff fde2 	bl	80040c0 <USBD_CtlError>
              break;
 80044fc:	e7e6      	b.n	80044cc <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80044fe:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004502:	d008      	beq.n	8004516 <USBD_StdEPReq+0x6e>
                USBD_LL_StallEP(pdev, ep_addr);
 8004504:	4601      	mov	r1, r0
 8004506:	4620      	mov	r0, r4
 8004508:	f000 fb63 	bl	8004bd2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800450c:	2180      	movs	r1, #128	; 0x80
 800450e:	4620      	mov	r0, r4
 8004510:	f000 fb5f 	bl	8004bd2 <USBD_LL_StallEP>
 8004514:	e7da      	b.n	80044cc <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 8004516:	4620      	mov	r0, r4
 8004518:	f7ff fdd2 	bl	80040c0 <USBD_CtlError>
 800451c:	e7d6      	b.n	80044cc <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800451e:	884b      	ldrh	r3, [r1, #2]
 8004520:	b923      	cbnz	r3, 800452c <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 8004522:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004526:	d001      	beq.n	800452c <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004528:	88cb      	ldrh	r3, [r1, #6]
 800452a:	b11b      	cbz	r3, 8004534 <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 800452c:	4620      	mov	r0, r4
 800452e:	f000 f8e1 	bl	80046f4 <USBD_CtlSendStatus>
              break;
 8004532:	e7cb      	b.n	80044cc <USBD_StdEPReq+0x24>
                  USBD_LL_StallEP(pdev, ep_addr);
 8004534:	4601      	mov	r1, r0
 8004536:	4620      	mov	r0, r4
 8004538:	f000 fb4b 	bl	8004bd2 <USBD_LL_StallEP>
 800453c:	e7f6      	b.n	800452c <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 800453e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004542:	2b02      	cmp	r3, #2
 8004544:	d005      	beq.n	8004552 <USBD_StdEPReq+0xaa>
 8004546:	2b03      	cmp	r3, #3
 8004548:	d013      	beq.n	8004572 <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 800454a:	4620      	mov	r0, r4
 800454c:	f7ff fdb8 	bl	80040c0 <USBD_CtlError>
              break;
 8004550:	e7bc      	b.n	80044cc <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004552:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8004556:	d008      	beq.n	800456a <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 8004558:	4601      	mov	r1, r0
 800455a:	4620      	mov	r0, r4
 800455c:	f000 fb39 	bl	8004bd2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004560:	2180      	movs	r1, #128	; 0x80
 8004562:	4620      	mov	r0, r4
 8004564:	f000 fb35 	bl	8004bd2 <USBD_LL_StallEP>
 8004568:	e7b0      	b.n	80044cc <USBD_StdEPReq+0x24>
                USBD_CtlError(pdev, req);
 800456a:	4620      	mov	r0, r4
 800456c:	f7ff fda8 	bl	80040c0 <USBD_CtlError>
 8004570:	e7ac      	b.n	80044cc <USBD_StdEPReq+0x24>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004572:	884b      	ldrh	r3, [r1, #2]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1a9      	bne.n	80044cc <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004578:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800457c:	d103      	bne.n	8004586 <USBD_StdEPReq+0xde>
                USBD_CtlSendStatus(pdev);
 800457e:	4620      	mov	r0, r4
 8004580:	f000 f8b8 	bl	80046f4 <USBD_CtlSendStatus>
 8004584:	e7a2      	b.n	80044cc <USBD_StdEPReq+0x24>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004586:	4601      	mov	r1, r0
 8004588:	4620      	mov	r0, r4
 800458a:	f000 fb2a 	bl	8004be2 <USBD_LL_ClearStallEP>
 800458e:	e7f6      	b.n	800457e <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 8004590:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004594:	2b02      	cmp	r3, #2
 8004596:	d005      	beq.n	80045a4 <USBD_StdEPReq+0xfc>
 8004598:	2b03      	cmp	r3, #3
 800459a:	d018      	beq.n	80045ce <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 800459c:	4620      	mov	r0, r4
 800459e:	f7ff fd8f 	bl	80040c0 <USBD_CtlError>
              break;
 80045a2:	e793      	b.n	80044cc <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80045a4:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80045a8:	d003      	beq.n	80045b2 <USBD_StdEPReq+0x10a>
                USBD_CtlError(pdev, req);
 80045aa:	4620      	mov	r0, r4
 80045ac:	f7ff fd88 	bl	80040c0 <USBD_CtlError>
                break;
 80045b0:	e78c      	b.n	80044cc <USBD_StdEPReq+0x24>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80045b2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80045b6:	bf14      	ite	ne
 80045b8:	f104 0114 	addne.w	r1, r4, #20
 80045bc:	f504 71aa 	addeq.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80045c4:	2202      	movs	r2, #2
 80045c6:	4620      	mov	r0, r4
 80045c8:	f000 f868 	bl	800469c <USBD_CtlSendData>
              break;
 80045cc:	e77e      	b.n	80044cc <USBD_StdEPReq+0x24>
              if ((ep_addr & 0x80U) == 0x80U)
 80045ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 80045d2:	d11b      	bne.n	800460c <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80045d4:	f000 030f 	and.w	r3, r0, #15
 80045d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80045e0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80045e4:	b333      	cbz	r3, 8004634 <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80045e6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80045ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045ee:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 80045f2:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80045f6:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80045fa:	d11f      	bne.n	800463c <USBD_StdEPReq+0x194>
                pep->status = 0x0000U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004600:	2202      	movs	r2, #2
 8004602:	4629      	mov	r1, r5
 8004604:	4620      	mov	r0, r4
 8004606:	f000 f849 	bl	800469c <USBD_CtlSendData>
              break;
 800460a:	e75f      	b.n	80044cc <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800460c:	f000 030f 	and.w	r3, r0, #15
 8004610:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004614:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	b13b      	cbz	r3, 800462c <USBD_StdEPReq+0x184>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800461c:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8004620:	3501      	adds	r5, #1
 8004622:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004626:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800462a:	e7e4      	b.n	80045f6 <USBD_StdEPReq+0x14e>
                  USBD_CtlError(pdev, req);
 800462c:	4620      	mov	r0, r4
 800462e:	f7ff fd47 	bl	80040c0 <USBD_CtlError>
                  break;
 8004632:	e74b      	b.n	80044cc <USBD_StdEPReq+0x24>
                  USBD_CtlError(pdev, req);
 8004634:	4620      	mov	r0, r4
 8004636:	f7ff fd43 	bl	80040c0 <USBD_CtlError>
                  break;
 800463a:	e747      	b.n	80044cc <USBD_StdEPReq+0x24>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800463c:	4601      	mov	r1, r0
 800463e:	4620      	mov	r0, r4
 8004640:	f000 fad7 	bl	8004bf2 <USBD_LL_IsStallEP>
 8004644:	b110      	cbz	r0, 800464c <USBD_StdEPReq+0x1a4>
                pep->status = 0x0001U;
 8004646:	2301      	movs	r3, #1
 8004648:	602b      	str	r3, [r5, #0]
 800464a:	e7d9      	b.n	8004600 <USBD_StdEPReq+0x158>
                pep->status = 0x0000U;
 800464c:	2300      	movs	r3, #0
 800464e:	602b      	str	r3, [r5, #0]
 8004650:	e7d6      	b.n	8004600 <USBD_StdEPReq+0x158>

08004652 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8004652:	b310      	cbz	r0, 800469a <USBD_GetString+0x48>
{
 8004654:	b510      	push	{r4, lr}
 8004656:	4684      	mov	ip, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8004658:	7803      	ldrb	r3, [r0, #0]
 800465a:	b143      	cbz	r3, 800466e <USBD_GetString+0x1c>
 800465c:	f1c0 0e01 	rsb	lr, r0, #1
  {
    len++;
 8004660:	eb00 030e 	add.w	r3, r0, lr
 8004664:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 8004666:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800466a:	2c00      	cmp	r4, #0
 800466c:	d1f8      	bne.n	8004660 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	3302      	adds	r3, #2
 8004672:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004674:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004676:	2303      	movs	r3, #3
 8004678:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 800467a:	f89c 0000 	ldrb.w	r0, [ip]
 800467e:	b158      	cbz	r0, 8004698 <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004680:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8004682:	2400      	movs	r4, #0
      unicode[idx++] = *desc++;
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	54c8      	strb	r0, [r1, r3]
      unicode[idx++] =  0U;
 800468a:	3302      	adds	r3, #2
 800468c:	b2db      	uxtb	r3, r3
 800468e:	548c      	strb	r4, [r1, r2]
    while (*desc != '\0')
 8004690:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8004694:	2800      	cmp	r0, #0
 8004696:	d1f5      	bne.n	8004684 <USBD_GetString+0x32>
}
 8004698:	bd10      	pop	{r4, pc}
 800469a:	4770      	bx	lr

0800469c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800469c:	b508      	push	{r3, lr}
 800469e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80046a0:	2202      	movs	r2, #2
 80046a2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80046a6:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 80046a8:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80046aa:	460a      	mov	r2, r1
 80046ac:	2100      	movs	r1, #0
 80046ae:	f000 fabf 	bl	8004c30 <USBD_LL_Transmit>

  return USBD_OK;
}
 80046b2:	2000      	movs	r0, #0
 80046b4:	bd08      	pop	{r3, pc}

080046b6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80046b6:	b508      	push	{r3, lr}
 80046b8:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80046ba:	460a      	mov	r2, r1
 80046bc:	2100      	movs	r1, #0
 80046be:	f000 fab7 	bl	8004c30 <USBD_LL_Transmit>

  return USBD_OK;
}
 80046c2:	2000      	movs	r0, #0
 80046c4:	bd08      	pop	{r3, pc}

080046c6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80046c6:	b508      	push	{r3, lr}
 80046c8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80046ca:	2203      	movs	r2, #3
 80046cc:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80046d0:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80046d4:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80046d8:	460a      	mov	r2, r1
 80046da:	2100      	movs	r1, #0
 80046dc:	f000 fab0 	bl	8004c40 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80046e0:	2000      	movs	r0, #0
 80046e2:	bd08      	pop	{r3, pc}

080046e4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80046e4:	b508      	push	{r3, lr}
 80046e6:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80046e8:	460a      	mov	r2, r1
 80046ea:	2100      	movs	r1, #0
 80046ec:	f000 faa8 	bl	8004c40 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80046f0:	2000      	movs	r0, #0
 80046f2:	bd08      	pop	{r3, pc}

080046f4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80046f4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80046f6:	2304      	movs	r3, #4
 80046f8:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80046fc:	2300      	movs	r3, #0
 80046fe:	461a      	mov	r2, r3
 8004700:	4619      	mov	r1, r3
 8004702:	f000 fa95 	bl	8004c30 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004706:	2000      	movs	r0, #0
 8004708:	bd08      	pop	{r3, pc}

0800470a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800470a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800470c:	2305      	movs	r3, #5
 800470e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004712:	2300      	movs	r3, #0
 8004714:	461a      	mov	r2, r3
 8004716:	4619      	mov	r1, r3
 8004718:	f000 fa92 	bl	8004c40 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800471c:	2000      	movs	r0, #0
 800471e:	bd08      	pop	{r3, pc}

08004720 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004720:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004722:	2200      	movs	r2, #0
 8004724:	490f      	ldr	r1, [pc, #60]	; (8004764 <MX_USB_DEVICE_Init+0x44>)
 8004726:	4810      	ldr	r0, [pc, #64]	; (8004768 <MX_USB_DEVICE_Init+0x48>)
 8004728:	f7ff fb5c 	bl	8003de4 <USBD_Init>
 800472c:	b970      	cbnz	r0, 800474c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800472e:	490f      	ldr	r1, [pc, #60]	; (800476c <MX_USB_DEVICE_Init+0x4c>)
 8004730:	480d      	ldr	r0, [pc, #52]	; (8004768 <MX_USB_DEVICE_Init+0x48>)
 8004732:	f7ff fb6e 	bl	8003e12 <USBD_RegisterClass>
 8004736:	b960      	cbnz	r0, 8004752 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004738:	490d      	ldr	r1, [pc, #52]	; (8004770 <MX_USB_DEVICE_Init+0x50>)
 800473a:	480b      	ldr	r0, [pc, #44]	; (8004768 <MX_USB_DEVICE_Init+0x48>)
 800473c:	f7ff fb0a 	bl	8003d54 <USBD_CDC_RegisterInterface>
 8004740:	b950      	cbnz	r0, 8004758 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004742:	4809      	ldr	r0, [pc, #36]	; (8004768 <MX_USB_DEVICE_Init+0x48>)
 8004744:	f7ff fb6c 	bl	8003e20 <USBD_Start>
 8004748:	b948      	cbnz	r0, 800475e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800474a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800474c:	f7fb fe22 	bl	8000394 <Error_Handler>
 8004750:	e7ed      	b.n	800472e <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8004752:	f7fb fe1f 	bl	8000394 <Error_Handler>
 8004756:	e7ef      	b.n	8004738 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8004758:	f7fb fe1c 	bl	8000394 <Error_Handler>
 800475c:	e7f1      	b.n	8004742 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800475e:	f7fb fe19 	bl	8000394 <Error_Handler>
}
 8004762:	e7f2      	b.n	800474a <MX_USB_DEVICE_Init+0x2a>
 8004764:	20000178 	.word	0x20000178
 8004768:	20000230 	.word	0x20000230
 800476c:	2000004c 	.word	0x2000004c
 8004770:	2000015c 	.word	0x2000015c

08004774 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004774:	2000      	movs	r0, #0
 8004776:	4770      	bx	lr

08004778 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800477c:	4607      	mov	r7, r0
 800477e:	4688      	mov	r8, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004780:	4c25      	ldr	r4, [pc, #148]	; (8004818 <CDC_Receive_FS+0xa0>)
 8004782:	4601      	mov	r1, r0
 8004784:	4620      	mov	r0, r4
 8004786:	f7ff faf4 	bl	8003d72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800478a:	4620      	mov	r0, r4
 800478c:	f7ff fb11 	bl	8003db2 <USBD_CDC_ReceivePacket>
  //COBS decode
  for(uint32_t i=0;i<*Len;i++)
 8004790:	f8d8 3000 	ldr.w	r3, [r8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d03b      	beq.n	8004810 <CDC_Receive_FS+0x98>
 8004798:	1e7c      	subs	r4, r7, #1
  {
	zero_count--;
 800479a:	4d20      	ldr	r5, [pc, #128]	; (800481c <CDC_Receive_FS+0xa4>)
        //reset
        zero_count=0;
      }
      data_index=0;
    }else{
      if(is_first==1){
 800479c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8004828 <CDC_Receive_FS+0xb0>
    	DecodedData[data_index]=0x00;
        zero_count=Buf[i];
      }else{
    	DecodedData[data_index]=Buf[i];
      }
      data_index++;
 80047a0:	4e1f      	ldr	r6, [pc, #124]	; (8004820 <CDC_Receive_FS+0xa8>)
 80047a2:	e00d      	b.n	80047c0 <CDC_Receive_FS+0x48>
    	usb_process(DecodedData,data_index);
 80047a4:	7831      	ldrb	r1, [r6, #0]
 80047a6:	481f      	ldr	r0, [pc, #124]	; (8004824 <CDC_Receive_FS+0xac>)
 80047a8:	f7fb fda2 	bl	80002f0 <usb_process>
      data_index=0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	7033      	strb	r3, [r6, #0]
  for(uint32_t i=0;i<*Len;i++)
 80047b0:	f10a 0a02 	add.w	sl, sl, #2
 80047b4:	ebaa 0a07 	sub.w	sl, sl, r7
 80047b8:	f8d8 3000 	ldr.w	r3, [r8]
 80047bc:	4553      	cmp	r3, sl
 80047be:	d927      	bls.n	8004810 <CDC_Receive_FS+0x98>
	zero_count--;
 80047c0:	782b      	ldrb	r3, [r5, #0]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	702b      	strb	r3, [r5, #0]
    if(Buf[i]=='\0'){
 80047c8:	46a2      	mov	sl, r4
 80047ca:	3401      	adds	r4, #1
 80047cc:	7822      	ldrb	r2, [r4, #0]
 80047ce:	b93a      	cbnz	r2, 80047e0 <CDC_Receive_FS+0x68>
      is_first = 1;
 80047d0:	2201      	movs	r2, #1
 80047d2:	f889 2000 	strb.w	r2, [r9]
      if(zero_count==0){
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0e4      	beq.n	80047a4 <CDC_Receive_FS+0x2c>
        zero_count=0;
 80047da:	2300      	movs	r3, #0
 80047dc:	702b      	strb	r3, [r5, #0]
 80047de:	e7e5      	b.n	80047ac <CDC_Receive_FS+0x34>
      if(is_first==1){
 80047e0:	f899 0000 	ldrb.w	r0, [r9]
 80047e4:	2801      	cmp	r0, #1
 80047e6:	d00a      	beq.n	80047fe <CDC_Receive_FS+0x86>
      if(zero_count==0){
 80047e8:	b973      	cbnz	r3, 8004808 <CDC_Receive_FS+0x90>
    	DecodedData[data_index]=0x00;
 80047ea:	7833      	ldrb	r3, [r6, #0]
 80047ec:	4a0d      	ldr	r2, [pc, #52]	; (8004824 <CDC_Receive_FS+0xac>)
 80047ee:	2000      	movs	r0, #0
 80047f0:	54d0      	strb	r0, [r2, r3]
        zero_count=Buf[i];
 80047f2:	7823      	ldrb	r3, [r4, #0]
 80047f4:	702b      	strb	r3, [r5, #0]
      data_index++;
 80047f6:	7833      	ldrb	r3, [r6, #0]
 80047f8:	3301      	adds	r3, #1
 80047fa:	7033      	strb	r3, [r6, #0]
 80047fc:	e7d8      	b.n	80047b0 <CDC_Receive_FS+0x38>
    	  zero_count = Buf[i];
 80047fe:	702a      	strb	r2, [r5, #0]
    	  is_first = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	f889 3000 	strb.w	r3, [r9]
    	  continue;
 8004806:	e7d3      	b.n	80047b0 <CDC_Receive_FS+0x38>
    	DecodedData[data_index]=Buf[i];
 8004808:	7833      	ldrb	r3, [r6, #0]
 800480a:	4906      	ldr	r1, [pc, #24]	; (8004824 <CDC_Receive_FS+0xac>)
 800480c:	54ca      	strb	r2, [r1, r3]
 800480e:	e7f2      	b.n	80047f6 <CDC_Receive_FS+0x7e>
    }
  }
  
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004810:	2000      	movs	r0, #0
 8004812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004816:	bf00      	nop
 8004818:	20000230 	.word	0x20000230
 800481c:	20000174 	.word	0x20000174
 8004820:	20000d34 	.word	0x20000d34
 8004824:	200004f4 	.word	0x200004f4
 8004828:	20000d35 	.word	0x20000d35

0800482c <CDC_Control_FS>:
{
 800482c:	b510      	push	{r4, lr}
 800482e:	460c      	mov	r4, r1
  switch(cmd)
 8004830:	2820      	cmp	r0, #32
 8004832:	d003      	beq.n	800483c <CDC_Control_FS+0x10>
 8004834:	2821      	cmp	r0, #33	; 0x21
 8004836:	d019      	beq.n	800486c <CDC_Control_FS+0x40>
}
 8004838:	2000      	movs	r0, #0
 800483a:	bd10      	pop	{r4, pc}
    	HAL_GPIO_WritePin(GPIOB,LED_GREEN_Pin,GPIO_PIN_SET);
 800483c:	2201      	movs	r2, #1
 800483e:	2120      	movs	r1, #32
 8004840:	4815      	ldr	r0, [pc, #84]	; (8004898 <CDC_Control_FS+0x6c>)
 8004842:	f7fc fd37 	bl	80012b4 <HAL_GPIO_WritePin>
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8004846:	4a15      	ldr	r2, [pc, #84]	; (800489c <CDC_Control_FS+0x70>)
 8004848:	7861      	ldrb	r1, [r4, #1]
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800484a:	78a3      	ldrb	r3, [r4, #2]
 800484c:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800484e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004852:	7821      	ldrb	r1, [r4, #0]
 8004854:	430b      	orrs	r3, r1
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8004856:	78e1      	ldrb	r1, [r4, #3]
 8004858:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800485c:	6013      	str	r3, [r2, #0]
      linecoding.format     = pbuf[4];
 800485e:	7923      	ldrb	r3, [r4, #4]
 8004860:	7113      	strb	r3, [r2, #4]
      linecoding.paritytype = pbuf[5];
 8004862:	7963      	ldrb	r3, [r4, #5]
 8004864:	7153      	strb	r3, [r2, #5]
      linecoding.datatype   = pbuf[6];
 8004866:	79a3      	ldrb	r3, [r4, #6]
 8004868:	7193      	strb	r3, [r2, #6]
    break;
 800486a:	e7e5      	b.n	8004838 <CDC_Control_FS+0xc>
    	HAL_GPIO_WritePin(GPIOB,LED_GREEN_Pin,GPIO_PIN_SET);
 800486c:	2201      	movs	r2, #1
 800486e:	2120      	movs	r1, #32
 8004870:	4809      	ldr	r0, [pc, #36]	; (8004898 <CDC_Control_FS+0x6c>)
 8004872:	f7fc fd1f 	bl	80012b4 <HAL_GPIO_WritePin>
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 8004876:	4b09      	ldr	r3, [pc, #36]	; (800489c <CDC_Control_FS+0x70>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	7022      	strb	r2, [r4, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	0a12      	lsrs	r2, r2, #8
 8004880:	7062      	strb	r2, [r4, #1]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8004882:	885a      	ldrh	r2, [r3, #2]
 8004884:	70a2      	strb	r2, [r4, #2]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8004886:	78da      	ldrb	r2, [r3, #3]
 8004888:	70e2      	strb	r2, [r4, #3]
      pbuf[4] = linecoding.format;
 800488a:	791a      	ldrb	r2, [r3, #4]
 800488c:	7122      	strb	r2, [r4, #4]
      pbuf[5] = linecoding.paritytype;
 800488e:	795a      	ldrb	r2, [r3, #5]
 8004890:	7162      	strb	r2, [r4, #5]
      pbuf[6] = linecoding.datatype;
 8004892:	799b      	ldrb	r3, [r3, #6]
 8004894:	71a3      	strb	r3, [r4, #6]
    break;
 8004896:	e7cf      	b.n	8004838 <CDC_Control_FS+0xc>
 8004898:	48000400 	.word	0x48000400
 800489c:	2000016c 	.word	0x2000016c

080048a0 <CDC_Init_FS>:
{
 80048a0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80048a2:	4c06      	ldr	r4, [pc, #24]	; (80048bc <CDC_Init_FS+0x1c>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	4906      	ldr	r1, [pc, #24]	; (80048c0 <CDC_Init_FS+0x20>)
 80048a8:	4620      	mov	r0, r4
 80048aa:	f7ff fa5a 	bl	8003d62 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80048ae:	4905      	ldr	r1, [pc, #20]	; (80048c4 <CDC_Init_FS+0x24>)
 80048b0:	4620      	mov	r0, r4
 80048b2:	f7ff fa5e 	bl	8003d72 <USBD_CDC_SetRxBuffer>
}
 80048b6:	2000      	movs	r0, #0
 80048b8:	bd10      	pop	{r4, pc}
 80048ba:	bf00      	nop
 80048bc:	20000230 	.word	0x20000230
 80048c0:	20000934 	.word	0x20000934
 80048c4:	20000534 	.word	0x20000534

080048c8 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <CDC_Transmit_FS+0x28>)
 80048ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 80048ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048d2:	b10b      	cbz	r3, 80048d8 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 80048d4:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 80048d6:	4770      	bx	lr
{
 80048d8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80048da:	4c05      	ldr	r4, [pc, #20]	; (80048f0 <CDC_Transmit_FS+0x28>)
 80048dc:	460a      	mov	r2, r1
 80048de:	4601      	mov	r1, r0
 80048e0:	4620      	mov	r0, r4
 80048e2:	f7ff fa3e 	bl	8003d62 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80048e6:	4620      	mov	r0, r4
 80048e8:	f7ff fa49 	bl	8003d7e <USBD_CDC_TransmitPacket>
}
 80048ec:	bd10      	pop	{r4, pc}
 80048ee:	bf00      	nop
 80048f0:	20000230 	.word	0x20000230

080048f4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80048f4:	2312      	movs	r3, #18
 80048f6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80048f8:	4800      	ldr	r0, [pc, #0]	; (80048fc <USBD_FS_DeviceDescriptor+0x8>)
 80048fa:	4770      	bx	lr
 80048fc:	20000194 	.word	0x20000194

08004900 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004900:	2304      	movs	r3, #4
 8004902:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004904:	4800      	ldr	r0, [pc, #0]	; (8004908 <USBD_FS_LangIDStrDescriptor+0x8>)
 8004906:	4770      	bx	lr
 8004908:	200001a8 	.word	0x200001a8

0800490c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800490c:	b1b2      	cbz	r2, 800493c <IntToUnicode+0x30>
 800490e:	1c4b      	adds	r3, r1, #1
 8004910:	f102 3cff 	add.w	ip, r2, #4294967295
 8004914:	fa5f fc8c 	uxtb.w	ip, ip
 8004918:	3103      	adds	r1, #3
 800491a:	eb01 014c 	add.w	r1, r1, ip, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800491e:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 8004922:	0f02      	lsrs	r2, r0, #28
 8004924:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8004928:	bf34      	ite	cc
 800492a:	3230      	addcc	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800492c:	3237      	addcs	r2, #55	; 0x37
 800492e:	f803 2c01 	strb.w	r2, [r3, #-1]
    value = value << 4;
 8004932:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8004934:	f803 cb02 	strb.w	ip, [r3], #2
  for (idx = 0; idx < len; idx++)
 8004938:	428b      	cmp	r3, r1
 800493a:	d1f2      	bne.n	8004922 <IntToUnicode+0x16>
  }
}
 800493c:	4770      	bx	lr
	...

08004940 <USBD_FS_SerialStrDescriptor>:
{
 8004940:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004942:	231a      	movs	r3, #26
 8004944:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004946:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <USBD_FS_SerialStrDescriptor+0x38>)
 8004948:	f8d3 07ac 	ldr.w	r0, [r3, #1964]	; 0x7ac
  deviceserial0 += deviceserial2;
 800494c:	f8d3 37b4 	ldr.w	r3, [r3, #1972]	; 0x7b4
  if (deviceserial0 != 0)
 8004950:	18c0      	adds	r0, r0, r3
 8004952:	d101      	bne.n	8004958 <USBD_FS_SerialStrDescriptor+0x18>
}
 8004954:	4809      	ldr	r0, [pc, #36]	; (800497c <USBD_FS_SerialStrDescriptor+0x3c>)
 8004956:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004958:	4b07      	ldr	r3, [pc, #28]	; (8004978 <USBD_FS_SerialStrDescriptor+0x38>)
 800495a:	f8d3 57b0 	ldr.w	r5, [r3, #1968]	; 0x7b0
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800495e:	4c07      	ldr	r4, [pc, #28]	; (800497c <USBD_FS_SerialStrDescriptor+0x3c>)
 8004960:	2208      	movs	r2, #8
 8004962:	1ca1      	adds	r1, r4, #2
 8004964:	f7ff ffd2 	bl	800490c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004968:	2204      	movs	r2, #4
 800496a:	f104 0112 	add.w	r1, r4, #18
 800496e:	4628      	mov	r0, r5
 8004970:	f7ff ffcc 	bl	800490c <IntToUnicode>
 8004974:	e7ee      	b.n	8004954 <USBD_FS_SerialStrDescriptor+0x14>
 8004976:	bf00      	nop
 8004978:	1ffff000 	.word	0x1ffff000
 800497c:	200001ac 	.word	0x200001ac

08004980 <USBD_FS_ProductStrDescriptor>:
{
 8004980:	b508      	push	{r3, lr}
 8004982:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004984:	4902      	ldr	r1, [pc, #8]	; (8004990 <USBD_FS_ProductStrDescriptor+0x10>)
 8004986:	4803      	ldr	r0, [pc, #12]	; (8004994 <USBD_FS_ProductStrDescriptor+0x14>)
 8004988:	f7ff fe63 	bl	8004652 <USBD_GetString>
}
 800498c:	4800      	ldr	r0, [pc, #0]	; (8004990 <USBD_FS_ProductStrDescriptor+0x10>)
 800498e:	bd08      	pop	{r3, pc}
 8004990:	20000d38 	.word	0x20000d38
 8004994:	08004d30 	.word	0x08004d30

08004998 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004998:	b510      	push	{r4, lr}
 800499a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800499c:	4c03      	ldr	r4, [pc, #12]	; (80049ac <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800499e:	4621      	mov	r1, r4
 80049a0:	4803      	ldr	r0, [pc, #12]	; (80049b0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80049a2:	f7ff fe56 	bl	8004652 <USBD_GetString>
}
 80049a6:	4620      	mov	r0, r4
 80049a8:	bd10      	pop	{r4, pc}
 80049aa:	bf00      	nop
 80049ac:	20000d38 	.word	0x20000d38
 80049b0:	08004d48 	.word	0x08004d48

080049b4 <USBD_FS_ConfigStrDescriptor>:
{
 80049b4:	b508      	push	{r3, lr}
 80049b6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80049b8:	4902      	ldr	r1, [pc, #8]	; (80049c4 <USBD_FS_ConfigStrDescriptor+0x10>)
 80049ba:	4803      	ldr	r0, [pc, #12]	; (80049c8 <USBD_FS_ConfigStrDescriptor+0x14>)
 80049bc:	f7ff fe49 	bl	8004652 <USBD_GetString>
}
 80049c0:	4800      	ldr	r0, [pc, #0]	; (80049c4 <USBD_FS_ConfigStrDescriptor+0x10>)
 80049c2:	bd08      	pop	{r3, pc}
 80049c4:	20000d38 	.word	0x20000d38
 80049c8:	08004d4c 	.word	0x08004d4c

080049cc <USBD_FS_InterfaceStrDescriptor>:
{
 80049cc:	b508      	push	{r3, lr}
 80049ce:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80049d0:	4902      	ldr	r1, [pc, #8]	; (80049dc <USBD_FS_InterfaceStrDescriptor+0x10>)
 80049d2:	4803      	ldr	r0, [pc, #12]	; (80049e0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80049d4:	f7ff fe3d 	bl	8004652 <USBD_GetString>
}
 80049d8:	4800      	ldr	r0, [pc, #0]	; (80049dc <USBD_FS_InterfaceStrDescriptor+0x10>)
 80049da:	bd08      	pop	{r3, pc}
 80049dc:	20000d38 	.word	0x20000d38
 80049e0:	08004d58 	.word	0x08004d58

080049e4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80049e4:	b120      	cbz	r0, 80049f0 <USBD_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80049e6:	2802      	cmp	r0, #2
 80049e8:	bf14      	ite	ne
 80049ea:	2002      	movne	r0, #2
 80049ec:	2001      	moveq	r0, #1
 80049ee:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80049f0:	4770      	bx	lr
	...

080049f4 <HAL_PCD_MspInit>:
{
 80049f4:	b510      	push	{r4, lr}
 80049f6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f8:	2300      	movs	r3, #0
 80049fa:	9303      	str	r3, [sp, #12]
 80049fc:	9304      	str	r3, [sp, #16]
 80049fe:	9305      	str	r3, [sp, #20]
 8004a00:	9306      	str	r3, [sp, #24]
 8004a02:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB)
 8004a04:	6802      	ldr	r2, [r0, #0]
 8004a06:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <HAL_PCD_MspInit+0x7c>)
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d001      	beq.n	8004a10 <HAL_PCD_MspInit+0x1c>
}
 8004a0c:	b008      	add	sp, #32
 8004a0e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a10:	4c18      	ldr	r4, [pc, #96]	; (8004a74 <HAL_PCD_MspInit+0x80>)
 8004a12:	6963      	ldr	r3, [r4, #20]
 8004a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a18:	6163      	str	r3, [r4, #20]
 8004a1a:	6963      	ldr	r3, [r4, #20]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004a24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004a28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004a32:	230e      	movs	r3, #14
 8004a34:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a36:	a903      	add	r1, sp, #12
 8004a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a3c:	f7fc fb60 	bl	8001100 <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 8004a40:	69e3      	ldr	r3, [r4, #28]
 8004a42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a46:	61e3      	str	r3, [r4, #28]
 8004a48:	69e3      	ldr	r3, [r4, #28]
 8004a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a4e:	9302      	str	r3, [sp, #8]
 8004a50:	9b02      	ldr	r3, [sp, #8]
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 8004a52:	4a09      	ldr	r2, [pc, #36]	; (8004a78 <HAL_PCD_MspInit+0x84>)
 8004a54:	6813      	ldr	r3, [r2, #0]
 8004a56:	f043 0320 	orr.w	r3, r3, #32
 8004a5a:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2101      	movs	r1, #1
 8004a60:	204b      	movs	r0, #75	; 0x4b
 8004a62:	f7fc faf5 	bl	8001050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8004a66:	204b      	movs	r0, #75	; 0x4b
 8004a68:	f7fc fb28 	bl	80010bc <HAL_NVIC_EnableIRQ>
}
 8004a6c:	e7ce      	b.n	8004a0c <HAL_PCD_MspInit+0x18>
 8004a6e:	bf00      	nop
 8004a70:	40005c00 	.word	0x40005c00
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40010000 	.word	0x40010000

08004a7c <HAL_PCD_SetupStageCallback>:
{
 8004a7c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004a7e:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8004a82:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004a86:	f7ff f9e3 	bl	8003e50 <USBD_LL_SetupStage>
}
 8004a8a:	bd08      	pop	{r3, pc}

08004a8c <HAL_PCD_DataOutStageCallback>:
{
 8004a8c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004a8e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004a92:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004a96:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8004a9a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004a9e:	f7ff fa04 	bl	8003eaa <USBD_LL_DataOutStage>
}
 8004aa2:	bd08      	pop	{r3, pc}

08004aa4 <HAL_PCD_DataInStageCallback>:
{
 8004aa4:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004aa6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004aaa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004ab4:	f7ff fa3d 	bl	8003f32 <USBD_LL_DataInStage>
}
 8004ab8:	bd08      	pop	{r3, pc}

08004aba <HAL_PCD_SOFCallback>:
{
 8004aba:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004abc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004ac0:	f7ff fadc 	bl	800407c <USBD_LL_SOF>
}
 8004ac4:	bd08      	pop	{r3, pc}

08004ac6 <HAL_PCD_ResetCallback>:
{
 8004ac6:	b510      	push	{r4, lr}
 8004ac8:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004aca:	6883      	ldr	r3, [r0, #8]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d109      	bne.n	8004ae4 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8004ad6:	f7ff fabb 	bl	8004050 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004ada:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8004ade:	f7ff fa8f 	bl	8004000 <USBD_LL_Reset>
}
 8004ae2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004ae4:	f7fb fc56 	bl	8000394 <Error_Handler>
 8004ae8:	e7f2      	b.n	8004ad0 <HAL_PCD_ResetCallback+0xa>
	...

08004aec <HAL_PCD_SuspendCallback>:
{
 8004aec:	b510      	push	{r4, lr}
 8004aee:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004af0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004af4:	f7ff faaf 	bl	8004056 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8004af8:	69a3      	ldr	r3, [r4, #24]
 8004afa:	b123      	cbz	r3, 8004b06 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004afc:	4a02      	ldr	r2, [pc, #8]	; (8004b08 <HAL_PCD_SuspendCallback+0x1c>)
 8004afe:	6913      	ldr	r3, [r2, #16]
 8004b00:	f043 0306 	orr.w	r3, r3, #6
 8004b04:	6113      	str	r3, [r2, #16]
}
 8004b06:	bd10      	pop	{r4, pc}
 8004b08:	e000ed00 	.word	0xe000ed00

08004b0c <HAL_PCD_ResumeCallback>:
{
 8004b0c:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004b0e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004b12:	f7ff faa9 	bl	8004068 <USBD_LL_Resume>
}
 8004b16:	bd08      	pop	{r3, pc}

08004b18 <USBD_LL_Init>:
{
 8004b18:	b510      	push	{r4, lr}
 8004b1a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004b1c:	481d      	ldr	r0, [pc, #116]	; (8004b94 <USBD_LL_Init+0x7c>)
 8004b1e:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8004b22:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8004b26:	4b1c      	ldr	r3, [pc, #112]	; (8004b98 <USBD_LL_Init+0x80>)
 8004b28:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004b32:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004b38:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004b3a:	f7fc fbc0 	bl	80012be <HAL_PCD_Init>
 8004b3e:	bb30      	cbnz	r0, 8004b8e <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004b40:	2318      	movs	r3, #24
 8004b42:	2200      	movs	r2, #0
 8004b44:	4611      	mov	r1, r2
 8004b46:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004b4a:	f7fd fbb6 	bl	80022ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004b4e:	2358      	movs	r3, #88	; 0x58
 8004b50:	2200      	movs	r2, #0
 8004b52:	2180      	movs	r1, #128	; 0x80
 8004b54:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004b58:	f7fd fbaf 	bl	80022ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004b5c:	23c0      	movs	r3, #192	; 0xc0
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2181      	movs	r1, #129	; 0x81
 8004b62:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004b66:	f7fd fba8 	bl	80022ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004b6a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2101      	movs	r1, #1
 8004b72:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004b76:	f7fd fba0 	bl	80022ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2182      	movs	r1, #130	; 0x82
 8004b82:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004b86:	f7fd fb98 	bl	80022ba <HAL_PCDEx_PMAConfig>
}
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8004b8e:	f7fb fc01 	bl	8000394 <Error_Handler>
 8004b92:	e7d5      	b.n	8004b40 <USBD_LL_Init+0x28>
 8004b94:	20000f38 	.word	0x20000f38
 8004b98:	40005c00 	.word	0x40005c00

08004b9c <USBD_LL_Start>:
{
 8004b9c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004b9e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ba2:	f7fc fbf1 	bl	8001388 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ba6:	f7ff ff1d 	bl	80049e4 <USBD_Get_USB_Status>
}
 8004baa:	bd08      	pop	{r3, pc}

08004bac <USBD_LL_OpenEP>:
{
 8004bac:	b508      	push	{r3, lr}
 8004bae:	4694      	mov	ip, r2
 8004bb0:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004bb2:	4663      	mov	r3, ip
 8004bb4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004bb8:	f7fd fa59 	bl	800206e <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004bbc:	f7ff ff12 	bl	80049e4 <USBD_Get_USB_Status>
}
 8004bc0:	bd08      	pop	{r3, pc}

08004bc2 <USBD_LL_CloseEP>:
{
 8004bc2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004bc4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004bc8:	f7fd fa91 	bl	80020ee <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004bcc:	f7ff ff0a 	bl	80049e4 <USBD_Get_USB_Status>
}
 8004bd0:	bd08      	pop	{r3, pc}

08004bd2 <USBD_LL_StallEP>:
{
 8004bd2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004bd4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004bd8:	f7fd faff 	bl	80021da <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004bdc:	f7ff ff02 	bl	80049e4 <USBD_Get_USB_Status>
}
 8004be0:	bd08      	pop	{r3, pc}

08004be2 <USBD_LL_ClearStallEP>:
{
 8004be2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004be4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004be8:	f7fd fb2c 	bl	8002244 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004bec:	f7ff fefa 	bl	80049e4 <USBD_Get_USB_Status>
}
 8004bf0:	bd08      	pop	{r3, pc}

08004bf2 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004bf2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8004bf6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004bfa:	d108      	bne.n	8004c0e <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004bfc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004c00:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004c04:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004c08:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8004c0c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004c0e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004c12:	3101      	adds	r1, #1
 8004c14:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004c18:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004c1c:	7888      	ldrb	r0, [r1, #2]
 8004c1e:	4770      	bx	lr

08004c20 <USBD_LL_SetUSBAddress>:
{
 8004c20:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004c22:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004c26:	f7fc fbc8 	bl	80013ba <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004c2a:	f7ff fedb 	bl	80049e4 <USBD_Get_USB_Status>
}
 8004c2e:	bd08      	pop	{r3, pc}

08004c30 <USBD_LL_Transmit>:
{
 8004c30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004c32:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004c36:	f7fd faaf 	bl	8002198 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004c3a:	f7ff fed3 	bl	80049e4 <USBD_Get_USB_Status>
}
 8004c3e:	bd08      	pop	{r3, pc}

08004c40 <USBD_LL_PrepareReceive>:
{
 8004c40:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004c42:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004c46:	f7fd fa81 	bl	800214c <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004c4a:	f7ff fecb 	bl	80049e4 <USBD_Get_USB_Status>
}
 8004c4e:	bd08      	pop	{r3, pc}

08004c50 <USBD_LL_GetRxDataSize>:
{
 8004c50:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004c52:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004c56:	f7fd fa96 	bl	8002186 <HAL_PCD_EP_GetRxCount>
}
 8004c5a:	bd08      	pop	{r3, pc}

08004c5c <USBD_static_malloc>:
}
 8004c5c:	4800      	ldr	r0, [pc, #0]	; (8004c60 <USBD_static_malloc+0x4>)
 8004c5e:	4770      	bx	lr
 8004c60:	20001224 	.word	0x20001224

08004c64 <USBD_static_free>:
}
 8004c64:	4770      	bx	lr

08004c66 <HAL_PCDEx_SetConnectionState>:
{
 8004c66:	b508      	push	{r3, lr}
  if (state == 1)
 8004c68:	2901      	cmp	r1, #1
	 HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_SET);
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2201      	moveq	r2, #1
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_RESET);
 8004c6e:	2200      	movne	r2, #0
 8004c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c78:	f7fc fb1c 	bl	80012b4 <HAL_GPIO_WritePin>
}
 8004c7c:	bd08      	pop	{r3, pc}
	...

08004c80 <__libc_init_array>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	4d0d      	ldr	r5, [pc, #52]	; (8004cb8 <__libc_init_array+0x38>)
 8004c84:	4c0d      	ldr	r4, [pc, #52]	; (8004cbc <__libc_init_array+0x3c>)
 8004c86:	1b64      	subs	r4, r4, r5
 8004c88:	10a4      	asrs	r4, r4, #2
 8004c8a:	2600      	movs	r6, #0
 8004c8c:	42a6      	cmp	r6, r4
 8004c8e:	d109      	bne.n	8004ca4 <__libc_init_array+0x24>
 8004c90:	4d0b      	ldr	r5, [pc, #44]	; (8004cc0 <__libc_init_array+0x40>)
 8004c92:	4c0c      	ldr	r4, [pc, #48]	; (8004cc4 <__libc_init_array+0x44>)
 8004c94:	f000 f820 	bl	8004cd8 <_init>
 8004c98:	1b64      	subs	r4, r4, r5
 8004c9a:	10a4      	asrs	r4, r4, #2
 8004c9c:	2600      	movs	r6, #0
 8004c9e:	42a6      	cmp	r6, r4
 8004ca0:	d105      	bne.n	8004cae <__libc_init_array+0x2e>
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca8:	4798      	blx	r3
 8004caa:	3601      	adds	r6, #1
 8004cac:	e7ee      	b.n	8004c8c <__libc_init_array+0xc>
 8004cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb2:	4798      	blx	r3
 8004cb4:	3601      	adds	r6, #1
 8004cb6:	e7f2      	b.n	8004c9e <__libc_init_array+0x1e>
 8004cb8:	08004d68 	.word	0x08004d68
 8004cbc:	08004d68 	.word	0x08004d68
 8004cc0:	08004d68 	.word	0x08004d68
 8004cc4:	08004d6c 	.word	0x08004d6c

08004cc8 <memset>:
 8004cc8:	4402      	add	r2, r0
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d100      	bne.n	8004cd2 <memset+0xa>
 8004cd0:	4770      	bx	lr
 8004cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd6:	e7f9      	b.n	8004ccc <memset+0x4>

08004cd8 <_init>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	bf00      	nop
 8004cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cde:	bc08      	pop	{r3}
 8004ce0:	469e      	mov	lr, r3
 8004ce2:	4770      	bx	lr

08004ce4 <_fini>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr
