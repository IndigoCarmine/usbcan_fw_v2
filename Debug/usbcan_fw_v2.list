
usbcan_fw_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdb4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800cf3c  0800cf3c  0001cf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfec  0800cfec  000201c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cfec  0800cfec  000201c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cfec  0800cfec  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfec  0800cfec  0001cfec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cff0  0800cff0  0001cff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  0800cff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000127c  200001c4  0800d1b8  000201c4  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20001440  0800d1b8  00021440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3f2  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db2  00000000  00000000  0003d5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00041398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  000425b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002310d  00000000  00000000  00043678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015924  00000000  00000000  00066785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cba9f  00000000  00000000  0007c0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147b48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b64  00000000  00000000  00147b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001c4 	.word	0x200001c4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800cf24 	.word	0x0800cf24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001c8 	.word	0x200001c8
 80001c4:	0800cf24 	.word	0x0800cf24

080001c8 <cobs_encode>:
#include <stdint.h>

void cobs_encode(const uint8_t data[], uint8_t return_data[], int data_size){
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
    int zero_index = data_size + 1;//this is return_data index
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	617b      	str	r3, [r7, #20]
    return_data[zero_index] = 0x00;
 80001da:	697b      	ldr	r3, [r7, #20]
 80001dc:	68ba      	ldr	r2, [r7, #8]
 80001de:	4413      	add	r3, r2
 80001e0:	2200      	movs	r2, #0
 80001e2:	701a      	strb	r2, [r3, #0]
    for(int i = data_size; i >0; i--){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	613b      	str	r3, [r7, #16]
 80001e8:	e01f      	b.n	800022a <cobs_encode+0x62>
        if(data[i-1] == 0x00){
 80001ea:	693b      	ldr	r3, [r7, #16]
 80001ec:	3b01      	subs	r3, #1
 80001ee:	68fa      	ldr	r2, [r7, #12]
 80001f0:	4413      	add	r3, r2
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d10c      	bne.n	8000212 <cobs_encode+0x4a>
            return_data[i] = (uint8_t)(zero_index - i);
 80001f8:	697b      	ldr	r3, [r7, #20]
 80001fa:	b2d9      	uxtb	r1, r3
 80001fc:	693b      	ldr	r3, [r7, #16]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	693b      	ldr	r3, [r7, #16]
 8000202:	68b8      	ldr	r0, [r7, #8]
 8000204:	4403      	add	r3, r0
 8000206:	1a8a      	subs	r2, r1, r2
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	701a      	strb	r2, [r3, #0]
            zero_index = i;
 800020c:	693b      	ldr	r3, [r7, #16]
 800020e:	617b      	str	r3, [r7, #20]
 8000210:	e008      	b.n	8000224 <cobs_encode+0x5c>
        }else{
            return_data[i] = data[i-1];
 8000212:	693b      	ldr	r3, [r7, #16]
 8000214:	3b01      	subs	r3, #1
 8000216:	68fa      	ldr	r2, [r7, #12]
 8000218:	441a      	add	r2, r3
 800021a:	693b      	ldr	r3, [r7, #16]
 800021c:	68b9      	ldr	r1, [r7, #8]
 800021e:	440b      	add	r3, r1
 8000220:	7812      	ldrb	r2, [r2, #0]
 8000222:	701a      	strb	r2, [r3, #0]
    for(int i = data_size; i >0; i--){
 8000224:	693b      	ldr	r3, [r7, #16]
 8000226:	3b01      	subs	r3, #1
 8000228:	613b      	str	r3, [r7, #16]
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	2b00      	cmp	r3, #0
 800022e:	dcdc      	bgt.n	80001ea <cobs_encode+0x22>
        }
    }
    return_data[0] = zero_index;
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	b2da      	uxtb	r2, r3
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	701a      	strb	r2, [r3, #0]
}
 8000238:	bf00      	nop
 800023a:	371c      	adds	r7, #28
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr

08000244 <usb_process>:
extern CAN_HandleTypeDef hcan;

void usb_to_can(uint8_t usb_msg[], const uint8_t len);

//it process all usb messages
void usb_process(uint8_t usb_msg[], const uint8_t len){
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b087      	sub	sp, #28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	460b      	mov	r3, r1
 800024e:	70fb      	strb	r3, [r7, #3]
    ... : some data
    */

    //if you want to add new command, you can add it here
    //attention: it is called in interrupt, so it should be short
    switch (usb_msg[0]>>4)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	091b      	lsrs	r3, r3, #4
 8000256:	b2db      	uxtb	r3, r3
 8000258:	2b00      	cmp	r3, #0
 800025a:	d002      	beq.n	8000262 <usb_process+0x1e>
 800025c:	2b01      	cmp	r3, #1
 800025e:	d006      	beq.n	800026e <usb_process+0x2a>
        {
            uint8_t HelloUSBCAN_encode[] = {0x0b,'H','e','l','l','o','U','S','B','C','A','N',0x00};
            CDC_Transmit_FS(HelloUSBCAN_encode,11+2);
        }
    default:
        break;
 8000260:	e011      	b.n	8000286 <usb_process+0x42>
            usb_to_can(usb_msg, len);
 8000262:	78fb      	ldrb	r3, [r7, #3]
 8000264:	4619      	mov	r1, r3
 8000266:	6878      	ldr	r0, [r7, #4]
 8000268:	f000 f87a 	bl	8000360 <usb_to_can>
        break;
 800026c:	e00c      	b.n	8000288 <usb_process+0x44>
            uint8_t HelloUSBCAN_encode[] = {0x0b,'H','e','l','l','o','U','S','B','C','A','N',0x00};
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <usb_process+0x4c>)
 8000270:	f107 0408 	add.w	r4, r7, #8
 8000274:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000276:	c407      	stmia	r4!, {r0, r1, r2}
 8000278:	7023      	strb	r3, [r4, #0]
            CDC_Transmit_FS(HelloUSBCAN_encode,11+2);
 800027a:	f107 0308 	add.w	r3, r7, #8
 800027e:	210d      	movs	r1, #13
 8000280:	4618      	mov	r0, r3
 8000282:	f00c f9cf 	bl	800c624 <CDC_Transmit_FS>
        break;
 8000286:	bf00      	nop
    }

}
 8000288:	bf00      	nop
 800028a:	371c      	adds	r7, #28
 800028c:	46bd      	mov	sp, r7
 800028e:	bd90      	pop	{r4, r7, pc}
 8000290:	0800cf3c 	.word	0x0800cf3c

08000294 <can_process>:


//it process all can messages
//the Data is used for USB buffer. can_process set header infomation to Data[0~5].
//It is a terrible code. Sorry for hard work to read the code.
void can_process(const CAN_RxHeaderTypeDef *RxHeader,uint8_t Data[]){
 8000294:	b580      	push	{r7, lr}
 8000296:	b088      	sub	sp, #32
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
    uint8_t id[4] : can id
    uint8_t dlc : data length
    uint8_t data[8] : data (it is pre-writtten.)
    */

    if(RxHeader->IDE == CAN_ID_STD){
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d11b      	bne.n	80002de <can_process+0x4a>
        //standard id
        Data[1] = (RxHeader->StdId >> 24) & 0xFF;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	0e1a      	lsrs	r2, r3, #24
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	3301      	adds	r3, #1
 80002b0:	b2d2      	uxtb	r2, r2
 80002b2:	701a      	strb	r2, [r3, #0]
        Data[2] = (RxHeader->StdId >> 16) & 0xFF;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	0c1a      	lsrs	r2, r3, #16
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	3302      	adds	r3, #2
 80002be:	b2d2      	uxtb	r2, r2
 80002c0:	701a      	strb	r2, [r3, #0]
        Data[3] = (RxHeader->StdId >> 8) & 0xFF;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	0a1a      	lsrs	r2, r3, #8
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	3303      	adds	r3, #3
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	701a      	strb	r2, [r3, #0]
        Data[4] = (RxHeader->StdId >> 0) & 0xFF;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	3304      	adds	r3, #4
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	701a      	strb	r2, [r3, #0]
 80002dc:	e01d      	b.n	800031a <can_process+0x86>
        
        //is_extended not set
        // Data[0] = 0x00;
    }else{
        //extended id
        Data[1] = (RxHeader->ExtId >> 24) & 0xFF;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	0e1a      	lsrs	r2, r3, #24
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	3301      	adds	r3, #1
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	701a      	strb	r2, [r3, #0]
        Data[2] = (RxHeader->ExtId >> 16) & 0xFF;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	0c1a      	lsrs	r2, r3, #16
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	3302      	adds	r3, #2
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	701a      	strb	r2, [r3, #0]
        Data[3] = (RxHeader->ExtId >> 8) & 0xFF;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	0a1a      	lsrs	r2, r3, #8
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	3303      	adds	r3, #3
 8000304:	b2d2      	uxtb	r2, r2
 8000306:	701a      	strb	r2, [r3, #0]
        Data[4] = (RxHeader->ExtId >> 0) & 0xFF;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	685a      	ldr	r2, [r3, #4]
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	3304      	adds	r3, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	701a      	strb	r2, [r3, #0]

        //is_extended set
        Data[0] = 0x02; // 0x02 = 0b00000010
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	2202      	movs	r2, #2
 8000318:	701a      	strb	r2, [r3, #0]
    }

    //is_rtr
    if(RxHeader->RTR == CAN_RTR_REMOTE){
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	2b02      	cmp	r3, #2
 8000320:	d106      	bne.n	8000330 <can_process+0x9c>
        Data[0] |= 0x04; // 0x04 = 0b00000100
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	f043 0304 	orr.w	r3, r3, #4
 800032a:	b2da      	uxtb	r2, r3
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	701a      	strb	r2, [r3, #0]

    //is_error
    //? 

    //dlc
    Data[5] = RxHeader->DLC;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	691a      	ldr	r2, [r3, #16]
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	3305      	adds	r3, #5
 8000338:	b2d2      	uxtb	r2, r2
 800033a:	701a      	strb	r2, [r3, #0]


    //encode data
    uint8_t encoded_data[15+2];

    cobs_encode(Data, encoded_data,15);
 800033c:	f107 030c 	add.w	r3, r7, #12
 8000340:	220f      	movs	r2, #15
 8000342:	4619      	mov	r1, r3
 8000344:	6838      	ldr	r0, [r7, #0]
 8000346:	f7ff ff3f 	bl	80001c8 <cobs_encode>


    if(CDC_Transmit_FS(encoded_data,15+2)== USBD_OK){
 800034a:	f107 030c 	add.w	r3, r7, #12
 800034e:	2111      	movs	r1, #17
 8000350:	4618      	mov	r0, r3
 8000352:	f00c f967 	bl	800c624 <CDC_Transmit_FS>
        

    }else{
        //transmit fail
    }
}
 8000356:	bf00      	nop
 8000358:	3720      	adds	r7, #32
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <usb_to_can>:


CAN_TxHeaderTypeDef TxHeader;
uint32_t TxMailbox;
//it process usb messages to normal can messages
void usb_to_can(uint8_t usb_msg[], const uint8_t len){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	70fb      	strb	r3, [r7, #3]
    uint8_t command & frame_type: (command: if it is normal can frame, it is 0x00.)<<4 | is_rtr << 2 | is_extended << 1 | is_error
    uint8_t id[4] : can id
    uint8_t dlc : data length
    uint8_t data[8] : data
    */
   if(usb_msg[0] & 0x02){
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	f003 0302 	and.w	r3, r3, #2
 8000374:	2b00      	cmp	r3, #0
 8000376:	d018      	beq.n	80003aa <usb_to_can+0x4a>
       //extended id
       TxHeader.IDE = CAN_ID_EXT;
 8000378:	4b2a      	ldr	r3, [pc, #168]	; (8000424 <usb_to_can+0xc4>)
 800037a:	2204      	movs	r2, #4
 800037c:	609a      	str	r2, [r3, #8]
       TxHeader.ExtId = (usb_msg[1] << 24) | (usb_msg[2] << 16) | (usb_msg[3] << 8) | (usb_msg[4] << 0);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	3301      	adds	r3, #1
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	061a      	lsls	r2, r3, #24
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	3302      	adds	r3, #2
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	041b      	lsls	r3, r3, #16
 800038e:	431a      	orrs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	3303      	adds	r3, #3
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	021b      	lsls	r3, r3, #8
 8000398:	4313      	orrs	r3, r2
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	3204      	adds	r2, #4
 800039e:	7812      	ldrb	r2, [r2, #0]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	461a      	mov	r2, r3
 80003a4:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <usb_to_can+0xc4>)
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	e017      	b.n	80003da <usb_to_can+0x7a>
    }else{
        //standard id
        TxHeader.IDE = CAN_ID_STD;
 80003aa:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <usb_to_can+0xc4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
        TxHeader.StdId = (usb_msg[1] << 24) | (usb_msg[2] << 16) | (usb_msg[3] << 8) | (usb_msg[4] << 0);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3301      	adds	r3, #1
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	061a      	lsls	r2, r3, #24
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3302      	adds	r3, #2
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	041b      	lsls	r3, r3, #16
 80003c0:	431a      	orrs	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3303      	adds	r3, #3
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	021b      	lsls	r3, r3, #8
 80003ca:	4313      	orrs	r3, r2
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	3204      	adds	r2, #4
 80003d0:	7812      	ldrb	r2, [r2, #0]
 80003d2:	4313      	orrs	r3, r2
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b13      	ldr	r3, [pc, #76]	; (8000424 <usb_to_can+0xc4>)
 80003d8:	601a      	str	r2, [r3, #0]
    }

    //is_rtr
    if(usb_msg[0] & 0x04){
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	f003 0304 	and.w	r3, r3, #4
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d003      	beq.n	80003ee <usb_to_can+0x8e>
        TxHeader.RTR = CAN_RTR_REMOTE;
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <usb_to_can+0xc4>)
 80003e8:	2202      	movs	r2, #2
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	e002      	b.n	80003f4 <usb_to_can+0x94>
    }else{
        TxHeader.RTR = CAN_RTR_DATA;
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <usb_to_can+0xc4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	60da      	str	r2, [r3, #12]

    //is_error
    //?

    //dlc
    TxHeader.DLC = usb_msg[5];
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3305      	adds	r3, #5
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <usb_to_can+0xc4>)
 80003fe:	611a      	str	r2, [r3, #16]
    
    if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8000400:	4809      	ldr	r0, [pc, #36]	; (8000428 <usb_to_can+0xc8>)
 8000402:	f004 fa61 	bl	80048c8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d006      	beq.n	800041a <usb_to_can+0xba>
    	HAL_CAN_AddTxMessage(&hcan, &TxHeader, usb_msg+6, &TxMailbox);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	1d9a      	adds	r2, r3, #6
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <usb_to_can+0xcc>)
 8000412:	4904      	ldr	r1, [pc, #16]	; (8000424 <usb_to_can+0xc4>)
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <usb_to_can+0xc8>)
 8000416:	f004 f97c 	bl	8004712 <HAL_CAN_AddTxMessage>
    }


}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	200001e0 	.word	0x200001e0
 8000428:	200001fc 	.word	0x200001fc
 800042c:	200001f8 	.word	0x200001f8

08000430 <led_on>:
    {LED_YELLOW_GPIO_Port, LED_YELLOW_Pin,0,0},
    {LED_RED_GPIO_Port, LED_RED_Pin,0,0},
};


void led_on(led name){
 8000430:	b590      	push	{r4, r7, lr}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	71fb      	strb	r3, [r7, #7]
    //if the led is off.
    if(led_list[name].is_high == 0){
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <led_on+0x54>)
 800043e:	011b      	lsls	r3, r3, #4
 8000440:	4413      	add	r3, r2
 8000442:	330c      	adds	r3, #12
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d117      	bne.n	800047a <led_on+0x4a>
        HAL_GPIO_WritePin(led_list[name].gpio,led_list[name].pin,GPIO_PIN_SET);
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	4a0d      	ldr	r2, [pc, #52]	; (8000484 <led_on+0x54>)
 800044e:	011b      	lsls	r3, r3, #4
 8000450:	4413      	add	r3, r2
 8000452:	6818      	ldr	r0, [r3, #0]
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <led_on+0x54>)
 8000458:	011b      	lsls	r3, r3, #4
 800045a:	4413      	add	r3, r2
 800045c:	3304      	adds	r3, #4
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	2201      	movs	r2, #1
 8000462:	4619      	mov	r1, r3
 8000464:	f005 f858 	bl	8005518 <HAL_GPIO_WritePin>
        led_list[name].before_tick = HAL_GetTick();
 8000468:	79fc      	ldrb	r4, [r7, #7]
 800046a:	f003 ff3d 	bl	80042e8 <HAL_GetTick>
 800046e:	4602      	mov	r2, r0
 8000470:	4904      	ldr	r1, [pc, #16]	; (8000484 <led_on+0x54>)
 8000472:	0123      	lsls	r3, r4, #4
 8000474:	440b      	add	r3, r1
 8000476:	3308      	adds	r3, #8
 8000478:	601a      	str	r2, [r3, #0]
    }
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bd90      	pop	{r4, r7, pc}
 8000482:	bf00      	nop
 8000484:	20000000 	.word	0x20000000

08000488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	; 0x28
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048e:	f003 fed1 	bl	8004234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000492:	f000 f829 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f8b9 	bl	800060c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800049a:	f00b ff5b 	bl	800c354 <MX_USB_DEVICE_Init>
  MX_CAN_Init();
 800049e:	f000 f87f 	bl	80005a0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  main_cpp();
 80004a2:	f000 fa99 	bl	80009d8 <main_cpp>
  CAN_FilterTypeDef filter;
  filter.FilterIdHigh         = 0;                        // フィルターID(上�?16ビッ?��?)
 80004a6:	2300      	movs	r3, #0
 80004a8:	603b      	str	r3, [r7, #0]
  filter.FilterIdLow          = 0;                        // フィルターID(下�?16ビッ?��?)
 80004aa:	2300      	movs	r3, #0
 80004ac:	607b      	str	r3, [r7, #4]
  filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上�?16ビッ?��?)
 80004ae:	2300      	movs	r3, #0
 80004b0:	60bb      	str	r3, [r7, #8]
  filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下�?16ビッ?��?)
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 80004b6:	2301      	movs	r3, #1
 80004b8:	61fb      	str	r3, [r7, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  filter.FilterBank           = 0;                        // フィルターバンクNo
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
  filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモー?��?
 80004c2:	2300      	movs	r3, #0
 80004c4:	61bb      	str	r3, [r7, #24]
  filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 80004c6:	230e      	movs	r3, #14
 80004c8:	627b      	str	r3, [r7, #36]	; 0x24
  filter.FilterActivation     = ENABLE;                   // フィルター無効??��?��有効
 80004ca:	2301      	movs	r3, #1
 80004cc:	623b      	str	r3, [r7, #32]
  HAL_CAN_ConfigFilter(&hcan, &filter);
 80004ce:	463b      	mov	r3, r7
 80004d0:	4619      	mov	r1, r3
 80004d2:	4804      	ldr	r0, [pc, #16]	; (80004e4 <main+0x5c>)
 80004d4:	f004 f80f 	bl	80044f6 <HAL_CAN_ConfigFilter>


  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80004d8:	2102      	movs	r1, #2
 80004da:	4802      	ldr	r0, [pc, #8]	; (80004e4 <main+0x5c>)
 80004dc:	f004 fb3b 	bl	8004b56 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x58>
 80004e2:	bf00      	nop
 80004e4:	200001fc 	.word	0x200001fc

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09c      	sub	sp, #112	; 0x70
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004f2:	2228      	movs	r2, #40	; 0x28
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f00c fd0c 	bl	800cf14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	2234      	movs	r2, #52	; 0x34
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f00c fcfe 	bl	800cf14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000518:	2301      	movs	r3, #1
 800051a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800051c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000520:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000526:	2301      	movs	r3, #1
 8000528:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052a:	2302      	movs	r3, #2
 800052c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800052e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000532:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000534:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000538:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800053e:	4618      	mov	r0, r3
 8000540:	f006 fd08 	bl	8006f54 <HAL_RCC_OscConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800054a:	f000 f8c1 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054e:	230f      	movs	r3, #15
 8000550:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000552:	2302      	movs	r3, #2
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800055a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000564:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000568:	2102      	movs	r1, #2
 800056a:	4618      	mov	r0, r3
 800056c:	f007 fd30 	bl	8007fd0 <HAL_RCC_ClockConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000576:	f000 f8ab 	bl	80006d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800057a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800057e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000580:	2300      	movs	r3, #0
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	4618      	mov	r0, r3
 8000588:	f007 ff08 	bl	800839c <HAL_RCCEx_PeriphCLKConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000592:	f000 f89d 	bl	80006d0 <Error_Handler>
  }
}
 8000596:	bf00      	nop
 8000598:	3770      	adds	r7, #112	; 0x70
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <MX_CAN_Init+0x64>)
 80005a6:	4a18      	ldr	r2, [pc, #96]	; (8000608 <MX_CAN_Init+0x68>)
 80005a8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <MX_CAN_Init+0x64>)
 80005ac:	2202      	movs	r2, #2
 80005ae:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_CAN_Init+0x64>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <MX_CAN_Init+0x64>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_CAN_Init+0x64>)
 80005be:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005c2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_CAN_Init+0x64>)
 80005c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005ca:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <MX_CAN_Init+0x64>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_CAN_Init+0x64>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_CAN_Init+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_CAN_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <MX_CAN_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_CAN_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <MX_CAN_Init+0x64>)
 80005f2:	f003 fe85 	bl	8004300 <HAL_CAN_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80005fc:	f000 f868 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200001fc 	.word	0x200001fc
 8000608:	40006400 	.word	0x40006400

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <MX_GPIO_Init+0xbc>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a28      	ldr	r2, [pc, #160]	; (80006c8 <MX_GPIO_Init+0xbc>)
 8000628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <MX_GPIO_Init+0xbc>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <MX_GPIO_Init+0xbc>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <MX_GPIO_Init+0xbc>)
 8000640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_GPIO_Init+0xbc>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_GPIO_Init+0xbc>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MX_GPIO_Init+0xbc>)
 8000658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_GPIO_Init+0xbc>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000674:	f004 ff50 	bl	8005518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_CAN_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	21f0      	movs	r1, #240	; 0xf0
 800067c:	4813      	ldr	r0, [pc, #76]	; (80006cc <MX_GPIO_Init+0xc0>)
 800067e:	f004 ff4b 	bl	8005518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USB_PULLUP_Pin */
  GPIO_InitStruct.Pin = USB_PULLUP_Pin;
 8000682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USB_PULLUP_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4619      	mov	r1, r3
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f004 fdc1 	bl	8005224 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin LED_GREEN_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 80006a2:	23f0      	movs	r3, #240	; 0xf0
 80006a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	4619      	mov	r1, r3
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_GPIO_Init+0xc0>)
 80006ba:	f004 fdb3 	bl	8005224 <HAL_GPIO_Init>

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000400 	.word	0x48000400

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>
	...

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_MspInit+0x44>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_MspInit+0x44>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6193      	str	r3, [r2, #24]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_MspInit+0x44>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_MspInit+0x44>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_MspInit+0x44>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	61d3      	str	r3, [r2, #28]
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_MspInit+0x44>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000

08000724 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <HAL_CAN_MspInit+0x8c>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d130      	bne.n	80007a8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000746:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <HAL_CAN_MspInit+0x90>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a1a      	ldr	r2, [pc, #104]	; (80007b4 <HAL_CAN_MspInit+0x90>)
 800074c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <HAL_CAN_MspInit+0x90>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <HAL_CAN_MspInit+0x90>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <HAL_CAN_MspInit+0x90>)
 8000764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <HAL_CAN_MspInit+0x90>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000776:	f44f 7340 	mov.w	r3, #768	; 0x300
 800077a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	2302      	movs	r3, #2
 800077e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000788:	2309      	movs	r3, #9
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	4809      	ldr	r0, [pc, #36]	; (80007b8 <HAL_CAN_MspInit+0x94>)
 8000794:	f004 fd46 	bl	8005224 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	2015      	movs	r0, #21
 800079e:	f004 fd0a 	bl	80051b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80007a2:	2015      	movs	r0, #21
 80007a4:	f004 fd23 	bl	80051ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40006400 	.word	0x40006400
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000400 	.word	0x48000400

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f003 fd5a 	bl	80042c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <CAN_RX1_IRQHandler+0x10>)
 8000816:	f004 f9c4 	bl	8004ba2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200001fc 	.word	0x200001fc

08000824 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <USB_LP_IRQHandler+0x10>)
 800082a:	f004 ffab 	bl	8005784 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000f34 	.word	0x20000f34

08000838 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <SystemInit+0x20>)
 800083e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <SystemInit+0x20>)
 8000844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
 8000860:	2300      	movs	r3, #0
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	fab3 f383 	clz	r3, r3
 800087a:	f1c3 031f 	rsb	r3, r3, #31
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <_ZN6CRSLib3Can6RM03659PillarboxC1EP19__CAN_HandleTypeDef>:
	class Pillarbox final
	{
		CAN_HandleTypeDef * hcan;

	public:
		Pillarbox(CAN_HandleTypeDef *const hcan) noexcept:
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	6039      	str	r1, [r7, #0]
			hcan{hcan}
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	601a      	str	r2, [r3, #0]
		{}
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <_ZN6CRSLib3Can6RM036512can_instanceENS1_4CanXE>:
		rate1M = 1000000
	};

	// 定義してね
	inline constexpr i_ptr can_instance(CanX can_x) noexcept
	{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
		switch(can_x)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d003      	beq.n	80008be <_ZN6CRSLib3Can6RM036512can_instanceENS1_4CanXE+0x16>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d002      	beq.n	80008c2 <_ZN6CRSLib3Can6RM036512can_instanceENS1_4CanXE+0x1a>
 80008bc:	e003      	b.n	80008c6 <_ZN6CRSLib3Can6RM036512can_instanceENS1_4CanXE+0x1e>
		{
		case CanX::can1:
			return static_cast<i_ptr>(0x4000'6400);
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <_ZN6CRSLib3Can6RM036512can_instanceENS1_4CanXE+0x2c>)
 80008c0:	e002      	b.n	80008c8 <_ZN6CRSLib3Can6RM036512can_instanceENS1_4CanXE+0x20>
		case CanX::can2:
			return static_cast<i_ptr>(0x4000'6800);
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <_ZN6CRSLib3Can6RM036512can_instanceENS1_4CanXE+0x30>)
 80008c4:	e000      	b.n	80008c8 <_ZN6CRSLib3Can6RM036512can_instanceENS1_4CanXE+0x20>
		}
		return 0;
 80008c6:	2300      	movs	r3, #0
	}
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	40006400 	.word	0x40006400
 80008d8:	40006800 	.word	0x40006800

080008dc <_ZN6CRSLib3Can6RM03659LetterboxC1EP19__CAN_HandleTypeDefNS1_9FifoIndexE>:
	{
		CAN_HandleTypeDef * hcan;
		FifoIndex fifo_index;

	public:
		Letterbox(CAN_HandleTypeDef *const hcan, const FifoIndex fifo_index) noexcept:
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
			hcan{hcan},
			fifo_index{fifo_index}
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	605a      	str	r2, [r3, #4]
		{}
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4618      	mov	r0, r3
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <_ZN6CRSLib3Can6RM036510CanManagerC1EP19__CAN_HandleTypeDef>:
	{
		Pillarbox pillarbox;
		Letterbox letterbox0;
		Letterbox letterbox1;

		CanManager(CAN_HandleTypeDef *const hcan) noexcept:
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	6039      	str	r1, [r7, #0]
			pillarbox{hcan},
			letterbox0{hcan, FifoIndex::fifo0},
			letterbox1{hcan, FifoIndex::fifo1}
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6839      	ldr	r1, [r7, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ffba 	bl	800088a <_ZN6CRSLib3Can6RM03659PillarboxC1EP19__CAN_HandleTypeDef>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3304      	adds	r3, #4
 800091a:	2200      	movs	r2, #0
 800091c:	6839      	ldr	r1, [r7, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffdc 	bl	80008dc <_ZN6CRSLib3Can6RM03659LetterboxC1EP19__CAN_HandleTypeDefNS1_9FifoIndexE>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	330c      	adds	r3, #12
 8000928:	2201      	movs	r2, #1
 800092a:	6839      	ldr	r1, [r7, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ffd5 	bl	80008dc <_ZN6CRSLib3Can6RM03659LetterboxC1EP19__CAN_HandleTypeDefNS1_9FifoIndexE>
		{}
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <_ZZN6CRSLib3Can6RM036513FilterManager18dynamic_initializeEvENKUlSt16integer_sequenceIhJXspT_EEEE_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13EEEEDaS4_>:
		set_bit(bxcan1->FA1R, (u32)activate << index);
	}

	inline void dynamic_initialize() noexcept
	{
		[]<u8 ... indices>(std::integer_sequence<u8, indices ...>)
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af0c      	add	r7, sp, #48	; 0x30
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	7039      	strb	r1, [r7, #0]
		{
			constexpr FrameFeature<FilterWidth::bit32> null_feature{.std_id = max_std_id, .ext_id = max_ext_id};
 8000946:	f06f 0307 	mvn.w	r3, #7
 800094a:	61fb      	str	r3, [r7, #28]
			auto null_filter_arg = ConfigFilterArg<FilterWidth::bit32, FilterMode::list>{{null_feature, null_feature}, FifoIndex::fifo0};
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <_ZZN6CRSLib3Can6RM036513FilterManager18dynamic_initializeEvENKUlSt16integer_sequenceIhJXspT_EEEE_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13EEEEDaS4_+0x80>)
 800094e:	f107 0408 	add.w	r4, r7, #8
 8000952:	461d      	mov	r5, r3
 8000954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000958:	682b      	ldr	r3, [r5, #0]
 800095a:	6023      	str	r3, [r4, #0]
			config_filter_bank(Config::filter_bank_total_size, static_cast<decltype(null_filter_arg)&>(static_cast<void>(indices), null_filter_arg)...);
 800095c:	f107 0008 	add.w	r0, r7, #8
 8000960:	f107 0208 	add.w	r2, r7, #8
 8000964:	f107 0108 	add.w	r1, r7, #8
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	930a      	str	r3, [sp, #40]	; 0x28
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	9309      	str	r3, [sp, #36]	; 0x24
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	9308      	str	r3, [sp, #32]
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	9307      	str	r3, [sp, #28]
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	9306      	str	r3, [sp, #24]
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	9305      	str	r3, [sp, #20]
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	9304      	str	r3, [sp, #16]
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	9303      	str	r3, [sp, #12]
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	9302      	str	r3, [sp, #8]
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	4603      	mov	r3, r0
 80009ac:	200e      	movs	r0, #14
 80009ae:	f000 f90e 	bl	8000bce <_ZN6CRSLib3Can6RM036513FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
		}(std::make_integer_sequence<u8, Config::filter_bank_total_size>());
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bdb0      	pop	{r4, r5, r7, pc}
 80009ba:	bf00      	nop
 80009bc:	0800cf4c 	.word	0x0800cf4c

080009c0 <_ZN6CRSLib3Can6RM036513FilterManager18dynamic_initializeEv>:
	{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
		}(std::make_integer_sequence<u8, Config::filter_bank_total_size>());
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffb6 	bl	800093c <_ZZN6CRSLib3Can6RM036513FilterManager18dynamic_initializeEvENKUlSt16integer_sequenceIhJXspT_EEEE_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13EEEEDaS4_>
	}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <main_cpp>:
extern CAN_HandleTypeDef hcan;
extern USBD_HandleTypeDef hUsbDeviceFS;


void main_cpp()
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08e      	sub	sp, #56	; 0x38
 80009dc:	af00      	add	r7, sp, #0
    CanManager can_manager{&hcan};
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4931      	ldr	r1, [pc, #196]	; (8000aa8 <main_cpp+0xd0>)
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff8c 	bl	8000902 <_ZN6CRSLib3Can6RM036510CanManagerC1EP19__CAN_HandleTypeDef>

    FilterManager::dynamic_initialize();
 80009ea:	f7ff ffe9 	bl	80009c0 <_ZN6CRSLib3Can6RM036513FilterManager18dynamic_initializeEv>

    Filter<FilterWidth::bit32, FilterMode::mask> filter =
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
            .id = {0x0, 0x0, false, false},
            .mask = {0x0, 0x0, false, false}
        }
    };

    FilterManager::ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filter_arg
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	2301      	movs	r3, #1
 8000a06:	743b      	strb	r3, [r7, #16]
    {
        .filter = filter,
        .fifo = FifoIndex::fifo0,
        .filter_match_index = 0, // なんでもいい。
        .activate = true
    };
 8000a08:	463b      	mov	r3, r7
 8000a0a:	f107 0214 	add.w	r2, r7, #20
 8000a0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a12:	e883 0003 	stmia.w	r3, {r0, r1}

    FilterManager::config_filter_bank(15, filter_arg);
 8000a16:	463b      	mov	r3, r7
 8000a18:	4619      	mov	r1, r3
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f000 f943 	bl	8000ca6 <_ZN6CRSLib3Can6RM036513FilterManager18config_filter_bankIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
    [[maybe_unused]] const u32 fmi = filter_arg.filter_match_index;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30

    HAL_CAN_Start(&hcan);
 8000a24:	4820      	ldr	r0, [pc, #128]	; (8000aa8 <main_cpp+0xd0>)
 8000a26:	f003 fe30 	bl	800468a <HAL_CAN_Start>
//    RxFrame rx_frame{};
    uint8_t state =23;
 8000a2a:	2317      	movs	r3, #23
 8000a2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while(true)
    {
    	if(hUsbDeviceFS.dev_state !=state){
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <main_cpp+0xd4>)
 8000a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000a36:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d0f8      	beq.n	8000a30 <main_cpp+0x58>
    		state = hUsbDeviceFS.dev_state;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <main_cpp+0xd4>)
 8000a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000a44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,
 8000a48:	2200      	movs	r2, #0
 8000a4a:	21e0      	movs	r1, #224	; 0xe0
 8000a4c:	4818      	ldr	r0, [pc, #96]	; (8000ab0 <main_cpp+0xd8>)
 8000a4e:	f004 fd63 	bl	8005518 <HAL_GPIO_WritePin>
    				LED_GREEN_Pin|
    				LED_YELLOW_Pin|
    				LED_RED_Pin
    				,GPIO_PIN_RESET);
    		switch(hUsbDeviceFS.dev_state){
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <main_cpp+0xd4>)
 8000a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d8e8      	bhi.n	8000a30 <main_cpp+0x58>
 8000a5e:	a201      	add	r2, pc, #4	; (adr r2, 8000a64 <main_cpp+0x8c>)
 8000a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a64:	08000a75 	.word	0x08000a75
 8000a68:	08000a81 	.word	0x08000a81
 8000a6c:	08000a99 	.word	0x08000a99
 8000a70:	08000a8d 	.word	0x08000a8d
    		case USBD_STATE_DEFAULT:
    			HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <main_cpp+0xd8>)
 8000a7a:	f004 fd4d 	bl	8005518 <HAL_GPIO_WritePin>
    			break;
 8000a7e:	e011      	b.n	8000aa4 <main_cpp+0xcc>
    		case USBD_STATE_ADDRESSED :
    			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2140      	movs	r1, #64	; 0x40
 8000a84:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <main_cpp+0xd8>)
 8000a86:	f004 fd47 	bl	8005518 <HAL_GPIO_WritePin>
    			break;
 8000a8a:	e00b      	b.n	8000aa4 <main_cpp+0xcc>
    		case USBD_STATE_SUSPENDED  :
    			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <main_cpp+0xd8>)
 8000a92:	f004 fd41 	bl	8005518 <HAL_GPIO_WritePin>
    			break;
 8000a96:	e005      	b.n	8000aa4 <main_cpp+0xcc>
    		case USBD_STATE_CONFIGURED :
    			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <main_cpp+0xd8>)
 8000a9e:	f004 fd3b 	bl	8005518 <HAL_GPIO_WritePin>
    			break;
 8000aa2:	bf00      	nop
    	if(hUsbDeviceFS.dev_state !=state){
 8000aa4:	e7c4      	b.n	8000a30 <main_cpp+0x58>
 8000aa6:	bf00      	nop
 8000aa8:	200001fc 	.word	0x200001fc
 8000aac:	2000022c 	.word	0x2000022c
 8000ab0:	48000400 	.word	0x48000400

08000ab4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>:
#pragma once

namespace CRSLib
{
	inline constexpr void clear_bit(volatile auto& bit, const auto reg)
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
	{
		bit = bit & ~reg;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	401a      	ands	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]
	}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>:
	inline constexpr void clear_bit(auto& bit, const auto reg)
	{
		bit &= ~reg;
	}

	inline constexpr void set_bit(volatile auto& bit, const auto reg)
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	6039      	str	r1, [r7, #0]
	{
		bit = bit | reg;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	431a      	orrs	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	601a      	str	r2, [r3, #0]
	}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <_ZZN6CRSLib3Can6RM036513FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEDpRT0_E_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13EEJNS6_ILS4_0ELS5_1EEESH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_EEEDaSB_SE_>:
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	7239      	strb	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fbf7 	bl	8001318 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000b2e:	6839      	ldr	r1, [r7, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 fc3f 	bl	80013b4 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh1ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000b3a:	69b9      	ldr	r1, [r7, #24]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 fc87 	bl	8001450 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh2ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000b46:	69f9      	ldr	r1, [r7, #28]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fccf 	bl	80014ec <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh3ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000b52:	6a39      	ldr	r1, [r7, #32]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 fd17 	bl	8001588 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh4ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 fd5f 	bl	8001624 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh5ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000b6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fda7 	bl	80016c0 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh6ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fdef 	bl	800175c <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh7ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000b82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fe37 	bl	80017f8 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh8ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000b8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 fe86 	bl	80018a2 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh9ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000b9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fed5 	bl	800194c <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh10ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000ba6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 ff24 	bl	80019f6 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh11ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000bb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 ff73 	bl	8001aa0 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh12ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000bbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 ffc2 	bl	8001b4a <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh13ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_ZN6CRSLib3Can6RM036513FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8000bce:	b590      	push	{r4, r7, lr}
 8000bd0:	b093      	sub	sp, #76	; 0x4c
 8000bd2:	af0c      	add	r7, sp, #48	; 0x30
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4603      	mov	r3, r0
 8000bdc:	73fb      	strb	r3, [r7, #15]
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8000bde:	7bf8      	ldrb	r0, [r7, #15]
 8000be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000be2:	930a      	str	r3, [sp, #40]	; 0x28
 8000be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000be6:	9309      	str	r3, [sp, #36]	; 0x24
 8000be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bea:	9308      	str	r3, [sp, #32]
 8000bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000bee:	9307      	str	r3, [sp, #28]
 8000bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bf2:	9306      	str	r3, [sp, #24]
 8000bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf6:	9305      	str	r3, [sp, #20]
 8000bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bfa:	9304      	str	r3, [sp, #16]
 8000bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfe:	9303      	str	r3, [sp, #12]
 8000c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c02:	9302      	str	r3, [sp, #8]
 8000c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c06:	9301      	str	r3, [sp, #4]
 8000c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	f000 faab 	bl	800116c <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
		CAN_TypeDef *const bxcan1 = (CAN_TypeDef *)can_instance(CanX::can1);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fe46 	bl	80008a8 <_ZN6CRSLib3Can6RM036512can_instanceENS1_4CanXE>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	617b      	str	r3, [r7, #20]
		set_bit(bxcan1->FMR, CAN_FMR_FINIT);
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c26:	2101      	movs	r1, #1
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff60 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>(), filter_args ...);
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	f107 0010 	add.w	r0, r7, #16
 8000c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c38:	930b      	str	r3, [sp, #44]	; 0x2c
 8000c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c3c:	930a      	str	r3, [sp, #40]	; 0x28
 8000c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c40:	9309      	str	r3, [sp, #36]	; 0x24
 8000c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c44:	9308      	str	r3, [sp, #32]
 8000c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c48:	9307      	str	r3, [sp, #28]
 8000c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c4c:	9306      	str	r3, [sp, #24]
 8000c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c50:	9305      	str	r3, [sp, #20]
 8000c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c54:	9304      	str	r3, [sp, #16]
 8000c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c58:	9303      	str	r3, [sp, #12]
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5c:	9302      	str	r3, [sp, #8]
 8000c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	4621      	mov	r1, r4
 8000c6c:	f7ff ff50 	bl	8000b10 <_ZZN6CRSLib3Can6RM036513FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEDpRT0_E_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13EEJNS6_ILS4_0ELS5_1EEESH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_SH_EEEDaSB_SE_>
		clear_bit(bxcan1->FMR, CAN_FMR_FINIT);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c76:	2101      	movs	r1, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff26 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 8000c7e:	bf00      	nop
 8000c80:	371c      	adds	r7, #28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd90      	pop	{r4, r7, pc}

08000c86 <_ZZN6CRSLib3Can6RM036513FilterManager18config_filter_bankIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEDpRT0_E_clIJLh0EEJNS6_ILS4_0ELS5_0EEEEEEDaSB_SE_>:
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	7239      	strb	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 f905 	bl	8001ea8 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>
		[bxcan1]<u8 ... indices>(std::integer_sequence<u8, indices ...>, std::same_as<ConfigFilterArg<filter_widthes, filter_modes>> auto& ... filter_args)
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_ZN6CRSLib3Can6RM036513FilterManager18config_filter_bankIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8000ca6:	b590      	push	{r4, r7, lr}
 8000ca8:	b085      	sub	sp, #20
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	6039      	str	r1, [r7, #0]
 8000cb0:	71fb      	strb	r3, [r7, #7]
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	6839      	ldr	r1, [r7, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 f88c 	bl	8001dd4 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
		CAN_TypeDef *const bxcan1 = (CAN_TypeDef *)can_instance(CanX::can1);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fdf3 	bl	80008a8 <_ZN6CRSLib3Can6RM036512can_instanceENS1_4CanXE>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	60fb      	str	r3, [r7, #12]
		set_bit(bxcan1->FMR, CAN_FMR_FINIT);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff0d 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>(), filter_args ...);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	4621      	mov	r1, r4
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ffd0 	bl	8000c86 <_ZZN6CRSLib3Can6RM036513FilterManager18config_filter_bankIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEDpRT0_E_clIJLh0EEJNS6_ILS4_0ELS5_0EEEEEEDaSB_SE_>
		clear_bit(bxcan1->FMR, CAN_FMR_FINIT);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cec:	2101      	movs	r1, #1
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff feeb 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd90      	pop	{r4, r7, pc}

08000cfc <_ZZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13EEEEDaSD_>:
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d00:	b08b      	sub	sp, #44	; 0x2c
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6278      	str	r0, [r7, #36]	; 0x24
 8000d06:	f887 1020 	strb.w	r1, [r7, #32]
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	685c      	ldr	r4, [r3, #4]
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	7819      	ldrb	r1, [r3, #0]
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	689b      	ldr	r3, [r3, #8]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000d16:	461a      	mov	r2, r3
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 f8a5 	bl	8000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4698      	mov	r8, r3
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	7819      	ldrb	r1, [r3, #0]
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	68db      	ldr	r3, [r3, #12]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f000 f89b 	bl	8000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8000d32:	4603      	mov	r3, r0
 8000d34:	469b      	mov	fp, r3
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	7819      	ldrb	r1, [r3, #0]
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	691b      	ldr	r3, [r3, #16]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000d3e:	461a      	mov	r2, r3
 8000d40:	2002      	movs	r0, #2
 8000d42:	f000 f891 	bl	8000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8000d46:	4603      	mov	r3, r0
 8000d48:	61fb      	str	r3, [r7, #28]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	7819      	ldrb	r1, [r3, #0]
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	695b      	ldr	r3, [r3, #20]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000d52:	461a      	mov	r2, r3
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 f887 	bl	8000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	61bb      	str	r3, [r7, #24]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	7819      	ldrb	r1, [r3, #0]
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	699b      	ldr	r3, [r3, #24]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000d66:	461a      	mov	r2, r3
 8000d68:	2004      	movs	r0, #4
 8000d6a:	f000 f87d 	bl	8000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	617b      	str	r3, [r7, #20]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	7819      	ldrb	r1, [r3, #0]
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	69db      	ldr	r3, [r3, #28]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2005      	movs	r0, #5
 8000d7e:	f000 f873 	bl	8000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8000d82:	4603      	mov	r3, r0
 8000d84:	613b      	str	r3, [r7, #16]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	7819      	ldrb	r1, [r3, #0]
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	6a1b      	ldr	r3, [r3, #32]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000d8e:	461a      	mov	r2, r3
 8000d90:	2006      	movs	r0, #6
 8000d92:	f000 f869 	bl	8000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8000d96:	4603      	mov	r3, r0
 8000d98:	60fb      	str	r3, [r7, #12]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	7819      	ldrb	r1, [r3, #0]
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000da2:	461a      	mov	r2, r3
 8000da4:	2007      	movs	r0, #7
 8000da6:	f000 f85f 	bl	8000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8000daa:	4603      	mov	r3, r0
 8000dac:	60bb      	str	r3, [r7, #8]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	7819      	ldrb	r1, [r3, #0]
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000db6:	461a      	mov	r2, r3
 8000db8:	2008      	movs	r0, #8
 8000dba:	f000 f855 	bl	8000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	607b      	str	r3, [r7, #4]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	7819      	ldrb	r1, [r3, #0]
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2009      	movs	r0, #9
 8000dce:	f000 f84b 	bl	8000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	469a      	mov	sl, r3
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	7819      	ldrb	r1, [r3, #0]
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000dde:	461a      	mov	r2, r3
 8000de0:	200a      	movs	r0, #10
 8000de2:	f000 f841 	bl	8000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4699      	mov	r9, r3
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	7819      	ldrb	r1, [r3, #0]
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000df2:	461a      	mov	r2, r3
 8000df4:	200b      	movs	r0, #11
 8000df6:	f000 f837 	bl	8000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	461e      	mov	r6, r3
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	7819      	ldrb	r1, [r3, #0]
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000e06:	461a      	mov	r2, r3
 8000e08:	200c      	movs	r0, #12
 8000e0a:	f000 f82d 	bl	8000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461d      	mov	r5, r3
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	7819      	ldrb	r1, [r3, #0]
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	200d      	movs	r0, #13
 8000e1e:	f000 f823 	bl	8000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	4643      	mov	r3, r8
 8000e28:	7023      	strb	r3, [r4, #0]
 8000e2a:	465b      	mov	r3, fp
 8000e2c:	7063      	strb	r3, [r4, #1]
 8000e2e:	7f3b      	ldrb	r3, [r7, #28]
 8000e30:	70a3      	strb	r3, [r4, #2]
 8000e32:	7e3b      	ldrb	r3, [r7, #24]
 8000e34:	70e3      	strb	r3, [r4, #3]
 8000e36:	7d3b      	ldrb	r3, [r7, #20]
 8000e38:	7123      	strb	r3, [r4, #4]
 8000e3a:	7c3b      	ldrb	r3, [r7, #16]
 8000e3c:	7163      	strb	r3, [r4, #5]
 8000e3e:	7b3b      	ldrb	r3, [r7, #12]
 8000e40:	71a3      	strb	r3, [r4, #6]
 8000e42:	7a3b      	ldrb	r3, [r7, #8]
 8000e44:	71e3      	strb	r3, [r4, #7]
 8000e46:	793b      	ldrb	r3, [r7, #4]
 8000e48:	7223      	strb	r3, [r4, #8]
 8000e4a:	4653      	mov	r3, sl
 8000e4c:	7263      	strb	r3, [r4, #9]
 8000e4e:	464b      	mov	r3, r9
 8000e50:	72a3      	strb	r3, [r4, #10]
 8000e52:	4633      	mov	r3, r6
 8000e54:	72e3      	strb	r3, [r4, #11]
 8000e56:	462b      	mov	r3, r5
 8000e58:	7323      	strb	r3, [r4, #12]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	7363      	strb	r3, [r4, #13]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000e5e:	bf00      	nop
 8000e60:	372c      	adds	r7, #44	; 0x2c
 8000e62:	46bd      	mov	sp, r7
 8000e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e68 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>:
		constexpr u8 convert_to_priority(const u8 index, const u8 can2_start, const ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	603a      	str	r2, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	460b      	mov	r3, r1
 8000e76:	71bb      	strb	r3, [r7, #6]
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8000e78:	79ba      	ldrb	r2, [r7, #6]
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d801      	bhi.n	8000e84 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1c>
 8000e80:	2220      	movs	r2, #32
 8000e82:	e000      	b.n	8000e86 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1e>
 8000e84:	2200      	movs	r2, #0
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d101      	bne.n	8000e92 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2a>
 8000e8e:	2310      	movs	r3, #16
 8000e90:	e000      	b.n	8000e94 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2c>
 8000e92:	2300      	movs	r3, #0
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b25a      	sxtb	r2, r3
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
		}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_ZNKSt6ranges13__cust_access6_BeginclIRSt5arrayIhLj14EEEEDaOT_>:
    public:
      template<__maybe_borrowed_range _Tp>
	requires is_array_v<remove_reference_t<_Tp>> || __member_begin<_Tp>
	  || __adl_begin<_Tp>
	constexpr auto
	operator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp>())
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
	      using _Up = remove_all_extents_t<remove_reference_t<_Tp>>;
	      static_assert(sizeof(_Up) != 0, "not array of incomplete type");
	      return __t + 0;
	    }
	  else if constexpr (__member_begin<_Tp>)
	    return __t.begin();
 8000eb8:	6838      	ldr	r0, [r7, #0]
 8000eba:	f001 f843 	bl	8001f44 <_ZNSt5arrayIhLj14EE5beginEv>
 8000ebe:	4603      	mov	r3, r0
	  else
	    return begin(__t);
	}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_ZNKSt6ranges13__cust_access4_EndclIRSt5arrayIhLj14EEEEDaOT_>:
    public:
      template<__maybe_borrowed_range _Tp>
	requires is_bounded_array_v<remove_reference_t<_Tp>> || __member_end<_Tp>
	|| __adl_end<_Tp>
	constexpr auto
	operator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp>())
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	    {
	      static_assert(is_lvalue_reference_v<_Tp>);
	      return __t + extent_v<remove_reference_t<_Tp>>;
	    }
	  else if constexpr (__member_end<_Tp>)
	    return __t.end();
 8000ed2:	6838      	ldr	r0, [r7, #0]
 8000ed4:	f001 f842 	bl	8001f5c <_ZNSt5arrayIhLj14EE3endEv>
 8000ed8:	4603      	mov	r3, r0
	  else
	    return end(__t);
	}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj14EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_>:

    template<random_access_range _Range,
	     typename _Comp = ranges::less, typename _Proj = identity>
      requires sortable<iterator_t<_Range>, _Comp, _Proj>
      constexpr borrowed_iterator_t<_Range>
      operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const
 8000ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af02      	add	r7, sp, #8
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	713a      	strb	r2, [r7, #4]
 8000ef2:	703b      	strb	r3, [r7, #0]
      {
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	480f      	ldr	r0, [pc, #60]	; (8000f34 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj14EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_+0x50>)
 8000ef8:	f7ff ffd9 	bl	8000eae <_ZNKSt6ranges13__cust_access6_BeginclIRSt5arrayIhLj14EEEEDaOT_>
 8000efc:	4604      	mov	r4, r0
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj14EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_+0x54>)
 8000f02:	f7ff ffe1 	bl	8000ec8 <_ZNKSt6ranges13__cust_access4_EndclIRSt5arrayIhLj14EEEEDaOT_>
 8000f06:	4605      	mov	r5, r0
		       std::move(__comp), std::move(__proj));
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 f833 	bl	8001f76 <_ZSt4moveIRNSt6ranges4lessEEONSt16remove_referenceIT_E4typeEOS4_>
 8000f10:	463b      	mov	r3, r7
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 f83a 	bl	8001f8c <_ZSt4moveIRSt8identityEONSt16remove_referenceIT_E4typeEOS3_>
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8000f18:	f88d 6000 	strb.w	r6, [sp]
 8000f1c:	4643      	mov	r3, r8
 8000f1e:	462a      	mov	r2, r5
 8000f20:	4621      	mov	r1, r4
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f001 f850 	bl	8001fc8 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessESt8identityEET_S5_T0_T1_T2_>
 8000f28:	4603      	mov	r3, r0
      }
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f34:	0800cfb8 	.word	0x0800cfb8
 8000f38:	0800cfbc 	.word	0x0800cfbc

08000f3c <_ZZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlT_E0_clIhEEDaSC_>:
			std::ranges::sort(priorities, {}, [](const auto priority){return priority & 0b11;});
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj14EENS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_>:
      operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const
 8000f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af02      	add	r7, sp, #8
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	713a      	strb	r2, [r7, #4]
 8000f6a:	703b      	strb	r3, [r7, #0]
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	480f      	ldr	r0, [pc, #60]	; (8000fac <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj14EENS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_+0x50>)
 8000f70:	f7ff ff9d 	bl	8000eae <_ZNKSt6ranges13__cust_access6_BeginclIRSt5arrayIhLj14EEEEDaOT_>
 8000f74:	4604      	mov	r4, r0
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj14EENS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_+0x54>)
 8000f7a:	f7ff ffa5 	bl	8000ec8 <_ZNKSt6ranges13__cust_access4_EndclIRSt5arrayIhLj14EEEEDaOT_>
 8000f7e:	4605      	mov	r5, r0
		       std::move(__comp), std::move(__proj));
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fff7 	bl	8001f76 <_ZSt4moveIRNSt6ranges4lessEEONSt16remove_referenceIT_E4typeEOS4_>
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 f848 	bl	8002020 <_ZSt4moveIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EONSt16remove_referenceISD_E4typeEOSD_>
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8000f90:	f88d 6000 	strb.w	r6, [sp]
 8000f94:	4643      	mov	r3, r8
 8000f96:	462a      	mov	r2, r5
 8000f98:	4621      	mov	r1, r4
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f001 f85e 	bl	800205c <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EESH_SH_T0_T1_T2_>
 8000fa0:	4603      	mov	r3, r0
      }
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fac:	0800cfb8 	.word	0x0800cfb8
 8000fb0:	0800cfbc 	.word	0x0800cfbc

08000fb4 <_ZZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE1_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13EEEEDaSD_>:
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	7039      	strb	r1, [r7, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 f8b4 	bl	8001132 <_ZNSt5arrayIhLj14EEixEj>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	099b      	lsrs	r3, r3, #6
 8000fd0:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8000fd6:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f8a7 	bl	8001132 <_ZNSt5arrayIhLj14EEixEj>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	099b      	lsrs	r3, r3, #6
 8000fea:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8000ff0:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f89a 	bl	8001132 <_ZNSt5arrayIhLj14EEixEj>
 8000ffe:	4603      	mov	r3, r0
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	099b      	lsrs	r3, r3, #6
 8001004:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 800100a:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8001010:	2103      	movs	r1, #3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f88d 	bl	8001132 <_ZNSt5arrayIhLj14EEixEj>
 8001018:	4603      	mov	r3, r0
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	099b      	lsrs	r3, r3, #6
 800101e:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691b      	ldr	r3, [r3, #16]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8001024:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 800102a:	2104      	movs	r1, #4
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f880 	bl	8001132 <_ZNSt5arrayIhLj14EEixEj>
 8001032:	4603      	mov	r3, r0
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	099b      	lsrs	r3, r3, #6
 8001038:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 800103e:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8001044:	2105      	movs	r1, #5
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f873 	bl	8001132 <_ZNSt5arrayIhLj14EEixEj>
 800104c:	4603      	mov	r3, r0
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	099b      	lsrs	r3, r3, #6
 8001052:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	699b      	ldr	r3, [r3, #24]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8001058:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 800105e:	2106      	movs	r1, #6
 8001060:	4618      	mov	r0, r3
 8001062:	f000 f866 	bl	8001132 <_ZNSt5arrayIhLj14EEixEj>
 8001066:	4603      	mov	r3, r0
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	099b      	lsrs	r3, r3, #6
 800106c:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69db      	ldr	r3, [r3, #28]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8001072:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8001078:	2107      	movs	r1, #7
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f859 	bl	8001132 <_ZNSt5arrayIhLj14EEixEj>
 8001080:	4603      	mov	r3, r0
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	099b      	lsrs	r3, r3, #6
 8001086:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a1b      	ldr	r3, [r3, #32]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 800108c:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8001092:	2108      	movs	r1, #8
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f84c 	bl	8001132 <_ZNSt5arrayIhLj14EEixEj>
 800109a:	4603      	mov	r3, r0
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	099b      	lsrs	r3, r3, #6
 80010a0:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 80010a6:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 80010ac:	2109      	movs	r1, #9
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f83f 	bl	8001132 <_ZNSt5arrayIhLj14EEixEj>
 80010b4:	4603      	mov	r3, r0
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	099b      	lsrs	r3, r3, #6
 80010ba:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 80010c0:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 80010c6:	210a      	movs	r1, #10
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 f832 	bl	8001132 <_ZNSt5arrayIhLj14EEixEj>
 80010ce:	4603      	mov	r3, r0
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	099b      	lsrs	r3, r3, #6
 80010d4:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 80010da:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 80010e0:	210b      	movs	r1, #11
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f825 	bl	8001132 <_ZNSt5arrayIhLj14EEixEj>
 80010e8:	4603      	mov	r3, r0
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	099b      	lsrs	r3, r3, #6
 80010ee:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 80010f4:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 80010fa:	210c      	movs	r1, #12
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f818 	bl	8001132 <_ZNSt5arrayIhLj14EEixEj>
 8001102:	4603      	mov	r3, r0
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	099b      	lsrs	r3, r3, #6
 8001108:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 800110e:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8001114:	210d      	movs	r1, #13
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f80b 	bl	8001132 <_ZNSt5arrayIhLj14EEixEj>
 800111c:	4603      	mov	r3, r0
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	099b      	lsrs	r3, r3, #6
 8001122:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8001128:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <_ZNSt5arrayIhLj14EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6839      	ldr	r1, [r7, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f805 	bl	8001150 <_ZNSt14__array_traitsIhLj14EE6_S_refERA14_Khj>
 8001146:	4603      	mov	r3, r0
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <_ZNSt14__array_traitsIhLj14EE6_S_refERA14_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 800116c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001170:	b0af      	sub	sp, #188	; 0xbc
 8001172:	af00      	add	r7, sp, #0
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
			}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>());
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	637b      	str	r3, [r7, #52]	; 0x34
 8001196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800119a:	63bb      	str	r3, [r7, #56]	; 0x38
 800119c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011a6:	643b      	str	r3, [r7, #64]	; 0x40
 80011a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011ac:	647b      	str	r3, [r7, #68]	; 0x44
 80011ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80011b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80011b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80011b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80011be:	653b      	str	r3, [r7, #80]	; 0x50
 80011c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011c4:	657b      	str	r3, [r7, #84]	; 0x54
 80011c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80011ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80011cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80011d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80011d6:	663b      	str	r3, [r7, #96]	; 0x60
 80011d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011dc:	4661      	mov	r1, ip
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fd8c 	bl	8000cfc <_ZZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13EEEEDaSD_>
			std::ranges::sort(priorities);
 80011e4:	f107 0114 	add.w	r1, r7, #20
 80011e8:	464b      	mov	r3, r9
 80011ea:	4642      	mov	r2, r8
 80011ec:	4849      	ldr	r0, [pc, #292]	; (8001314 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1a8>)
 80011ee:	f7ff fe79 	bl	8000ee4 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj14EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_>
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80011f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d845      	bhi.n	800128c <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x120>
				for(u32 i = 0; auto& priority : priorities)
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800120e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001212:	f000 fe97 	bl	8001f44 <_ZNSt5arrayIhLj14EE5beginEv>
 8001216:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 800121a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800121e:	f000 fe9d 	bl	8001f5c <_ZNSt5arrayIhLj14EE3endEv>
 8001222:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8001226:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800122a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800122e:	429a      	cmp	r2, r3
 8001230:	d026      	beq.n	8001280 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x114>
 8001232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					priority |= (i << 6);
 800123a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	019b      	lsls	r3, r3, #6
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b2da      	uxtb	r2, r3
 800124e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001252:	701a      	strb	r2, [r3, #0]
					++i;
 8001254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001258:	3301      	adds	r3, #1
 800125a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 800125e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001268:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	429a      	cmp	r2, r3
 8001270:	d005      	beq.n	800127e <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x112>
				for(u32 i = 0; auto& priority : priorities)
 8001272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001276:	3301      	adds	r3, #1
 8001278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800127c:	e7d3      	b.n	8001226 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xba>
						break;
 800127e:	bf00      	nop
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 8001280:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001284:	3301      	adds	r3, #1
 8001286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800128a:	e7b5      	b.n	80011f8 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x8c>
			std::ranges::sort(priorities, {}, [](const auto priority){return priority & 0b11;});
 800128c:	f107 0114 	add.w	r1, r7, #20
 8001290:	4633      	mov	r3, r6
 8001292:	462a      	mov	r2, r5
 8001294:	481f      	ldr	r0, [pc, #124]	; (8001314 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1a8>)
 8001296:	f7ff fe61 	bl	8000f5c <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj14EENS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_>
			}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>());
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	667b      	str	r3, [r7, #100]	; 0x64
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	673b      	str	r3, [r7, #112]	; 0x70
 80012ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80012b0:	677b      	str	r3, [r7, #116]	; 0x74
 80012b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80012b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80012b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80012bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80012c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80012ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80012ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80012d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80012d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80012da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80012de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80012f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80012fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80012fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001302:	4621      	mov	r1, r4
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe55 	bl	8000fb4 <_ZZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE1_clIJLh0ELh1ELh2ELh3ELh4ELh5ELh6ELh7ELh8ELh9ELh10ELh11ELh12ELh13EEEEDaSD_>
		}
 800130a:	bf00      	nop
 800130c:	37bc      	adds	r7, #188	; 0xbc
 800130e:	46bd      	mov	sp, r7
 8001310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001314:	0800cfc8 	.word	0x0800cfc8

08001318 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8001322:	2301      	movs	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001326:	6839      	ldr	r1, [r7, #0]
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2208      	movs	r2, #8
 800132e:	4618      	mov	r0, r3
 8001330:	f00b fdc8 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
			set_bit(bxcan->FS1R, bit_position);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800134a:	2101      	movs	r1, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fbce 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001358:	2101      	movs	r1, #1
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fbc7 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d107      	bne.n	8001378 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800136e:	2101      	movs	r1, #1
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fbaa 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8001376:	e006      	b.n	8001386 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800137e:	2101      	movs	r1, #1
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fbb4 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	7c1b      	ldrb	r3, [r3, #16]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d007      	beq.n	800139e <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001394:	2101      	movs	r1, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fba9 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 800139c:	e006      	b.n	80013ac <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80013a4:	2101      	movs	r1, #1
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fb8f 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 80013ac:	bf00      	nop
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh1ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 80013be:	2302      	movs	r3, #2
 80013c0:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	2208      	movs	r2, #8
 80013ca:	4618      	mov	r0, r3
 80013cc:	f00b fd7a 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
			set_bit(bxcan->FS1R, bit_position);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80013e6:	2102      	movs	r1, #2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fb80 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80013f4:	2102      	movs	r1, #2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fb79 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d107      	bne.n	8001414 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh1ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800140a:	2102      	movs	r1, #2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fb5c 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8001412:	e006      	b.n	8001422 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh1ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800141a:	2102      	movs	r1, #2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fb66 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	7c1b      	ldrb	r3, [r3, #16]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh1ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001430:	2102      	movs	r1, #2
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fb5b 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 8001438:	e006      	b.n	8001448 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh1ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001440:	2102      	movs	r1, #2
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fb41 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 8001448:	bf00      	nop
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh2ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 800145a:	2304      	movs	r3, #4
 800145c:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2208      	movs	r2, #8
 8001466:	4618      	mov	r0, r3
 8001468:	f00b fd2c 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
			set_bit(bxcan->FS1R, bit_position);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001482:	2104      	movs	r1, #4
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fb32 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001490:	2104      	movs	r1, #4
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fb2b 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d107      	bne.n	80014b0 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh2ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80014a6:	2104      	movs	r1, #4
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fb0e 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 80014ae:	e006      	b.n	80014be <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh2ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80014b6:	2104      	movs	r1, #4
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fb18 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	7c1b      	ldrb	r3, [r3, #16]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh2ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80014cc:	2104      	movs	r1, #4
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fb0d 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 80014d4:	e006      	b.n	80014e4 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh2ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80014dc:	2104      	movs	r1, #4
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff faf3 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh3ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 80014f6:	2308      	movs	r3, #8
 80014f8:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80014fa:	6839      	ldr	r1, [r7, #0]
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2208      	movs	r2, #8
 8001502:	4618      	mov	r0, r3
 8001504:	f00b fcde 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
			set_bit(bxcan->FS1R, bit_position);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800151e:	2108      	movs	r1, #8
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fae4 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800152c:	2108      	movs	r1, #8
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fadd 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d107      	bne.n	800154c <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh3ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001542:	2108      	movs	r1, #8
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fac0 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 800154a:	e006      	b.n	800155a <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh3ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001552:	2108      	movs	r1, #8
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff faca 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	7c1b      	ldrb	r3, [r3, #16]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh3ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001568:	2108      	movs	r1, #8
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fabf 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 8001570:	e006      	b.n	8001580 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh3ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001578:	2108      	movs	r1, #8
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff faa5 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 8001580:	bf00      	nop
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh4ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8001592:	2310      	movs	r3, #16
 8001594:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001596:	6839      	ldr	r1, [r7, #0]
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2208      	movs	r2, #8
 800159e:	4618      	mov	r0, r3
 80015a0:	f00b fc90 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
			set_bit(bxcan->FS1R, bit_position);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80015ba:	2110      	movs	r1, #16
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fa96 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80015c8:	2110      	movs	r1, #16
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fa8f 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d107      	bne.n	80015e8 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh4ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80015de:	2110      	movs	r1, #16
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fa72 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 80015e6:	e006      	b.n	80015f6 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh4ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80015ee:	2110      	movs	r1, #16
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fa7c 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	7c1b      	ldrb	r3, [r3, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d007      	beq.n	800160e <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh4ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001604:	2110      	movs	r1, #16
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fa71 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 800160c:	e006      	b.n	800161c <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh4ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001614:	2110      	movs	r1, #16
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fa57 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 800161c:	bf00      	nop
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh5ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 800162e:	2320      	movs	r3, #32
 8001630:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001632:	6839      	ldr	r1, [r7, #0]
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	2208      	movs	r2, #8
 800163a:	4618      	mov	r0, r3
 800163c:	f00b fc42 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
			set_bit(bxcan->FS1R, bit_position);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001656:	2120      	movs	r1, #32
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fa48 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001664:	2120      	movs	r1, #32
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fa41 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d107      	bne.n	8001684 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh5ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800167a:	2120      	movs	r1, #32
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fa24 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8001682:	e006      	b.n	8001692 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh5ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800168a:	2120      	movs	r1, #32
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fa2e 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	7c1b      	ldrb	r3, [r3, #16]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh5ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80016a0:	2120      	movs	r1, #32
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fa23 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 80016a8:	e006      	b.n	80016b8 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh5ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80016b0:	2120      	movs	r1, #32
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fa09 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh6ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 80016ca:	2340      	movs	r3, #64	; 0x40
 80016cc:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	2208      	movs	r2, #8
 80016d6:	4618      	mov	r0, r3
 80016d8:	f00b fbf4 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
			set_bit(bxcan->FS1R, bit_position);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80016f2:	2140      	movs	r1, #64	; 0x40
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff f9fa 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f9f3 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d107      	bne.n	8001720 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh6ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001716:	2140      	movs	r1, #64	; 0x40
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff f9d6 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 800171e:	e006      	b.n	800172e <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh6ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001726:	2140      	movs	r1, #64	; 0x40
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff f9e0 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	7c1b      	ldrb	r3, [r3, #16]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh6ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800173c:	2140      	movs	r1, #64	; 0x40
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff f9d5 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 8001744:	e006      	b.n	8001754 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh6ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800174c:	2140      	movs	r1, #64	; 0x40
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f9bb 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 8001754:	bf00      	nop
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh7ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800176a:	6839      	ldr	r1, [r7, #0]
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2208      	movs	r2, #8
 8001772:	4618      	mov	r0, r3
 8001774:	f00b fba6 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
			set_bit(bxcan->FS1R, bit_position);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff f9ac 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff f9a5 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d107      	bne.n	80017bc <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh7ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff f988 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 80017ba:	e006      	b.n	80017ca <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh7ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80017c2:	2180      	movs	r1, #128	; 0x80
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff f992 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	7c1b      	ldrb	r3, [r3, #16]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh7ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f987 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 80017e0:	e006      	b.n	80017f0 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh7ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff f96d 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 80017f0:	bf00      	nop
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh8ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8001802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001806:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001808:	6839      	ldr	r1, [r7, #0]
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	2208      	movs	r2, #8
 8001810:	4618      	mov	r0, r3
 8001812:	f00b fb57 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
			set_bit(bxcan->FS1R, bit_position);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800182c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff f95c 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800183c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff f954 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d108      	bne.n	8001860 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh8ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff f936 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 800185e:	e007      	b.n	8001870 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh8ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f93f 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	7c1b      	ldrb	r3, [r3, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh8ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800187e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff f933 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 8001888:	e007      	b.n	800189a <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh8ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff f918 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh9ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 80018ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b0:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80018b2:	6839      	ldr	r1, [r7, #0]
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2208      	movs	r2, #8
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00b fb02 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
			set_bit(bxcan->FS1R, bit_position);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80018d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f907 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f8ff 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d108      	bne.n	800190a <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh9ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80018fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f8e1 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8001908:	e007      	b.n	800191a <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh9ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001910:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff f8ea 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	7c1b      	ldrb	r3, [r3, #16]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh9ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001928:	f44f 7100 	mov.w	r1, #512	; 0x200
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff f8de 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 8001932:	e007      	b.n	8001944 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh9ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800193a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f8c3 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 8001944:	bf00      	nop
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh10ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8001956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195a:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800195c:	6839      	ldr	r1, [r7, #0]
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	2208      	movs	r2, #8
 8001964:	4618      	mov	r0, r3
 8001966:	f00b faad 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
			set_bit(bxcan->FS1R, bit_position);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001980:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f8b2 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001990:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f8aa 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d108      	bne.n	80019b4 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh10ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80019a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f88c 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 80019b2:	e007      	b.n	80019c4 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh10ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f895 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	7c1b      	ldrb	r3, [r3, #16]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh10ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80019d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f889 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 80019dc:	e007      	b.n	80019ee <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh10ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80019e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff f86e 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh11ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8001a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a04:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001a06:	6839      	ldr	r1, [r7, #0]
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f00b fa58 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
			set_bit(bxcan->FS1R, bit_position);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001a2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f85d 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001a3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f855 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d108      	bne.n	8001a5e <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh11ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f837 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8001a5c:	e007      	b.n	8001a6e <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh11ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff f840 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	7c1b      	ldrb	r3, [r3, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh11ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001a7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff f834 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 8001a86:	e007      	b.n	8001a98 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh11ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001a8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f819 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 8001a98:	bf00      	nop
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh12ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8001aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aae:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001ab0:	6839      	ldr	r1, [r7, #0]
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	2208      	movs	r2, #8
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f00b fa03 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
			set_bit(bxcan->FS1R, bit_position);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001ad4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff f808 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ae4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f800 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d108      	bne.n	8001b08 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh12ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001afc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe ffe2 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8001b06:	e007      	b.n	8001b18 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh12ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe ffeb 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	7c1b      	ldrb	r3, [r3, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh12ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001b26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe ffdf 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 8001b30:	e007      	b.n	8001b42 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh12ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe ffc4 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh13ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8001b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b58:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001b5a:	6839      	ldr	r1, [r7, #0]
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	2208      	movs	r2, #8
 8001b62:	4618      	mov	r0, r3
 8001b64:	f00b f9ae 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
			set_bit(bxcan->FS1R, bit_position);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe ffb3 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			set_bit(bxcan->FM1R, bit_position);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe ffab 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d108      	bne.n	8001bb2 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh13ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x68>
			clear_bit(bxcan->FFA1R, bit_position);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe ff8d 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8001bb0:	e007      	b.n	8001bc2 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh13ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x78>
			set_bit(bxcan->FFA1R, bit_position);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001bb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe ff96 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	7c1b      	ldrb	r3, [r3, #16]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d008      	beq.n	8001bdc <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh13ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x92>
			set_bit(bxcan->FA1R, bit_position);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe ff8a 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 8001bda:	e007      	b.n	8001bec <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh13ELNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0xa2>
			clear_bit(bxcan->FA1R, bit_position);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe ff6f 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_ZZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE_clIJLh0EEEEDaSD_>:
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	7039      	strb	r1, [r7, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685c      	ldr	r4, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	7819      	ldrb	r1, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f000 f806 	bl	8001c1e <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8001c12:	4603      	mov	r3, r0
 8001c14:	7023      	strb	r3, [r4, #0]
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd90      	pop	{r4, r7, pc}

08001c1e <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE>:
		constexpr u8 convert_to_priority(const u8 index, const u8 can2_start, const ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	603a      	str	r2, [r7, #0]
 8001c28:	71fb      	strb	r3, [r7, #7]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	71bb      	strb	r3, [r7, #6]
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8001c2e:	79ba      	ldrb	r2, [r7, #6]
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d801      	bhi.n	8001c3a <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1c>
 8001c36:	2220      	movs	r2, #32
 8001c38:	e000      	b.n	8001c3c <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1e>
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2a>
 8001c44:	2310      	movs	r3, #16
 8001c46:	e000      	b.n	8001c4a <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2c>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b25b      	sxtb	r3, r3
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	b2db      	uxtb	r3, r3
		}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_ZNKSt6ranges13__cust_access6_BeginclIRSt5arrayIhLj1EEEEDaOT_>:
	operator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp>())
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
	    return __t.begin();
 8001c72:	6838      	ldr	r0, [r7, #0]
 8001c74:	f000 fa1e 	bl	80020b4 <_ZNSt5arrayIhLj1EE5beginEv>
 8001c78:	4603      	mov	r3, r0
	}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_ZNKSt6ranges13__cust_access4_EndclIRSt5arrayIhLj1EEEEDaOT_>:
	operator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp>())
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
	    return __t.end();
 8001c8c:	6838      	ldr	r0, [r7, #0]
 8001c8e:	f000 fa1d 	bl	80020cc <_ZNSt5arrayIhLj1EE3endEv>
 8001c92:	4603      	mov	r3, r0
	}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_>:
      operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const
 8001c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af02      	add	r7, sp, #8
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	713a      	strb	r2, [r7, #4]
 8001caa:	703b      	strb	r3, [r7, #0]
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	480f      	ldr	r0, [pc, #60]	; (8001cec <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_+0x50>)
 8001cb0:	f7ff ffda 	bl	8001c68 <_ZNKSt6ranges13__cust_access6_BeginclIRSt5arrayIhLj1EEEEDaOT_>
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_+0x54>)
 8001cba:	f7ff ffe2 	bl	8001c82 <_ZNKSt6ranges13__cust_access4_EndclIRSt5arrayIhLj1EEEEDaOT_>
 8001cbe:	4605      	mov	r5, r0
		       std::move(__comp), std::move(__proj));
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f957 	bl	8001f76 <_ZSt4moveIRNSt6ranges4lessEEONSt16remove_referenceIT_E4typeEOS4_>
 8001cc8:	463b      	mov	r3, r7
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f95e 	bl	8001f8c <_ZSt4moveIRSt8identityEONSt16remove_referenceIT_E4typeEOS3_>
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8001cd0:	f88d 6000 	strb.w	r6, [sp]
 8001cd4:	4643      	mov	r3, r8
 8001cd6:	462a      	mov	r2, r5
 8001cd8:	4621      	mov	r1, r4
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f974 	bl	8001fc8 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessESt8identityEET_S5_T0_T1_T2_>
 8001ce0:	4603      	mov	r3, r0
      }
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cec:	0800cfb8 	.word	0x0800cfb8
 8001cf0:	0800cfbc 	.word	0x0800cfbc

08001cf4 <_ZZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlT_E0_clIhEEDaSC_>:
			std::ranges::sort(priorities, {}, [](const auto priority){return priority & 0b11;});
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_>:
      operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const
 8001d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af02      	add	r7, sp, #8
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	713a      	strb	r2, [r7, #4]
 8001d22:	703b      	strb	r3, [r7, #0]
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	480f      	ldr	r0, [pc, #60]	; (8001d64 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_+0x50>)
 8001d28:	f7ff ff9e 	bl	8001c68 <_ZNKSt6ranges13__cust_access6_BeginclIRSt5arrayIhLj1EEEEDaOT_>
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	68b9      	ldr	r1, [r7, #8]
 8001d30:	480d      	ldr	r0, [pc, #52]	; (8001d68 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_+0x54>)
 8001d32:	f7ff ffa6 	bl	8001c82 <_ZNKSt6ranges13__cust_access4_EndclIRSt5arrayIhLj1EEEEDaOT_>
 8001d36:	4605      	mov	r5, r0
		       std::move(__comp), std::move(__proj));
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f91b 	bl	8001f76 <_ZSt4moveIRNSt6ranges4lessEEONSt16remove_referenceIT_E4typeEOS4_>
 8001d40:	463b      	mov	r3, r7
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f9cf 	bl	80020e6 <_ZSt4moveIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EONSt16remove_referenceISD_E4typeEOSD_>
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8001d48:	f88d 6000 	strb.w	r6, [sp]
 8001d4c:	4643      	mov	r3, r8
 8001d4e:	462a      	mov	r2, r5
 8001d50:	4621      	mov	r1, r4
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f9e4 	bl	8002120 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EESH_SH_T0_T1_T2_>
 8001d58:	4603      	mov	r3, r0
      }
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d64:	0800cfb8 	.word	0x0800cfb8
 8001d68:	0800cfbc 	.word	0x0800cfbc

08001d6c <_ZZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE1_clIJLh0EEEEDaSD_>:
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	7039      	strb	r1, [r7, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 f80b 	bl	8001d98 <_ZNSt5arrayIhLj1EEixEj>
 8001d82:	4603      	mov	r3, r0
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	099b      	lsrs	r3, r3, #6
 8001d88:	b2da      	uxtb	r2, r3
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8001d8e:	60da      	str	r2, [r3, #12]
			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_ZNSt5arrayIhLj1EEixEj>:
      operator[](size_type __n) noexcept
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f805 	bl	8001db6 <_ZNSt14__array_traitsIhLj1EE6_S_refERA1_Khj>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <_ZNSt14__array_traitsIhLj1EE6_S_refERA1_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8001dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dd8:	b08f      	sub	sp, #60	; 0x3c
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	6039      	str	r1, [r7, #0]
 8001de0:	71fb      	strb	r3, [r7, #7]
			}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>());
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	733b      	strb	r3, [r7, #12]
 8001de6:	f107 0308 	add.w	r3, r7, #8
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fefc 	bl	8001bf4 <_ZZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE_clIJLh0EEEEDaSD_>
			std::ranges::sort(priorities);
 8001dfc:	f107 0108 	add.w	r1, r7, #8
 8001e00:	464b      	mov	r3, r9
 8001e02:	4642      	mov	r2, r8
 8001e04:	4827      	ldr	r0, [pc, #156]	; (8001ea4 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xd0>)
 8001e06:	f7ff ff49 	bl	8001c9c <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessESt8identityEENSt11conditionalIX14borrowed_rangeIT_EEDTcl14__ranges_begincl7declvalIRS8_EEEENS_8danglingEE4typeEOS8_T0_T1_>
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d830      	bhi.n	8001e76 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xa2>
				for(u32 i = 0; auto& priority : priorities)
 8001e14:	2300      	movs	r3, #0
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
 8001e18:	f107 0308 	add.w	r3, r7, #8
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e20:	f000 f948 	bl	80020b4 <_ZNSt5arrayIhLj1EE5beginEv>
 8001e24:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e28:	f000 f950 	bl	80020cc <_ZNSt5arrayIhLj1EE3endEv>
 8001e2c:	6278      	str	r0, [r7, #36]	; 0x24
 8001e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d01b      	beq.n	8001e6e <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x9a>
 8001e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e38:	623b      	str	r3, [r7, #32]
					priority |= (i << 6);
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	019b      	lsls	r3, r3, #6
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	4313      	orrs	r3, r2
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	701a      	strb	r2, [r3, #0]
					++i;
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e50:	3301      	adds	r3, #1
 8001e52:	633b      	str	r3, [r7, #48]	; 0x30
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d003      	beq.n	8001e6c <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x98>
				for(u32 i = 0; auto& priority : priorities)
 8001e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e66:	3301      	adds	r3, #1
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e6a:	e7e0      	b.n	8001e2e <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5a>
						break;
 8001e6c:	bf00      	nop
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 8001e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e70:	3301      	adds	r3, #1
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
 8001e74:	e7cb      	b.n	8001e0e <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a>
			std::ranges::sort(priorities, {}, [](const auto priority){return priority & 0b11;});
 8001e76:	f107 0108 	add.w	r1, r7, #8
 8001e7a:	4633      	mov	r3, r6
 8001e7c:	462a      	mov	r2, r5
 8001e7e:	4809      	ldr	r0, [pc, #36]	; (8001ea4 <_ZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xd0>)
 8001e80:	f7ff ff48 	bl	8001d14 <_ZNKSt6ranges9__sort_fnclIRSt5arrayIhLj1EENS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EENSt11conditionalIX14borrowed_rangeISJ_EEDTcl14__ranges_begincl7declvalIRSJ_EEEENS_8danglingEE4typeEOSJ_T0_T1_>
			}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>());
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	f107 0318 	add.w	r3, r7, #24
 8001e92:	4621      	mov	r1, r4
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff69 	bl	8001d6c <_ZZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlSt16integer_sequenceIhJXspT_EEEE1_clIJLh0EEEEDaSD_>
		}
 8001e9a:	bf00      	nop
 8001e9c:	373c      	adds	r7, #60	; 0x3c
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ea4:	0800cfc8 	.word	0x0800cfc8

08001ea8 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE>:
	void per_filter_arg(CAN_TypeDef *const bxcan, ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
		constexpr u32 bit_position = (u32)1 << index;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001eb6:	6839      	ldr	r1, [r7, #0]
 8001eb8:	f107 030c 	add.w	r3, r7, #12
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f00b f800 	bl	800cec4 <memcpy>
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
			set_bit(bxcan->FS1R, bit_position);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001eda:	2101      	movs	r1, #1
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fe06 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
			clear_bit(bxcan->FM1R, bit_position);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ee8:	2101      	movs	r1, #1
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fded 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d107      	bne.n	8001f08 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x60>
			clear_bit(bxcan->FFA1R, bit_position);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001efe:	2101      	movs	r1, #1
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fde2 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
 8001f06:	e006      	b.n	8001f16 <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x6e>
			set_bit(bxcan->FFA1R, bit_position);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fdec 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
		if(filter_arg.activate)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	7c1b      	ldrb	r3, [r3, #16]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x86>
			set_bit(bxcan->FA1R, bit_position);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001f24:	2101      	movs	r1, #1
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fde1 	bl	8000aee <_ZN6CRSLib7set_bitImmEEvRVT_T0_>
	}
 8001f2c:	e006      	b.n	8001f3c <_ZN6CRSLib3Can6RM036513FilterManager14per_filter_argILh0ELNS0_11FilterWidthE0ELNS0_10FilterModeE0EEEvP11CAN_TypeDefRNS2_15ConfigFilterArgIXT0_EXT1_EEE+0x94>
			clear_bit(bxcan->FA1R, bit_position);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001f34:	2101      	movs	r1, #1
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fdc7 	bl	8000aca <_ZN6CRSLib9clear_bitImmEEvRVT_T0_>
	}
 8001f3c:	bf00      	nop
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_ZNSt5arrayIhLj14EE5beginEv>:
      begin() noexcept
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f913 	bl	8002178 <_ZNSt5arrayIhLj14EE4dataEv>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_ZNSt5arrayIhLj14EE3endEv>:
      end() noexcept
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f907 	bl	8002178 <_ZNSt5arrayIhLj14EE4dataEv>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	330e      	adds	r3, #14
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_ZSt4moveIRNSt6ranges4lessEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_ZSt4moveIRSt8identityEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <_ZNSt6ranges8__detail16__make_comp_projINS_4lessESt8identityEEDaRT_RT0_>:
      __make_comp_proj(_Comp& __comp, _Proj& __proj)
 8001fa2:	b480      	push	{r7}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
	};
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	605a      	str	r2, [r3, #4]
      }
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessESt8identityEET_S5_T0_T1_T2_>:
      operator()(_Iter __first, _Sent __last,
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	703b      	strb	r3, [r7, #0]
	auto __lasti = ranges::next(__first, __last);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	480f      	ldr	r0, [pc, #60]	; (800201c <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessESt8identityEET_S5_T0_T1_T2_+0x54>)
 8001fde:	f000 f8d9 	bl	8002194 <_ZNKSt6ranges9__next_fnclIPhS2_EET_S3_T0_>
 8001fe2:	61f8      	str	r0, [r7, #28]
	std::sort(std::move(__first), __lasti,
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 f8e7 	bl	80021bc <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	681c      	ldr	r4, [r3, #0]
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4639      	mov	r1, r7
 8001ff8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ffd0 	bl	8001fa2 <_ZNSt6ranges8__detail16__make_comp_projINS_4lessESt8identityEEDaRT_RT0_>
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	cb0c      	ldmia	r3, {r2, r3}
 8002008:	69f9      	ldr	r1, [r7, #28]
 800200a:	4620      	mov	r0, r4
 800200c:	f000 f8e1 	bl	80021d2 <_ZSt4sortIPhZNSt6ranges8__detail16__make_comp_projINS1_4lessESt8identityEEDaRT_RT0_EUlOS6_OS8_E_EvS6_S6_S8_>
	return __lasti;
 8002010:	69fb      	ldr	r3, [r7, #28]
      }
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	; 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}
 800201a:	bf00      	nop
 800201c:	0800cfc4 	.word	0x0800cfc4

08002020 <_ZSt4moveIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EONSt16remove_referenceISD_E4typeEOSD_>:
    move(_Tp&& __t) noexcept
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <_ZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0EEJLNS4_10FilterModeE1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_>:
      __make_comp_proj(_Comp& __comp, _Proj& __proj)
 8002036:	b480      	push	{r7}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
	};
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	605a      	str	r2, [r3, #4]
      }
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EESH_SH_T0_T1_T2_>:
      operator()(_Iter __first, _Sent __last,
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	703b      	strb	r3, [r7, #0]
	auto __lasti = ranges::next(__first, __last);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4619      	mov	r1, r3
 8002070:	480f      	ldr	r0, [pc, #60]	; (80020b0 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EESH_SH_T0_T1_T2_+0x54>)
 8002072:	f000 f88f 	bl	8002194 <_ZNKSt6ranges9__next_fnclIPhS2_EET_S3_T0_>
 8002076:	61f8      	str	r0, [r7, #28]
	std::sort(std::move(__first), __lasti,
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	4618      	mov	r0, r3
 800207e:	f000 f89d 	bl	80021bc <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8002082:	4603      	mov	r3, r0
 8002084:	681c      	ldr	r4, [r3, #0]
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4639      	mov	r1, r7
 800208c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ffd0 	bl	8002036 <_ZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0EEJLNS4_10FilterModeE1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_>
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	cb0c      	ldmia	r3, {r2, r3}
 800209c:	69f9      	ldr	r1, [r7, #28]
 800209e:	4620      	mov	r0, r4
 80020a0:	f000 f8b1 	bl	8002206 <_ZSt4sortIPhZNSt6ranges8__detail16__make_comp_projINS1_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS6_11FilterWidthE0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0EEJLNS6_10FilterModeE1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1EEEEvhDpRNS8_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSI_RT0_EUlOSI_OSL_E_EvSI_SI_SL_>
	return __lasti;
 80020a4:	69fb      	ldr	r3, [r7, #28]
      }
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}
 80020ae:	bf00      	nop
 80020b0:	0800cfc4 	.word	0x0800cfc4

080020b4 <_ZNSt5arrayIhLj1EE5beginEv>:
      begin() noexcept
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f8bc 	bl	800223a <_ZNSt5arrayIhLj1EE4dataEv>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <_ZNSt5arrayIhLj1EE3endEv>:
      end() noexcept
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f8b0 	bl	800223a <_ZNSt5arrayIhLj1EE4dataEv>
 80020da:	4603      	mov	r3, r0
 80020dc:	3301      	adds	r3, #1
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <_ZSt4moveIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EONSt16remove_referenceISD_E4typeEOSD_>:
    move(_Tp&& __t) noexcept
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_ZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0EEJLNS4_10FilterModeE0EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_>:
      __make_comp_proj(_Comp& __comp, _Proj& __proj)
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
	};
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	605a      	str	r2, [r3, #4]
      }
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EESH_SH_T0_T1_T2_>:
      operator()(_Iter __first, _Sent __last,
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	703b      	strb	r3, [r7, #0]
	auto __lasti = ranges::next(__first, __last);
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4619      	mov	r1, r3
 8002134:	480f      	ldr	r0, [pc, #60]	; (8002174 <_ZNKSt6ranges9__sort_fnclIPhS2_NS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EESH_SH_T0_T1_T2_+0x54>)
 8002136:	f000 f82d 	bl	8002194 <_ZNKSt6ranges9__next_fnclIPhS2_EET_S3_T0_>
 800213a:	61f8      	str	r0, [r7, #28]
	std::sort(std::move(__first), __lasti,
 800213c:	f107 0308 	add.w	r3, r7, #8
 8002140:	4618      	mov	r0, r3
 8002142:	f000 f83b 	bl	80021bc <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8002146:	4603      	mov	r3, r0
 8002148:	681c      	ldr	r4, [r3, #0]
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4639      	mov	r1, r7
 8002150:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ffd1 	bl	80020fc <_ZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0EEJLNS4_10FilterModeE0EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_>
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	cb0c      	ldmia	r3, {r2, r3}
 8002160:	69f9      	ldr	r1, [r7, #28]
 8002162:	4620      	mov	r0, r4
 8002164:	f000 f876 	bl	8002254 <_ZSt4sortIPhZNSt6ranges8__detail16__make_comp_projINS1_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS6_11FilterWidthE0EEJLNS6_10FilterModeE0EEEEvhDpRNS8_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSI_RT0_EUlOSI_OSL_E_EvSI_SI_SL_>
	return __lasti;
 8002168:	69fb      	ldr	r3, [r7, #28]
      }
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd90      	pop	{r4, r7, pc}
 8002172:	bf00      	nop
 8002174:	0800cfc4 	.word	0x0800cfc4

08002178 <_ZNSt5arrayIhLj14EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f880 	bl	8002288 <_ZNSt14__array_traitsIhLj14EE6_S_ptrERA14_Kh>
 8002188:	4603      	mov	r3, r0
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <_ZNKSt6ranges9__next_fnclIPhS2_EET_S3_T0_>:
	return __x;
      }

    template<input_or_output_iterator _It, sentinel_for<_It> _Sent>
      constexpr _It
      operator()(_It __x, _Sent __bound) const
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
      {
	ranges::advance(__x, __bound);
 80021a0:	f107 0308 	add.w	r3, r7, #8
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4619      	mov	r1, r3
 80021a8:	4803      	ldr	r0, [pc, #12]	; (80021b8 <_ZNKSt6ranges9__next_fnclIPhS2_EET_S3_T0_+0x24>)
 80021aa:	f000 f878 	bl	800229e <_ZNKSt6ranges12__advance_fnclIPhS2_EEvRT_T0_>
	return __x;
 80021ae:	68bb      	ldr	r3, [r7, #8]
      }
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	0800cfc0 	.word	0x0800cfc0

080021bc <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <_ZSt4sortIPhZNSt6ranges8__detail16__make_comp_projINS1_4lessESt8identityEEDaRT_RT0_EUlOS6_OS8_E_EvS6_S6_S8_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	4639      	mov	r1, r7
 80021de:	e881 000c 	stmia.w	r1, {r2, r3}
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 80021e2:	f107 0010 	add.w	r0, r7, #16
 80021e6:	463b      	mov	r3, r7
 80021e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80021ec:	f000 f869 	bl	80022c2 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EENS0_15_Iter_comp_iterIS7_EES7_>
 80021f0:	f107 0310 	add.w	r3, r7, #16
 80021f4:	cb0c      	ldmia	r3, {r2, r3}
 80021f6:	68b9      	ldr	r1, [r7, #8]
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f877 	bl	80022ec <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
    }
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <_ZSt4sortIPhZNSt6ranges8__detail16__make_comp_projINS1_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS6_11FilterWidthE0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0ELSC_0EEJLNS6_10FilterModeE1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1ELSD_1EEEEvhDpRNS8_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSI_RT0_EUlOSI_OSL_E_EvSI_SI_SL_>:
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	4639      	mov	r1, r7
 8002212:	e881 000c 	stmia.w	r1, {r2, r3}
      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8002216:	f107 0010 	add.w	r0, r7, #16
 800221a:	463b      	mov	r3, r7
 800221c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002220:	f000 f889 	bl	8002336 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_15_Iter_comp_iterISJ_EESJ_>
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	cb0c      	ldmia	r3, {r2, r3}
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f897 	bl	8002360 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <_ZNSt5arrayIhLj1EE4dataEv>:
      data() noexcept
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 f8b0 	bl	80023aa <_ZNSt14__array_traitsIhLj1EE6_S_ptrERA1_Kh>
 800224a:	4603      	mov	r3, r0
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_ZSt4sortIPhZNSt6ranges8__detail16__make_comp_projINS1_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS6_11FilterWidthE0EEJLNS6_10FilterModeE0EEEEvhDpRNS8_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSI_RT0_EUlOSI_OSL_E_EvSI_SI_SL_>:
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	4639      	mov	r1, r7
 8002260:	e881 000c 	stmia.w	r1, {r2, r3}
      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8002264:	f107 0010 	add.w	r0, r7, #16
 8002268:	463b      	mov	r3, r7
 800226a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800226e:	f000 f8a7 	bl	80023c0 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_15_Iter_comp_iterISJ_EESJ_>
 8002272:	f107 0310 	add.w	r3, r7, #16
 8002276:	cb0c      	ldmia	r3, {r2, r3}
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f8b5 	bl	80023ea <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 8002280:	bf00      	nop
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_ZNSt14__array_traitsIhLj14EE6_S_ptrERA14_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_ZNKSt6ranges12__advance_fnclIPhS2_EEvRT_T0_>:
      operator()(_It& __it, _Sent __bound) const
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
	  __it = std::move(__bound);
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff85 	bl	80021bc <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 80022b2:	4603      	mov	r3, r0
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	601a      	str	r2, [r3, #0]
      }
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EENS0_15_Iter_comp_iterIS7_EES7_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	e883 0006 	stmia.w	r3, {r1, r2}
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f8ae 	bl	8002434 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessESt8identityEEDaRT_RT0_EUlOS5_OS7_E_EONSt16remove_referenceIS5_E4typeES9_>
 80022d8:	4603      	mov	r3, r0
 80022da:	e893 0006 	ldmia.w	r3, {r1, r2}
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f8b3 	bl	800244a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EC1ESD_>
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	4639      	mov	r1, r7
 80022f8:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__first != __last)
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	429a      	cmp	r2, r3
 8002302:	d014      	beq.n	800232e <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x42>
				std::__lg(__last - __first) * 2,
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe faae 	bl	800086c <_ZSt4__lgi>
 8002310:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8002312:	005a      	lsls	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f8aa 	bl	8002476 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8002322:	463b      	mov	r3, r7
 8002324:	cb0c      	ldmia	r3, {r2, r3}
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f8d9 	bl	80024e0 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
    }
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_15_Iter_comp_iterISJ_EESJ_>:
    __iter_comp_iter(_Compare __comp)
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	e883 0006 	stmia.w	r3, {r1, r2}
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f8f2 	bl	8002530 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 800234c:	4603      	mov	r3, r0
 800234e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f8f7 	bl	8002546 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1ESQ_>
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	4639      	mov	r1, r7
 800236c:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__first != __last)
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	429a      	cmp	r2, r3
 8002376:	d014      	beq.n	80023a2 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x42>
				std::__lg(__last - __first) * 2,
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fa74 	bl	800086c <_ZSt4__lgi>
 8002384:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8002386:	005a      	lsls	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f8ee 	bl	8002572 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8002396:	463b      	mov	r3, r7
 8002398:	cb0c      	ldmia	r3, {r2, r3}
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f91d 	bl	80025dc <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <_ZNSt14__array_traitsIhLj1EE6_S_ptrERA1_Kh>:
      _S_ptr(const _Type& __t) noexcept
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_15_Iter_comp_iterISJ_EESJ_>:
    __iter_comp_iter(_Compare __comp)
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	e883 0006 	stmia.w	r3, {r1, r2}
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f92b 	bl	800262c <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 80023d6:	4603      	mov	r3, r0
 80023d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f930 	bl	8002642 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1ESQ_>
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af02      	add	r7, sp, #8
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	4639      	mov	r1, r7
 80023f6:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__first != __last)
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d014      	beq.n	800242c <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x42>
				std::__lg(__last - __first) * 2,
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe fa2f 	bl	800086c <_ZSt4__lgi>
 800240e:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8002410:	005a      	lsls	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f927 	bl	800266e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8002420:	463b      	mov	r3, r7
 8002422:	cb0c      	ldmia	r3, {r2, r3}
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f956 	bl	80026d8 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessESt8identityEEDaRT_RT0_EUlOS5_OS7_E_EONSt16remove_referenceIS5_E4typeES9_>:
    move(_Tp&& __t) noexcept
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EC1ESD_>:
      _Iter_comp_iter(_Compare __comp)
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	e883 0006 	stmia.w	r3, {r1, r2}
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ffea 	bl	8002434 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessESt8identityEEDaRT_RT0_EUlOS5_OS7_E_EONSt16remove_referenceIS5_E4typeES9_>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002468:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8002476:	b082      	sub	sp, #8
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
      while (__last - __first > int(_S_threshold))
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b10      	cmp	r3, #16
 800248e:	dd21      	ble.n	80024d4 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x5e>
	  if (__depth_limit == 0)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d108      	bne.n	80024a8 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x32>
	      std::__partial_sort(__first, __last, __last, __comp);
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f941 	bl	8002728 <_ZSt14__partial_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SB_>
	      return;
 80024a6:	e015      	b.n	80024d4 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x5e>
	  --__depth_limit;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 80024ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b2:	cb0c      	ldmia	r3, {r2, r3}
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f954 	bl	8002764 <_ZSt27__unguarded_partition_pivotIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_SB_>
 80024bc:	6178      	str	r0, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	6978      	ldr	r0, [r7, #20]
 80024ca:	f7ff ffd4 	bl	8002476 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>
	  __last = __cut;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 80024d2:	e7d8      	b.n	8002486 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x10>
    }
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024dc:	b002      	add	sp, #8
 80024de:	4770      	bx	lr

080024e0 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	4639      	mov	r1, r7
 80024ec:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__last - __first > int(_S_threshold))
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b10      	cmp	r3, #16
 80024f8:	dd10      	ble.n	800251c <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x3c>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f103 0110 	add.w	r1, r3, #16
 8002500:	463b      	mov	r3, r7
 8002502:	cb0c      	ldmia	r3, {r2, r3}
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f986 	bl	8002816 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f103 0010 	add.w	r0, r3, #16
 8002510:	463b      	mov	r3, r7
 8002512:	cb0c      	ldmia	r3, {r2, r3}
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	f000 f9c7 	bl	80028a8 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
    }
 800251a:	e005      	b.n	8002528 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x48>
	std::__insertion_sort(__first, __last, __comp);
 800251c:	463b      	mov	r3, r7
 800251e:	cb0c      	ldmia	r3, {r2, r3}
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f977 	bl	8002816 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
    }
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>:
    move(_Tp&& __t) noexcept
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1ESQ_>:
      _Iter_comp_iter(_Compare __comp)
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	e883 0006 	stmia.w	r3, {r1, r2}
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ffea 	bl	8002530 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002564:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8002572:	b082      	sub	sp, #8
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
      while (__last - __first > int(_S_threshold))
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b10      	cmp	r3, #16
 800258a:	dd21      	ble.n	80025d0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x5e>
	  if (__depth_limit == 0)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d108      	bne.n	80025a4 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x32>
	      std::__partial_sort(__first, __last, __last, __comp);
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f9a7 	bl	80028f0 <_ZSt14__partial_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>
	      return;
 80025a2:	e015      	b.n	80025d0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x5e>
	  --__depth_limit;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 80025aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ae:	cb0c      	ldmia	r3, {r2, r3}
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f9ba 	bl	800292c <_ZSt27__unguarded_partition_pivotIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SO_>
 80025b8:	6178      	str	r0, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	6978      	ldr	r0, [r7, #20]
 80025c6:	f7ff ffd4 	bl	8002572 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
	  __last = __cut;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 80025ce:	e7d8      	b.n	8002582 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x10>
    }
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025d8:	b002      	add	sp, #8
 80025da:	4770      	bx	lr

080025dc <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	4639      	mov	r1, r7
 80025e8:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__last - __first > int(_S_threshold))
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	dd10      	ble.n	8002618 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x3c>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f103 0110 	add.w	r1, r3, #16
 80025fc:	463b      	mov	r3, r7
 80025fe:	cb0c      	ldmia	r3, {r2, r3}
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f9d4 	bl	80029ae <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f103 0010 	add.w	r0, r3, #16
 800260c:	463b      	mov	r3, r7
 800260e:	cb0c      	ldmia	r3, {r2, r3}
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	f000 fa15 	bl	8002a40 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 8002616:	e005      	b.n	8002624 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x48>
	std::__insertion_sort(__first, __last, __comp);
 8002618:	463b      	mov	r3, r7
 800261a:	cb0c      	ldmia	r3, {r2, r3}
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f9c5 	bl	80029ae <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>:
    move(_Tp&& __t) noexcept
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1ESQ_>:
      _Iter_comp_iter(_Compare __comp)
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	e883 0006 	stmia.w	r3, {r1, r2}
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ffea 	bl	800262c <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002660:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800266e:	b082      	sub	sp, #8
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
      while (__last - __first > int(_S_threshold))
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b10      	cmp	r3, #16
 8002686:	dd21      	ble.n	80026cc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x5e>
	  if (__depth_limit == 0)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d108      	bne.n	80026a0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x32>
	      std::__partial_sort(__first, __last, __last, __comp);
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f9f5 	bl	8002a88 <_ZSt14__partial_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>
	      return;
 800269e:	e015      	b.n	80026cc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x5e>
	  --__depth_limit;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 80026a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026aa:	cb0c      	ldmia	r3, {r2, r3}
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fa08 	bl	8002ac4 <_ZSt27__unguarded_partition_pivotIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SO_>
 80026b4:	6178      	str	r0, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	6978      	ldr	r0, [r7, #20]
 80026c2:	f7ff ffd4 	bl	800266e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
	  __last = __cut;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 80026ca:	e7d8      	b.n	800267e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x10>
    }
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026d4:	b002      	add	sp, #8
 80026d6:	4770      	bx	lr

080026d8 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	4639      	mov	r1, r7
 80026e4:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__last - __first > int(_S_threshold))
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	dd10      	ble.n	8002714 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x3c>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f103 0110 	add.w	r1, r3, #16
 80026f8:	463b      	mov	r3, r7
 80026fa:	cb0c      	ldmia	r3, {r2, r3}
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fa22 	bl	8002b46 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f103 0010 	add.w	r0, r3, #16
 8002708:	463b      	mov	r3, r7
 800270a:	cb0c      	ldmia	r3, {r2, r3}
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	f000 fa63 	bl	8002bd8 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 8002712:	e005      	b.n	8002720 <_ZSt22__final_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x48>
	std::__insertion_sort(__first, __last, __comp);
 8002714:	463b      	mov	r3, r7
 8002716:	cb0c      	ldmia	r3, {r2, r3}
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fa13 	bl	8002b46 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
    }
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <_ZSt14__partial_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SB_>:
    __partial_sort(_RandomAccessIterator __first,
 8002728:	b082      	sub	sp, #8
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af02      	add	r7, sp, #8
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	61fb      	str	r3, [r7, #28]
      std::__heap_select(__first, __middle, __last, __comp);
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 fa6c 	bl	8002c20 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SB_>
      std::__sort_heap(__first, __middle, __comp);
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	461a      	mov	r2, r3
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fa96 	bl	8002c82 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_>
    }
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002760:	b002      	add	sp, #8
 8002762:	4770      	bx	lr

08002764 <_ZSt27__unguarded_partition_pivotIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_SB_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8002764:	b5b0      	push	{r4, r5, r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	4639      	mov	r1, r7
 8002770:	e881 000c 	stmia.w	r1, {r2, r3}
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	0fda      	lsrs	r2, r3, #31
 800277c:	4413      	add	r3, r2
 800277e:	105b      	asrs	r3, r3, #1
 8002780:	461a      	mov	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4413      	add	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1c5c      	adds	r4, r3, #1
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	1e5a      	subs	r2, r3, #1
 8002790:	466d      	mov	r5, sp
 8002792:	463b      	mov	r3, r7
 8002794:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002798:	e885 0003 	stmia.w	r5, {r0, r1}
 800279c:	4613      	mov	r3, r2
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4621      	mov	r1, r4
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fa86 	bl	8002cb4 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1c58      	adds	r0, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	f000 fad2 	bl	8002d5e <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_>
 80027ba:	4603      	mov	r3, r0
    }
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bdb0      	pop	{r4, r5, r7, pc}

080027c4 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fafd 	bl	8002dd6 <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessESt8identityEEDaRT_RT0_ENKUlOS4_OS6_E_clIRhSC_EEbS8_S9_>
 80027dc:	4603      	mov	r3, r0
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80027e6:	b590      	push	{r4, r7, lr}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fb22 	bl	8002e3c <_ZSt12__miter_baseIPhET_S1_>
 80027f8:	4604      	mov	r4, r0
 80027fa:	68b8      	ldr	r0, [r7, #8]
 80027fc:	f000 fb1e 	bl	8002e3c <_ZSt12__miter_baseIPhET_S1_>
 8002800:	4603      	mov	r3, r0
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4619      	mov	r1, r3
 8002806:	4620      	mov	r0, r4
 8002808:	f000 fb23 	bl	8002e52 <_ZSt22__copy_move_backward_aILb1EPhS0_ET1_T0_S2_S1_>
 800280c:	4603      	mov	r3, r0
    }
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bd90      	pop	{r4, r7, pc}

08002816 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:
    __insertion_sort(_RandomAccessIterator __first,
 8002816:	b580      	push	{r7, lr}
 8002818:	b088      	sub	sp, #32
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	4639      	mov	r1, r7
 8002822:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__first == __last) return;
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	429a      	cmp	r2, r3
 800282c:	d038      	beq.n	80028a0 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x8a>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3301      	adds	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	429a      	cmp	r2, r3
 800283a:	d032      	beq.n	80028a2 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x8c>
	  if (__comp(__i, __first))
 800283c:	463b      	mov	r3, r7
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	69f9      	ldr	r1, [r7, #28]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ffbe 	bl	80027c4 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x66>
		__val = _GLIBCXX_MOVE(*__i);
 800284e:	69f8      	ldr	r0, [r7, #28]
 8002850:	f000 fae9 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8002854:	4603      	mov	r3, r0
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	74fb      	strb	r3, [r7, #19]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3301      	adds	r3, #1
 800285e:	461a      	mov	r2, r3
 8002860:	69f9      	ldr	r1, [r7, #28]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7ff ffbf 	bl	80027e6 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_>
	      *__first = _GLIBCXX_MOVE(__val);
 8002868:	f107 0313 	add.w	r3, r7, #19
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fada 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8002872:	4603      	mov	r3, r0
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	e00d      	b.n	8002898 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x82>
	    std::__unguarded_linear_insert(__i,
 800287c:	f107 0014 	add.w	r0, r7, #20
 8002880:	463b      	mov	r3, r7
 8002882:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002886:	f000 fb07 	bl	8002e98 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EENS0_14_Val_comp_iterIS7_EENS0_15_Iter_comp_iterIS7_EE>
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002892:	69f8      	ldr	r0, [r7, #28]
 8002894:	f000 fb25 	bl	8002ee2 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	3301      	adds	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e7c9      	b.n	8002834 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x1e>
      if (__first == __last) return;
 80028a0:	bf00      	nop
    }
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	4639      	mov	r1, r7
 80028b4:	e881 000c 	stmia.w	r1, {r2, r3}
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d011      	beq.n	80028e8 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x40>
	std::__unguarded_linear_insert(__i,
 80028c4:	f107 0014 	add.w	r0, r7, #20
 80028c8:	463b      	mov	r3, r7
 80028ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80028ce:	f000 fae3 	bl	8002e98 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EENS0_14_Val_comp_iterIS7_EENS0_15_Iter_comp_iterIS7_EE>
 80028d2:	f107 0314 	add.w	r3, r7, #20
 80028d6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80028da:	69f8      	ldr	r0, [r7, #28]
 80028dc:	f000 fb01 	bl	8002ee2 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	3301      	adds	r3, #1
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	e7e9      	b.n	80028bc <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x14>
    }
 80028e8:	bf00      	nop
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <_ZSt14__partial_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>:
    __partial_sort(_RandomAccessIterator __first,
 80028f0:	b082      	sub	sp, #8
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af02      	add	r7, sp, #8
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	61fb      	str	r3, [r7, #28]
      std::__heap_select(__first, __middle, __last, __comp);
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fb1f 	bl	8002f4e <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>
      std::__sort_heap(__first, __middle, __comp);
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	461a      	mov	r2, r3
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fb49 	bl	8002fb0 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>
    }
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002928:	b002      	add	sp, #8
 800292a:	4770      	bx	lr

0800292c <_ZSt27__unguarded_partition_pivotIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SO_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800292c:	b5b0      	push	{r4, r5, r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	4639      	mov	r1, r7
 8002938:	e881 000c 	stmia.w	r1, {r2, r3}
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	0fda      	lsrs	r2, r3, #31
 8002944:	4413      	add	r3, r2
 8002946:	105b      	asrs	r3, r3, #1
 8002948:	461a      	mov	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4413      	add	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1c5c      	adds	r4, r3, #1
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	1e5a      	subs	r2, r3, #1
 8002958:	466d      	mov	r5, sp
 800295a:	463b      	mov	r3, r7
 800295c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002960:	e885 0003 	stmia.w	r5, {r0, r1}
 8002964:	4613      	mov	r3, r2
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4621      	mov	r1, r4
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 fb39 	bl	8002fe2 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1c58      	adds	r0, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	f000 fb85 	bl	800308c <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_>
 8002982:	4603      	mov	r3, r0
    }
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bdb0      	pop	{r4, r5, r7, pc}

0800298c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fbb0 	bl	8003104 <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0EEJLNS4_10FilterModeE1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>
 80029a4:	4603      	mov	r3, r0
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __insertion_sort(_RandomAccessIterator __first,
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b088      	sub	sp, #32
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	4639      	mov	r1, r7
 80029ba:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__first == __last) return;
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d038      	beq.n	8002a38 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x8a>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3301      	adds	r3, #1
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d032      	beq.n	8002a3a <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x8c>
	  if (__comp(__i, __first))
 80029d4:	463b      	mov	r3, r7
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	69f9      	ldr	r1, [r7, #28]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ffd6 	bl	800298c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x66>
		__val = _GLIBCXX_MOVE(*__i);
 80029e6:	69f8      	ldr	r0, [r7, #28]
 80029e8:	f000 fa1d 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80029ec:	4603      	mov	r3, r0
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	74fb      	strb	r3, [r7, #19]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3301      	adds	r3, #1
 80029f6:	461a      	mov	r2, r3
 80029f8:	69f9      	ldr	r1, [r7, #28]
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f7ff fef3 	bl	80027e6 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_>
	      *__first = _GLIBCXX_MOVE(__val);
 8002a00:	f107 0313 	add.w	r3, r7, #19
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fa0e 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	e00d      	b.n	8002a30 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x82>
	    std::__unguarded_linear_insert(__i,
 8002a14:	f107 0014 	add.w	r0, r7, #20
 8002a18:	463b      	mov	r3, r7
 8002a1a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a1e:	f000 fb9e 	bl	800315e <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_14_Val_comp_iterISJ_EENS0_15_Iter_comp_iterISJ_EE>
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a2a:	69f8      	ldr	r0, [r7, #28]
 8002a2c:	f000 fbbc 	bl	80031a8 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	3301      	adds	r3, #1
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	e7c9      	b.n	80029cc <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x1e>
      if (__first == __last) return;
 8002a38:	bf00      	nop
    }
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	4639      	mov	r1, r7
 8002a4c:	e881 000c 	stmia.w	r1, {r2, r3}
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d011      	beq.n	8002a80 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x40>
	std::__unguarded_linear_insert(__i,
 8002a5c:	f107 0014 	add.w	r0, r7, #20
 8002a60:	463b      	mov	r3, r7
 8002a62:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a66:	f000 fb7a 	bl	800315e <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_14_Val_comp_iterISJ_EENS0_15_Iter_comp_iterISJ_EE>
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a72:	69f8      	ldr	r0, [r7, #28]
 8002a74:	f000 fb98 	bl	80031a8 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	e7e9      	b.n	8002a54 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x14>
    }
 8002a80:	bf00      	nop
 8002a82:	3720      	adds	r7, #32
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_ZSt14__partial_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>:
    __partial_sort(_RandomAccessIterator __first,
 8002a88:	b082      	sub	sp, #8
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af02      	add	r7, sp, #8
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	61fb      	str	r3, [r7, #28]
      std::__heap_select(__first, __middle, __last, __comp);
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fbb6 	bl	8003214 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>
      std::__sort_heap(__first, __middle, __comp);
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	461a      	mov	r2, r3
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fbe0 	bl	8003276 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>
    }
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ac0:	b002      	add	sp, #8
 8002ac2:	4770      	bx	lr

08002ac4 <_ZSt27__unguarded_partition_pivotIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SO_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8002ac4:	b5b0      	push	{r4, r5, r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	4639      	mov	r1, r7
 8002ad0:	e881 000c 	stmia.w	r1, {r2, r3}
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	0fda      	lsrs	r2, r3, #31
 8002adc:	4413      	add	r3, r2
 8002ade:	105b      	asrs	r3, r3, #1
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1c5c      	adds	r4, r3, #1
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	1e5a      	subs	r2, r3, #1
 8002af0:	466d      	mov	r5, sp
 8002af2:	463b      	mov	r3, r7
 8002af4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002af8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002afc:	4613      	mov	r3, r2
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4621      	mov	r1, r4
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fbd0 	bl	80032a8 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1c58      	adds	r0, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	f000 fc1c 	bl	8003352 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_>
 8002b1a:	4603      	mov	r3, r0
    }
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bdb0      	pop	{r4, r5, r7, pc}

08002b24 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fc47 	bl	80033ca <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0EEJLNS4_10FilterModeE0EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __insertion_sort(_RandomAccessIterator __first,
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b088      	sub	sp, #32
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	4639      	mov	r1, r7
 8002b52:	e881 000c 	stmia.w	r1, {r2, r3}
      if (__first == __last) return;
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d038      	beq.n	8002bd0 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x8a>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	3301      	adds	r3, #1
 8002b62:	61fb      	str	r3, [r7, #28]
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d032      	beq.n	8002bd2 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x8c>
	  if (__comp(__i, __first))
 8002b6c:	463b      	mov	r3, r7
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	69f9      	ldr	r1, [r7, #28]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ffd6 	bl	8002b24 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x66>
		__val = _GLIBCXX_MOVE(*__i);
 8002b7e:	69f8      	ldr	r0, [r7, #28]
 8002b80:	f000 f951 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8002b84:	4603      	mov	r3, r0
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	74fb      	strb	r3, [r7, #19]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	461a      	mov	r2, r3
 8002b90:	69f9      	ldr	r1, [r7, #28]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f7ff fe27 	bl	80027e6 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_>
	      *__first = _GLIBCXX_MOVE(__val);
 8002b98:	f107 0313 	add.w	r3, r7, #19
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 f942 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	701a      	strb	r2, [r3, #0]
 8002baa:	e00d      	b.n	8002bc8 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x82>
	    std::__unguarded_linear_insert(__i,
 8002bac:	f107 0014 	add.w	r0, r7, #20
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002bb6:	f000 fc35 	bl	8003424 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_14_Val_comp_iterISJ_EENS0_15_Iter_comp_iterISJ_EE>
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002bc2:	69f8      	ldr	r0, [r7, #28]
 8002bc4:	f000 fc53 	bl	800346e <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	e7c9      	b.n	8002b64 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x1e>
      if (__first == __last) return;
 8002bd0:	bf00      	nop
    }
 8002bd2:	3720      	adds	r7, #32
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	4639      	mov	r1, r7
 8002be4:	e881 000c 	stmia.w	r1, {r2, r3}
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	61fb      	str	r3, [r7, #28]
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d011      	beq.n	8002c18 <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x40>
	std::__unguarded_linear_insert(__i,
 8002bf4:	f107 0014 	add.w	r0, r7, #20
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002bfe:	f000 fc11 	bl	8003424 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_14_Val_comp_iterISJ_EENS0_15_Iter_comp_iterISJ_EE>
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c0a:	69f8      	ldr	r0, [r7, #28]
 8002c0c:	f000 fc2f 	bl	800346e <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	3301      	adds	r3, #1
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	e7e9      	b.n	8002bec <_ZSt26__unguarded_insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x14>
    }
 8002c18:	bf00      	nop
 8002c1a:	3720      	adds	r7, #32
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SB_>:
    __heap_select(_RandomAccessIterator __first,
 8002c20:	b082      	sub	sp, #8
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
      std::__make_heap(__first, __middle, __comp);
 8002c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c34:	461a      	mov	r2, r3
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 fc4e 	bl	80034da <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d214      	bcs.n	8002c74 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SB_+0x54>
	if (__comp(__i, __first))
 8002c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	6979      	ldr	r1, [r7, #20]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fdb6 	bl	80027c4 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SB_+0x4c>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8002c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fc73 	bl	8003552 <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SC_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e7e6      	b.n	8002c42 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SB_+0x22>
    }
 8002c74:	bf00      	nop
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c7e:	b002      	add	sp, #8
 8002c80:	4770      	bx	lr

08002c82 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	dd09      	ble.n	8002cac <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_+0x2a>
	{
	  --__last;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	60bb      	str	r3, [r7, #8]
	  std::__pop_heap(__first, __last, __last, __comp);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 fc54 	bl	8003552 <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SC_>
      while (__last - __first > 1)
 8002caa:	e7f0      	b.n	8002c8e <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_+0xc>
	}
    }
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	f107 0018 	add.w	r0, r7, #24
 8002cca:	f7ff fd7b 	bl	80027c4 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0x62>
	  if (__comp(__b, __c))
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	f107 0018 	add.w	r0, r7, #24
 8002cdc:	f7ff fd72 	bl	80027c4 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0x3c>
	    std::iter_swap(__result, __b);
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fc5e 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8002cee:	e032      	b.n	8002d56 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0xa2>
	  else if (__comp(__a, __c))
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	f107 0018 	add.w	r0, r7, #24
 8002cf8:	f7ff fd64 	bl	80027c4 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d004      	beq.n	8002d0c <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0x58>
	    std::iter_swap(__result, __c);
 8002d02:	6839      	ldr	r1, [r7, #0]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fc50 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8002d0a:	e024      	b.n	8002d56 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0xa2>
	    std::iter_swap(__result, __a);
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fc4b 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8002d14:	e01f      	b.n	8002d56 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0xa2>
      else if (__comp(__a, __c))
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	f107 0018 	add.w	r0, r7, #24
 8002d1e:	f7ff fd51 	bl	80027c4 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0x7e>
	std::iter_swap(__result, __a);
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 fc3d 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8002d30:	e011      	b.n	8002d56 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0xa2>
      else if (__comp(__b, __c))
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	f107 0018 	add.w	r0, r7, #24
 8002d3a:	f7ff fd43 	bl	80027c4 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0x9a>
	std::iter_swap(__result, __c);
 8002d44:	6839      	ldr	r1, [r7, #0]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 fc2f 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8002d4c:	e003      	b.n	8002d56 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_S9_SB_+0xa2>
	std::iter_swap(__result, __b);
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fc2a 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8002d5e:	b082      	sub	sp, #8
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	61fb      	str	r3, [r7, #28]
	  while (__comp(__first, __pivot))
 8002d6e:	f107 031c 	add.w	r3, r7, #28
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68f9      	ldr	r1, [r7, #12]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fd24 	bl	80027c4 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_+0x2c>
	    ++__first;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3301      	adds	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 8002d88:	e7f1      	b.n	8002d6e <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_+0x10>
	  --__last;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 8002d90:	f107 031c 	add.w	r3, r7, #28
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fd13 	bl	80027c4 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_+0x4e>
	    --__last;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 8002daa:	e7f1      	b.n	8002d90 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_+0x32>
	  if (!(__first < __last))
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d301      	bcc.n	8002db8 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_+0x5a>
	    return __first;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	e007      	b.n	8002dc8 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_+0x6a>
	  std::iter_swap(__first, __last);
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fbf5 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
	  ++__first;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 8002dc6:	e7d2      	b.n	8002d6e <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEES9_S9_S9_S9_SB_+0x10>
    }
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dd2:	b002      	add	sp, #8
 8002dd4:	4770      	bx	lr

08002dd6 <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessESt8identityEEDaRT_RT0_ENKUlOS4_OS6_E_clIRhSC_EEbS8_S9_>:
	return [&] (auto&& __lhs, auto&& __rhs) -> bool {
 8002dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681c      	ldr	r4, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	685d      	ldr	r5, [r3, #4]
			       std::__invoke(__proj, std::forward<_TL>(__lhs)),
 8002dea:	68b8      	ldr	r0, [r7, #8]
 8002dec:	f000 fbea 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4619      	mov	r1, r3
 8002df4:	4628      	mov	r0, r5
 8002df6:	f000 fbf0 	bl	80035da <_ZSt8__invokeIRSt8identityJRhEENSt15__invoke_resultIT_JDpT0_EE4typeEOS4_DpOS5_>
 8002dfa:	4606      	mov	r6, r0
	return [&] (auto&& __lhs, auto&& __rhs) -> bool {
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	685d      	ldr	r5, [r3, #4]
			       std::__invoke(__proj, std::forward<_TR>(__rhs)));
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fbdf 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	f000 fbe5 	bl	80035da <_ZSt8__invokeIRSt8identityJRhEENSt15__invoke_resultIT_JDpT0_EE4typeEOS4_DpOS5_>
 8002e10:	4603      	mov	r3, r0
	  return std::__invoke(__comp,
 8002e12:	461a      	mov	r2, r3
 8002e14:	4631      	mov	r1, r6
 8002e16:	4620      	mov	r0, r4
 8002e18:	f000 fbf6 	bl	8003608 <_ZSt8__invokeIRNSt6ranges4lessEJRhS3_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS5_DpOS6_>
 8002e1c:	4603      	mov	r3, r0
	return [&] (auto&& __lhs, auto&& __rhs) -> bool {
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <_ZSt22__copy_move_backward_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8002e52:	b5b0      	push	{r4, r5, r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fbee 	bl	8003640 <_ZSt12__niter_baseIPhET_S1_>
 8002e64:	4604      	mov	r4, r0
 8002e66:	68b8      	ldr	r0, [r7, #8]
 8002e68:	f000 fbea 	bl	8003640 <_ZSt12__niter_baseIPhET_S1_>
 8002e6c:	4605      	mov	r5, r0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fbe5 	bl	8003640 <_ZSt12__niter_baseIPhET_S1_>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f000 fbea 	bl	8003656 <_ZSt23__copy_move_backward_a1ILb1EPhS0_ET1_T0_S2_S1_>
 8002e82:	4602      	mov	r2, r0
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fbf4 	bl	8003676 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8002e8e:	4603      	mov	r3, r0
    }
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bdb0      	pop	{r4, r5, r7, pc}

08002e98 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EENS0_14_Val_comp_iterIS7_EENS0_15_Iter_comp_iterIS7_EE>:
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	e883 0006 	stmia.w	r3, {r1, r2}
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fbf0 	bl	800368e <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessESt8identityEEDaRT_RT0_EUlOS8_OSA_E_EEEONSt16remove_referenceIS8_E4typeESC_>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fbf6 	bl	80036a4 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EC1EONS0_15_Iter_comp_iterISD_EE>
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIhPhEEbS8_S9_>:
	operator()(_Value& __val, _Iterator __it)
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ff7f 	bl	8002dd6 <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessESt8identityEEDaRT_RT0_ENKUlOS4_OS6_E_clIRhSC_EEbS8_S9_>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	e883 0006 	stmia.w	r3, {r1, r2}
	__val = _GLIBCXX_MOVE(*__last);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7ff ff98 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	74fb      	strb	r3, [r7, #19]
      _RandomAccessIterator __next = __last;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	617b      	str	r3, [r7, #20]
      --__next;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
      while (__comp(__val, __next))
 8002f06:	f107 0113 	add.w	r1, r7, #19
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ffd6 	bl	8002ec0 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIhPhEEbS8_S9_>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00c      	beq.n	8002f34 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_+0x52>
	  *__last = _GLIBCXX_MOVE(*__next);
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7ff ff83 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8002f20:	4603      	mov	r3, r0
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	701a      	strb	r2, [r3, #0]
	  __last = __next;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	60fb      	str	r3, [r7, #12]
	  --__next;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	617b      	str	r3, [r7, #20]
      while (__comp(__val, __next))
 8002f32:	e7e8      	b.n	8002f06 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_+0x24>
      *__last = _GLIBCXX_MOVE(__val);
 8002f34:	f107 0313 	add.w	r3, r7, #19
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff74 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	701a      	strb	r2, [r3, #0]
    }
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>:
    __heap_select(_RandomAccessIterator __first,
 8002f4e:	b082      	sub	sp, #8
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
      std::__make_heap(__first, __middle, __comp);
 8002f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f62:	461a      	mov	r2, r3
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fbb0 	bl	80036cc <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d214      	bcs.n	8002fa2 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_+0x54>
	if (__comp(__i, __first))
 8002f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	6979      	ldr	r1, [r7, #20]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fd03 	bl	800298c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d006      	beq.n	8002f9a <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_+0x4c>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8002f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fbd5 	bl	8003744 <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SP_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e7e6      	b.n	8002f70 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_+0x22>
    }
 8002fa2:	bf00      	nop
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fac:	b002      	add	sp, #8
 8002fae:	4770      	bx	lr

08002fb0 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>:
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
      while (__last - __first > 1)
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	dd09      	ble.n	8002fda <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x2a>
	  --__last;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
	  std::__pop_heap(__first, __last, __last, __comp);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fbb6 	bl	8003744 <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SP_>
      while (__last - __first > 1)
 8002fd8:	e7f0      	b.n	8002fbc <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0xc>
    }
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	f107 0018 	add.w	r0, r7, #24
 8002ff8:	f7ff fcc8 	bl	800298c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d020      	beq.n	8003044 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x62>
	  if (__comp(__b, __c))
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	f107 0018 	add.w	r0, r7, #24
 800300a:	f7ff fcbf 	bl	800298c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x3c>
	    std::iter_swap(__result, __b);
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 fac7 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 800301c:	e032      	b.n	8003084 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
	  else if (__comp(__a, __c))
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	f107 0018 	add.w	r0, r7, #24
 8003026:	f7ff fcb1 	bl	800298c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x58>
	    std::iter_swap(__result, __c);
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fab9 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8003038:	e024      	b.n	8003084 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
	    std::iter_swap(__result, __a);
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fab4 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8003042:	e01f      	b.n	8003084 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
      else if (__comp(__a, __c))
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	f107 0018 	add.w	r0, r7, #24
 800304c:	f7ff fc9e 	bl	800298c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x7e>
	std::iter_swap(__result, __a);
 8003056:	68b9      	ldr	r1, [r7, #8]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 faa6 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 800305e:	e011      	b.n	8003084 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
      else if (__comp(__b, __c))
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	f107 0018 	add.w	r0, r7, #24
 8003068:	f7ff fc90 	bl	800298c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d004      	beq.n	800307c <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x9a>
	std::iter_swap(__result, __c);
 8003072:	6839      	ldr	r1, [r7, #0]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fa98 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 800307a:	e003      	b.n	8003084 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
	std::iter_swap(__result, __b);
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fa93 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800308c:	b082      	sub	sp, #8
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	61fb      	str	r3, [r7, #28]
	  while (__comp(__first, __pivot))
 800309c:	f107 031c 	add.w	r3, r7, #28
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	68f9      	ldr	r1, [r7, #12]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fc71 	bl	800298c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x2c>
	    ++__first;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3301      	adds	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 80030b6:	e7f1      	b.n	800309c <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x10>
	  --__last;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 80030be:	f107 031c 	add.w	r3, r7, #28
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fc60 	bl	800298c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x4e>
	    --__last;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 80030d8:	e7f1      	b.n	80030be <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x32>
	  if (!(__first < __last))
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d301      	bcc.n	80030e6 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x5a>
	    return __first;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	e007      	b.n	80030f6 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x6a>
	  std::iter_swap(__first, __last);
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fa5e 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
	  ++__first;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3301      	adds	r3, #1
 80030f2:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 80030f4:	e7d2      	b.n	800309c <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x10>
    }
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003100:	b002      	add	sp, #8
 8003102:	4770      	bx	lr

08003104 <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0EEJLNS4_10FilterModeE1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>:
 8003104:	b5b0      	push	{r4, r5, r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681c      	ldr	r4, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685d      	ldr	r5, [r3, #4]
			       std::__invoke(__proj, std::forward<_TL>(__lhs)),
 8003118:	68b8      	ldr	r0, [r7, #8]
 800311a:	f000 fa53 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 800311e:	4603      	mov	r3, r0
 8003120:	4619      	mov	r1, r3
 8003122:	4628      	mov	r0, r5
 8003124:	f000 fb3a 	bl	800379c <_ZSt8__invokeIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEENSt15__invoke_resultISD_JDpT0_EE4typeEOSD_DpOSI_>
 8003128:	4603      	mov	r3, r0
 800312a:	613b      	str	r3, [r7, #16]
	return [&] (auto&& __lhs, auto&& __rhs) -> bool {
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685d      	ldr	r5, [r3, #4]
			       std::__invoke(__proj, std::forward<_TR>(__rhs)));
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fa47 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003136:	4603      	mov	r3, r0
 8003138:	4619      	mov	r1, r3
 800313a:	4628      	mov	r0, r5
 800313c:	f000 fb2e 	bl	800379c <_ZSt8__invokeIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEENSt15__invoke_resultISD_JDpT0_EE4typeEOSD_DpOSI_>
 8003140:	4603      	mov	r3, r0
 8003142:	617b      	str	r3, [r7, #20]
	  return std::__invoke(__comp,
 8003144:	f107 0214 	add.w	r2, r7, #20
 8003148:	f107 0310 	add.w	r3, r7, #16
 800314c:	4619      	mov	r1, r3
 800314e:	4620      	mov	r0, r4
 8003150:	f000 fb3b 	bl	80037ca <_ZSt8__invokeIRNSt6ranges4lessEJiiEENSt15__invoke_resultIT_JDpT0_EE4typeEOS4_DpOS5_>
 8003154:	4603      	mov	r3, r0
	return [&] (auto&& __lhs, auto&& __rhs) -> bool {
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bdb0      	pop	{r4, r5, r7, pc}

0800315e <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_14_Val_comp_iterISJ_EENS0_15_Iter_comp_iterISJ_EE>:
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	1d3b      	adds	r3, r7, #4
 8003168:	e883 0006 	stmia.w	r3, {r1, r2}
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800316c:	1d3b      	adds	r3, r7, #4
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fb47 	bl	8003802 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS8_11FilterWidthE0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0EEJLNS8_10FilterModeE1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1EEEEvhDpRNSA_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSK_RT0_EUlOSK_OSN_E_EEEONSt16remove_referenceISK_E4typeESP_>
 8003174:	4603      	mov	r3, r0
 8003176:	4619      	mov	r1, r3
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fb4d 	bl	8003818 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIhPhEEbSL_SM_>:
	operator()(_Value& __val, _Iterator __it)
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ffb3 	bl	8003104 <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0EEJLNS4_10FilterModeE1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>
 800319e:	4603      	mov	r3, r0
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	1d3b      	adds	r3, r7, #4
 80031b2:	e883 0006 	stmia.w	r3, {r1, r2}
	__val = _GLIBCXX_MOVE(*__last);
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7ff fe35 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80031bc:	4603      	mov	r3, r0
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	74fb      	strb	r3, [r7, #19]
      _RandomAccessIterator __next = __last;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	617b      	str	r3, [r7, #20]
      --__next;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	617b      	str	r3, [r7, #20]
      while (__comp(__val, __next))
 80031cc:	f107 0113 	add.w	r1, r7, #19
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ffd6 	bl	8003186 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIhPhEEbSL_SM_>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00c      	beq.n	80031fa <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_+0x52>
	  *__last = _GLIBCXX_MOVE(*__next);
 80031e0:	6978      	ldr	r0, [r7, #20]
 80031e2:	f7ff fe20 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80031e6:	4603      	mov	r3, r0
 80031e8:	781a      	ldrb	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	701a      	strb	r2, [r3, #0]
	  __last = __next;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	60fb      	str	r3, [r7, #12]
	  --__next;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
      while (__comp(__val, __next))
 80031f8:	e7e8      	b.n	80031cc <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_+0x24>
      *__last = _GLIBCXX_MOVE(__val);
 80031fa:	f107 0313 	add.w	r3, r7, #19
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fe11 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003204:	4603      	mov	r3, r0
 8003206:	781a      	ldrb	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	701a      	strb	r2, [r3, #0]
    }
 800320c:	bf00      	nop
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_>:
    __heap_select(_RandomAccessIterator __first,
 8003214:	b082      	sub	sp, #8
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
      std::__make_heap(__first, __middle, __comp);
 8003224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003228:	461a      	mov	r2, r3
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fb07 	bl	8003840 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d214      	bcs.n	8003268 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_+0x54>
	if (__comp(__i, __first))
 800323e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	6979      	ldr	r1, [r7, #20]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fc6c 	bl	8002b24 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_+0x4c>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8003252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fb2c 	bl	80038b8 <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SP_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	3301      	adds	r3, #1
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	e7e6      	b.n	8003236 <_ZSt13__heap_selectIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SO_+0x22>
    }
 8003268:	bf00      	nop
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003272:	b002      	add	sp, #8
 8003274:	4770      	bx	lr

08003276 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>:
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
      while (__last - __first > 1)
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	dd09      	ble.n	80032a0 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x2a>
	  --__last;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	3b01      	subs	r3, #1
 8003290:	60bb      	str	r3, [r7, #8]
	  std::__pop_heap(__first, __last, __last, __comp);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fb0d 	bl	80038b8 <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SP_>
      while (__last - __first > 1)
 800329e:	e7f0      	b.n	8003282 <_ZSt11__sort_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0xc>
    }
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	f107 0018 	add.w	r0, r7, #24
 80032be:	f7ff fc31 	bl	8002b24 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x62>
	  if (__comp(__b, __c))
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	f107 0018 	add.w	r0, r7, #24
 80032d0:	f7ff fc28 	bl	8002b24 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d004      	beq.n	80032e4 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x3c>
	    std::iter_swap(__result, __b);
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f964 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 80032e2:	e032      	b.n	800334a <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
	  else if (__comp(__a, __c))
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	f107 0018 	add.w	r0, r7, #24
 80032ec:	f7ff fc1a 	bl	8002b24 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x58>
	    std::iter_swap(__result, __c);
 80032f6:	6839      	ldr	r1, [r7, #0]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f956 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 80032fe:	e024      	b.n	800334a <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
	    std::iter_swap(__result, __a);
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f951 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8003308:	e01f      	b.n	800334a <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
      else if (__comp(__a, __c))
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	f107 0018 	add.w	r0, r7, #24
 8003312:	f7ff fc07 	bl	8002b24 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d004      	beq.n	8003326 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x7e>
	std::iter_swap(__result, __a);
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f943 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8003324:	e011      	b.n	800334a <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
      else if (__comp(__b, __c))
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	f107 0018 	add.w	r0, r7, #24
 800332e:	f7ff fbf9 	bl	8002b24 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d004      	beq.n	8003342 <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0x9a>
	std::iter_swap(__result, __c);
 8003338:	6839      	ldr	r1, [r7, #0]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f935 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 8003340:	e003      	b.n	800334a <_ZSt22__move_median_to_firstIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SL_SO_+0xa2>
	std::iter_swap(__result, __b);
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f930 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
    }
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8003352:	b082      	sub	sp, #8
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	61fb      	str	r3, [r7, #28]
	  while (__comp(__first, __pivot))
 8003362:	f107 031c 	add.w	r3, r7, #28
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68f9      	ldr	r1, [r7, #12]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fbda 	bl	8002b24 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x2c>
	    ++__first;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3301      	adds	r3, #1
 800337a:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 800337c:	e7f1      	b.n	8003362 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x10>
	  --__last;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	3b01      	subs	r3, #1
 8003382:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 8003384:	f107 031c 	add.w	r3, r7, #28
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fbc9 	bl	8002b24 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x4e>
	    --__last;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	3b01      	subs	r3, #1
 800339c:	60bb      	str	r3, [r7, #8]
	  while (__comp(__pivot, __last))
 800339e:	e7f1      	b.n	8003384 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x32>
	  if (!(__first < __last))
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d301      	bcc.n	80033ac <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x5a>
	    return __first;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	e007      	b.n	80033bc <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x6a>
	  std::iter_swap(__first, __last);
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f8fb 	bl	80035aa <_ZSt9iter_swapIPhS0_EvT_T0_>
	  ++__first;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3301      	adds	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
	  while (__comp(__first, __pivot))
 80033ba:	e7d2      	b.n	8003362 <_ZSt21__unguarded_partitionIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEESL_SL_SL_SL_SO_+0x10>
    }
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033c6:	b002      	add	sp, #8
 80033c8:	4770      	bx	lr

080033ca <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0EEJLNS4_10FilterModeE0EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>:
 80033ca:	b5b0      	push	{r4, r5, r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681c      	ldr	r4, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685d      	ldr	r5, [r3, #4]
			       std::__invoke(__proj, std::forward<_TL>(__lhs)),
 80033de:	68b8      	ldr	r0, [r7, #8]
 80033e0:	f000 f8f0 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80033e4:	4603      	mov	r3, r0
 80033e6:	4619      	mov	r1, r3
 80033e8:	4628      	mov	r0, r5
 80033ea:	f000 fa91 	bl	8003910 <_ZSt8__invokeIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEENSt15__invoke_resultISD_JDpT0_EE4typeEOSD_DpOSI_>
 80033ee:	4603      	mov	r3, r0
 80033f0:	613b      	str	r3, [r7, #16]
	return [&] (auto&& __lhs, auto&& __rhs) -> bool {
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685d      	ldr	r5, [r3, #4]
			       std::__invoke(__proj, std::forward<_TR>(__rhs)));
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f8e4 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80033fc:	4603      	mov	r3, r0
 80033fe:	4619      	mov	r1, r3
 8003400:	4628      	mov	r0, r5
 8003402:	f000 fa85 	bl	8003910 <_ZSt8__invokeIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEENSt15__invoke_resultISD_JDpT0_EE4typeEOSD_DpOSI_>
 8003406:	4603      	mov	r3, r0
 8003408:	617b      	str	r3, [r7, #20]
	  return std::__invoke(__comp,
 800340a:	f107 0214 	add.w	r2, r7, #20
 800340e:	f107 0310 	add.w	r3, r7, #16
 8003412:	4619      	mov	r1, r3
 8003414:	4620      	mov	r0, r4
 8003416:	f000 f9d8 	bl	80037ca <_ZSt8__invokeIRNSt6ranges4lessEJiiEENSt15__invoke_resultIT_JDpT0_EE4typeEOS4_DpOS5_>
 800341a:	4603      	mov	r3, r0
	return [&] (auto&& __lhs, auto&& __rhs) -> bool {
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bdb0      	pop	{r4, r5, r7, pc}

08003424 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EENS0_14_Val_comp_iterISJ_EENS0_15_Iter_comp_iterISJ_EE>:
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	e883 0006 	stmia.w	r3, {r1, r2}
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fa82 	bl	800393e <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS8_11FilterWidthE0EEJLNS8_10FilterModeE0EEEEvhDpRNSA_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSK_RT0_EUlOSK_OSN_E_EEEONSt16remove_referenceISK_E4typeESP_>
 800343a:	4603      	mov	r3, r0
 800343c:	4619      	mov	r1, r3
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fa88 	bl	8003954 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIhPhEEbSL_SM_>:
	operator()(_Value& __val, _Iterator __it)
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ffb3 	bl	80033ca <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0EEJLNS4_10FilterModeE0EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>
 8003464:	4603      	mov	r3, r0
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	1d3b      	adds	r3, r7, #4
 8003478:	e883 0006 	stmia.w	r3, {r1, r2}
	__val = _GLIBCXX_MOVE(*__last);
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f7ff fcd2 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003482:	4603      	mov	r3, r0
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	74fb      	strb	r3, [r7, #19]
      _RandomAccessIterator __next = __last;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	617b      	str	r3, [r7, #20]
      --__next;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	3b01      	subs	r3, #1
 8003490:	617b      	str	r3, [r7, #20]
      while (__comp(__val, __next))
 8003492:	f107 0113 	add.w	r1, r7, #19
 8003496:	1d3b      	adds	r3, r7, #4
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ffd6 	bl	800344c <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIhPhEEbSL_SM_>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00c      	beq.n	80034c0 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_+0x52>
	  *__last = _GLIBCXX_MOVE(*__next);
 80034a6:	6978      	ldr	r0, [r7, #20]
 80034a8:	f7ff fcbd 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80034ac:	4603      	mov	r3, r0
 80034ae:	781a      	ldrb	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	701a      	strb	r2, [r3, #0]
	  __last = __next;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	60fb      	str	r3, [r7, #12]
	  --__next;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
      while (__comp(__val, __next))
 80034be:	e7e8      	b.n	8003492 <_ZSt25__unguarded_linear_insertIPhN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_+0x24>
      *__last = _GLIBCXX_MOVE(__val);
 80034c0:	f107 0313 	add.w	r3, r7, #19
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fcae 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80034ca:	4603      	mov	r3, r0
 80034cc:	781a      	ldrb	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	701a      	strb	r2, [r3, #0]
    }
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80034da:	b580      	push	{r7, lr}
 80034dc:	b08a      	sub	sp, #40	; 0x28
 80034de:	af02      	add	r7, sp, #8
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	dd2a      	ble.n	8003546 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_+0x6c>
      const _DistanceType __len = __last - __first;
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	61bb      	str	r3, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	3b02      	subs	r3, #2
 80034fc:	0fda      	lsrs	r2, r3, #31
 80034fe:	4413      	add	r3, r2
 8003500:	105b      	asrs	r3, r3, #1
 8003502:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4413      	add	r3, r2
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fc8b 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003510:	4603      	mov	r3, r0
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	75fb      	strb	r3, [r7, #23]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8003516:	f107 0317 	add.w	r3, r7, #23
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fc83 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003520:	4603      	mov	r3, r0
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	466a      	mov	r2, sp
 8003528:	c903      	ldmia	r1, {r0, r1}
 800352a:	e882 0003 	stmia.w	r2, {r0, r1}
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	69f9      	ldr	r1, [r7, #28]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fa36 	bl	80039a4 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>
	  if (__parent == 0)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_+0x70>
	  __parent--;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3b01      	subs	r3, #1
 8003542:	61fb      	str	r3, [r7, #28]
      while (true)
 8003544:	e7de      	b.n	8003504 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_+0x2a>
	return;
 8003546:	bf00      	nop
 8003548:	e000      	b.n	800354c <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SC_+0x72>
	    return;
 800354a:	bf00      	nop
    }
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_S9_SC_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003552:	b590      	push	{r4, r7, lr}
 8003554:	b089      	sub	sp, #36	; 0x24
 8003556:	af02      	add	r7, sp, #8
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff fc60 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003566:	4603      	mov	r3, r0
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	75fb      	strb	r3, [r7, #23]
      *__result = _GLIBCXX_MOVE(*__first);
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f7ff fc5a 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003572:	4603      	mov	r3, r0
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	701a      	strb	r2, [r3, #0]
			 _DistanceType(__last - __first),
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1ad4      	subs	r4, r2, r3
			 _GLIBCXX_MOVE(__value), __comp);
 8003580:	f107 0317 	add.w	r3, r7, #23
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fc4e 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800358a:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	6839      	ldr	r1, [r7, #0]
 8003590:	466a      	mov	r2, sp
 8003592:	c903      	ldmia	r1, {r0, r1}
 8003594:	e882 0003 	stmia.w	r2, {r0, r1}
 8003598:	4622      	mov	r2, r4
 800359a:	2100      	movs	r1, #0
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 fa01 	bl	80039a4 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>
    }
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd90      	pop	{r4, r7, pc}

080035aa <_ZSt9iter_swapIPhS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 80035b4:	6839      	ldr	r1, [r7, #0]
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fa6d 	bl	8003a96 <_ZSt4swapIhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <_ZSt8__invokeIRSt8identityJRhEENSt15__invoke_resultIT_JDpT0_EE4typeEOS4_DpOS5_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 80035da:	b5b0      	push	{r4, r5, r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fa75 	bl	8003ad4 <_ZSt7forwardIRSt8identityEOT_RNSt16remove_referenceIS2_E4typeE>
 80035ea:	4604      	mov	r4, r0
 80035ec:	6838      	ldr	r0, [r7, #0]
 80035ee:	f7ff ffe9 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461a      	mov	r2, r3
 80035f6:	4621      	mov	r1, r4
 80035f8:	4628      	mov	r0, r5
 80035fa:	f000 fa76 	bl	8003aea <_ZSt13__invoke_implIRhRSt8identityJS0_EET_St14__invoke_otherOT0_DpOT1_>
 80035fe:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bdb0      	pop	{r4, r5, r7, pc}

08003608 <_ZSt8__invokeIRNSt6ranges4lessEJRhS3_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS5_DpOS6_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8003608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fa7f 	bl	8003b18 <_ZSt7forwardIRNSt6ranges4lessEEOT_RNSt16remove_referenceIS3_E4typeE>
 800361a:	4604      	mov	r4, r0
 800361c:	68b8      	ldr	r0, [r7, #8]
 800361e:	f7ff ffd1 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003622:	4605      	mov	r5, r0
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff ffcd 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 800362a:	4603      	mov	r3, r0
 800362c:	462a      	mov	r2, r5
 800362e:	4621      	mov	r1, r4
 8003630:	4630      	mov	r0, r6
 8003632:	f000 fa7c 	bl	8003b2e <_ZSt13__invoke_implIbRNSt6ranges4lessEJRhS3_EET_St14__invoke_otherOT0_DpOT1_>
 8003636:	4603      	mov	r3, r0
    }
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003640 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <_ZSt23__copy_move_backward_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 fa7e 	bl	8003b68 <_ZSt23__copy_move_backward_a2ILb1EPhS0_ET1_T0_S2_S1_>
 800366c:	4603      	mov	r3, r0
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessESt8identityEEDaRT_RT0_EUlOS8_OSA_E_EEEONSt16remove_referenceIS8_E4typeESC_>:
    move(_Tp&& __t) noexcept
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EC1EONS0_15_Iter_comp_iterISD_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fe febf 	bl	8002434 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessESt8identityEEDaRT_RT0_EUlOS5_OS7_E_EONSt16remove_referenceIS5_E4typeES9_>
 80036b6:	4602      	mov	r2, r0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036be:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	; 0x28
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b01      	cmp	r3, #1
 80036e0:	dd2a      	ble.n	8003738 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x6c>
      const _DistanceType __len = __last - __first;
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	61bb      	str	r3, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	3b02      	subs	r3, #2
 80036ee:	0fda      	lsrs	r2, r3, #31
 80036f0:	4413      	add	r3, r2
 80036f2:	105b      	asrs	r3, r3, #1
 80036f4:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fb92 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003702:	4603      	mov	r3, r0
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	75fb      	strb	r3, [r7, #23]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8003708:	f107 0317 	add.w	r3, r7, #23
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fb8a 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003712:	4603      	mov	r3, r0
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	466a      	mov	r2, sp
 800371a:	c903      	ldmia	r1, {r0, r1}
 800371c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	69f9      	ldr	r1, [r7, #28]
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fa50 	bl	8003bca <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
	  if (__parent == 0)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x70>
	  __parent--;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	3b01      	subs	r3, #1
 8003734:	61fb      	str	r3, [r7, #28]
      while (true)
 8003736:	e7de      	b.n	80036f6 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x2a>
	return;
 8003738:	bf00      	nop
 800373a:	e000      	b.n	800373e <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x72>
	    return;
 800373c:	bf00      	nop
    }
 800373e:	3720      	adds	r7, #32
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SP_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003744:	b590      	push	{r4, r7, lr}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff fb67 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003758:	4603      	mov	r3, r0
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	75fb      	strb	r3, [r7, #23]
      *__result = _GLIBCXX_MOVE(*__first);
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f7ff fb61 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003764:	4603      	mov	r3, r0
 8003766:	781a      	ldrb	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	701a      	strb	r2, [r3, #0]
			 _DistanceType(__last - __first),
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad4      	subs	r4, r2, r3
			 _GLIBCXX_MOVE(__value), __comp);
 8003772:	f107 0317 	add.w	r3, r7, #23
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fb55 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800377c:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	6839      	ldr	r1, [r7, #0]
 8003782:	466a      	mov	r2, sp
 8003784:	c903      	ldmia	r1, {r0, r1}
 8003786:	e882 0003 	stmia.w	r2, {r0, r1}
 800378a:	4622      	mov	r2, r4
 800378c:	2100      	movs	r1, #0
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fa1b 	bl	8003bca <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
    }
 8003794:	bf00      	nop
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	bd90      	pop	{r4, r7, pc}

0800379c <_ZSt8__invokeIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEENSt15__invoke_resultISD_JDpT0_EE4typeEOSD_DpOSI_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 800379c:	b5b0      	push	{r4, r5, r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fa88 	bl	8003cbc <_ZSt7forwardIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EOSD_RNSt16remove_referenceISD_E4typeE>
 80037ac:	4604      	mov	r4, r0
 80037ae:	6838      	ldr	r0, [r7, #0]
 80037b0:	f7ff ff08 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	4621      	mov	r1, r4
 80037ba:	4628      	mov	r0, r5
 80037bc:	f000 fa89 	bl	8003cd2 <_ZSt13__invoke_implIiRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEESD_St14__invoke_otherOT0_DpOT1_>
 80037c0:	4603      	mov	r3, r0
    }
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bdb0      	pop	{r4, r5, r7, pc}

080037ca <_ZSt8__invokeIRNSt6ranges4lessEJiiEENSt15__invoke_resultIT_JDpT0_EE4typeEOS4_DpOS5_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 80037ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037cc:	b085      	sub	sp, #20
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f99e 	bl	8003b18 <_ZSt7forwardIRNSt6ranges4lessEEOT_RNSt16remove_referenceIS3_E4typeE>
 80037dc:	4604      	mov	r4, r0
 80037de:	68b8      	ldr	r0, [r7, #8]
 80037e0:	f7fd f968 	bl	8000ab4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80037e4:	4605      	mov	r5, r0
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd f964 	bl	8000ab4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80037ec:	4603      	mov	r3, r0
 80037ee:	462a      	mov	r2, r5
 80037f0:	4621      	mov	r1, r4
 80037f2:	4630      	mov	r0, r6
 80037f4:	f000 fa85 	bl	8003d02 <_ZSt13__invoke_implIbRNSt6ranges4lessEJiiEET_St14__invoke_otherOT0_DpOT1_>
 80037f8:	4603      	mov	r3, r0
    }
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003802 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS8_11FilterWidthE0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0EEJLNS8_10FilterModeE1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1EEEEvhDpRNSA_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSK_RT0_EUlOSK_OSN_E_EEEONSt16remove_referenceISK_E4typeESP_>:
    move(_Tp&& __t) noexcept
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fe83 	bl	8002530 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 800382a:	4602      	mov	r2, r0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003832:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	dd2a      	ble.n	80038ac <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x6c>
      const _DistanceType __len = __last - __first;
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	61bb      	str	r3, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	3b02      	subs	r3, #2
 8003862:	0fda      	lsrs	r2, r3, #31
 8003864:	4413      	add	r3, r2
 8003866:	105b      	asrs	r3, r3, #1
 8003868:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fad8 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003876:	4603      	mov	r3, r0
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	75fb      	strb	r3, [r7, #23]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800387c:	f107 0317 	add.w	r3, r7, #23
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fad0 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003886:	4603      	mov	r3, r0
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	466a      	mov	r2, sp
 800388e:	c903      	ldmia	r1, {r0, r1}
 8003890:	e882 0003 	stmia.w	r2, {r0, r1}
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	69f9      	ldr	r1, [r7, #28]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fa63 	bl	8003d64 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
	  if (__parent == 0)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x70>
	  __parent--;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]
      while (true)
 80038aa:	e7de      	b.n	800386a <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x2a>
	return;
 80038ac:	bf00      	nop
 80038ae:	e000      	b.n	80038b2 <_ZSt11__make_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SP_+0x72>
	    return;
 80038b0:	bf00      	nop
    }
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <_ZSt10__pop_heapIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SL_SP_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b089      	sub	sp, #36	; 0x24
 80038bc:	af02      	add	r7, sp, #8
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff faad 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80038cc:	4603      	mov	r3, r0
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	75fb      	strb	r3, [r7, #23]
      *__result = _GLIBCXX_MOVE(*__first);
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f7ff faa7 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80038d8:	4603      	mov	r3, r0
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	701a      	strb	r2, [r3, #0]
			 _DistanceType(__last - __first),
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad4      	subs	r4, r2, r3
			 _GLIBCXX_MOVE(__value), __comp);
 80038e6:	f107 0317 	add.w	r3, r7, #23
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fa9b 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80038f0:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	6839      	ldr	r1, [r7, #0]
 80038f6:	466a      	mov	r2, sp
 80038f8:	c903      	ldmia	r1, {r0, r1}
 80038fa:	e882 0003 	stmia.w	r2, {r0, r1}
 80038fe:	4622      	mov	r2, r4
 8003900:	2100      	movs	r1, #0
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fa2e 	bl	8003d64 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
    }
 8003908:	bf00      	nop
 800390a:	371c      	adds	r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	bd90      	pop	{r4, r7, pc}

08003910 <_ZSt8__invokeIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEENSt15__invoke_resultISD_JDpT0_EE4typeEOSD_DpOSI_>:
    __invoke(_Callable&& __fn, _Args&&... __args)
 8003910:	b5b0      	push	{r4, r5, r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fa9b 	bl	8003e56 <_ZSt7forwardIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EOSD_RNSt16remove_referenceISD_E4typeE>
 8003920:	4604      	mov	r4, r0
 8003922:	6838      	ldr	r0, [r7, #0]
 8003924:	f7ff fe4e 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003928:	4603      	mov	r3, r0
 800392a:	461a      	mov	r2, r3
 800392c:	4621      	mov	r1, r4
 800392e:	4628      	mov	r0, r5
 8003930:	f000 fa9c 	bl	8003e6c <_ZSt13__invoke_implIiRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEESD_St14__invoke_otherOT0_DpOT1_>
 8003934:	4603      	mov	r3, r0
    }
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bdb0      	pop	{r4, r5, r7, pc}

0800393e <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS8_11FilterWidthE0EEJLNS8_10FilterModeE0EEEEvhDpRNSA_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSK_RT0_EUlOSK_OSN_E_EEEONSt16remove_referenceISK_E4typeESP_>:
    move(_Tp&& __t) noexcept
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe fe63 	bl	800262c <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 8003966:	4602      	mov	r2, r0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800396e:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EC1EONS0_15_Iter_comp_iterISD_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe fd53 	bl	8002434 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessESt8identityEEDaRT_RT0_EUlOS5_OS7_E_EONSt16remove_referenceIS5_E4typeES9_>
 800398e:	4602      	mov	r2, r0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003996:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08a      	sub	sp, #40	; 0x28
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	70fb      	strb	r3, [r7, #3]
      const _Distance __topIndex = __holeIndex;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	61bb      	str	r3, [r7, #24]
      _Distance __secondChild = __holeIndex;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	61fb      	str	r3, [r7, #28]
      while (__secondChild < (__len - 1) / 2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3b01      	subs	r3, #1
 80039be:	0fda      	lsrs	r2, r3, #31
 80039c0:	4413      	add	r3, r2
 80039c2:	105b      	asrs	r3, r3, #1
 80039c4:	461a      	mov	r2, r3
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4293      	cmp	r3, r2
 80039ca:	da24      	bge.n	8003a16 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x72>
	  __secondChild = 2 * (__secondChild + 1);
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	3301      	adds	r3, #1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]
	  if (__comp(__first + __secondChild,
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	18d1      	adds	r1, r2, r3
		     __first + (__secondChild - 1)))
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3b01      	subs	r3, #1
	  if (__comp(__first + __secondChild,
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	461a      	mov	r2, r3
 80039e4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80039e8:	f7fe feec 	bl	80027c4 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhSG_EEbS7_S9_>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x54>
	    __secondChild--;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4413      	add	r3, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fa11 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003a04:	4601      	mov	r1, r0
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	780a      	ldrb	r2, [r1, #0]
 8003a0e:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __secondChild;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	60bb      	str	r3, [r7, #8]
      while (__secondChild < (__len - 1) / 2)
 8003a14:	e7d1      	b.n	80039ba <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x16>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d11c      	bne.n	8003a5a <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0xb6>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3b02      	subs	r3, #2
 8003a24:	0fda      	lsrs	r2, r3, #31
 8003a26:	4413      	add	r3, r2
 8003a28:	105b      	asrs	r3, r3, #1
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d113      	bne.n	8003a5a <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0xb6>
	  __secondChild = 2 * (__secondChild + 1);
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3301      	adds	r3, #1
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4413      	add	r3, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff f9ef 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003a48:	4601      	mov	r1, r0
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	780a      	ldrb	r2, [r1, #0]
 8003a52:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __secondChild - 1;
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	60bb      	str	r3, [r7, #8]
	__cmp(_GLIBCXX_MOVE(__comp));
 8003a5a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003a5e:	f7ff fe16 	bl	800368e <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessESt8identityEEDaRT_RT0_EUlOS8_OSA_E_EEEONSt16remove_referenceIS8_E4typeESC_>
 8003a62:	4602      	mov	r2, r0
 8003a64:	f107 0310 	add.w	r3, r7, #16
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff ff86 	bl	800397c <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EC1EONS0_15_Iter_comp_iterISD_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8003a70:	1cfb      	adds	r3, r7, #3
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff f9d7 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003a78:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8003a7a:	781a      	ldrb	r2, [r3, #0]
 8003a7c:	f107 0310 	add.w	r3, r7, #16
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fa18 	bl	8003ebe <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_RT2_>
    }
 8003a8e:	bf00      	nop
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <_ZSt4swapIhENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff f9c0 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 8003aac:	6838      	ldr	r0, [r7, #0]
 8003aae:	f7ff f9ba 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003aba:	f107 030f 	add.w	r3, r7, #15
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff f9b1 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	701a      	strb	r2, [r3, #0]
    }
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <_ZSt7forwardIRSt8identityEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <_ZSt13__invoke_implIRhRSt8identityJS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003aea:	b590      	push	{r4, r7, lr}
 8003aec:	b085      	sub	sp, #20
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	7338      	strb	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003af6:	68b8      	ldr	r0, [r7, #8]
 8003af8:	f7ff ffec 	bl	8003ad4 <_ZSt7forwardIRSt8identityEOT_RNSt16remove_referenceIS2_E4typeE>
 8003afc:	4604      	mov	r4, r0
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff fd60 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003b04:	4603      	mov	r3, r0
 8003b06:	4619      	mov	r1, r3
 8003b08:	4620      	mov	r0, r4
 8003b0a:	f000 fa1c 	bl	8003f46 <_ZNKSt8identityclIRhEEOT_S3_>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd90      	pop	{r4, r7, pc}

08003b18 <_ZSt7forwardIRNSt6ranges4lessEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <_ZSt13__invoke_implIbRNSt6ranges4lessEJRhS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003b2e:	b5b0      	push	{r4, r5, r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	7338      	strb	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003b3c:	68b8      	ldr	r0, [r7, #8]
 8003b3e:	f7ff ffeb 	bl	8003b18 <_ZSt7forwardIRNSt6ranges4lessEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b42:	4604      	mov	r4, r0
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fd3d 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003b4a:	4605      	mov	r5, r0
 8003b4c:	6838      	ldr	r0, [r7, #0]
 8003b4e:	f7ff fd39 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003b52:	4603      	mov	r3, r0
 8003b54:	461a      	mov	r2, r3
 8003b56:	4629      	mov	r1, r5
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f000 fa01 	bl	8003f60 <_ZNKSt6ranges4lessclIRhS2_EEbOT_OT0_>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bdb0      	pop	{r4, r5, r7, pc}

08003b68 <_ZSt23__copy_move_backward_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8003b74:	f7fc fe72 	bl	800085c <_ZSt21is_constant_evaluatedv>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <_ZSt23__copy_move_backward_a2ILb1EPhS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fa05 	bl	8003f92 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EET0_T_S5_S4_>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	e006      	b.n	8003b9a <_ZSt23__copy_move_backward_a2ILb1EPhS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fa21 	bl	8003fd8 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_>
 8003b96:	4603      	mov	r3, r0
								 __result);
 8003b98:	bf00      	nop
    }
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fcbe 	bl	8002530 <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0ELSB_0EEJLNS5_10FilterModeE1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1ELSC_1EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bbc:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b08a      	sub	sp, #40	; 0x28
 8003bce:	af02      	add	r7, sp, #8
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	70fb      	strb	r3, [r7, #3]
      const _Distance __topIndex = __holeIndex;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	61bb      	str	r3, [r7, #24]
      _Distance __secondChild = __holeIndex;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	61fb      	str	r3, [r7, #28]
      while (__secondChild < (__len - 1) / 2)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	0fda      	lsrs	r2, r3, #31
 8003be6:	4413      	add	r3, r2
 8003be8:	105b      	asrs	r3, r3, #1
 8003bea:	461a      	mov	r2, r3
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	da24      	bge.n	8003c3c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x72>
	  __secondChild = 2 * (__secondChild + 1);
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	61fb      	str	r3, [r7, #28]
	  if (__comp(__first + __secondChild,
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	18d1      	adds	r1, r2, r3
		     __first + (__secondChild - 1)))
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	3b01      	subs	r3, #1
	  if (__comp(__first + __secondChild,
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003c0e:	f7fe febd 	bl	800298c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x54>
	    __secondChild--;
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff f8fe 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003c2a:	4601      	mov	r1, r0
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4413      	add	r3, r2
 8003c32:	780a      	ldrb	r2, [r1, #0]
 8003c34:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __secondChild;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	60bb      	str	r3, [r7, #8]
      while (__secondChild < (__len - 1) / 2)
 8003c3a:	e7d1      	b.n	8003be0 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x16>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d11c      	bne.n	8003c80 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xb6>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3b02      	subs	r3, #2
 8003c4a:	0fda      	lsrs	r2, r3, #31
 8003c4c:	4413      	add	r3, r2
 8003c4e:	105b      	asrs	r3, r3, #1
 8003c50:	461a      	mov	r2, r3
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d113      	bne.n	8003c80 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xb6>
	  __secondChild = 2 * (__secondChild + 1);
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff f8dc 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003c6e:	4601      	mov	r1, r0
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4413      	add	r3, r2
 8003c76:	780a      	ldrb	r2, [r1, #0]
 8003c78:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __secondChild - 1;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	60bb      	str	r3, [r7, #8]
	__cmp(_GLIBCXX_MOVE(__comp));
 8003c80:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003c84:	f7ff fdbd 	bl	8003802 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS8_11FilterWidthE0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0ELSE_0EEJLNS8_10FilterModeE1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1ELSF_1EEEEvhDpRNSA_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSK_RT0_EUlOSK_OSN_E_EEEONSt16remove_referenceISK_E4typeESP_>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	f107 0310 	add.w	r3, r7, #16
 8003c8e:	4611      	mov	r1, r2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff ff86 	bl	8003ba2 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8003c96:	1cfb      	adds	r3, r7, #3
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff f8c4 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003c9e:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8003ca0:	781a      	ldrb	r2, [r3, #0]
 8003ca2:	f107 0310 	add.w	r3, r7, #16
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f9c1 	bl	8004036 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_>
    }
 8003cb4:	bf00      	nop
 8003cb6:	3720      	adds	r7, #32
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <_ZSt7forwardIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EOSD_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <_ZSt13__invoke_implIiRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEESD_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003cd2:	b590      	push	{r4, r7, lr}
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	7338      	strb	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003cde:	68b8      	ldr	r0, [r7, #8]
 8003ce0:	f7ff ffec 	bl	8003cbc <_ZSt7forwardIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0ELS7_0EEJLNS1_10FilterModeE1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1ELS8_1EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EOSD_RNSt16remove_referenceISD_E4typeE>
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff fc6c 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003cec:	4603      	mov	r3, r0
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f7fd f922 	bl	8000f3c <_ZZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlT_E0_clIhEEDaSC_>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd90      	pop	{r4, r7, pc}

08003d02 <_ZSt13__invoke_implIbRNSt6ranges4lessEJiiEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003d02:	b5b0      	push	{r4, r5, r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	7338      	strb	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003d10:	68b8      	ldr	r0, [r7, #8]
 8003d12:	f7ff ff01 	bl	8003b18 <_ZSt7forwardIRNSt6ranges4lessEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003d16:	4604      	mov	r4, r0
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7fc fecb 	bl	8000ab4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8003d1e:	4605      	mov	r5, r0
 8003d20:	6838      	ldr	r0, [r7, #0]
 8003d22:	f7fc fec7 	bl	8000ab4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8003d26:	4603      	mov	r3, r0
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4629      	mov	r1, r5
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f000 f9c6 	bl	80040be <_ZNKSt6ranges4lessclIiiEEbOT_OT0_>
 8003d32:	4603      	mov	r3, r0
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bdb0      	pop	{r4, r5, r7, pc}

08003d3c <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe fc6f 	bl	800262c <_ZSt4moveIRZNSt6ranges8__detail16__make_comp_projINS0_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS5_11FilterWidthE0EEJLNS5_10FilterModeE0EEEEvhDpRNS7_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSH_RT0_EUlOSH_OSK_E_EONSt16remove_referenceISH_E4typeESM_>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d56:	e883 0003 	stmia.w	r3, {r0, r1}
      { }
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	; 0x28
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	70fb      	strb	r3, [r7, #3]
      const _Distance __topIndex = __holeIndex;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	61bb      	str	r3, [r7, #24]
      _Distance __secondChild = __holeIndex;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	61fb      	str	r3, [r7, #28]
      while (__secondChild < (__len - 1) / 2)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	0fda      	lsrs	r2, r3, #31
 8003d80:	4413      	add	r3, r2
 8003d82:	105b      	asrs	r3, r3, #1
 8003d84:	461a      	mov	r2, r3
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	da24      	bge.n	8003dd6 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x72>
	  __secondChild = 2 * (__secondChild + 1);
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	61fb      	str	r3, [r7, #28]
	  if (__comp(__first + __secondChild,
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	18d1      	adds	r1, r2, r3
		     __first + (__secondChild - 1)))
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3b01      	subs	r3, #1
	  if (__comp(__first + __secondChild,
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4413      	add	r3, r2
 8003da2:	461a      	mov	r2, r3
 8003da4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003da8:	f7fe febc 	bl	8002b24 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhST_EEbSJ_SM_>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x54>
	    __secondChild--;
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff f831 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003dc4:	4601      	mov	r1, r0
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	780a      	ldrb	r2, [r1, #0]
 8003dce:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __secondChild;
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	60bb      	str	r3, [r7, #8]
      while (__secondChild < (__len - 1) / 2)
 8003dd4:	e7d1      	b.n	8003d7a <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x16>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d11c      	bne.n	8003e1a <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xb6>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3b02      	subs	r3, #2
 8003de4:	0fda      	lsrs	r2, r3, #31
 8003de6:	4413      	add	r3, r2
 8003de8:	105b      	asrs	r3, r3, #1
 8003dea:	461a      	mov	r2, r3
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d113      	bne.n	8003e1a <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xb6>
	  __secondChild = 2 * (__secondChild + 1);
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	3301      	adds	r3, #1
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4413      	add	r3, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff f80f 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003e08:	4601      	mov	r1, r0
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	780a      	ldrb	r2, [r1, #0]
 8003e12:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __secondChild - 1;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	60bb      	str	r3, [r7, #8]
	__cmp(_GLIBCXX_MOVE(__comp));
 8003e1a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003e1e:	f7ff fd8e 	bl	800393e <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS3_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS8_11FilterWidthE0EEJLNS8_10FilterModeE0EEEEvhDpRNSA_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSK_RT0_EUlOSK_OSN_E_EEEONSt16remove_referenceISK_E4typeESP_>
 8003e22:	4602      	mov	r2, r0
 8003e24:	f107 0310 	add.w	r3, r7, #16
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff86 	bl	8003d3c <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EC1EONS0_15_Iter_comp_iterISQ_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8003e30:	1cfb      	adds	r3, r7, #3
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe fff7 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003e38:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8003e3a:	781a      	ldrb	r2, [r3, #0]
 8003e3c:	f107 0310 	add.w	r3, r7, #16
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	4613      	mov	r3, r2
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f962 	bl	8004112 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_>
    }
 8003e4e:	bf00      	nop
 8003e50:	3720      	adds	r7, #32
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <_ZSt7forwardIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EOSD_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <_ZSt13__invoke_implIiRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_JRhEESD_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003e6c:	b590      	push	{r4, r7, lr}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	7338      	strb	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003e78:	68b8      	ldr	r0, [r7, #8]
 8003e7a:	f7ff ffec 	bl	8003e56 <_ZSt7forwardIRZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS1_11FilterWidthE0EEJLNS1_10FilterModeE0EEEEvhDpRNS3_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EOSD_RNSt16remove_referenceISD_E4typeE>
 8003e7e:	4604      	mov	r4, r0
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fb9f 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003e86:	4603      	mov	r3, r0
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f7fd ff31 	bl	8001cf4 <_ZZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0EEJLNS0_10FilterModeE0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEEENKUlT_E0_clIhEEDaSC_>
 8003e92:	4603      	mov	r3, r0
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd90      	pop	{r4, r7, pc}

08003e9c <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhhEEbS7_SA_>:
	operator()(_Iterator __it, _Value& __val)
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe ff91 	bl	8002dd6 <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessESt8identityEEDaRT_RT0_ENKUlOS4_OS6_E_clIRhSC_EEbS8_S9_>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	70fb      	strb	r3, [r7, #3]
      _Distance __parent = (__holeIndex - 1) / 2;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	0fda      	lsrs	r2, r3, #31
 8003ed2:	4413      	add	r3, r2
 8003ed4:	105b      	asrs	r3, r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	dd0c      	ble.n	8003efa <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_RT2_+0x3c>
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	1cfa      	adds	r2, r7, #3
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6a38      	ldr	r0, [r7, #32]
 8003eec:	f7ff ffd6 	bl	8003e9c <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessESt8identityEEDaRT_RT0_EUlOS7_OS9_E_EclIPhhEEbS7_SA_>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_RT2_+0x3c>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_RT2_+0x3e>
 8003efa:	2300      	movs	r3, #0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d014      	beq.n	8003f2a <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_RT2_+0x6c>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4413      	add	r3, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe ff8d 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003f0c:	4601      	mov	r1, r0
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	780a      	ldrb	r2, [r1, #0]
 8003f16:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __parent;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	60bb      	str	r3, [r7, #8]
	  __parent = (__holeIndex - 1) / 2;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	0fda      	lsrs	r2, r3, #31
 8003f22:	4413      	add	r3, r2
 8003f24:	105b      	asrs	r3, r3, #1
 8003f26:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003f28:	e7d6      	b.n	8003ed8 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_RT2_+0x1a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8003f2a:	1cfb      	adds	r3, r7, #3
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe ff7a 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003f32:	4601      	mov	r1, r0
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4413      	add	r3, r2
 8003f3a:	780a      	ldrb	r2, [r1, #0]
 8003f3c:	701a      	strb	r2, [r3, #0]
    }
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <_ZNKSt8identityclIRhEEOT_S3_>:
  /// [func.identity] The identity function.
  struct identity
  {
    template<typename _Tp>
      constexpr _Tp&&
      operator()(_Tp&& __t) const noexcept
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
      { return std::forward<_Tp>(__t); }
 8003f50:	6838      	ldr	r0, [r7, #0]
 8003f52:	f7ff fb37 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <_ZNKSt6ranges4lessclIRhS2_EEbOT_OT0_>:
  struct less
  {
    template<typename _Tp, typename _Up>
      requires totally_ordered_with<_Tp, _Up>
      constexpr bool
      operator()(_Tp&& __t, _Up&& __u) const
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
	    auto __y = reinterpret_cast<__UINTPTR_TYPE__>(
	      static_cast<const volatile void*>(std::forward<_Up>(__u)));
	    return __x < __y;
	  }
	else
	  return std::forward<_Tp>(__t) < std::forward<_Up>(__u);
 8003f6c:	68b8      	ldr	r0, [r7, #8]
 8003f6e:	f7ff fb29 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003f72:	4603      	mov	r3, r0
 8003f74:	781c      	ldrb	r4, [r3, #0]
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fb24 	bl	80035c4 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	429c      	cmp	r4, r3
 8003f82:	bf34      	ite	cc
 8003f84:	2301      	movcc	r3, #1
 8003f86:	2300      	movcs	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
      }
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd90      	pop	{r4, r7, pc}

08003f92 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b086      	sub	sp, #24
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	dd10      	ble.n	8003fce <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EET0_T_S5_S4_+0x3c>
	    *--__result = std::move(*--__last);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	68b8      	ldr	r0, [r7, #8]
 8003fb4:	f7fe ff37 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	781a      	ldrb	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	701a      	strb	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	e7eb      	b.n	8003fa6 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPhS3_EET0_T_S5_S4_+0x14>
	  return __result;
 8003fce:	687b      	ldr	r3, [r7, #4]
	}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d008      	beq.n	8004004 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	425b      	negs	r3, r3
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	68f9      	ldr	r1, [r7, #12]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f008 ff6e 	bl	800cee0 <memmove>
	  return __result - _Num;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	425b      	negs	r3, r3
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	4413      	add	r3, r2
	}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhhEEbSJ_SN_>:
	operator()(_Iterator __it, _Value& __val)
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff f86c 	bl	8003104 <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0ELSA_0EEJLNS4_10FilterModeE1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1ELSB_1EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>
 800402c:	4603      	mov	r3, r0
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	70fb      	strb	r3, [r7, #3]
      _Distance __parent = (__holeIndex - 1) / 2;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	3b01      	subs	r3, #1
 8004048:	0fda      	lsrs	r2, r3, #31
 800404a:	4413      	add	r3, r2
 800404c:	105b      	asrs	r3, r3, #1
 800404e:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	429a      	cmp	r2, r3
 8004056:	dd0c      	ble.n	8004072 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x3c>
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4413      	add	r3, r2
 800405e:	1cfa      	adds	r2, r7, #3
 8004060:	4619      	mov	r1, r3
 8004062:	6a38      	ldr	r0, [r7, #32]
 8004064:	f7ff ffd6 	bl	8004014 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0ELSD_0EEJLNS7_10FilterModeE1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1ELSE_1EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhhEEbSJ_SN_>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x3c>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x3e>
 8004072:	2300      	movs	r3, #0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d014      	beq.n	80040a2 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x6c>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4413      	add	r3, r2
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fed1 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8004084:	4601      	mov	r1, r0
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	780a      	ldrb	r2, [r1, #0]
 800408e:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __parent;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	60bb      	str	r3, [r7, #8]
	  __parent = (__holeIndex - 1) / 2;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	3b01      	subs	r3, #1
 8004098:	0fda      	lsrs	r2, r3, #31
 800409a:	4413      	add	r3, r2
 800409c:	105b      	asrs	r3, r3, #1
 800409e:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80040a0:	e7d6      	b.n	8004050 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x1a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80040a2:	1cfb      	adds	r3, r7, #3
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe febe 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 80040aa:	4601      	mov	r1, r0
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4413      	add	r3, r2
 80040b2:	780a      	ldrb	r2, [r1, #0]
 80040b4:	701a      	strb	r2, [r3, #0]
    }
 80040b6:	bf00      	nop
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <_ZNKSt6ranges4lessclIiiEEbOT_OT0_>:
      operator()(_Tp&& __t, _Up&& __u) const
 80040be:	b590      	push	{r4, r7, lr}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
	  return std::forward<_Tp>(__t) < std::forward<_Up>(__u);
 80040ca:	68b8      	ldr	r0, [r7, #8]
 80040cc:	f7fc fcf2 	bl	8000ab4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80040d0:	4603      	mov	r3, r0
 80040d2:	681c      	ldr	r4, [r3, #0]
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7fc fced 	bl	8000ab4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80040da:	4603      	mov	r3, r0
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	429c      	cmp	r4, r3
 80040e0:	bfb4      	ite	lt
 80040e2:	2301      	movlt	r3, #1
 80040e4:	2300      	movge	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
      }
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd90      	pop	{r4, r7, pc}

080040f0 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhhEEbSJ_SN_>:
	operator()(_Iterator __it, _Value& __val)
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff f961 	bl	80033ca <_ZZNSt6ranges8__detail16__make_comp_projINS_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS4_11FilterWidthE0EEJLNS4_10FilterModeE0EEEEvhDpRNS6_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSG_RT0_ENKUlOSG_OSJ_E_clIRhSP_EEbSL_SM_>
 8004108:	4603      	mov	r3, r0
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	70fb      	strb	r3, [r7, #3]
      _Distance __parent = (__holeIndex - 1) / 2;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	3b01      	subs	r3, #1
 8004124:	0fda      	lsrs	r2, r3, #31
 8004126:	4413      	add	r3, r2
 8004128:	105b      	asrs	r3, r3, #1
 800412a:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	dd0c      	ble.n	800414e <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x3c>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	1cfa      	adds	r2, r7, #3
 800413c:	4619      	mov	r1, r3
 800413e:	6a38      	ldr	r0, [r7, #32]
 8004140:	f7ff ffd6 	bl	80040f0 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS2_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS7_11FilterWidthE0EEJLNS7_10FilterModeE0EEEEvhDpRNS9_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSJ_RT0_EUlOSJ_OSM_E_EclIPhhEEbSJ_SN_>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x3c>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x3e>
 800414e:	2300      	movs	r3, #0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d014      	beq.n	800417e <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x6c>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4413      	add	r3, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fe63 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8004160:	4601      	mov	r1, r0
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	780a      	ldrb	r2, [r1, #0]
 800416a:	701a      	strb	r2, [r3, #0]
	  __holeIndex = __parent;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	60bb      	str	r3, [r7, #8]
	  __parent = (__holeIndex - 1) / 2;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	3b01      	subs	r3, #1
 8004174:	0fda      	lsrs	r2, r3, #31
 8004176:	4413      	add	r3, r2
 8004178:	105b      	asrs	r3, r3, #1
 800417a:	617b      	str	r3, [r7, #20]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800417c:	e7d6      	b.n	800412c <_ZSt11__push_heapIPhihN9__gnu_cxx5__ops14_Iter_comp_valIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM036513FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0EEJLNS9_10FilterModeE0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_RT2_+0x1a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800417e:	1cfb      	adds	r3, r7, #3
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe fe50 	bl	8002e26 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8004186:	4601      	mov	r1, r0
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4413      	add	r3, r2
 800418e:	780a      	ldrb	r2, [r1, #0]
 8004190:	701a      	strb	r2, [r3, #0]
    }
 8004192:	bf00      	nop
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <HAL_CAN_RxFifo0MsgPendingCallback>:
#include "main.h"   
#include "can_usb.h"


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08e      	sub	sp, #56	; 0x38
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
    uint8_t Data[15];
    CAN_RxHeaderTypeDef RxHeader;
    //the Data is used for USB buffer. can_process set header infomation to Data[0~5].
    //It is a terrible code. Sorry for hard work to read the code.
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Data+6) == HAL_OK)
 80041a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041a8:	3306      	adds	r3, #6
 80041aa:	f107 020c 	add.w	r2, r7, #12
 80041ae:	2100      	movs	r1, #0
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fbbe 	bl	8004932 <HAL_CAN_GetRxMessage>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
    {
        can_process(&RxHeader,Data);
 80041bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041c0:	f107 030c 	add.w	r3, r7, #12
 80041c4:	4611      	mov	r1, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fc f864 	bl	8000294 <can_process>
        HAL_GPIO_TogglePin(LED_CAN_GPIO_Port,LED_CAN_Pin);
 80041cc:	2110      	movs	r1, #16
 80041ce:	4803      	ldr	r0, [pc, #12]	; (80041dc <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80041d0:	f001 f9ba 	bl	8005548 <HAL_GPIO_TogglePin>
    }
}
 80041d4:	bf00      	nop
 80041d6:	3738      	adds	r7, #56	; 0x38
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	48000400 	.word	0x48000400

080041e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80041e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004218 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041e4:	480d      	ldr	r0, [pc, #52]	; (800421c <LoopForever+0x6>)
  ldr r1, =_edata
 80041e6:	490e      	ldr	r1, [pc, #56]	; (8004220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80041e8:	4a0e      	ldr	r2, [pc, #56]	; (8004224 <LoopForever+0xe>)
  movs r3, #0
 80041ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041ec:	e002      	b.n	80041f4 <LoopCopyDataInit>

080041ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041f2:	3304      	adds	r3, #4

080041f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041f8:	d3f9      	bcc.n	80041ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041fa:	4a0b      	ldr	r2, [pc, #44]	; (8004228 <LoopForever+0x12>)
  ldr r4, =_ebss
 80041fc:	4c0b      	ldr	r4, [pc, #44]	; (800422c <LoopForever+0x16>)
  movs r3, #0
 80041fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004200:	e001      	b.n	8004206 <LoopFillZerobss>

08004202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004204:	3204      	adds	r2, #4

08004206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004208:	d3fb      	bcc.n	8004202 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800420a:	f7fc fb15 	bl	8000838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800420e:	f008 fe35 	bl	800ce7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004212:	f7fc f939 	bl	8000488 <main>

08004216 <LoopForever>:

LoopForever:
    b LoopForever
 8004216:	e7fe      	b.n	8004216 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004218:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800421c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004220:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8004224:	0800cff4 	.word	0x0800cff4
  ldr r2, =_sbss
 8004228:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 800422c:	20001440 	.word	0x20001440

08004230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004230:	e7fe      	b.n	8004230 <ADC1_2_IRQHandler>
	...

08004234 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <HAL_Init+0x28>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a07      	ldr	r2, [pc, #28]	; (800425c <HAL_Init+0x28>)
 800423e:	f043 0310 	orr.w	r3, r3, #16
 8004242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004244:	2003      	movs	r0, #3
 8004246:	f000 ffab 	bl	80051a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800424a:	200f      	movs	r0, #15
 800424c:	f000 f808 	bl	8004260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004250:	f7fc fa44 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40022000 	.word	0x40022000

08004260 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_InitTick+0x54>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_InitTick+0x58>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	4619      	mov	r1, r3
 8004272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004276:	fbb3 f3f1 	udiv	r3, r3, r1
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	4618      	mov	r0, r3
 8004280:	f000 ffc3 	bl	800520a <HAL_SYSTICK_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e00e      	b.n	80042ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b0f      	cmp	r3, #15
 8004292:	d80a      	bhi.n	80042aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004294:	2200      	movs	r2, #0
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	f000 ff8b 	bl	80051b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042a0:	4a06      	ldr	r2, [pc, #24]	; (80042bc <HAL_InitTick+0x5c>)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e000      	b.n	80042ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000040 	.word	0x20000040
 80042b8:	20000048 	.word	0x20000048
 80042bc:	20000044 	.word	0x20000044

080042c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <HAL_IncTick+0x20>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <HAL_IncTick+0x24>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4413      	add	r3, r2
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_IncTick+0x24>)
 80042d2:	6013      	str	r3, [r2, #0]
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000048 	.word	0x20000048
 80042e4:	20000224 	.word	0x20000224

080042e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <HAL_GetTick+0x14>)
 80042ee:	681b      	ldr	r3, [r3, #0]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20000224 	.word	0x20000224

08004300 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e0ed      	b.n	80044ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fc fa00 	bl	8000724 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004334:	f7ff ffd8 	bl	80042e8 <HAL_GetTick>
 8004338:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800433a:	e012      	b.n	8004362 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800433c:	f7ff ffd4 	bl	80042e8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b0a      	cmp	r3, #10
 8004348:	d90b      	bls.n	8004362 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2205      	movs	r2, #5
 800435a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e0c5      	b.n	80044ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0e5      	beq.n	800433c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0202 	bic.w	r2, r2, #2
 800437e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004380:	f7ff ffb2 	bl	80042e8 <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004386:	e012      	b.n	80043ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004388:	f7ff ffae 	bl	80042e8 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b0a      	cmp	r3, #10
 8004394:	d90b      	bls.n	80043ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2205      	movs	r2, #5
 80043a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e09f      	b.n	80044ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e5      	bne.n	8004388 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	7e1b      	ldrb	r3, [r3, #24]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d108      	bne.n	80043d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	e007      	b.n	80043e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	7e5b      	ldrb	r3, [r3, #25]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d108      	bne.n	8004400 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e007      	b.n	8004410 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	7e9b      	ldrb	r3, [r3, #26]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d108      	bne.n	800442a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0220 	orr.w	r2, r2, #32
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	e007      	b.n	800443a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0220 	bic.w	r2, r2, #32
 8004438:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	7edb      	ldrb	r3, [r3, #27]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d108      	bne.n	8004454 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0210 	bic.w	r2, r2, #16
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	e007      	b.n	8004464 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0210 	orr.w	r2, r2, #16
 8004462:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	7f1b      	ldrb	r3, [r3, #28]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d108      	bne.n	800447e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0208 	orr.w	r2, r2, #8
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e007      	b.n	800448e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0208 	bic.w	r2, r2, #8
 800448c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	7f5b      	ldrb	r3, [r3, #29]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d108      	bne.n	80044a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0204 	orr.w	r2, r2, #4
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e007      	b.n	80044b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0204 	bic.w	r2, r2, #4
 80044b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	ea42 0103 	orr.w	r1, r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	1e5a      	subs	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b087      	sub	sp, #28
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800450c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800450e:	7cfb      	ldrb	r3, [r7, #19]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d003      	beq.n	800451c <HAL_CAN_ConfigFilter+0x26>
 8004514:	7cfb      	ldrb	r3, [r7, #19]
 8004516:	2b02      	cmp	r3, #2
 8004518:	f040 80aa 	bne.w	8004670 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004522:	f043 0201 	orr.w	r2, r3, #1
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	2201      	movs	r2, #1
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	43db      	mvns	r3, r3
 8004546:	401a      	ands	r2, r3
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d123      	bne.n	800459e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	43db      	mvns	r3, r3
 8004560:	401a      	ands	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004578:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	3248      	adds	r2, #72	; 0x48
 800457e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004592:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004594:	6979      	ldr	r1, [r7, #20]
 8004596:	3348      	adds	r3, #72	; 0x48
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	440b      	add	r3, r1
 800459c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d122      	bne.n	80045ec <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80045c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	3248      	adds	r2, #72	; 0x48
 80045cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045e2:	6979      	ldr	r1, [r7, #20]
 80045e4:	3348      	adds	r3, #72	; 0x48
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	440b      	add	r3, r1
 80045ea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d109      	bne.n	8004608 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	401a      	ands	r2, r3
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004606:	e007      	b.n	8004618 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	431a      	orrs	r2, r3
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d109      	bne.n	8004634 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	43db      	mvns	r3, r3
 800462a:	401a      	ands	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004632:	e007      	b.n	8004644 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	431a      	orrs	r2, r3
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d107      	bne.n	800465c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	431a      	orrs	r2, r3
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004662:	f023 0201 	bic.w	r2, r3, #1
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e006      	b.n	800467e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
  }
}
 800467e:	4618      	mov	r0, r3
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b01      	cmp	r3, #1
 800469c:	d12e      	bne.n	80046fc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2202      	movs	r2, #2
 80046a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046b6:	f7ff fe17 	bl	80042e8 <HAL_GetTick>
 80046ba:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80046bc:	e012      	b.n	80046e4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046be:	f7ff fe13 	bl	80042e8 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b0a      	cmp	r3, #10
 80046ca:	d90b      	bls.n	80046e4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2205      	movs	r2, #5
 80046dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e012      	b.n	800470a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e5      	bne.n	80046be <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	e006      	b.n	800470a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
  }
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004712:	b480      	push	{r7}
 8004714:	b089      	sub	sp, #36	; 0x24
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004726:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004730:	7ffb      	ldrb	r3, [r7, #31]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d003      	beq.n	800473e <HAL_CAN_AddTxMessage+0x2c>
 8004736:	7ffb      	ldrb	r3, [r7, #31]
 8004738:	2b02      	cmp	r3, #2
 800473a:	f040 80b8 	bne.w	80048ae <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80a0 	beq.w	800489e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	0e1b      	lsrs	r3, r3, #24
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d907      	bls.n	800477e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e09e      	b.n	80048bc <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800477e:	2201      	movs	r2, #1
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	409a      	lsls	r2, r3
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10d      	bne.n	80047ac <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800479a:	68f9      	ldr	r1, [r7, #12]
 800479c:	6809      	ldr	r1, [r1, #0]
 800479e:	431a      	orrs	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	3318      	adds	r3, #24
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	440b      	add	r3, r1
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	e00f      	b.n	80047cc <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047b6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047bc:	68f9      	ldr	r1, [r7, #12]
 80047be:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80047c0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	3318      	adds	r3, #24
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	440b      	add	r3, r1
 80047ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6819      	ldr	r1, [r3, #0]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	3318      	adds	r3, #24
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	440b      	add	r3, r1
 80047dc:	3304      	adds	r3, #4
 80047de:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	7d1b      	ldrb	r3, [r3, #20]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d111      	bne.n	800480c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	3318      	adds	r3, #24
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	4413      	add	r3, r2
 80047f4:	3304      	adds	r3, #4
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	6811      	ldr	r1, [r2, #0]
 80047fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	3318      	adds	r3, #24
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	440b      	add	r3, r1
 8004808:	3304      	adds	r3, #4
 800480a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3307      	adds	r3, #7
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	061a      	lsls	r2, r3, #24
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3306      	adds	r3, #6
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	041b      	lsls	r3, r3, #16
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3305      	adds	r3, #5
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	4313      	orrs	r3, r2
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	3204      	adds	r2, #4
 800482c:	7812      	ldrb	r2, [r2, #0]
 800482e:	4610      	mov	r0, r2
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	6811      	ldr	r1, [r2, #0]
 8004834:	ea43 0200 	orr.w	r2, r3, r0
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	440b      	add	r3, r1
 800483e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004842:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3303      	adds	r3, #3
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	061a      	lsls	r2, r3, #24
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3302      	adds	r3, #2
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	041b      	lsls	r3, r3, #16
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3301      	adds	r3, #1
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	4313      	orrs	r3, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	7812      	ldrb	r2, [r2, #0]
 8004864:	4610      	mov	r0, r2
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	6811      	ldr	r1, [r2, #0]
 800486a:	ea43 0200 	orr.w	r2, r3, r0
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	440b      	add	r3, r1
 8004874:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004878:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	3318      	adds	r3, #24
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	4413      	add	r3, r2
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	6811      	ldr	r1, [r2, #0]
 800488c:	f043 0201 	orr.w	r2, r3, #1
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	3318      	adds	r3, #24
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	440b      	add	r3, r1
 8004898:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e00e      	b.n	80048bc <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e006      	b.n	80048bc <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
  }
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3724      	adds	r7, #36	; 0x24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048da:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80048dc:	7afb      	ldrb	r3, [r7, #11]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d002      	beq.n	80048e8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80048e2:	7afb      	ldrb	r3, [r7, #11]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d11d      	bne.n	8004924 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3301      	adds	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3301      	adds	r3, #1
 800490e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3301      	adds	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004924:	68fb      	ldr	r3, [r7, #12]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004932:	b480      	push	{r7}
 8004934:	b087      	sub	sp, #28
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004946:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d003      	beq.n	8004956 <HAL_CAN_GetRxMessage+0x24>
 800494e:	7dfb      	ldrb	r3, [r7, #23]
 8004950:	2b02      	cmp	r3, #2
 8004952:	f040 80f3 	bne.w	8004b3c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10e      	bne.n	800497a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d116      	bne.n	8004998 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e0e7      	b.n	8004b4a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d107      	bne.n	8004998 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0d8      	b.n	8004b4a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	331b      	adds	r3, #27
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	4413      	add	r3, r2
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0204 	and.w	r2, r3, #4
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10c      	bne.n	80049d0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	331b      	adds	r3, #27
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	4413      	add	r3, r2
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	0d5b      	lsrs	r3, r3, #21
 80049c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e00b      	b.n	80049e8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	331b      	adds	r3, #27
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	4413      	add	r3, r2
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	08db      	lsrs	r3, r3, #3
 80049e0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	331b      	adds	r3, #27
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	4413      	add	r3, r2
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0202 	and.w	r2, r3, #2
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	331b      	adds	r3, #27
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	4413      	add	r3, r2
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 020f 	and.w	r2, r3, #15
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	331b      	adds	r3, #27
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	4413      	add	r3, r2
 8004a22:	3304      	adds	r3, #4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	0a1b      	lsrs	r3, r3, #8
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	331b      	adds	r3, #27
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	4413      	add	r3, r2
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	0c1b      	lsrs	r3, r3, #16
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	0a1a      	lsrs	r2, r3, #8
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	3301      	adds	r3, #1
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	0c1a      	lsrs	r2, r3, #16
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	3302      	adds	r3, #2
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	0e1a      	lsrs	r2, r3, #24
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	3303      	adds	r3, #3
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	3304      	adds	r3, #4
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	0a1a      	lsrs	r2, r3, #8
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	3305      	adds	r3, #5
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	0c1a      	lsrs	r2, r3, #16
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	3306      	adds	r3, #6
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	0e1a      	lsrs	r2, r3, #24
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	3307      	adds	r3, #7
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d108      	bne.n	8004b28 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0220 	orr.w	r2, r2, #32
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	e007      	b.n	8004b38 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0220 	orr.w	r2, r2, #32
 8004b36:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e006      	b.n	8004b4a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
  }
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b66:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d002      	beq.n	8004b74 <HAL_CAN_ActivateNotification+0x1e>
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d109      	bne.n	8004b88 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6959      	ldr	r1, [r3, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e006      	b.n	8004b96 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
  }
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b08a      	sub	sp, #40	; 0x28
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d07c      	beq.n	8004ce2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d023      	beq.n	8004c3a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f983 	bl	8004f10 <HAL_CAN_TxMailbox0CompleteCallback>
 8004c0a:	e016      	b.n	8004c3a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d004      	beq.n	8004c20 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1e:	e00c      	b.n	8004c3a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
 8004c32:	e002      	b.n	8004c3a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f989 	bl	8004f4c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d024      	beq.n	8004c8e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f963 	bl	8004f24 <HAL_CAN_TxMailbox1CompleteCallback>
 8004c5e:	e016      	b.n	8004c8e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
 8004c72:	e00c      	b.n	8004c8e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d004      	beq.n	8004c88 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
 8004c86:	e002      	b.n	8004c8e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f969 	bl	8004f60 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d024      	beq.n	8004ce2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ca0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f943 	bl	8004f38 <HAL_CAN_TxMailbox2CompleteCallback>
 8004cb2:	e016      	b.n	8004ce2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d004      	beq.n	8004cc8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc6:	e00c      	b.n	8004ce2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cda:	e002      	b.n	8004ce2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f949 	bl	8004f74 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00c      	beq.n	8004d06 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2210      	movs	r2, #16
 8004d04:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00b      	beq.n	8004d28 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d006      	beq.n	8004d28 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2208      	movs	r2, #8
 8004d20:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f930 	bl	8004f88 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff fa2b 	bl	800419c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00c      	beq.n	8004d6a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f003 0310 	and.w	r3, r3, #16
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d007      	beq.n	8004d6a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2210      	movs	r2, #16
 8004d68:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00b      	beq.n	8004d8c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d006      	beq.n	8004d8c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2208      	movs	r2, #8
 8004d84:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f912 	bl	8004fb0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f8f9 	bl	8004f9c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00b      	beq.n	8004dcc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f003 0310 	and.w	r3, r3, #16
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d006      	beq.n	8004dcc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2210      	movs	r2, #16
 8004dc4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8fc 	bl	8004fc4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d006      	beq.n	8004dee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2208      	movs	r2, #8
 8004de6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f8f5 	bl	8004fd8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d07b      	beq.n	8004ef0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d072      	beq.n	8004ee8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	f043 0302 	orr.w	r3, r3, #2
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	f043 0304 	orr.w	r3, r3, #4
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d043      	beq.n	8004ee8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d03e      	beq.n	8004ee8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e70:	2b60      	cmp	r3, #96	; 0x60
 8004e72:	d02b      	beq.n	8004ecc <HAL_CAN_IRQHandler+0x32a>
 8004e74:	2b60      	cmp	r3, #96	; 0x60
 8004e76:	d82e      	bhi.n	8004ed6 <HAL_CAN_IRQHandler+0x334>
 8004e78:	2b50      	cmp	r3, #80	; 0x50
 8004e7a:	d022      	beq.n	8004ec2 <HAL_CAN_IRQHandler+0x320>
 8004e7c:	2b50      	cmp	r3, #80	; 0x50
 8004e7e:	d82a      	bhi.n	8004ed6 <HAL_CAN_IRQHandler+0x334>
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d019      	beq.n	8004eb8 <HAL_CAN_IRQHandler+0x316>
 8004e84:	2b40      	cmp	r3, #64	; 0x40
 8004e86:	d826      	bhi.n	8004ed6 <HAL_CAN_IRQHandler+0x334>
 8004e88:	2b30      	cmp	r3, #48	; 0x30
 8004e8a:	d010      	beq.n	8004eae <HAL_CAN_IRQHandler+0x30c>
 8004e8c:	2b30      	cmp	r3, #48	; 0x30
 8004e8e:	d822      	bhi.n	8004ed6 <HAL_CAN_IRQHandler+0x334>
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d002      	beq.n	8004e9a <HAL_CAN_IRQHandler+0x2f8>
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d005      	beq.n	8004ea4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004e98:	e01d      	b.n	8004ed6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	f043 0308 	orr.w	r3, r3, #8
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ea2:	e019      	b.n	8004ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	f043 0310 	orr.w	r3, r3, #16
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eac:	e014      	b.n	8004ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	f043 0320 	orr.w	r3, r3, #32
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eb6:	e00f      	b.n	8004ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ec0:	e00a      	b.n	8004ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eca:	e005      	b.n	8004ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ed4:	e000      	b.n	8004ed8 <HAL_CAN_IRQHandler+0x336>
            break;
 8004ed6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ee6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2204      	movs	r2, #4
 8004eee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f872 	bl	8004fec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004f08:	bf00      	nop
 8004f0a:	3728      	adds	r7, #40	; 0x28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <__NVIC_SetPriorityGrouping+0x44>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800501c:	4013      	ands	r3, r2
 800501e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800502c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005032:	4a04      	ldr	r2, [pc, #16]	; (8005044 <__NVIC_SetPriorityGrouping+0x44>)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	60d3      	str	r3, [r2, #12]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	e000ed00 	.word	0xe000ed00

08005048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800504c:	4b04      	ldr	r3, [pc, #16]	; (8005060 <__NVIC_GetPriorityGrouping+0x18>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	0a1b      	lsrs	r3, r3, #8
 8005052:	f003 0307 	and.w	r3, r3, #7
}
 8005056:	4618      	mov	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	e000ed00 	.word	0xe000ed00

08005064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800506e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005072:	2b00      	cmp	r3, #0
 8005074:	db0b      	blt.n	800508e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	f003 021f 	and.w	r2, r3, #31
 800507c:	4907      	ldr	r1, [pc, #28]	; (800509c <__NVIC_EnableIRQ+0x38>)
 800507e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	2001      	movs	r0, #1
 8005086:	fa00 f202 	lsl.w	r2, r0, r2
 800508a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	e000e100 	.word	0xe000e100

080050a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	6039      	str	r1, [r7, #0]
 80050aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	db0a      	blt.n	80050ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	490c      	ldr	r1, [pc, #48]	; (80050ec <__NVIC_SetPriority+0x4c>)
 80050ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050be:	0112      	lsls	r2, r2, #4
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	440b      	add	r3, r1
 80050c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050c8:	e00a      	b.n	80050e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	4908      	ldr	r1, [pc, #32]	; (80050f0 <__NVIC_SetPriority+0x50>)
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	3b04      	subs	r3, #4
 80050d8:	0112      	lsls	r2, r2, #4
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	440b      	add	r3, r1
 80050de:	761a      	strb	r2, [r3, #24]
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	e000e100 	.word	0xe000e100
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b089      	sub	sp, #36	; 0x24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f1c3 0307 	rsb	r3, r3, #7
 800510e:	2b04      	cmp	r3, #4
 8005110:	bf28      	it	cs
 8005112:	2304      	movcs	r3, #4
 8005114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3304      	adds	r3, #4
 800511a:	2b06      	cmp	r3, #6
 800511c:	d902      	bls.n	8005124 <NVIC_EncodePriority+0x30>
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	3b03      	subs	r3, #3
 8005122:	e000      	b.n	8005126 <NVIC_EncodePriority+0x32>
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005128:	f04f 32ff 	mov.w	r2, #4294967295
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	43da      	mvns	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	401a      	ands	r2, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800513c:	f04f 31ff 	mov.w	r1, #4294967295
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	fa01 f303 	lsl.w	r3, r1, r3
 8005146:	43d9      	mvns	r1, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800514c:	4313      	orrs	r3, r2
         );
}
 800514e:	4618      	mov	r0, r3
 8005150:	3724      	adds	r7, #36	; 0x24
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3b01      	subs	r3, #1
 8005168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800516c:	d301      	bcc.n	8005172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800516e:	2301      	movs	r3, #1
 8005170:	e00f      	b.n	8005192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005172:	4a0a      	ldr	r2, [pc, #40]	; (800519c <SysTick_Config+0x40>)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3b01      	subs	r3, #1
 8005178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800517a:	210f      	movs	r1, #15
 800517c:	f04f 30ff 	mov.w	r0, #4294967295
 8005180:	f7ff ff8e 	bl	80050a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005184:	4b05      	ldr	r3, [pc, #20]	; (800519c <SysTick_Config+0x40>)
 8005186:	2200      	movs	r2, #0
 8005188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800518a:	4b04      	ldr	r3, [pc, #16]	; (800519c <SysTick_Config+0x40>)
 800518c:	2207      	movs	r2, #7
 800518e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	e000e010 	.word	0xe000e010

080051a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff ff29 	bl	8005000 <__NVIC_SetPriorityGrouping>
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b086      	sub	sp, #24
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	4603      	mov	r3, r0
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051c8:	f7ff ff3e 	bl	8005048 <__NVIC_GetPriorityGrouping>
 80051cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	6978      	ldr	r0, [r7, #20]
 80051d4:	f7ff ff8e 	bl	80050f4 <NVIC_EncodePriority>
 80051d8:	4602      	mov	r2, r0
 80051da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051de:	4611      	mov	r1, r2
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff ff5d 	bl	80050a0 <__NVIC_SetPriority>
}
 80051e6:	bf00      	nop
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	4603      	mov	r3, r0
 80051f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff ff31 	bl	8005064 <__NVIC_EnableIRQ>
}
 8005202:	bf00      	nop
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b082      	sub	sp, #8
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff ffa2 	bl	800515c <SysTick_Config>
 8005218:	4603      	mov	r3, r0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005232:	e154      	b.n	80054de <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	2101      	movs	r1, #1
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	fa01 f303 	lsl.w	r3, r1, r3
 8005240:	4013      	ands	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 8146 	beq.w	80054d8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d005      	beq.n	8005264 <HAL_GPIO_Init+0x40>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d130      	bne.n	80052c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	2203      	movs	r2, #3
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	43db      	mvns	r3, r3
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4013      	ands	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800529a:	2201      	movs	r2, #1
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43db      	mvns	r3, r3
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4013      	ands	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	091b      	lsrs	r3, r3, #4
 80052b0:	f003 0201 	and.w	r2, r3, #1
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d017      	beq.n	8005302 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	2203      	movs	r2, #3
 80052de:	fa02 f303 	lsl.w	r3, r2, r3
 80052e2:	43db      	mvns	r3, r3
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4013      	ands	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	fa02 f303 	lsl.w	r3, r2, r3
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d123      	bne.n	8005356 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	08da      	lsrs	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3208      	adds	r2, #8
 8005316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	220f      	movs	r2, #15
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	43db      	mvns	r3, r3
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4013      	ands	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	08da      	lsrs	r2, r3, #3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3208      	adds	r2, #8
 8005350:	6939      	ldr	r1, [r7, #16]
 8005352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	2203      	movs	r2, #3
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	43db      	mvns	r3, r3
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4013      	ands	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f003 0203 	and.w	r2, r3, #3
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 80a0 	beq.w	80054d8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005398:	4b58      	ldr	r3, [pc, #352]	; (80054fc <HAL_GPIO_Init+0x2d8>)
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	4a57      	ldr	r2, [pc, #348]	; (80054fc <HAL_GPIO_Init+0x2d8>)
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	6193      	str	r3, [r2, #24]
 80053a4:	4b55      	ldr	r3, [pc, #340]	; (80054fc <HAL_GPIO_Init+0x2d8>)
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80053b0:	4a53      	ldr	r2, [pc, #332]	; (8005500 <HAL_GPIO_Init+0x2dc>)
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	089b      	lsrs	r3, r3, #2
 80053b6:	3302      	adds	r3, #2
 80053b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	220f      	movs	r2, #15
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	43db      	mvns	r3, r3
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4013      	ands	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80053da:	d019      	beq.n	8005410 <HAL_GPIO_Init+0x1ec>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a49      	ldr	r2, [pc, #292]	; (8005504 <HAL_GPIO_Init+0x2e0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d013      	beq.n	800540c <HAL_GPIO_Init+0x1e8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a48      	ldr	r2, [pc, #288]	; (8005508 <HAL_GPIO_Init+0x2e4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00d      	beq.n	8005408 <HAL_GPIO_Init+0x1e4>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a47      	ldr	r2, [pc, #284]	; (800550c <HAL_GPIO_Init+0x2e8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d007      	beq.n	8005404 <HAL_GPIO_Init+0x1e0>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a46      	ldr	r2, [pc, #280]	; (8005510 <HAL_GPIO_Init+0x2ec>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d101      	bne.n	8005400 <HAL_GPIO_Init+0x1dc>
 80053fc:	2304      	movs	r3, #4
 80053fe:	e008      	b.n	8005412 <HAL_GPIO_Init+0x1ee>
 8005400:	2305      	movs	r3, #5
 8005402:	e006      	b.n	8005412 <HAL_GPIO_Init+0x1ee>
 8005404:	2303      	movs	r3, #3
 8005406:	e004      	b.n	8005412 <HAL_GPIO_Init+0x1ee>
 8005408:	2302      	movs	r3, #2
 800540a:	e002      	b.n	8005412 <HAL_GPIO_Init+0x1ee>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <HAL_GPIO_Init+0x1ee>
 8005410:	2300      	movs	r3, #0
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	f002 0203 	and.w	r2, r2, #3
 8005418:	0092      	lsls	r2, r2, #2
 800541a:	4093      	lsls	r3, r2
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005422:	4937      	ldr	r1, [pc, #220]	; (8005500 <HAL_GPIO_Init+0x2dc>)
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	089b      	lsrs	r3, r3, #2
 8005428:	3302      	adds	r3, #2
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005430:	4b38      	ldr	r3, [pc, #224]	; (8005514 <HAL_GPIO_Init+0x2f0>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	43db      	mvns	r3, r3
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4013      	ands	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005454:	4a2f      	ldr	r2, [pc, #188]	; (8005514 <HAL_GPIO_Init+0x2f0>)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800545a:	4b2e      	ldr	r3, [pc, #184]	; (8005514 <HAL_GPIO_Init+0x2f0>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	43db      	mvns	r3, r3
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4013      	ands	r3, r2
 8005468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800547e:	4a25      	ldr	r2, [pc, #148]	; (8005514 <HAL_GPIO_Init+0x2f0>)
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005484:	4b23      	ldr	r3, [pc, #140]	; (8005514 <HAL_GPIO_Init+0x2f0>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	43db      	mvns	r3, r3
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4013      	ands	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80054a8:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <HAL_GPIO_Init+0x2f0>)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054ae:	4b19      	ldr	r3, [pc, #100]	; (8005514 <HAL_GPIO_Init+0x2f0>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	43db      	mvns	r3, r3
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4013      	ands	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80054d2:	4a10      	ldr	r2, [pc, #64]	; (8005514 <HAL_GPIO_Init+0x2f0>)
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	3301      	adds	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f47f aea3 	bne.w	8005234 <HAL_GPIO_Init+0x10>
  }
}
 80054ee:	bf00      	nop
 80054f0:	bf00      	nop
 80054f2:	371c      	adds	r7, #28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	40021000 	.word	0x40021000
 8005500:	40010000 	.word	0x40010000
 8005504:	48000400 	.word	0x48000400
 8005508:	48000800 	.word	0x48000800
 800550c:	48000c00 	.word	0x48000c00
 8005510:	48001000 	.word	0x48001000
 8005514:	40010400 	.word	0x40010400

08005518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	807b      	strh	r3, [r7, #2]
 8005524:	4613      	mov	r3, r2
 8005526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005528:	787b      	ldrb	r3, [r7, #1]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800552e:	887a      	ldrh	r2, [r7, #2]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005534:	e002      	b.n	800553c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005536:	887a      	ldrh	r2, [r7, #2]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800555a:	887a      	ldrh	r2, [r7, #2]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4013      	ands	r3, r2
 8005560:	041a      	lsls	r2, r3, #16
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	43d9      	mvns	r1, r3
 8005566:	887b      	ldrh	r3, [r7, #2]
 8005568:	400b      	ands	r3, r1
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	619a      	str	r2, [r3, #24]
}
 8005570:	bf00      	nop
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800557c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557e:	b08b      	sub	sp, #44	; 0x2c
 8005580:	af06      	add	r7, sp, #24
 8005582:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e0d0      	b.n	8005730 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f007 f97c 	bl	800c8a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2203      	movs	r2, #3
 80055ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f003 f89a 	bl	80086ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]
 80055be:	e04c      	b.n	800565a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	440b      	add	r3, r1
 80055d0:	3301      	adds	r3, #1
 80055d2:	2201      	movs	r2, #1
 80055d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	440b      	add	r3, r1
 80055e6:	7bfa      	ldrb	r2, [r7, #15]
 80055e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80055ea:	7bfa      	ldrb	r2, [r7, #15]
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	b298      	uxth	r0, r3
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	440b      	add	r3, r1
 80055fc:	3336      	adds	r3, #54	; 0x36
 80055fe:	4602      	mov	r2, r0
 8005600:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	440b      	add	r3, r1
 8005612:	3303      	adds	r3, #3
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005618:	7bfa      	ldrb	r2, [r7, #15]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	440b      	add	r3, r1
 8005626:	3338      	adds	r3, #56	; 0x38
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800562c:	7bfa      	ldrb	r2, [r7, #15]
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	440b      	add	r3, r1
 800563a:	333c      	adds	r3, #60	; 0x3c
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005640:	7bfa      	ldrb	r2, [r7, #15]
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	4613      	mov	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	440b      	add	r3, r1
 800564e:	3340      	adds	r3, #64	; 0x40
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	3301      	adds	r3, #1
 8005658:	73fb      	strb	r3, [r7, #15]
 800565a:	7bfa      	ldrb	r2, [r7, #15]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d3ad      	bcc.n	80055c0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005664:	2300      	movs	r3, #0
 8005666:	73fb      	strb	r3, [r7, #15]
 8005668:	e044      	b.n	80056f4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800566a:	7bfa      	ldrb	r2, [r7, #15]
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	440b      	add	r3, r1
 8005678:	f203 1369 	addw	r3, r3, #361	; 0x169
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005680:	7bfa      	ldrb	r2, [r7, #15]
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	440b      	add	r3, r1
 800568e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005692:	7bfa      	ldrb	r2, [r7, #15]
 8005694:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005696:	7bfa      	ldrb	r2, [r7, #15]
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	440b      	add	r3, r1
 80056a4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80056ac:	7bfa      	ldrb	r2, [r7, #15]
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	440b      	add	r3, r1
 80056ba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80056c2:	7bfa      	ldrb	r2, [r7, #15]
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	440b      	add	r3, r1
 80056d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80056d8:	7bfa      	ldrb	r2, [r7, #15]
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	440b      	add	r3, r1
 80056e6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	3301      	adds	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
 80056f4:	7bfa      	ldrb	r2, [r7, #15]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d3b5      	bcc.n	800566a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	687e      	ldr	r6, [r7, #4]
 8005706:	466d      	mov	r5, sp
 8005708:	f106 0410 	add.w	r4, r6, #16
 800570c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800570e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	602b      	str	r3, [r5, #0]
 8005714:	1d33      	adds	r3, r6, #4
 8005716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005718:	6838      	ldr	r0, [r7, #0]
 800571a:	f003 f803 	bl	8008724 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005738 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_PCD_Start+0x16>
 800574a:	2302      	movs	r3, #2
 800574c:	e016      	b.n	800577c <HAL_PCD_Start+0x44>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f002 ffb0 	bl	80086c0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005760:	2101      	movs	r1, #1
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f007 fb42 	bl	800cdec <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4618      	mov	r0, r3
 800576e:	f005 f9c5 	bl	800aafc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_PCD_IRQHandler>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
#include "main.h"
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f005 f9be 	bl	800ab12 <USB_ReadInterrupts>
 8005796:	4603      	mov	r3, r0
 8005798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800579c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a0:	d102      	bne.n	80057a8 <HAL_PCD_IRQHandler+0x24>



    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 faf6 	bl	8005d94 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f005 f9b0 	bl	800ab12 <USB_ReadInterrupts>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057bc:	d112      	bne.n	80057e4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d0:	b292      	uxth	r2, r2
 80057d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f007 f90b 	bl	800c9f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80057dc:	2100      	movs	r1, #0
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f8c7 	bl	8005972 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f005 f992 	bl	800ab12 <USB_ReadInterrupts>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057f8:	d10b      	bne.n	8005812 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005802:	b29a      	uxth	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800580c:	b292      	uxth	r2, r2
 800580e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f005 f97b 	bl	800ab12 <USB_ReadInterrupts>
 800581c:	4603      	mov	r3, r0
 800581e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005826:	d10b      	bne.n	8005840 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005830:	b29a      	uxth	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800583a:	b292      	uxth	r2, r2
 800583c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f005 f964 	bl	800ab12 <USB_ReadInterrupts>
 800584a:	4603      	mov	r3, r0
 800584c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005854:	d126      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800585e:	b29a      	uxth	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0204 	bic.w	r2, r2, #4
 8005868:	b292      	uxth	r2, r2
 800586a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005876:	b29a      	uxth	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0208 	bic.w	r2, r2, #8
 8005880:	b292      	uxth	r2, r2
 8005882:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f007 f8ec 	bl	800ca64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005894:	b29a      	uxth	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800589e:	b292      	uxth	r2, r2
 80058a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f005 f932 	bl	800ab12 <USB_ReadInterrupts>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058b8:	d126      	bne.n	8005908 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0208 	orr.w	r2, r2, #8
 80058cc:	b292      	uxth	r2, r2
 80058ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058da:	b29a      	uxth	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e4:	b292      	uxth	r2, r2
 80058e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0204 	orr.w	r2, r2, #4
 80058fc:	b292      	uxth	r2, r2
 80058fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f007 f894 	bl	800ca30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f005 f900 	bl	800ab12 <USB_ReadInterrupts>
 8005912:	4603      	mov	r3, r0
 8005914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591c:	d10e      	bne.n	800593c <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005926:	b29a      	uxth	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005930:	b292      	uxth	r2, r2
 8005932:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f007 f84d 	bl	800c9d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f005 f8e6 	bl	800ab12 <USB_ReadInterrupts>
 8005946:	4603      	mov	r3, r0
 8005948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005950:	d10b      	bne.n	800596a <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800595a:	b29a      	uxth	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005964:	b292      	uxth	r2, r2
 8005966:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800596a:	bf00      	nop
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	460b      	mov	r3, r1
 800597c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_PCD_SetAddress+0x1a>
 8005988:	2302      	movs	r3, #2
 800598a:	e013      	b.n	80059b4 <HAL_PCD_SetAddress+0x42>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	78fa      	ldrb	r2, [r7, #3]
 8005998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	78fa      	ldrb	r2, [r7, #3]
 80059a2:	4611      	mov	r1, r2
 80059a4:	4618      	mov	r0, r3
 80059a6:	f005 f895 	bl	800aad4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	4608      	mov	r0, r1
 80059c6:	4611      	mov	r1, r2
 80059c8:	461a      	mov	r2, r3
 80059ca:	4603      	mov	r3, r0
 80059cc:	70fb      	strb	r3, [r7, #3]
 80059ce:	460b      	mov	r3, r1
 80059d0:	803b      	strh	r3, [r7, #0]
 80059d2:	4613      	mov	r3, r2
 80059d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	da0e      	bge.n	8005a00 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	4413      	add	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	705a      	strb	r2, [r3, #1]
 80059fe:	e00e      	b.n	8005a1e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	f003 0207 	and.w	r2, r3, #7
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	4413      	add	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a2a:	883a      	ldrh	r2, [r7, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	78ba      	ldrb	r2, [r7, #2]
 8005a34:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	785b      	ldrb	r3, [r3, #1]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a48:	78bb      	ldrb	r3, [r7, #2]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d102      	bne.n	8005a54 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <HAL_PCD_EP_Open+0xa6>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e00e      	b.n	8005a80 <HAL_PCD_EP_Open+0xc4>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68f9      	ldr	r1, [r7, #12]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f002 fe79 	bl	8008768 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005a7e:	7afb      	ldrb	r3, [r7, #11]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	da0e      	bge.n	8005aba <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	4413      	add	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	705a      	strb	r2, [r3, #1]
 8005ab8:	e00e      	b.n	8005ad8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	f003 0207 	and.w	r2, r3, #7
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	4413      	add	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_PCD_EP_Close+0x6a>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e00e      	b.n	8005b10 <HAL_PCD_EP_Close+0x88>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68f9      	ldr	r1, [r7, #12]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f003 f9c5 	bl	8008e90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	607a      	str	r2, [r7, #4]
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	460b      	mov	r3, r1
 8005b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b28:	7afb      	ldrb	r3, [r7, #11]
 8005b2a:	f003 0207 	and.w	r2, r3, #7
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2200      	movs	r2, #0
 8005b56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b58:	7afb      	ldrb	r3, [r7, #11]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b64:	7afb      	ldrb	r3, [r7, #11]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6979      	ldr	r1, [r7, #20]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f003 fb78 	bl	800926a <USB_EPStartXfer>
 8005b7a:	e005      	b.n	8005b88 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6979      	ldr	r1, [r7, #20]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f003 fb71 	bl	800926a <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	f003 0207 	and.w	r2, r3, #7
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	440b      	add	r3, r1
 8005bb0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005bb4:	681b      	ldr	r3, [r3, #0]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b086      	sub	sp, #24
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bd2:	7afb      	ldrb	r3, [r7, #11]
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2200      	movs	r2, #0
 8005c06:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c0e:	7afb      	ldrb	r3, [r7, #11]
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c1a:	7afb      	ldrb	r3, [r7, #11]
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d106      	bne.n	8005c32 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6979      	ldr	r1, [r7, #20]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f003 fb1d 	bl	800926a <USB_EPStartXfer>
 8005c30:	e005      	b.n	8005c3e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6979      	ldr	r1, [r7, #20]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f003 fb16 	bl	800926a <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	f003 0207 	and.w	r2, r3, #7
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d901      	bls.n	8005c66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e03e      	b.n	8005ce4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	da0e      	bge.n	8005c8c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	4413      	add	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	705a      	strb	r2, [r3, #1]
 8005c8a:	e00c      	b.n	8005ca6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c8c:	78fa      	ldrb	r2, [r7, #3]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_PCD_EP_SetStall+0x7e>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e00e      	b.n	8005ce4 <HAL_PCD_EP_SetStall+0x9c>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68f9      	ldr	r1, [r7, #12]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f004 fdfe 	bl	800a8d6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	f003 020f 	and.w	r2, r3, #15
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d901      	bls.n	8005d0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e040      	b.n	8005d8c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	da0e      	bge.n	8005d30 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d12:	78fb      	ldrb	r3, [r7, #3]
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	4413      	add	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	705a      	strb	r2, [r3, #1]
 8005d2e:	e00e      	b.n	8005d4e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	f003 0207 	and.w	r2, r3, #7
 8005d36:	4613      	mov	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	4413      	add	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_PCD_EP_ClrStall+0x82>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e00e      	b.n	8005d8c <HAL_PCD_EP_ClrStall+0xa0>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68f9      	ldr	r1, [r7, #12]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f004 fdfb 	bl	800a978 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <PCD_EP_ISR_Handler>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
#include "main.h"
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b096      	sub	sp, #88	; 0x58
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005d9c:	e3a9      	b.n	80064f2 <PCD_EP_ISR_Handler+0x75e>
  {

    wIstr = hpcd->Instance->ISTR;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005da6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005daa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f003 030f 	and.w	r3, r3, #15
 8005db4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8005db8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f040 8164 	bne.w	800608a <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005dc2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d152      	bne.n	8005e74 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	81fb      	strh	r3, [r7, #14]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	89fb      	ldrh	r3, [r7, #14]
 8005de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3328      	adds	r3, #40	; 0x28
 8005df6:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3302      	adds	r3, #2
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e22:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e26:	695a      	ldr	r2, [r3, #20]
 8005e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	441a      	add	r2, r3
 8005e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e30:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005e32:	2100      	movs	r1, #0
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f006 fdb4 	bl	800c9a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 8355 	beq.w	80064f2 <PCD_EP_ISR_Handler+0x75e>
 8005e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f040 8350 	bne.w	80064f2 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	b292      	uxth	r2, r2
 8005e66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005e72:	e33e      	b.n	80064f2 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005e86:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d034      	beq.n	8005efc <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3306      	adds	r3, #6
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ebc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ece:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	f004 fe74 	bl	800abbe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	823b      	strh	r3, [r7, #16]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	8a3a      	ldrh	r2, [r7, #16]
 8005eec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ef0:	b292      	uxth	r2, r2
 8005ef2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f006 fd27 	bl	800c948 <HAL_PCD_SetupStageCallback>
 8005efa:	e2fa      	b.n	80064f2 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005efc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f280 82f6 	bge.w	80064f2 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005f12:	4013      	ands	r3, r2
 8005f14:	83fb      	strh	r3, [r7, #30]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	8bfa      	ldrh	r2, [r7, #30]
 8005f1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f20:	b292      	uxth	r2, r2
 8005f22:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4413      	add	r3, r2
 8005f38:	3306      	adds	r3, #6
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6812      	ldr	r2, [r2, #0]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d019      	beq.n	8005f8c <PCD_EP_ISR_Handler+0x1f8>
 8005f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d015      	beq.n	8005f8c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f66:	6959      	ldr	r1, [r3, #20]
 8005f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f6a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f6e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	f004 fe24 	bl	800abbe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f78:	695a      	ldr	r2, [r3, #20]
 8005f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	441a      	add	r2, r3
 8005f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f82:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005f84:	2100      	movs	r1, #0
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f006 fcf0 	bl	800c96c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f040 82aa 	bne.w	80064f2 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	61bb      	str	r3, [r7, #24]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d112      	bne.n	8005fec <PCD_EP_ISR_Handler+0x258>
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	801a      	strh	r2, [r3, #0]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	e02f      	b.n	800604c <PCD_EP_ISR_Handler+0x2b8>
 8005fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ff2:	d813      	bhi.n	800601c <PCD_EP_ISR_Handler+0x288>
 8005ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	085b      	lsrs	r3, r3, #1
 8005ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8005ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <PCD_EP_ISR_Handler+0x27a>
 8006008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600a:	3301      	adds	r3, #1
 800600c:	647b      	str	r3, [r7, #68]	; 0x44
 800600e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006010:	b29b      	uxth	r3, r3
 8006012:	029b      	lsls	r3, r3, #10
 8006014:	b29a      	uxth	r2, r3
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	801a      	strh	r2, [r3, #0]
 800601a:	e017      	b.n	800604c <PCD_EP_ISR_Handler+0x2b8>
 800601c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	647b      	str	r3, [r7, #68]	; 0x44
 8006024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f003 031f 	and.w	r3, r3, #31
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <PCD_EP_ISR_Handler+0x2a2>
 8006030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006032:	3b01      	subs	r3, #1
 8006034:	647b      	str	r3, [r7, #68]	; 0x44
 8006036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006038:	b29b      	uxth	r3, r3
 800603a:	029b      	lsls	r3, r3, #10
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006046:	b29a      	uxth	r2, r3
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605c:	827b      	strh	r3, [r7, #18]
 800605e:	8a7b      	ldrh	r3, [r7, #18]
 8006060:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006064:	827b      	strh	r3, [r7, #18]
 8006066:	8a7b      	ldrh	r3, [r7, #18]
 8006068:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800606c:	827b      	strh	r3, [r7, #18]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	8a7b      	ldrh	r3, [r7, #18]
 8006074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006084:	b29b      	uxth	r3, r3
 8006086:	8013      	strh	r3, [r2, #0]
 8006088:	e233      	b.n	80064f2 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800609e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f280 80fc 	bge.w	80062a0 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80060be:	4013      	ands	r3, r2
 80060c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80060d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060da:	b292      	uxth	r2, r2
 80060dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80060de:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	4413      	add	r3, r2
 80060f2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80060f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f6:	7b1b      	ldrb	r3, [r3, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d125      	bne.n	8006148 <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006104:	b29b      	uxth	r3, r3
 8006106:	461a      	mov	r2, r3
 8006108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	4413      	add	r3, r2
 8006110:	3306      	adds	r3, #6
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006124:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8006128:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 8092 	beq.w	8006256 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006138:	6959      	ldr	r1, [r3, #20]
 800613a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800613c:	88da      	ldrh	r2, [r3, #6]
 800613e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006142:	f004 fd3c 	bl	800abbe <USB_ReadPMA>
 8006146:	e086      	b.n	8006256 <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614a:	78db      	ldrb	r3, [r3, #3]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d10a      	bne.n	8006166 <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006150:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006154:	461a      	mov	r2, r3
 8006156:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f9d8 	bl	800650e <HAL_PCD_EP_DB_Receive>
 800615e:	4603      	mov	r3, r0
 8006160:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006164:	e077      	b.n	8006256 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29b      	uxth	r3, r3
 8006178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800617c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006180:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	441a      	add	r2, r3
 8006192:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d024      	beq.n	800620e <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	00db      	lsls	r3, r3, #3
 80061d6:	4413      	add	r3, r2
 80061d8:	3302      	adds	r3, #2
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80061f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d02e      	beq.n	8006256 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fe:	6959      	ldr	r1, [r3, #20]
 8006200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006202:	891a      	ldrh	r2, [r3, #8]
 8006204:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006208:	f004 fcd9 	bl	800abbe <USB_ReadPMA>
 800620c:	e023      	b.n	8006256 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006216:	b29b      	uxth	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	00db      	lsls	r3, r3, #3
 8006220:	4413      	add	r3, r2
 8006222:	3306      	adds	r3, #6
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006236:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800623a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6818      	ldr	r0, [r3, #0]
 8006246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006248:	6959      	ldr	r1, [r3, #20]
 800624a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800624c:	895a      	ldrh	r2, [r3, #10]
 800624e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006252:	f004 fcb4 	bl	800abbe <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006258:	69da      	ldr	r2, [r3, #28]
 800625a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800625e:	441a      	add	r2, r3
 8006260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006262:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006266:	695a      	ldr	r2, [r3, #20]
 8006268:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800626c:	441a      	add	r2, r3
 800626e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006270:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <PCD_EP_ISR_Handler+0x4f2>
 800627a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800627e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	429a      	cmp	r2, r3
 8006284:	d206      	bcs.n	8006294 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f006 fb6d 	bl	800c96c <HAL_PCD_DataOutStageCallback>
 8006292:	e005      	b.n	80062a0 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800629a:	4618      	mov	r0, r3
 800629c:	f002 ffe5 	bl	800926a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80062a0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80062a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8122 	beq.w	80064f2 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 80062ae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	4413      	add	r3, r2
 80062c0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80062d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	441a      	add	r2, r3
 80062ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80062f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80062fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006300:	78db      	ldrb	r3, [r3, #3]
 8006302:	2b02      	cmp	r3, #2
 8006304:	f000 809d 	beq.w	8006442 <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 8006308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800630a:	2200      	movs	r2, #0
 800630c:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800630e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006316:	2b00      	cmp	r3, #0
 8006318:	d046      	beq.n	80063a8 <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800631a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d126      	bne.n	8006370 <PCD_EP_ISR_Handler+0x5dc>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006330:	b29b      	uxth	r3, r3
 8006332:	461a      	mov	r2, r3
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	4413      	add	r3, r2
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
 800633a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	011a      	lsls	r2, r3, #4
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	4413      	add	r3, r2
 8006344:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006348:	623b      	str	r3, [r7, #32]
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006354:	b29a      	uxth	r2, r3
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	801a      	strh	r2, [r3, #0]
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006368:	b29a      	uxth	r2, r3
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	801a      	strh	r2, [r3, #0]
 800636e:	e061      	b.n	8006434 <PCD_EP_ISR_Handler+0x6a0>
 8006370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006372:	785b      	ldrb	r3, [r3, #1]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d15d      	bne.n	8006434 <PCD_EP_ISR_Handler+0x6a0>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006386:	b29b      	uxth	r3, r3
 8006388:	461a      	mov	r2, r3
 800638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638c:	4413      	add	r3, r2
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	011a      	lsls	r2, r3, #4
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	4413      	add	r3, r2
 800639a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	2200      	movs	r2, #0
 80063a4:	801a      	strh	r2, [r3, #0]
 80063a6:	e045      	b.n	8006434 <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d126      	bne.n	8006404 <PCD_EP_ISR_Handler+0x670>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	637b      	str	r3, [r7, #52]	; 0x34
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	4413      	add	r3, r2
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
 80063ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	011a      	lsls	r2, r3, #4
 80063d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d6:	4413      	add	r3, r2
 80063d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063dc:	633b      	str	r3, [r7, #48]	; 0x30
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	801a      	strh	r2, [r3, #0]
 8006402:	e017      	b.n	8006434 <PCD_EP_ISR_Handler+0x6a0>
 8006404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006406:	785b      	ldrb	r3, [r3, #1]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d113      	bne.n	8006434 <PCD_EP_ISR_Handler+0x6a0>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006414:	b29b      	uxth	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800641a:	4413      	add	r3, r2
 800641c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800641e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	011a      	lsls	r2, r3, #4
 8006424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006426:	4413      	add	r3, r2
 8006428:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800642c:	63bb      	str	r3, [r7, #56]	; 0x38
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	2200      	movs	r2, #0
 8006432:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f006 fab1 	bl	800c9a2 <HAL_PCD_DataInStageCallback>
 8006440:	e057      	b.n	80064f2 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8006442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006444:	78db      	ldrb	r3, [r3, #3]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d14c      	bne.n	80064e4 <PCD_EP_ISR_Handler+0x750>
 800644a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800644e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006452:	2b00      	cmp	r3, #0
 8006454:	d146      	bne.n	80064e4 <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800645e:	b29b      	uxth	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	4413      	add	r3, r2
 800646a:	3302      	adds	r3, #2
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6812      	ldr	r2, [r2, #0]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800647e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 8006482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800648a:	429a      	cmp	r2, r3
 800648c:	d907      	bls.n	800649e <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 800648e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006496:	1ad2      	subs	r2, r2, r3
 8006498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800649a:	619a      	str	r2, [r3, #24]
 800649c:	e002      	b.n	80064a4 <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 800649e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a0:	2200      	movs	r2, #0
 80064a2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80064a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d106      	bne.n	80064ba <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f006 fa75 	bl	800c9a2 <HAL_PCD_DataInStageCallback>
 80064b8:	e01b      	b.n	80064f2 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80064ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80064c2:	441a      	add	r2, r3
 80064c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80064c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80064d0:	441a      	add	r2, r3
 80064d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064d4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80064dc:	4618      	mov	r0, r3
 80064de:	f002 fec4 	bl	800926a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80064e2:	e006      	b.n	80064f2 <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80064e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80064e8:	461a      	mov	r2, r3
 80064ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f91b 	bl	8006728 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	b21b      	sxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f6ff ac4d 	blt.w	8005d9e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3758      	adds	r7, #88	; 0x58
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b088      	sub	sp, #32
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	4613      	mov	r3, r2
 800651a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800651c:	88fb      	ldrh	r3, [r7, #6]
 800651e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d07e      	beq.n	8006624 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800652e:	b29b      	uxth	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	4413      	add	r3, r2
 800653a:	3302      	adds	r3, #2
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	6812      	ldr	r2, [r2, #0]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800654e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	699a      	ldr	r2, [r3, #24]
 8006554:	8b7b      	ldrh	r3, [r7, #26]
 8006556:	429a      	cmp	r2, r3
 8006558:	d306      	bcc.n	8006568 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	8b7b      	ldrh	r3, [r7, #26]
 8006560:	1ad2      	subs	r2, r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	619a      	str	r2, [r3, #24]
 8006566:	e002      	b.n	800656e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2200      	movs	r2, #0
 800656c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d123      	bne.n	80065be <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800658c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006590:	833b      	strh	r3, [r7, #24]
 8006592:	8b3b      	ldrh	r3, [r7, #24]
 8006594:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006598:	833b      	strh	r3, [r7, #24]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	461a      	mov	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	441a      	add	r2, r3
 80065a8:	8b3b      	ldrh	r3, [r7, #24]
 80065aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01f      	beq.n	8006608 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e2:	82fb      	strh	r3, [r7, #22]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	461a      	mov	r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	441a      	add	r2, r3
 80065f2:	8afb      	ldrh	r3, [r7, #22]
 80065f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006600:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006604:	b29b      	uxth	r3, r3
 8006606:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006608:	8b7b      	ldrh	r3, [r7, #26]
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 8087 	beq.w	800671e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6818      	ldr	r0, [r3, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	6959      	ldr	r1, [r3, #20]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	891a      	ldrh	r2, [r3, #8]
 800661c:	8b7b      	ldrh	r3, [r7, #26]
 800661e:	f004 face 	bl	800abbe <USB_ReadPMA>
 8006622:	e07c      	b.n	800671e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662c:	b29b      	uxth	r3, r3
 800662e:	461a      	mov	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	4413      	add	r3, r2
 8006638:	3306      	adds	r3, #6
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	6812      	ldr	r2, [r2, #0]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800664c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	8b7b      	ldrh	r3, [r7, #26]
 8006654:	429a      	cmp	r2, r3
 8006656:	d306      	bcc.n	8006666 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	8b7b      	ldrh	r3, [r7, #26]
 800665e:	1ad2      	subs	r2, r2, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	619a      	str	r2, [r3, #24]
 8006664:	e002      	b.n	800666c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2200      	movs	r2, #0
 800666a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d123      	bne.n	80066bc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800668a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668e:	83fb      	strh	r3, [r7, #30]
 8006690:	8bfb      	ldrh	r3, [r7, #30]
 8006692:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006696:	83fb      	strh	r3, [r7, #30]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	441a      	add	r2, r3
 80066a6:	8bfb      	ldrh	r3, [r7, #30]
 80066a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80066bc:	88fb      	ldrh	r3, [r7, #6]
 80066be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d11f      	bne.n	8006706 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e0:	83bb      	strh	r3, [r7, #28]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	441a      	add	r2, r3
 80066f0:	8bbb      	ldrh	r3, [r7, #28]
 80066f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006702:	b29b      	uxth	r3, r3
 8006704:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006706:	8b7b      	ldrh	r3, [r7, #26]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	6959      	ldr	r1, [r3, #20]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	895a      	ldrh	r2, [r3, #10]
 8006718:	8b7b      	ldrh	r3, [r7, #26]
 800671a:	f004 fa50 	bl	800abbe <USB_ReadPMA>
    }
  }

  return count;
 800671e:	8b7b      	ldrh	r3, [r7, #26]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3720      	adds	r7, #32
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b0a2      	sub	sp, #136	; 0x88
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	4613      	mov	r3, r2
 8006734:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006736:	88fb      	ldrh	r3, [r7, #6]
 8006738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 81c7 	beq.w	8006ad0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800674a:	b29b      	uxth	r3, r3
 800674c:	461a      	mov	r2, r3
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	4413      	add	r3, r2
 8006756:	3302      	adds	r3, #2
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	6812      	ldr	r2, [r2, #0]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800676a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006776:	429a      	cmp	r2, r3
 8006778:	d907      	bls.n	800678a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006782:	1ad2      	subs	r2, r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	619a      	str	r2, [r3, #24]
 8006788:	e002      	b.n	8006790 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2200      	movs	r2, #0
 800678e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	f040 80b9 	bne.w	800690c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d126      	bne.n	80067f0 <HAL_PCD_EP_DB_Transmit+0xc8>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	461a      	mov	r2, r3
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	4413      	add	r3, r2
 80067b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	011a      	lsls	r2, r3, #4
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	4413      	add	r3, r2
 80067c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	801a      	strh	r2, [r3, #0]
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	801a      	strh	r2, [r3, #0]
 80067ee:	e01a      	b.n	8006826 <HAL_PCD_EP_DB_Transmit+0xfe>
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	785b      	ldrb	r3, [r3, #1]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d116      	bne.n	8006826 <HAL_PCD_EP_DB_Transmit+0xfe>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	633b      	str	r3, [r7, #48]	; 0x30
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006806:	b29b      	uxth	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	4413      	add	r3, r2
 800680e:	633b      	str	r3, [r7, #48]	; 0x30
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	011a      	lsls	r2, r3, #4
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	4413      	add	r3, r2
 800681a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800681e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	2200      	movs	r2, #0
 8006824:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	623b      	str	r3, [r7, #32]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d126      	bne.n	8006882 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006842:	b29b      	uxth	r3, r3
 8006844:	461a      	mov	r2, r3
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	4413      	add	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	011a      	lsls	r2, r3, #4
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	4413      	add	r3, r2
 8006856:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b29b      	uxth	r3, r3
 8006862:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006866:	b29a      	uxth	r2, r3
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	801a      	strh	r2, [r3, #0]
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687a:	b29a      	uxth	r2, r3
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	e017      	b.n	80068b2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	785b      	ldrb	r3, [r3, #1]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d113      	bne.n	80068b2 <HAL_PCD_EP_DB_Transmit+0x18a>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006892:	b29b      	uxth	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	4413      	add	r3, r2
 800689a:	623b      	str	r3, [r7, #32]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	011a      	lsls	r2, r3, #4
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	4413      	add	r3, r2
 80068a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068aa:	61fb      	str	r3, [r7, #28]
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	2200      	movs	r2, #0
 80068b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	4619      	mov	r1, r3
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f006 f872 	bl	800c9a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80068be:	88fb      	ldrh	r3, [r7, #6]
 80068c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 82d4 	beq.w	8006e72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e4:	827b      	strh	r3, [r7, #18]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	441a      	add	r2, r3
 80068f4:	8a7b      	ldrh	r3, [r7, #18]
 80068f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006906:	b29b      	uxth	r3, r3
 8006908:	8013      	strh	r3, [r2, #0]
 800690a:	e2b2      	b.n	8006e72 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d021      	beq.n	800695a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006930:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	441a      	add	r2, r3
 8006942:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006956:	b29b      	uxth	r3, r3
 8006958:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006960:	2b01      	cmp	r3, #1
 8006962:	f040 8286 	bne.w	8006e72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	695a      	ldr	r2, [r3, #20]
 800696a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800696e:	441a      	add	r2, r3
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800697c:	441a      	add	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6a1a      	ldr	r2, [r3, #32]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	429a      	cmp	r2, r3
 800698c:	d309      	bcc.n	80069a2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	6a1a      	ldr	r2, [r3, #32]
 8006998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800699a:	1ad2      	subs	r2, r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	621a      	str	r2, [r3, #32]
 80069a0:	e015      	b.n	80069ce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d107      	bne.n	80069ba <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80069aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80069ae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80069b8:	e009      	b.n	80069ce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2200      	movs	r2, #0
 80069cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	785b      	ldrb	r3, [r3, #1]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d155      	bne.n	8006a82 <HAL_PCD_EP_DB_Transmit+0x35a>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	63bb      	str	r3, [r7, #56]	; 0x38
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	461a      	mov	r2, r3
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	4413      	add	r3, r2
 80069ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	011a      	lsls	r2, r3, #4
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	4413      	add	r3, r2
 80069f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
 80069fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d112      	bne.n	8006a2a <HAL_PCD_EP_DB_Transmit+0x302>
 8006a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a12:	801a      	strh	r2, [r3, #0]
 8006a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a26:	801a      	strh	r2, [r3, #0]
 8006a28:	e047      	b.n	8006aba <HAL_PCD_EP_DB_Transmit+0x392>
 8006a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a2c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a2e:	d811      	bhi.n	8006a54 <HAL_PCD_EP_DB_Transmit+0x32c>
 8006a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a32:	085b      	lsrs	r3, r3, #1
 8006a34:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <HAL_PCD_EP_DB_Transmit+0x31e>
 8006a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a42:	3301      	adds	r3, #1
 8006a44:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	029b      	lsls	r3, r3, #10
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a50:	801a      	strh	r2, [r3, #0]
 8006a52:	e032      	b.n	8006aba <HAL_PCD_EP_DB_Transmit+0x392>
 8006a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a5c:	f003 031f 	and.w	r3, r3, #31
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d102      	bne.n	8006a6a <HAL_PCD_EP_DB_Transmit+0x342>
 8006a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a66:	3b01      	subs	r3, #1
 8006a68:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	029b      	lsls	r3, r3, #10
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7e:	801a      	strh	r2, [r3, #0]
 8006a80:	e01b      	b.n	8006aba <HAL_PCD_EP_DB_Transmit+0x392>
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	785b      	ldrb	r3, [r3, #1]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d117      	bne.n	8006aba <HAL_PCD_EP_DB_Transmit+0x392>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a9e:	4413      	add	r3, r2
 8006aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	011a      	lsls	r2, r3, #4
 8006aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aaa:	4413      	add	r3, r2
 8006aac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	6959      	ldr	r1, [r3, #20]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	891a      	ldrh	r2, [r3, #8]
 8006ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	f004 f832 	bl	800ab32 <USB_WritePMA>
 8006ace:	e1d0      	b.n	8006e72 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3306      	adds	r3, #6
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	6812      	ldr	r2, [r2, #0]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006af8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	699a      	ldr	r2, [r3, #24]
 8006b00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d307      	bcc.n	8006b18 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	699a      	ldr	r2, [r3, #24]
 8006b0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b10:	1ad2      	subs	r2, r2, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	619a      	str	r2, [r3, #24]
 8006b16:	e002      	b.n	8006b1e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f040 80c4 	bne.w	8006cb0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	785b      	ldrb	r3, [r3, #1]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d126      	bne.n	8006b7e <HAL_PCD_EP_DB_Transmit+0x456>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b44:	4413      	add	r3, r2
 8006b46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	011a      	lsls	r2, r3, #4
 8006b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b50:	4413      	add	r3, r2
 8006b52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b56:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b66:	801a      	strh	r2, [r3, #0]
 8006b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b7a:	801a      	strh	r2, [r3, #0]
 8006b7c:	e01a      	b.n	8006bb4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	785b      	ldrb	r3, [r3, #1]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d116      	bne.n	8006bb4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	677b      	str	r3, [r7, #116]	; 0x74
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b9a:	4413      	add	r3, r2
 8006b9c:	677b      	str	r3, [r7, #116]	; 0x74
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	011a      	lsls	r2, r3, #4
 8006ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bac:	673b      	str	r3, [r7, #112]	; 0x70
 8006bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d12f      	bne.n	8006c22 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bda:	4413      	add	r3, r2
 8006bdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	011a      	lsls	r2, r3, #4
 8006be6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bea:	4413      	add	r3, r2
 8006bec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c1e:	801a      	strh	r2, [r3, #0]
 8006c20:	e017      	b.n	8006c52 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	785b      	ldrb	r3, [r3, #1]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d113      	bne.n	8006c52 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c38:	4413      	add	r3, r2
 8006c3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	011a      	lsls	r2, r3, #4
 8006c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c44:	4413      	add	r3, r2
 8006c46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c4e:	2200      	movs	r2, #0
 8006c50:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f005 fea2 	bl	800c9a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006c5e:	88fb      	ldrh	r3, [r7, #6]
 8006c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f040 8104 	bne.w	8006e72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	441a      	add	r2, r3
 8006c96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	8013      	strh	r3, [r2, #0]
 8006cae:	e0e0      	b.n	8006e72 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006cb0:	88fb      	ldrh	r3, [r7, #6]
 8006cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d121      	bne.n	8006cfe <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	441a      	add	r2, r3
 8006ce6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	f040 80b4 	bne.w	8006e72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	695a      	ldr	r2, [r3, #20]
 8006d0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d12:	441a      	add	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	69da      	ldr	r2, [r3, #28]
 8006d1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d20:	441a      	add	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	6a1a      	ldr	r2, [r3, #32]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d309      	bcc.n	8006d46 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	6a1a      	ldr	r2, [r3, #32]
 8006d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d3e:	1ad2      	subs	r2, r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	621a      	str	r2, [r3, #32]
 8006d44:	e015      	b.n	8006d72 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d107      	bne.n	8006d5e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8006d4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006d5c:	e009      	b.n	8006d72 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2200      	movs	r2, #0
 8006d68:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	667b      	str	r3, [r7, #100]	; 0x64
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	785b      	ldrb	r3, [r3, #1]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d155      	bne.n	8006e2c <HAL_PCD_EP_DB_Transmit+0x704>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d94:	4413      	add	r3, r2
 8006d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	011a      	lsls	r2, r3, #4
 8006d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006da0:	4413      	add	r3, r2
 8006da2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006da6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d112      	bne.n	8006dd4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dbc:	801a      	strh	r2, [r3, #0]
 8006dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dd0:	801a      	strh	r2, [r3, #0]
 8006dd2:	e044      	b.n	8006e5e <HAL_PCD_EP_DB_Transmit+0x736>
 8006dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd6:	2b3e      	cmp	r3, #62	; 0x3e
 8006dd8:	d811      	bhi.n	8006dfe <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ddc:	085b      	lsrs	r3, r3, #1
 8006dde:	657b      	str	r3, [r7, #84]	; 0x54
 8006de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dec:	3301      	adds	r3, #1
 8006dee:	657b      	str	r3, [r7, #84]	; 0x54
 8006df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	029b      	lsls	r3, r3, #10
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dfa:	801a      	strh	r2, [r3, #0]
 8006dfc:	e02f      	b.n	8006e5e <HAL_PCD_EP_DB_Transmit+0x736>
 8006dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e00:	095b      	lsrs	r3, r3, #5
 8006e02:	657b      	str	r3, [r7, #84]	; 0x54
 8006e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e06:	f003 031f 	and.w	r3, r3, #31
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e10:	3b01      	subs	r3, #1
 8006e12:	657b      	str	r3, [r7, #84]	; 0x54
 8006e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	029b      	lsls	r3, r3, #10
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e28:	801a      	strh	r2, [r3, #0]
 8006e2a:	e018      	b.n	8006e5e <HAL_PCD_EP_DB_Transmit+0x736>
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	785b      	ldrb	r3, [r3, #1]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d114      	bne.n	8006e5e <HAL_PCD_EP_DB_Transmit+0x736>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	461a      	mov	r2, r3
 8006e40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e42:	4413      	add	r3, r2
 8006e44:	667b      	str	r3, [r7, #100]	; 0x64
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	011a      	lsls	r2, r3, #4
 8006e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e4e:	4413      	add	r3, r2
 8006e50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e54:	663b      	str	r3, [r7, #96]	; 0x60
 8006e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e5c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6959      	ldr	r1, [r3, #20]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	895a      	ldrh	r2, [r3, #10]
 8006e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	f003 fe60 	bl	800ab32 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e8c:	823b      	strh	r3, [r7, #16]
 8006e8e:	8a3b      	ldrh	r3, [r7, #16]
 8006e90:	f083 0310 	eor.w	r3, r3, #16
 8006e94:	823b      	strh	r3, [r7, #16]
 8006e96:	8a3b      	ldrh	r3, [r7, #16]
 8006e98:	f083 0320 	eor.w	r3, r3, #32
 8006e9c:	823b      	strh	r3, [r7, #16]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	441a      	add	r2, r3
 8006eac:	8a3b      	ldrh	r3, [r7, #16]
 8006eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3788      	adds	r7, #136	; 0x88
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	607b      	str	r3, [r7, #4]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	817b      	strh	r3, [r7, #10]
 8006eda:	4613      	mov	r3, r2
 8006edc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006ede:	897b      	ldrh	r3, [r7, #10]
 8006ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00b      	beq.n	8006f02 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006eea:	897b      	ldrh	r3, [r7, #10]
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4413      	add	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	e009      	b.n	8006f16 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006f02:	897a      	ldrh	r2, [r7, #10]
 8006f04:	4613      	mov	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006f16:	893b      	ldrh	r3, [r7, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d107      	bne.n	8006f2c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	80da      	strh	r2, [r3, #6]
 8006f2a:	e00b      	b.n	8006f44 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
	...

08006f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f64:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d102      	bne.n	8006f7a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	f001 b823 	b.w	8007fc0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 817d 	beq.w	800728a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006f90:	4bbc      	ldr	r3, [pc, #752]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f003 030c 	and.w	r3, r3, #12
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d00c      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006f9c:	4bb9      	ldr	r3, [pc, #740]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f003 030c 	and.w	r3, r3, #12
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d15c      	bne.n	8007062 <HAL_RCC_OscConfig+0x10e>
 8006fa8:	4bb6      	ldr	r3, [pc, #728]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb4:	d155      	bne.n	8007062 <HAL_RCC_OscConfig+0x10e>
 8006fb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fbe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006fc2:	fa93 f3a3 	rbit	r3, r3
 8006fc6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006fca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fce:	fab3 f383 	clz	r3, r3
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	095b      	lsrs	r3, r3, #5
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	f043 0301 	orr.w	r3, r3, #1
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d102      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x94>
 8006fe2:	4ba8      	ldr	r3, [pc, #672]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	e015      	b.n	8007014 <HAL_RCC_OscConfig+0xc0>
 8006fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ff0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006ff4:	fa93 f3a3 	rbit	r3, r3
 8006ff8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007000:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007004:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8007008:	fa93 f3a3 	rbit	r3, r3
 800700c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007010:	4b9c      	ldr	r3, [pc, #624]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007018:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800701c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007020:	fa92 f2a2 	rbit	r2, r2
 8007024:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8007028:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800702c:	fab2 f282 	clz	r2, r2
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	f042 0220 	orr.w	r2, r2, #32
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	f002 021f 	and.w	r2, r2, #31
 800703c:	2101      	movs	r1, #1
 800703e:	fa01 f202 	lsl.w	r2, r1, r2
 8007042:	4013      	ands	r3, r2
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 811f 	beq.w	8007288 <HAL_RCC_OscConfig+0x334>
 800704a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800704e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	f040 8116 	bne.w	8007288 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	f000 bfaf 	b.w	8007fc0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007072:	d106      	bne.n	8007082 <HAL_RCC_OscConfig+0x12e>
 8007074:	4b83      	ldr	r3, [pc, #524]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a82      	ldr	r2, [pc, #520]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 800707a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	e036      	b.n	80070f0 <HAL_RCC_OscConfig+0x19c>
 8007082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007086:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10c      	bne.n	80070ac <HAL_RCC_OscConfig+0x158>
 8007092:	4b7c      	ldr	r3, [pc, #496]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a7b      	ldr	r2, [pc, #492]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 8007098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	4b79      	ldr	r3, [pc, #484]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a78      	ldr	r2, [pc, #480]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 80070a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	e021      	b.n	80070f0 <HAL_RCC_OscConfig+0x19c>
 80070ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070bc:	d10c      	bne.n	80070d8 <HAL_RCC_OscConfig+0x184>
 80070be:	4b71      	ldr	r3, [pc, #452]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a70      	ldr	r2, [pc, #448]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 80070c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	4b6e      	ldr	r3, [pc, #440]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a6d      	ldr	r2, [pc, #436]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 80070d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	e00b      	b.n	80070f0 <HAL_RCC_OscConfig+0x19c>
 80070d8:	4b6a      	ldr	r3, [pc, #424]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a69      	ldr	r2, [pc, #420]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 80070de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	4b67      	ldr	r3, [pc, #412]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a66      	ldr	r2, [pc, #408]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 80070ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ee:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80070f0:	4b64      	ldr	r3, [pc, #400]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	f023 020f 	bic.w	r2, r3, #15
 80070f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	495f      	ldr	r1, [pc, #380]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 8007106:	4313      	orrs	r3, r2
 8007108:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800710a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800710e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d059      	beq.n	80071ce <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800711a:	f7fd f8e5 	bl	80042e8 <HAL_GetTick>
 800711e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007122:	e00a      	b.n	800713a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007124:	f7fd f8e0 	bl	80042e8 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	2b64      	cmp	r3, #100	; 0x64
 8007132:	d902      	bls.n	800713a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	f000 bf43 	b.w	8007fc0 <HAL_RCC_OscConfig+0x106c>
 800713a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800713e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007142:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007146:	fa93 f3a3 	rbit	r3, r3
 800714a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800714e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007152:	fab3 f383 	clz	r3, r3
 8007156:	b2db      	uxtb	r3, r3
 8007158:	095b      	lsrs	r3, r3, #5
 800715a:	b2db      	uxtb	r3, r3
 800715c:	f043 0301 	orr.w	r3, r3, #1
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b01      	cmp	r3, #1
 8007164:	d102      	bne.n	800716c <HAL_RCC_OscConfig+0x218>
 8007166:	4b47      	ldr	r3, [pc, #284]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	e015      	b.n	8007198 <HAL_RCC_OscConfig+0x244>
 800716c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007170:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007174:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007178:	fa93 f3a3 	rbit	r3, r3
 800717c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007184:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007188:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800718c:	fa93 f3a3 	rbit	r3, r3
 8007190:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007194:	4b3b      	ldr	r3, [pc, #236]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800719c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80071a0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80071a4:	fa92 f2a2 	rbit	r2, r2
 80071a8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80071ac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80071b0:	fab2 f282 	clz	r2, r2
 80071b4:	b2d2      	uxtb	r2, r2
 80071b6:	f042 0220 	orr.w	r2, r2, #32
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	f002 021f 	and.w	r2, r2, #31
 80071c0:	2101      	movs	r1, #1
 80071c2:	fa01 f202 	lsl.w	r2, r1, r2
 80071c6:	4013      	ands	r3, r2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0ab      	beq.n	8007124 <HAL_RCC_OscConfig+0x1d0>
 80071cc:	e05d      	b.n	800728a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ce:	f7fd f88b 	bl	80042e8 <HAL_GetTick>
 80071d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071d6:	e00a      	b.n	80071ee <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071d8:	f7fd f886 	bl	80042e8 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b64      	cmp	r3, #100	; 0x64
 80071e6:	d902      	bls.n	80071ee <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	f000 bee9 	b.w	8007fc0 <HAL_RCC_OscConfig+0x106c>
 80071ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071f2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80071fa:	fa93 f3a3 	rbit	r3, r3
 80071fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007202:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007206:	fab3 f383 	clz	r3, r3
 800720a:	b2db      	uxtb	r3, r3
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	b2db      	uxtb	r3, r3
 8007210:	f043 0301 	orr.w	r3, r3, #1
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b01      	cmp	r3, #1
 8007218:	d102      	bne.n	8007220 <HAL_RCC_OscConfig+0x2cc>
 800721a:	4b1a      	ldr	r3, [pc, #104]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	e015      	b.n	800724c <HAL_RCC_OscConfig+0x2f8>
 8007220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007224:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007228:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800722c:	fa93 f3a3 	rbit	r3, r3
 8007230:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007238:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800723c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007240:	fa93 f3a3 	rbit	r3, r3
 8007244:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007248:	4b0e      	ldr	r3, [pc, #56]	; (8007284 <HAL_RCC_OscConfig+0x330>)
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007250:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007254:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007258:	fa92 f2a2 	rbit	r2, r2
 800725c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007260:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007264:	fab2 f282 	clz	r2, r2
 8007268:	b2d2      	uxtb	r2, r2
 800726a:	f042 0220 	orr.w	r2, r2, #32
 800726e:	b2d2      	uxtb	r2, r2
 8007270:	f002 021f 	and.w	r2, r2, #31
 8007274:	2101      	movs	r1, #1
 8007276:	fa01 f202 	lsl.w	r2, r1, r2
 800727a:	4013      	ands	r3, r2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1ab      	bne.n	80071d8 <HAL_RCC_OscConfig+0x284>
 8007280:	e003      	b.n	800728a <HAL_RCC_OscConfig+0x336>
 8007282:	bf00      	nop
 8007284:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800728a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800728e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 817d 	beq.w	800759a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80072a0:	4ba6      	ldr	r3, [pc, #664]	; (800753c <HAL_RCC_OscConfig+0x5e8>)
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f003 030c 	and.w	r3, r3, #12
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00b      	beq.n	80072c4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80072ac:	4ba3      	ldr	r3, [pc, #652]	; (800753c <HAL_RCC_OscConfig+0x5e8>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f003 030c 	and.w	r3, r3, #12
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d172      	bne.n	800739e <HAL_RCC_OscConfig+0x44a>
 80072b8:	4ba0      	ldr	r3, [pc, #640]	; (800753c <HAL_RCC_OscConfig+0x5e8>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d16c      	bne.n	800739e <HAL_RCC_OscConfig+0x44a>
 80072c4:	2302      	movs	r3, #2
 80072c6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80072ce:	fa93 f3a3 	rbit	r3, r3
 80072d2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80072d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072da:	fab3 f383 	clz	r3, r3
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f043 0301 	orr.w	r3, r3, #1
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d102      	bne.n	80072f4 <HAL_RCC_OscConfig+0x3a0>
 80072ee:	4b93      	ldr	r3, [pc, #588]	; (800753c <HAL_RCC_OscConfig+0x5e8>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	e013      	b.n	800731c <HAL_RCC_OscConfig+0x3c8>
 80072f4:	2302      	movs	r3, #2
 80072f6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072fa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80072fe:	fa93 f3a3 	rbit	r3, r3
 8007302:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007306:	2302      	movs	r3, #2
 8007308:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800730c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007310:	fa93 f3a3 	rbit	r3, r3
 8007314:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007318:	4b88      	ldr	r3, [pc, #544]	; (800753c <HAL_RCC_OscConfig+0x5e8>)
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	2202      	movs	r2, #2
 800731e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007322:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007326:	fa92 f2a2 	rbit	r2, r2
 800732a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800732e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007332:	fab2 f282 	clz	r2, r2
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	f042 0220 	orr.w	r2, r2, #32
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	f002 021f 	and.w	r2, r2, #31
 8007342:	2101      	movs	r1, #1
 8007344:	fa01 f202 	lsl.w	r2, r1, r2
 8007348:	4013      	ands	r3, r2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <HAL_RCC_OscConfig+0x410>
 800734e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007352:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d002      	beq.n	8007364 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	f000 be2e 	b.w	8007fc0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007364:	4b75      	ldr	r3, [pc, #468]	; (800753c <HAL_RCC_OscConfig+0x5e8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800736c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007370:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	21f8      	movs	r1, #248	; 0xf8
 800737a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800737e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007382:	fa91 f1a1 	rbit	r1, r1
 8007386:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800738a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800738e:	fab1 f181 	clz	r1, r1
 8007392:	b2c9      	uxtb	r1, r1
 8007394:	408b      	lsls	r3, r1
 8007396:	4969      	ldr	r1, [pc, #420]	; (800753c <HAL_RCC_OscConfig+0x5e8>)
 8007398:	4313      	orrs	r3, r2
 800739a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800739c:	e0fd      	b.n	800759a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800739e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 8088 	beq.w	80074c0 <HAL_RCC_OscConfig+0x56c>
 80073b0:	2301      	movs	r3, #1
 80073b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80073ba:	fa93 f3a3 	rbit	r3, r3
 80073be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80073c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073c6:	fab3 f383 	clz	r3, r3
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80073d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	461a      	mov	r2, r3
 80073d8:	2301      	movs	r3, #1
 80073da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073dc:	f7fc ff84 	bl	80042e8 <HAL_GetTick>
 80073e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073e4:	e00a      	b.n	80073fc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073e6:	f7fc ff7f 	bl	80042e8 <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d902      	bls.n	80073fc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	f000 bde2 	b.w	8007fc0 <HAL_RCC_OscConfig+0x106c>
 80073fc:	2302      	movs	r3, #2
 80073fe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007402:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007406:	fa93 f3a3 	rbit	r3, r3
 800740a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800740e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007412:	fab3 f383 	clz	r3, r3
 8007416:	b2db      	uxtb	r3, r3
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	b2db      	uxtb	r3, r3
 800741c:	f043 0301 	orr.w	r3, r3, #1
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	d102      	bne.n	800742c <HAL_RCC_OscConfig+0x4d8>
 8007426:	4b45      	ldr	r3, [pc, #276]	; (800753c <HAL_RCC_OscConfig+0x5e8>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	e013      	b.n	8007454 <HAL_RCC_OscConfig+0x500>
 800742c:	2302      	movs	r3, #2
 800742e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007432:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007436:	fa93 f3a3 	rbit	r3, r3
 800743a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800743e:	2302      	movs	r3, #2
 8007440:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007444:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007448:	fa93 f3a3 	rbit	r3, r3
 800744c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007450:	4b3a      	ldr	r3, [pc, #232]	; (800753c <HAL_RCC_OscConfig+0x5e8>)
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	2202      	movs	r2, #2
 8007456:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800745a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800745e:	fa92 f2a2 	rbit	r2, r2
 8007462:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007466:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800746a:	fab2 f282 	clz	r2, r2
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	f042 0220 	orr.w	r2, r2, #32
 8007474:	b2d2      	uxtb	r2, r2
 8007476:	f002 021f 	and.w	r2, r2, #31
 800747a:	2101      	movs	r1, #1
 800747c:	fa01 f202 	lsl.w	r2, r1, r2
 8007480:	4013      	ands	r3, r2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0af      	beq.n	80073e6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007486:	4b2d      	ldr	r3, [pc, #180]	; (800753c <HAL_RCC_OscConfig+0x5e8>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800748e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	21f8      	movs	r1, #248	; 0xf8
 800749c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074a0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80074a4:	fa91 f1a1 	rbit	r1, r1
 80074a8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80074ac:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80074b0:	fab1 f181 	clz	r1, r1
 80074b4:	b2c9      	uxtb	r1, r1
 80074b6:	408b      	lsls	r3, r1
 80074b8:	4920      	ldr	r1, [pc, #128]	; (800753c <HAL_RCC_OscConfig+0x5e8>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	600b      	str	r3, [r1, #0]
 80074be:	e06c      	b.n	800759a <HAL_RCC_OscConfig+0x646>
 80074c0:	2301      	movs	r3, #1
 80074c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80074ca:	fa93 f3a3 	rbit	r3, r3
 80074ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80074d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074d6:	fab3 f383 	clz	r3, r3
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80074e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	461a      	mov	r2, r3
 80074e8:	2300      	movs	r3, #0
 80074ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ec:	f7fc fefc 	bl	80042e8 <HAL_GetTick>
 80074f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074f4:	e00a      	b.n	800750c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074f6:	f7fc fef7 	bl	80042e8 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d902      	bls.n	800750c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	f000 bd5a 	b.w	8007fc0 <HAL_RCC_OscConfig+0x106c>
 800750c:	2302      	movs	r3, #2
 800750e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007512:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007516:	fa93 f3a3 	rbit	r3, r3
 800751a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800751e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007522:	fab3 f383 	clz	r3, r3
 8007526:	b2db      	uxtb	r3, r3
 8007528:	095b      	lsrs	r3, r3, #5
 800752a:	b2db      	uxtb	r3, r3
 800752c:	f043 0301 	orr.w	r3, r3, #1
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b01      	cmp	r3, #1
 8007534:	d104      	bne.n	8007540 <HAL_RCC_OscConfig+0x5ec>
 8007536:	4b01      	ldr	r3, [pc, #4]	; (800753c <HAL_RCC_OscConfig+0x5e8>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	e015      	b.n	8007568 <HAL_RCC_OscConfig+0x614>
 800753c:	40021000 	.word	0x40021000
 8007540:	2302      	movs	r3, #2
 8007542:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007546:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800754a:	fa93 f3a3 	rbit	r3, r3
 800754e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007552:	2302      	movs	r3, #2
 8007554:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007558:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800755c:	fa93 f3a3 	rbit	r3, r3
 8007560:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007564:	4bc8      	ldr	r3, [pc, #800]	; (8007888 <HAL_RCC_OscConfig+0x934>)
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	2202      	movs	r2, #2
 800756a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800756e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007572:	fa92 f2a2 	rbit	r2, r2
 8007576:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800757a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800757e:	fab2 f282 	clz	r2, r2
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	f042 0220 	orr.w	r2, r2, #32
 8007588:	b2d2      	uxtb	r2, r2
 800758a:	f002 021f 	and.w	r2, r2, #31
 800758e:	2101      	movs	r1, #1
 8007590:	fa01 f202 	lsl.w	r2, r1, r2
 8007594:	4013      	ands	r3, r2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1ad      	bne.n	80074f6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800759a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800759e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0308 	and.w	r3, r3, #8
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 8110 	beq.w	80077d0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80075b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d079      	beq.n	80076b4 <HAL_RCC_OscConfig+0x760>
 80075c0:	2301      	movs	r3, #1
 80075c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80075ca:	fa93 f3a3 	rbit	r3, r3
 80075ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80075d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075d6:	fab3 f383 	clz	r3, r3
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	4bab      	ldr	r3, [pc, #684]	; (800788c <HAL_RCC_OscConfig+0x938>)
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	461a      	mov	r2, r3
 80075e6:	2301      	movs	r3, #1
 80075e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075ea:	f7fc fe7d 	bl	80042e8 <HAL_GetTick>
 80075ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075f2:	e00a      	b.n	800760a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075f4:	f7fc fe78 	bl	80042e8 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b02      	cmp	r3, #2
 8007602:	d902      	bls.n	800760a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	f000 bcdb 	b.w	8007fc0 <HAL_RCC_OscConfig+0x106c>
 800760a:	2302      	movs	r3, #2
 800760c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007610:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007614:	fa93 f3a3 	rbit	r3, r3
 8007618:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800761c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007620:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007624:	2202      	movs	r2, #2
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800762c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	fa93 f2a3 	rbit	r2, r3
 8007636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800763a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007648:	2202      	movs	r2, #2
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	fa93 f2a3 	rbit	r2, r3
 800765a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800765e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007662:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007664:	4b88      	ldr	r3, [pc, #544]	; (8007888 <HAL_RCC_OscConfig+0x934>)
 8007666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800766c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007670:	2102      	movs	r1, #2
 8007672:	6019      	str	r1, [r3, #0]
 8007674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007678:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	fa93 f1a3 	rbit	r1, r3
 8007682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007686:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800768a:	6019      	str	r1, [r3, #0]
  return result;
 800768c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007690:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	fab3 f383 	clz	r3, r3
 800769a:	b2db      	uxtb	r3, r3
 800769c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	f003 031f 	and.w	r3, r3, #31
 80076a6:	2101      	movs	r1, #1
 80076a8:	fa01 f303 	lsl.w	r3, r1, r3
 80076ac:	4013      	ands	r3, r2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d0a0      	beq.n	80075f4 <HAL_RCC_OscConfig+0x6a0>
 80076b2:	e08d      	b.n	80077d0 <HAL_RCC_OscConfig+0x87c>
 80076b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80076bc:	2201      	movs	r2, #1
 80076be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	fa93 f2a3 	rbit	r2, r3
 80076ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80076d6:	601a      	str	r2, [r3, #0]
  return result;
 80076d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80076e0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076e2:	fab3 f383 	clz	r3, r3
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	4b68      	ldr	r3, [pc, #416]	; (800788c <HAL_RCC_OscConfig+0x938>)
 80076ec:	4413      	add	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	461a      	mov	r2, r3
 80076f2:	2300      	movs	r3, #0
 80076f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076f6:	f7fc fdf7 	bl	80042e8 <HAL_GetTick>
 80076fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076fe:	e00a      	b.n	8007716 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007700:	f7fc fdf2 	bl	80042e8 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d902      	bls.n	8007716 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	f000 bc55 	b.w	8007fc0 <HAL_RCC_OscConfig+0x106c>
 8007716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800771a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800771e:	2202      	movs	r2, #2
 8007720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007726:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	fa93 f2a3 	rbit	r2, r3
 8007730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007734:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800773e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007742:	2202      	movs	r2, #2
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800774a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	fa93 f2a3 	rbit	r2, r3
 8007754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007766:	2202      	movs	r2, #2
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800776e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	fa93 f2a3 	rbit	r2, r3
 8007778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800777c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007780:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007782:	4b41      	ldr	r3, [pc, #260]	; (8007888 <HAL_RCC_OscConfig+0x934>)
 8007784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800778a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800778e:	2102      	movs	r1, #2
 8007790:	6019      	str	r1, [r3, #0]
 8007792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007796:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	fa93 f1a3 	rbit	r1, r3
 80077a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077a4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80077a8:	6019      	str	r1, [r3, #0]
  return result;
 80077aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	fab3 f383 	clz	r3, r3
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f003 031f 	and.w	r3, r3, #31
 80077c4:	2101      	movs	r1, #1
 80077c6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ca:	4013      	ands	r3, r2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d197      	bne.n	8007700 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 81a1 	beq.w	8007b28 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077e6:	2300      	movs	r3, #0
 80077e8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077ec:	4b26      	ldr	r3, [pc, #152]	; (8007888 <HAL_RCC_OscConfig+0x934>)
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d116      	bne.n	8007826 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077f8:	4b23      	ldr	r3, [pc, #140]	; (8007888 <HAL_RCC_OscConfig+0x934>)
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	4a22      	ldr	r2, [pc, #136]	; (8007888 <HAL_RCC_OscConfig+0x934>)
 80077fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007802:	61d3      	str	r3, [r2, #28]
 8007804:	4b20      	ldr	r3, [pc, #128]	; (8007888 <HAL_RCC_OscConfig+0x934>)
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800780c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007810:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800781a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800781e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007820:	2301      	movs	r3, #1
 8007822:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007826:	4b1a      	ldr	r3, [pc, #104]	; (8007890 <HAL_RCC_OscConfig+0x93c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800782e:	2b00      	cmp	r3, #0
 8007830:	d11a      	bne.n	8007868 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007832:	4b17      	ldr	r3, [pc, #92]	; (8007890 <HAL_RCC_OscConfig+0x93c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a16      	ldr	r2, [pc, #88]	; (8007890 <HAL_RCC_OscConfig+0x93c>)
 8007838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800783c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800783e:	f7fc fd53 	bl	80042e8 <HAL_GetTick>
 8007842:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007846:	e009      	b.n	800785c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007848:	f7fc fd4e 	bl	80042e8 <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	2b64      	cmp	r3, #100	; 0x64
 8007856:	d901      	bls.n	800785c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e3b1      	b.n	8007fc0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800785c:	4b0c      	ldr	r3, [pc, #48]	; (8007890 <HAL_RCC_OscConfig+0x93c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007864:	2b00      	cmp	r3, #0
 8007866:	d0ef      	beq.n	8007848 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800786c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d10d      	bne.n	8007894 <HAL_RCC_OscConfig+0x940>
 8007878:	4b03      	ldr	r3, [pc, #12]	; (8007888 <HAL_RCC_OscConfig+0x934>)
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	4a02      	ldr	r2, [pc, #8]	; (8007888 <HAL_RCC_OscConfig+0x934>)
 800787e:	f043 0301 	orr.w	r3, r3, #1
 8007882:	6213      	str	r3, [r2, #32]
 8007884:	e03c      	b.n	8007900 <HAL_RCC_OscConfig+0x9ac>
 8007886:	bf00      	nop
 8007888:	40021000 	.word	0x40021000
 800788c:	10908120 	.word	0x10908120
 8007890:	40007000 	.word	0x40007000
 8007894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007898:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10c      	bne.n	80078be <HAL_RCC_OscConfig+0x96a>
 80078a4:	4bc1      	ldr	r3, [pc, #772]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	4ac0      	ldr	r2, [pc, #768]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 80078aa:	f023 0301 	bic.w	r3, r3, #1
 80078ae:	6213      	str	r3, [r2, #32]
 80078b0:	4bbe      	ldr	r3, [pc, #760]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 80078b2:	6a1b      	ldr	r3, [r3, #32]
 80078b4:	4abd      	ldr	r2, [pc, #756]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 80078b6:	f023 0304 	bic.w	r3, r3, #4
 80078ba:	6213      	str	r3, [r2, #32]
 80078bc:	e020      	b.n	8007900 <HAL_RCC_OscConfig+0x9ac>
 80078be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	2b05      	cmp	r3, #5
 80078cc:	d10c      	bne.n	80078e8 <HAL_RCC_OscConfig+0x994>
 80078ce:	4bb7      	ldr	r3, [pc, #732]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	4ab6      	ldr	r2, [pc, #728]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 80078d4:	f043 0304 	orr.w	r3, r3, #4
 80078d8:	6213      	str	r3, [r2, #32]
 80078da:	4bb4      	ldr	r3, [pc, #720]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	4ab3      	ldr	r2, [pc, #716]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 80078e0:	f043 0301 	orr.w	r3, r3, #1
 80078e4:	6213      	str	r3, [r2, #32]
 80078e6:	e00b      	b.n	8007900 <HAL_RCC_OscConfig+0x9ac>
 80078e8:	4bb0      	ldr	r3, [pc, #704]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	4aaf      	ldr	r2, [pc, #700]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 80078ee:	f023 0301 	bic.w	r3, r3, #1
 80078f2:	6213      	str	r3, [r2, #32]
 80078f4:	4bad      	ldr	r3, [pc, #692]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	4aac      	ldr	r2, [pc, #688]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 80078fa:	f023 0304 	bic.w	r3, r3, #4
 80078fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007904:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 8081 	beq.w	8007a14 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007912:	f7fc fce9 	bl	80042e8 <HAL_GetTick>
 8007916:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800791a:	e00b      	b.n	8007934 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800791c:	f7fc fce4 	bl	80042e8 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	f241 3288 	movw	r2, #5000	; 0x1388
 800792c:	4293      	cmp	r3, r2
 800792e:	d901      	bls.n	8007934 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e345      	b.n	8007fc0 <HAL_RCC_OscConfig+0x106c>
 8007934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007938:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800793c:	2202      	movs	r2, #2
 800793e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007944:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	fa93 f2a3 	rbit	r2, r3
 800794e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007952:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800795c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007960:	2202      	movs	r2, #2
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007968:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	fa93 f2a3 	rbit	r2, r3
 8007972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007976:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800797a:	601a      	str	r2, [r3, #0]
  return result;
 800797c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007980:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007984:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007986:	fab3 f383 	clz	r3, r3
 800798a:	b2db      	uxtb	r3, r3
 800798c:	095b      	lsrs	r3, r3, #5
 800798e:	b2db      	uxtb	r3, r3
 8007990:	f043 0302 	orr.w	r3, r3, #2
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d102      	bne.n	80079a0 <HAL_RCC_OscConfig+0xa4c>
 800799a:	4b84      	ldr	r3, [pc, #528]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	e013      	b.n	80079c8 <HAL_RCC_OscConfig+0xa74>
 80079a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80079a8:	2202      	movs	r2, #2
 80079aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079b0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	fa93 f2a3 	rbit	r2, r3
 80079ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	4b79      	ldr	r3, [pc, #484]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80079d0:	2102      	movs	r1, #2
 80079d2:	6011      	str	r1, [r2, #0]
 80079d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079d8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	fa92 f1a2 	rbit	r1, r2
 80079e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079e6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80079ea:	6011      	str	r1, [r2, #0]
  return result;
 80079ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079f0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80079f4:	6812      	ldr	r2, [r2, #0]
 80079f6:	fab2 f282 	clz	r2, r2
 80079fa:	b2d2      	uxtb	r2, r2
 80079fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a00:	b2d2      	uxtb	r2, r2
 8007a02:	f002 021f 	and.w	r2, r2, #31
 8007a06:	2101      	movs	r1, #1
 8007a08:	fa01 f202 	lsl.w	r2, r1, r2
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d084      	beq.n	800791c <HAL_RCC_OscConfig+0x9c8>
 8007a12:	e07f      	b.n	8007b14 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a14:	f7fc fc68 	bl	80042e8 <HAL_GetTick>
 8007a18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a1c:	e00b      	b.n	8007a36 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a1e:	f7fc fc63 	bl	80042e8 <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e2c4      	b.n	8007fc0 <HAL_RCC_OscConfig+0x106c>
 8007a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a3a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007a3e:	2202      	movs	r2, #2
 8007a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a46:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	fa93 f2a3 	rbit	r2, r3
 8007a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a54:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a5e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007a62:	2202      	movs	r2, #2
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a6a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	fa93 f2a3 	rbit	r2, r3
 8007a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a78:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007a7c:	601a      	str	r2, [r3, #0]
  return result;
 8007a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a82:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007a86:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a88:	fab3 f383 	clz	r3, r3
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	095b      	lsrs	r3, r3, #5
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	f043 0302 	orr.w	r3, r3, #2
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d102      	bne.n	8007aa2 <HAL_RCC_OscConfig+0xb4e>
 8007a9c:	4b43      	ldr	r3, [pc, #268]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	e013      	b.n	8007aca <HAL_RCC_OscConfig+0xb76>
 8007aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aa6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007aaa:	2202      	movs	r2, #2
 8007aac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ab2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	fa93 f2a3 	rbit	r2, r3
 8007abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ac0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	4b39      	ldr	r3, [pc, #228]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ace:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007ad2:	2102      	movs	r1, #2
 8007ad4:	6011      	str	r1, [r2, #0]
 8007ad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ada:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007ade:	6812      	ldr	r2, [r2, #0]
 8007ae0:	fa92 f1a2 	rbit	r1, r2
 8007ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ae8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007aec:	6011      	str	r1, [r2, #0]
  return result;
 8007aee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007af2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007af6:	6812      	ldr	r2, [r2, #0]
 8007af8:	fab2 f282 	clz	r2, r2
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	f002 021f 	and.w	r2, r2, #31
 8007b08:	2101      	movs	r1, #1
 8007b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d184      	bne.n	8007a1e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007b14:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d105      	bne.n	8007b28 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b1c:	4b23      	ldr	r3, [pc, #140]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	4a22      	ldr	r2, [pc, #136]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 8007b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b26:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 8242 	beq.w	8007fbe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b3a:	4b1c      	ldr	r3, [pc, #112]	; (8007bac <HAL_RCC_OscConfig+0xc58>)
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f003 030c 	and.w	r3, r3, #12
 8007b42:	2b08      	cmp	r3, #8
 8007b44:	f000 8213 	beq.w	8007f6e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	f040 8162 	bne.w	8007e1e <HAL_RCC_OscConfig+0xeca>
 8007b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b5e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007b62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b6c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	fa93 f2a3 	rbit	r2, r3
 8007b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b7a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007b7e:	601a      	str	r2, [r3, #0]
  return result;
 8007b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b84:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007b88:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b8a:	fab3 f383 	clz	r3, r3
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007b94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba0:	f7fc fba2 	bl	80042e8 <HAL_GetTick>
 8007ba4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ba8:	e00c      	b.n	8007bc4 <HAL_RCC_OscConfig+0xc70>
 8007baa:	bf00      	nop
 8007bac:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bb0:	f7fc fb9a 	bl	80042e8 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d901      	bls.n	8007bc4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e1fd      	b.n	8007fc0 <HAL_RCC_OscConfig+0x106c>
 8007bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bc8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007bcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bd6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	fa93 f2a3 	rbit	r2, r3
 8007be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007be4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007be8:	601a      	str	r2, [r3, #0]
  return result;
 8007bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007bf2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007bf4:	fab3 f383 	clz	r3, r3
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	f043 0301 	orr.w	r3, r3, #1
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d102      	bne.n	8007c0e <HAL_RCC_OscConfig+0xcba>
 8007c08:	4bb0      	ldr	r3, [pc, #704]	; (8007ecc <HAL_RCC_OscConfig+0xf78>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	e027      	b.n	8007c5e <HAL_RCC_OscConfig+0xd0a>
 8007c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c12:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007c16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c20:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	fa93 f2a3 	rbit	r2, r3
 8007c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c2e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c38:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c46:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	fa93 f2a3 	rbit	r2, r3
 8007c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c54:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	4b9c      	ldr	r3, [pc, #624]	; (8007ecc <HAL_RCC_OscConfig+0xf78>)
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007c62:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007c66:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007c6a:	6011      	str	r1, [r2, #0]
 8007c6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007c70:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007c74:	6812      	ldr	r2, [r2, #0]
 8007c76:	fa92 f1a2 	rbit	r1, r2
 8007c7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007c7e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007c82:	6011      	str	r1, [r2, #0]
  return result;
 8007c84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007c88:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007c8c:	6812      	ldr	r2, [r2, #0]
 8007c8e:	fab2 f282 	clz	r2, r2
 8007c92:	b2d2      	uxtb	r2, r2
 8007c94:	f042 0220 	orr.w	r2, r2, #32
 8007c98:	b2d2      	uxtb	r2, r2
 8007c9a:	f002 021f 	and.w	r2, r2, #31
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d182      	bne.n	8007bb0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007caa:	4b88      	ldr	r3, [pc, #544]	; (8007ecc <HAL_RCC_OscConfig+0xf78>)
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	430b      	orrs	r3, r1
 8007ccc:	497f      	ldr	r1, [pc, #508]	; (8007ecc <HAL_RCC_OscConfig+0xf78>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	604b      	str	r3, [r1, #4]
 8007cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cd6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007cda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007cde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ce4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	fa93 f2a3 	rbit	r2, r3
 8007cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cf2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007cf6:	601a      	str	r2, [r3, #0]
  return result;
 8007cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cfc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007d00:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d02:	fab3 f383 	clz	r3, r3
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007d0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	461a      	mov	r2, r3
 8007d14:	2301      	movs	r3, #1
 8007d16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d18:	f7fc fae6 	bl	80042e8 <HAL_GetTick>
 8007d1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007d20:	e009      	b.n	8007d36 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d22:	f7fc fae1 	bl	80042e8 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d901      	bls.n	8007d36 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e144      	b.n	8007fc0 <HAL_RCC_OscConfig+0x106c>
 8007d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d3a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d48:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	fa93 f2a3 	rbit	r2, r3
 8007d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d56:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007d5a:	601a      	str	r2, [r3, #0]
  return result;
 8007d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d60:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007d64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007d66:	fab3 f383 	clz	r3, r3
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	095b      	lsrs	r3, r3, #5
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	f043 0301 	orr.w	r3, r3, #1
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d102      	bne.n	8007d80 <HAL_RCC_OscConfig+0xe2c>
 8007d7a:	4b54      	ldr	r3, [pc, #336]	; (8007ecc <HAL_RCC_OscConfig+0xf78>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	e027      	b.n	8007dd0 <HAL_RCC_OscConfig+0xe7c>
 8007d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d84:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007d88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d92:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	fa93 f2a3 	rbit	r2, r3
 8007d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007da0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007daa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007dae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007db8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	fa93 f2a3 	rbit	r2, r3
 8007dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dc6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	4b3f      	ldr	r3, [pc, #252]	; (8007ecc <HAL_RCC_OscConfig+0xf78>)
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007dd4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007dd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007ddc:	6011      	str	r1, [r2, #0]
 8007dde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007de2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007de6:	6812      	ldr	r2, [r2, #0]
 8007de8:	fa92 f1a2 	rbit	r1, r2
 8007dec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007df0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007df4:	6011      	str	r1, [r2, #0]
  return result;
 8007df6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007dfa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007dfe:	6812      	ldr	r2, [r2, #0]
 8007e00:	fab2 f282 	clz	r2, r2
 8007e04:	b2d2      	uxtb	r2, r2
 8007e06:	f042 0220 	orr.w	r2, r2, #32
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	f002 021f 	and.w	r2, r2, #31
 8007e10:	2101      	movs	r1, #1
 8007e12:	fa01 f202 	lsl.w	r2, r1, r2
 8007e16:	4013      	ands	r3, r2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d082      	beq.n	8007d22 <HAL_RCC_OscConfig+0xdce>
 8007e1c:	e0cf      	b.n	8007fbe <HAL_RCC_OscConfig+0x106a>
 8007e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e22:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007e26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e30:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	fa93 f2a3 	rbit	r2, r3
 8007e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e3e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007e42:	601a      	str	r2, [r3, #0]
  return result;
 8007e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e48:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007e4c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e4e:	fab3 f383 	clz	r3, r3
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007e58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	461a      	mov	r2, r3
 8007e60:	2300      	movs	r3, #0
 8007e62:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e64:	f7fc fa40 	bl	80042e8 <HAL_GetTick>
 8007e68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e6c:	e009      	b.n	8007e82 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e6e:	f7fc fa3b 	bl	80042e8 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d901      	bls.n	8007e82 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e09e      	b.n	8007fc0 <HAL_RCC_OscConfig+0x106c>
 8007e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e86:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007e8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e94:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	fa93 f2a3 	rbit	r2, r3
 8007e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ea2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007ea6:	601a      	str	r2, [r3, #0]
  return result;
 8007ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007eb0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007eb2:	fab3 f383 	clz	r3, r3
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	095b      	lsrs	r3, r3, #5
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	f043 0301 	orr.w	r3, r3, #1
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d104      	bne.n	8007ed0 <HAL_RCC_OscConfig+0xf7c>
 8007ec6:	4b01      	ldr	r3, [pc, #4]	; (8007ecc <HAL_RCC_OscConfig+0xf78>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	e029      	b.n	8007f20 <HAL_RCC_OscConfig+0xfcc>
 8007ecc:	40021000 	.word	0x40021000
 8007ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ed4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ee2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	fa93 f2a3 	rbit	r2, r3
 8007eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ef0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007efa:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f08:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	fa93 f2a3 	rbit	r2, r3
 8007f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f16:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007f1a:	601a      	str	r2, [r3, #0]
 8007f1c:	4b2b      	ldr	r3, [pc, #172]	; (8007fcc <HAL_RCC_OscConfig+0x1078>)
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f24:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007f28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007f2c:	6011      	str	r1, [r2, #0]
 8007f2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f32:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007f36:	6812      	ldr	r2, [r2, #0]
 8007f38:	fa92 f1a2 	rbit	r1, r2
 8007f3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f40:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007f44:	6011      	str	r1, [r2, #0]
  return result;
 8007f46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007f4a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007f4e:	6812      	ldr	r2, [r2, #0]
 8007f50:	fab2 f282 	clz	r2, r2
 8007f54:	b2d2      	uxtb	r2, r2
 8007f56:	f042 0220 	orr.w	r2, r2, #32
 8007f5a:	b2d2      	uxtb	r2, r2
 8007f5c:	f002 021f 	and.w	r2, r2, #31
 8007f60:	2101      	movs	r1, #1
 8007f62:	fa01 f202 	lsl.w	r2, r1, r2
 8007f66:	4013      	ands	r3, r2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d180      	bne.n	8007e6e <HAL_RCC_OscConfig+0xf1a>
 8007f6c:	e027      	b.n	8007fbe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d101      	bne.n	8007f82 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e01e      	b.n	8007fc0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007f82:	4b12      	ldr	r3, [pc, #72]	; (8007fcc <HAL_RCC_OscConfig+0x1078>)
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007f8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007f8e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d10b      	bne.n	8007fba <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007fa2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007fa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d001      	beq.n	8007fbe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e000      	b.n	8007fc0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	40021000 	.word	0x40021000

08007fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b09e      	sub	sp, #120	; 0x78
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e162      	b.n	80082ae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007fe8:	4b90      	ldr	r3, [pc, #576]	; (800822c <HAL_RCC_ClockConfig+0x25c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0307 	and.w	r3, r3, #7
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d910      	bls.n	8008018 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ff6:	4b8d      	ldr	r3, [pc, #564]	; (800822c <HAL_RCC_ClockConfig+0x25c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f023 0207 	bic.w	r2, r3, #7
 8007ffe:	498b      	ldr	r1, [pc, #556]	; (800822c <HAL_RCC_ClockConfig+0x25c>)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	4313      	orrs	r3, r2
 8008004:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008006:	4b89      	ldr	r3, [pc, #548]	; (800822c <HAL_RCC_ClockConfig+0x25c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0307 	and.w	r3, r3, #7
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	429a      	cmp	r2, r3
 8008012:	d001      	beq.n	8008018 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e14a      	b.n	80082ae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d008      	beq.n	8008036 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008024:	4b82      	ldr	r3, [pc, #520]	; (8008230 <HAL_RCC_ClockConfig+0x260>)
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	497f      	ldr	r1, [pc, #508]	; (8008230 <HAL_RCC_ClockConfig+0x260>)
 8008032:	4313      	orrs	r3, r2
 8008034:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 80dc 	beq.w	80081fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d13c      	bne.n	80080c6 <HAL_RCC_ClockConfig+0xf6>
 800804c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008050:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008054:	fa93 f3a3 	rbit	r3, r3
 8008058:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800805a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800805c:	fab3 f383 	clz	r3, r3
 8008060:	b2db      	uxtb	r3, r3
 8008062:	095b      	lsrs	r3, r3, #5
 8008064:	b2db      	uxtb	r3, r3
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b01      	cmp	r3, #1
 800806e:	d102      	bne.n	8008076 <HAL_RCC_ClockConfig+0xa6>
 8008070:	4b6f      	ldr	r3, [pc, #444]	; (8008230 <HAL_RCC_ClockConfig+0x260>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	e00f      	b.n	8008096 <HAL_RCC_ClockConfig+0xc6>
 8008076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800807a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800807c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800807e:	fa93 f3a3 	rbit	r3, r3
 8008082:	667b      	str	r3, [r7, #100]	; 0x64
 8008084:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008088:	663b      	str	r3, [r7, #96]	; 0x60
 800808a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800808c:	fa93 f3a3 	rbit	r3, r3
 8008090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008092:	4b67      	ldr	r3, [pc, #412]	; (8008230 <HAL_RCC_ClockConfig+0x260>)
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800809a:	65ba      	str	r2, [r7, #88]	; 0x58
 800809c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800809e:	fa92 f2a2 	rbit	r2, r2
 80080a2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80080a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080a6:	fab2 f282 	clz	r2, r2
 80080aa:	b2d2      	uxtb	r2, r2
 80080ac:	f042 0220 	orr.w	r2, r2, #32
 80080b0:	b2d2      	uxtb	r2, r2
 80080b2:	f002 021f 	and.w	r2, r2, #31
 80080b6:	2101      	movs	r1, #1
 80080b8:	fa01 f202 	lsl.w	r2, r1, r2
 80080bc:	4013      	ands	r3, r2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d17b      	bne.n	80081ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e0f3      	b.n	80082ae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d13c      	bne.n	8008148 <HAL_RCC_ClockConfig+0x178>
 80080ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080d6:	fa93 f3a3 	rbit	r3, r3
 80080da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80080dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080de:	fab3 f383 	clz	r3, r3
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	095b      	lsrs	r3, r3, #5
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	f043 0301 	orr.w	r3, r3, #1
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d102      	bne.n	80080f8 <HAL_RCC_ClockConfig+0x128>
 80080f2:	4b4f      	ldr	r3, [pc, #316]	; (8008230 <HAL_RCC_ClockConfig+0x260>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	e00f      	b.n	8008118 <HAL_RCC_ClockConfig+0x148>
 80080f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008100:	fa93 f3a3 	rbit	r3, r3
 8008104:	647b      	str	r3, [r7, #68]	; 0x44
 8008106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800810a:	643b      	str	r3, [r7, #64]	; 0x40
 800810c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800810e:	fa93 f3a3 	rbit	r3, r3
 8008112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008114:	4b46      	ldr	r3, [pc, #280]	; (8008230 <HAL_RCC_ClockConfig+0x260>)
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800811c:	63ba      	str	r2, [r7, #56]	; 0x38
 800811e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008120:	fa92 f2a2 	rbit	r2, r2
 8008124:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008128:	fab2 f282 	clz	r2, r2
 800812c:	b2d2      	uxtb	r2, r2
 800812e:	f042 0220 	orr.w	r2, r2, #32
 8008132:	b2d2      	uxtb	r2, r2
 8008134:	f002 021f 	and.w	r2, r2, #31
 8008138:	2101      	movs	r1, #1
 800813a:	fa01 f202 	lsl.w	r2, r1, r2
 800813e:	4013      	ands	r3, r2
 8008140:	2b00      	cmp	r3, #0
 8008142:	d13a      	bne.n	80081ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e0b2      	b.n	80082ae <HAL_RCC_ClockConfig+0x2de>
 8008148:	2302      	movs	r3, #2
 800814a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	fa93 f3a3 	rbit	r3, r3
 8008152:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008156:	fab3 f383 	clz	r3, r3
 800815a:	b2db      	uxtb	r3, r3
 800815c:	095b      	lsrs	r3, r3, #5
 800815e:	b2db      	uxtb	r3, r3
 8008160:	f043 0301 	orr.w	r3, r3, #1
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b01      	cmp	r3, #1
 8008168:	d102      	bne.n	8008170 <HAL_RCC_ClockConfig+0x1a0>
 800816a:	4b31      	ldr	r3, [pc, #196]	; (8008230 <HAL_RCC_ClockConfig+0x260>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	e00d      	b.n	800818c <HAL_RCC_ClockConfig+0x1bc>
 8008170:	2302      	movs	r3, #2
 8008172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	fa93 f3a3 	rbit	r3, r3
 800817a:	627b      	str	r3, [r7, #36]	; 0x24
 800817c:	2302      	movs	r3, #2
 800817e:	623b      	str	r3, [r7, #32]
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	fa93 f3a3 	rbit	r3, r3
 8008186:	61fb      	str	r3, [r7, #28]
 8008188:	4b29      	ldr	r3, [pc, #164]	; (8008230 <HAL_RCC_ClockConfig+0x260>)
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	2202      	movs	r2, #2
 800818e:	61ba      	str	r2, [r7, #24]
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	fa92 f2a2 	rbit	r2, r2
 8008196:	617a      	str	r2, [r7, #20]
  return result;
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	fab2 f282 	clz	r2, r2
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	f042 0220 	orr.w	r2, r2, #32
 80081a4:	b2d2      	uxtb	r2, r2
 80081a6:	f002 021f 	and.w	r2, r2, #31
 80081aa:	2101      	movs	r1, #1
 80081ac:	fa01 f202 	lsl.w	r2, r1, r2
 80081b0:	4013      	ands	r3, r2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e079      	b.n	80082ae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80081ba:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <HAL_RCC_ClockConfig+0x260>)
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f023 0203 	bic.w	r2, r3, #3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	491a      	ldr	r1, [pc, #104]	; (8008230 <HAL_RCC_ClockConfig+0x260>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80081cc:	f7fc f88c 	bl	80042e8 <HAL_GetTick>
 80081d0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081d2:	e00a      	b.n	80081ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081d4:	f7fc f888 	bl	80042e8 <HAL_GetTick>
 80081d8:	4602      	mov	r2, r0
 80081da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d901      	bls.n	80081ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e061      	b.n	80082ae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081ea:	4b11      	ldr	r3, [pc, #68]	; (8008230 <HAL_RCC_ClockConfig+0x260>)
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f003 020c 	and.w	r2, r3, #12
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d1eb      	bne.n	80081d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80081fc:	4b0b      	ldr	r3, [pc, #44]	; (800822c <HAL_RCC_ClockConfig+0x25c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0307 	and.w	r3, r3, #7
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	429a      	cmp	r2, r3
 8008208:	d214      	bcs.n	8008234 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800820a:	4b08      	ldr	r3, [pc, #32]	; (800822c <HAL_RCC_ClockConfig+0x25c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f023 0207 	bic.w	r2, r3, #7
 8008212:	4906      	ldr	r1, [pc, #24]	; (800822c <HAL_RCC_ClockConfig+0x25c>)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	4313      	orrs	r3, r2
 8008218:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800821a:	4b04      	ldr	r3, [pc, #16]	; (800822c <HAL_RCC_ClockConfig+0x25c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0307 	and.w	r3, r3, #7
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	429a      	cmp	r2, r3
 8008226:	d005      	beq.n	8008234 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e040      	b.n	80082ae <HAL_RCC_ClockConfig+0x2de>
 800822c:	40022000 	.word	0x40022000
 8008230:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b00      	cmp	r3, #0
 800823e:	d008      	beq.n	8008252 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008240:	4b1d      	ldr	r3, [pc, #116]	; (80082b8 <HAL_RCC_ClockConfig+0x2e8>)
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	491a      	ldr	r1, [pc, #104]	; (80082b8 <HAL_RCC_ClockConfig+0x2e8>)
 800824e:	4313      	orrs	r3, r2
 8008250:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0308 	and.w	r3, r3, #8
 800825a:	2b00      	cmp	r3, #0
 800825c:	d009      	beq.n	8008272 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800825e:	4b16      	ldr	r3, [pc, #88]	; (80082b8 <HAL_RCC_ClockConfig+0x2e8>)
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	4912      	ldr	r1, [pc, #72]	; (80082b8 <HAL_RCC_ClockConfig+0x2e8>)
 800826e:	4313      	orrs	r3, r2
 8008270:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008272:	f000 f829 	bl	80082c8 <HAL_RCC_GetSysClockFreq>
 8008276:	4601      	mov	r1, r0
 8008278:	4b0f      	ldr	r3, [pc, #60]	; (80082b8 <HAL_RCC_ClockConfig+0x2e8>)
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008280:	22f0      	movs	r2, #240	; 0xf0
 8008282:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	fa92 f2a2 	rbit	r2, r2
 800828a:	60fa      	str	r2, [r7, #12]
  return result;
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	fab2 f282 	clz	r2, r2
 8008292:	b2d2      	uxtb	r2, r2
 8008294:	40d3      	lsrs	r3, r2
 8008296:	4a09      	ldr	r2, [pc, #36]	; (80082bc <HAL_RCC_ClockConfig+0x2ec>)
 8008298:	5cd3      	ldrb	r3, [r2, r3]
 800829a:	fa21 f303 	lsr.w	r3, r1, r3
 800829e:	4a08      	ldr	r2, [pc, #32]	; (80082c0 <HAL_RCC_ClockConfig+0x2f0>)
 80082a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80082a2:	4b08      	ldr	r3, [pc, #32]	; (80082c4 <HAL_RCC_ClockConfig+0x2f4>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fb ffda 	bl	8004260 <HAL_InitTick>
  
  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3778      	adds	r7, #120	; 0x78
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	40021000 	.word	0x40021000
 80082bc:	0800cfa8 	.word	0x0800cfa8
 80082c0:	20000040 	.word	0x20000040
 80082c4:	20000044 	.word	0x20000044

080082c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b08b      	sub	sp, #44	; 0x2c
 80082cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	61fb      	str	r3, [r7, #28]
 80082d2:	2300      	movs	r3, #0
 80082d4:	61bb      	str	r3, [r7, #24]
 80082d6:	2300      	movs	r3, #0
 80082d8:	627b      	str	r3, [r7, #36]	; 0x24
 80082da:	2300      	movs	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80082e2:	4b29      	ldr	r3, [pc, #164]	; (8008388 <HAL_RCC_GetSysClockFreq+0xc0>)
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	f003 030c 	and.w	r3, r3, #12
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d002      	beq.n	80082f8 <HAL_RCC_GetSysClockFreq+0x30>
 80082f2:	2b08      	cmp	r3, #8
 80082f4:	d003      	beq.n	80082fe <HAL_RCC_GetSysClockFreq+0x36>
 80082f6:	e03c      	b.n	8008372 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80082f8:	4b24      	ldr	r3, [pc, #144]	; (800838c <HAL_RCC_GetSysClockFreq+0xc4>)
 80082fa:	623b      	str	r3, [r7, #32]
      break;
 80082fc:	e03c      	b.n	8008378 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008304:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008308:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	fa92 f2a2 	rbit	r2, r2
 8008310:	607a      	str	r2, [r7, #4]
  return result;
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	fab2 f282 	clz	r2, r2
 8008318:	b2d2      	uxtb	r2, r2
 800831a:	40d3      	lsrs	r3, r2
 800831c:	4a1c      	ldr	r2, [pc, #112]	; (8008390 <HAL_RCC_GetSysClockFreq+0xc8>)
 800831e:	5cd3      	ldrb	r3, [r2, r3]
 8008320:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008322:	4b19      	ldr	r3, [pc, #100]	; (8008388 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008326:	f003 030f 	and.w	r3, r3, #15
 800832a:	220f      	movs	r2, #15
 800832c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	fa92 f2a2 	rbit	r2, r2
 8008334:	60fa      	str	r2, [r7, #12]
  return result;
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	fab2 f282 	clz	r2, r2
 800833c:	b2d2      	uxtb	r2, r2
 800833e:	40d3      	lsrs	r3, r2
 8008340:	4a14      	ldr	r2, [pc, #80]	; (8008394 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008342:	5cd3      	ldrb	r3, [r2, r3]
 8008344:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d008      	beq.n	8008362 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008350:	4a0e      	ldr	r2, [pc, #56]	; (800838c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	fbb2 f2f3 	udiv	r2, r2, r3
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	fb02 f303 	mul.w	r3, r2, r3
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
 8008360:	e004      	b.n	800836c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	4a0c      	ldr	r2, [pc, #48]	; (8008398 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008366:	fb02 f303 	mul.w	r3, r2, r3
 800836a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	623b      	str	r3, [r7, #32]
      break;
 8008370:	e002      	b.n	8008378 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008372:	4b06      	ldr	r3, [pc, #24]	; (800838c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008374:	623b      	str	r3, [r7, #32]
      break;
 8008376:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008378:	6a3b      	ldr	r3, [r7, #32]
}
 800837a:	4618      	mov	r0, r3
 800837c:	372c      	adds	r7, #44	; 0x2c
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	40021000 	.word	0x40021000
 800838c:	007a1200 	.word	0x007a1200
 8008390:	0800cfcc 	.word	0x0800cfcc
 8008394:	0800cfdc 	.word	0x0800cfdc
 8008398:	003d0900 	.word	0x003d0900

0800839c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b092      	sub	sp, #72	; 0x48
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80083ac:	2300      	movs	r3, #0
 80083ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 80d4 	beq.w	8008568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083c0:	4b4e      	ldr	r3, [pc, #312]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10e      	bne.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083cc:	4b4b      	ldr	r3, [pc, #300]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	4a4a      	ldr	r2, [pc, #296]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083d6:	61d3      	str	r3, [r2, #28]
 80083d8:	4b48      	ldr	r3, [pc, #288]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083e0:	60bb      	str	r3, [r7, #8]
 80083e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083e4:	2301      	movs	r3, #1
 80083e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083ea:	4b45      	ldr	r3, [pc, #276]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d118      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083f6:	4b42      	ldr	r3, [pc, #264]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a41      	ldr	r2, [pc, #260]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80083fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008400:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008402:	f7fb ff71 	bl	80042e8 <HAL_GetTick>
 8008406:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008408:	e008      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800840a:	f7fb ff6d 	bl	80042e8 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	2b64      	cmp	r3, #100	; 0x64
 8008416:	d901      	bls.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e14b      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800841c:	4b38      	ldr	r3, [pc, #224]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008424:	2b00      	cmp	r3, #0
 8008426:	d0f0      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008428:	4b34      	ldr	r3, [pc, #208]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008430:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 8084 	beq.w	8008542 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008444:	429a      	cmp	r2, r3
 8008446:	d07c      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008448:	4b2c      	ldr	r3, [pc, #176]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800844a:	6a1b      	ldr	r3, [r3, #32]
 800844c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008456:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	fa93 f3a3 	rbit	r3, r3
 800845e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008462:	fab3 f383 	clz	r3, r3
 8008466:	b2db      	uxtb	r3, r3
 8008468:	461a      	mov	r2, r3
 800846a:	4b26      	ldr	r3, [pc, #152]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800846c:	4413      	add	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	461a      	mov	r2, r3
 8008472:	2301      	movs	r3, #1
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800847a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	fa93 f3a3 	rbit	r3, r3
 8008482:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008486:	fab3 f383 	clz	r3, r3
 800848a:	b2db      	uxtb	r3, r3
 800848c:	461a      	mov	r2, r3
 800848e:	4b1d      	ldr	r3, [pc, #116]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008490:	4413      	add	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	461a      	mov	r2, r3
 8008496:	2300      	movs	r3, #0
 8008498:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800849a:	4a18      	ldr	r2, [pc, #96]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800849c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800849e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80084a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d04b      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084aa:	f7fb ff1d 	bl	80042e8 <HAL_GetTick>
 80084ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084b0:	e00a      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084b2:	f7fb ff19 	bl	80042e8 <HAL_GetTick>
 80084b6:	4602      	mov	r2, r0
 80084b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d901      	bls.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e0f5      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80084c8:	2302      	movs	r3, #2
 80084ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	fa93 f3a3 	rbit	r3, r3
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
 80084d4:	2302      	movs	r3, #2
 80084d6:	623b      	str	r3, [r7, #32]
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	fa93 f3a3 	rbit	r3, r3
 80084de:	61fb      	str	r3, [r7, #28]
  return result;
 80084e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084e2:	fab3 f383 	clz	r3, r3
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	095b      	lsrs	r3, r3, #5
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	f043 0302 	orr.w	r3, r3, #2
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d108      	bne.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80084f6:	4b01      	ldr	r3, [pc, #4]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	e00d      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80084fc:	40021000 	.word	0x40021000
 8008500:	40007000 	.word	0x40007000
 8008504:	10908100 	.word	0x10908100
 8008508:	2302      	movs	r3, #2
 800850a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	fa93 f3a3 	rbit	r3, r3
 8008512:	617b      	str	r3, [r7, #20]
 8008514:	4b69      	ldr	r3, [pc, #420]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008518:	2202      	movs	r2, #2
 800851a:	613a      	str	r2, [r7, #16]
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	fa92 f2a2 	rbit	r2, r2
 8008522:	60fa      	str	r2, [r7, #12]
  return result;
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	fab2 f282 	clz	r2, r2
 800852a:	b2d2      	uxtb	r2, r2
 800852c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008530:	b2d2      	uxtb	r2, r2
 8008532:	f002 021f 	and.w	r2, r2, #31
 8008536:	2101      	movs	r1, #1
 8008538:	fa01 f202 	lsl.w	r2, r1, r2
 800853c:	4013      	ands	r3, r2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0b7      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008542:	4b5e      	ldr	r3, [pc, #376]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	495b      	ldr	r1, [pc, #364]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008550:	4313      	orrs	r3, r2
 8008552:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008554:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008558:	2b01      	cmp	r3, #1
 800855a:	d105      	bne.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800855c:	4b57      	ldr	r3, [pc, #348]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	4a56      	ldr	r2, [pc, #344]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008566:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	d008      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008574:	4b51      	ldr	r3, [pc, #324]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008578:	f023 0203 	bic.w	r2, r3, #3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	494e      	ldr	r1, [pc, #312]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008582:	4313      	orrs	r3, r2
 8008584:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0302 	and.w	r3, r3, #2
 800858e:	2b00      	cmp	r3, #0
 8008590:	d008      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008592:	4b4a      	ldr	r3, [pc, #296]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008596:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	4947      	ldr	r1, [pc, #284]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0304 	and.w	r3, r3, #4
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d008      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085b0:	4b42      	ldr	r3, [pc, #264]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80085b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	493f      	ldr	r1, [pc, #252]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0320 	and.w	r3, r3, #32
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d008      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085ce:	4b3b      	ldr	r3, [pc, #236]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80085d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d2:	f023 0210 	bic.w	r2, r3, #16
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	4938      	ldr	r1, [pc, #224]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d008      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80085ec:	4b33      	ldr	r3, [pc, #204]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f8:	4930      	ldr	r1, [pc, #192]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008606:	2b00      	cmp	r3, #0
 8008608:	d008      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800860a:	4b2c      	ldr	r3, [pc, #176]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800860c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860e:	f023 0220 	bic.w	r2, r3, #32
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	4929      	ldr	r1, [pc, #164]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008618:	4313      	orrs	r3, r2
 800861a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b00      	cmp	r3, #0
 8008626:	d008      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008628:	4b24      	ldr	r3, [pc, #144]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800862a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	4921      	ldr	r1, [pc, #132]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008636:	4313      	orrs	r3, r2
 8008638:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0310 	and.w	r3, r3, #16
 8008642:	2b00      	cmp	r3, #0
 8008644:	d008      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008646:	4b1d      	ldr	r3, [pc, #116]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	491a      	ldr	r1, [pc, #104]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008654:	4313      	orrs	r3, r2
 8008656:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008660:	2b00      	cmp	r3, #0
 8008662:	d008      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008664:	4b15      	ldr	r3, [pc, #84]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008670:	4912      	ldr	r1, [pc, #72]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008672:	4313      	orrs	r3, r2
 8008674:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867e:	2b00      	cmp	r3, #0
 8008680:	d008      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008682:	4b0e      	ldr	r3, [pc, #56]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008686:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	490b      	ldr	r1, [pc, #44]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8008690:	4313      	orrs	r3, r2
 8008692:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d008      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80086a0:	4b06      	ldr	r3, [pc, #24]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80086a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	4903      	ldr	r1, [pc, #12]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3748      	adds	r7, #72	; 0x48
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	40021000 	.word	0x40021000

080086c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80086d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80086d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	b29a      	uxth	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80086f6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80086fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008702:	b29a      	uxth	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	b29b      	uxth	r3, r3
 8008708:	43db      	mvns	r3, r3
 800870a:	b29b      	uxth	r3, r3
 800870c:	4013      	ands	r3, r2
 800870e:	b29a      	uxth	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008724:	b084      	sub	sp, #16
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	f107 0014 	add.w	r0, r7, #20
 8008732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	b004      	add	sp, #16
 8008764:	4770      	bx	lr
	...

08008768 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008768:	b480      	push	{r7}
 800876a:	b09d      	sub	sp, #116	; 0x74
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	b29b      	uxth	r3, r3
 8008786:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800878a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	78db      	ldrb	r3, [r3, #3]
 8008796:	2b03      	cmp	r3, #3
 8008798:	d81f      	bhi.n	80087da <USB_ActivateEndpoint+0x72>
 800879a:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <USB_ActivateEndpoint+0x38>)
 800879c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a0:	080087b1 	.word	0x080087b1
 80087a4:	080087cd 	.word	0x080087cd
 80087a8:	080087e3 	.word	0x080087e3
 80087ac:	080087bf 	.word	0x080087bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80087b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80087b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80087bc:	e012      	b.n	80087e4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80087be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087c2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80087c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80087ca:	e00b      	b.n	80087e4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80087cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80087d8:	e004      	b.n	80087e4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80087e0:	e000      	b.n	80087e4 <USB_ActivateEndpoint+0x7c>
      break;
 80087e2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	441a      	add	r2, r3
 80087ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80087f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008802:	b29b      	uxth	r3, r3
 8008804:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	b29b      	uxth	r3, r3
 8008814:	b21b      	sxth	r3, r3
 8008816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800881a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800881e:	b21a      	sxth	r2, r3
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	b21b      	sxth	r3, r3
 8008826:	4313      	orrs	r3, r2
 8008828:	b21b      	sxth	r3, r3
 800882a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	441a      	add	r2, r3
 8008838:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800883c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884c:	b29b      	uxth	r3, r3
 800884e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	7b1b      	ldrb	r3, [r3, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f040 8149 	bne.w	8008aec <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 8084 	beq.w	800896c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	61bb      	str	r3, [r7, #24]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800886e:	b29b      	uxth	r3, r3
 8008870:	461a      	mov	r2, r3
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	4413      	add	r3, r2
 8008876:	61bb      	str	r3, [r7, #24]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	011a      	lsls	r2, r3, #4
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	4413      	add	r3, r2
 8008882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	88db      	ldrh	r3, [r3, #6]
 800888c:	085b      	lsrs	r3, r3, #1
 800888e:	b29b      	uxth	r3, r3
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	b29a      	uxth	r2, r3
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4413      	add	r3, r2
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	827b      	strh	r3, [r7, #18]
 80088a6:	8a7b      	ldrh	r3, [r7, #18]
 80088a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01b      	beq.n	80088e8 <USB_ActivateEndpoint+0x180>
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c6:	823b      	strh	r3, [r7, #16]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	441a      	add	r2, r3
 80088d2:	8a3b      	ldrh	r3, [r7, #16]
 80088d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	78db      	ldrb	r3, [r3, #3]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d020      	beq.n	8008932 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4413      	add	r3, r2
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008906:	81bb      	strh	r3, [r7, #12]
 8008908:	89bb      	ldrh	r3, [r7, #12]
 800890a:	f083 0320 	eor.w	r3, r3, #32
 800890e:	81bb      	strh	r3, [r7, #12]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	441a      	add	r2, r3
 800891a:	89bb      	ldrh	r3, [r7, #12]
 800891c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800892c:	b29b      	uxth	r3, r3
 800892e:	8013      	strh	r3, [r2, #0]
 8008930:	e2a6      	b.n	8008e80 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008948:	81fb      	strh	r3, [r7, #14]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	441a      	add	r2, r3
 8008954:	89fb      	ldrh	r3, [r7, #14]
 8008956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800895a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800895e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008966:	b29b      	uxth	r3, r3
 8008968:	8013      	strh	r3, [r2, #0]
 800896a:	e289      	b.n	8008e80 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	633b      	str	r3, [r7, #48]	; 0x30
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008976:	b29b      	uxth	r3, r3
 8008978:	461a      	mov	r2, r3
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	4413      	add	r3, r2
 800897e:	633b      	str	r3, [r7, #48]	; 0x30
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	011a      	lsls	r2, r3, #4
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	4413      	add	r3, r2
 800898a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800898e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	88db      	ldrh	r3, [r3, #6]
 8008994:	085b      	lsrs	r3, r3, #1
 8008996:	b29b      	uxth	r3, r3
 8008998:	005b      	lsls	r3, r3, #1
 800899a:	b29a      	uxth	r2, r3
 800899c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	461a      	mov	r2, r3
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b0:	4413      	add	r3, r2
 80089b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	011a      	lsls	r2, r3, #4
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	4413      	add	r3, r2
 80089be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d112      	bne.n	80089f2 <USB_ActivateEndpoint+0x28a>
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	801a      	strh	r2, [r3, #0]
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	801a      	strh	r2, [r3, #0]
 80089f0:	e02f      	b.n	8008a52 <USB_ActivateEndpoint+0x2ea>
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	2b3e      	cmp	r3, #62	; 0x3e
 80089f8:	d813      	bhi.n	8008a22 <USB_ActivateEndpoint+0x2ba>
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	085b      	lsrs	r3, r3, #1
 8008a00:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <USB_ActivateEndpoint+0x2ac>
 8008a0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a10:	3301      	adds	r3, #1
 8008a12:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	029b      	lsls	r3, r3, #10
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	801a      	strh	r2, [r3, #0]
 8008a20:	e017      	b.n	8008a52 <USB_ActivateEndpoint+0x2ea>
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	095b      	lsrs	r3, r3, #5
 8008a28:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f003 031f 	and.w	r3, r3, #31
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d102      	bne.n	8008a3c <USB_ActivateEndpoint+0x2d4>
 8008a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	029b      	lsls	r3, r3, #10
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008a60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d01b      	beq.n	8008aa2 <USB_ActivateEndpoint+0x33a>
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a80:	843b      	strh	r3, [r7, #32]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	441a      	add	r2, r3
 8008a8c:	8c3b      	ldrh	r3, [r7, #32]
 8008a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab8:	83fb      	strh	r3, [r7, #30]
 8008aba:	8bfb      	ldrh	r3, [r7, #30]
 8008abc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ac0:	83fb      	strh	r3, [r7, #30]
 8008ac2:	8bfb      	ldrh	r3, [r7, #30]
 8008ac4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ac8:	83fb      	strh	r3, [r7, #30]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	441a      	add	r2, r3
 8008ad4:	8bfb      	ldrh	r3, [r7, #30]
 8008ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	8013      	strh	r3, [r2, #0]
 8008aea:	e1c9      	b.n	8008e80 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	78db      	ldrb	r3, [r3, #3]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d11e      	bne.n	8008b32 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b0a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	441a      	add	r2, r3
 8008b18:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b24:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	8013      	strh	r3, [r2, #0]
 8008b30:	e01d      	b.n	8008b6e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	881b      	ldrh	r3, [r3, #0]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b48:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	441a      	add	r2, r3
 8008b56:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b7e:	4413      	add	r3, r2
 8008b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	011a      	lsls	r2, r3, #4
 8008b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b90:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	891b      	ldrh	r3, [r3, #8]
 8008b96:	085b      	lsrs	r3, r3, #1
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	005b      	lsls	r3, r3, #1
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ba0:	801a      	strh	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	657b      	str	r3, [r7, #84]	; 0x54
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	461a      	mov	r2, r3
 8008bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bb2:	4413      	add	r3, r2
 8008bb4:	657b      	str	r3, [r7, #84]	; 0x54
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	011a      	lsls	r2, r3, #4
 8008bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	895b      	ldrh	r3, [r3, #10]
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	005b      	lsls	r3, r3, #1
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bd4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	785b      	ldrb	r3, [r3, #1]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f040 8093 	bne.w	8008d06 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008bf0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01b      	beq.n	8008c34 <USB_ActivateEndpoint+0x4cc>
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c12:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	441a      	add	r2, r3
 8008c1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	881b      	ldrh	r3, [r3, #0]
 8008c40:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008c42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d01b      	beq.n	8008c84 <USB_ActivateEndpoint+0x51c>
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c62:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	441a      	add	r2, r3
 8008c6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9a:	873b      	strh	r3, [r7, #56]	; 0x38
 8008c9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008c9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ca2:	873b      	strh	r3, [r7, #56]	; 0x38
 8008ca4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008ca6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008caa:	873b      	strh	r3, [r7, #56]	; 0x38
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	441a      	add	r2, r3
 8008cb6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ce2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	441a      	add	r2, r3
 8008cee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	8013      	strh	r3, [r2, #0]
 8008d04:	e0bc      	b.n	8008e80 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008d16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d01d      	beq.n	8008d5e <USB_ActivateEndpoint+0x5f6>
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	441a      	add	r2, r3
 8008d46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	881b      	ldrh	r3, [r3, #0]
 8008d6a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008d6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d01d      	beq.n	8008db6 <USB_ActivateEndpoint+0x64e>
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d90:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	441a      	add	r2, r3
 8008d9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	78db      	ldrb	r3, [r3, #3]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d024      	beq.n	8008e08 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	881b      	ldrh	r3, [r3, #0]
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dd4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008dd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008ddc:	f083 0320 	eor.w	r3, r3, #32
 8008de0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	441a      	add	r2, r3
 8008dee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	8013      	strh	r3, [r2, #0]
 8008e06:	e01d      	b.n	8008e44 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	441a      	add	r2, r3
 8008e2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4413      	add	r3, r2
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	441a      	add	r2, r3
 8008e68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008e80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3774      	adds	r7, #116	; 0x74
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b08d      	sub	sp, #52	; 0x34
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	7b1b      	ldrb	r3, [r3, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f040 808e 	bne.w	8008fc0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	785b      	ldrb	r3, [r3, #1]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d044      	beq.n	8008f36 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	81bb      	strh	r3, [r7, #12]
 8008eba:	89bb      	ldrh	r3, [r7, #12]
 8008ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d01b      	beq.n	8008efc <USB_DeactivateEndpoint+0x6c>
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eda:	817b      	strh	r3, [r7, #10]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	441a      	add	r2, r3
 8008ee6:	897b      	ldrh	r3, [r7, #10]
 8008ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ef4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f12:	813b      	strh	r3, [r7, #8]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	441a      	add	r2, r3
 8008f1e:	893b      	ldrh	r3, [r7, #8]
 8008f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	8013      	strh	r3, [r2, #0]
 8008f34:	e192      	b.n	800925c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	827b      	strh	r3, [r7, #18]
 8008f44:	8a7b      	ldrh	r3, [r7, #18]
 8008f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d01b      	beq.n	8008f86 <USB_DeactivateEndpoint+0xf6>
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f64:	823b      	strh	r3, [r7, #16]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	441a      	add	r2, r3
 8008f70:	8a3b      	ldrh	r3, [r7, #16]
 8008f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9c:	81fb      	strh	r3, [r7, #14]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	441a      	add	r2, r3
 8008fa8:	89fb      	ldrh	r3, [r7, #14]
 8008faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	8013      	strh	r3, [r2, #0]
 8008fbe:	e14d      	b.n	800925c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f040 80a5 	bne.w	8009114 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	843b      	strh	r3, [r7, #32]
 8008fd8:	8c3b      	ldrh	r3, [r7, #32]
 8008fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d01b      	beq.n	800901a <USB_DeactivateEndpoint+0x18a>
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ff8:	83fb      	strh	r3, [r7, #30]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	441a      	add	r2, r3
 8009004:	8bfb      	ldrh	r3, [r7, #30]
 8009006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800900a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800900e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009016:	b29b      	uxth	r3, r3
 8009018:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	83bb      	strh	r3, [r7, #28]
 8009028:	8bbb      	ldrh	r3, [r7, #28]
 800902a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902e:	2b00      	cmp	r3, #0
 8009030:	d01b      	beq.n	800906a <USB_DeactivateEndpoint+0x1da>
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	b29b      	uxth	r3, r3
 8009040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009048:	837b      	strh	r3, [r7, #26]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	441a      	add	r2, r3
 8009054:	8b7b      	ldrh	r3, [r7, #26]
 8009056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800905a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800905e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009062:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009066:	b29b      	uxth	r3, r3
 8009068:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	881b      	ldrh	r3, [r3, #0]
 8009076:	b29b      	uxth	r3, r3
 8009078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800907c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009080:	833b      	strh	r3, [r7, #24]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	441a      	add	r2, r3
 800908c:	8b3b      	ldrh	r3, [r7, #24]
 800908e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800909a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800909e:	b29b      	uxth	r3, r3
 80090a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b8:	82fb      	strh	r3, [r7, #22]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	441a      	add	r2, r3
 80090c4:	8afb      	ldrh	r3, [r7, #22]
 80090c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090f0:	82bb      	strh	r3, [r7, #20]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	441a      	add	r2, r3
 80090fc:	8abb      	ldrh	r3, [r7, #20]
 80090fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800910a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800910e:	b29b      	uxth	r3, r3
 8009110:	8013      	strh	r3, [r2, #0]
 8009112:	e0a3      	b.n	800925c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009122:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d01b      	beq.n	8009164 <USB_DeactivateEndpoint+0x2d4>
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	b29b      	uxth	r3, r3
 800913a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800913e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009142:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	441a      	add	r2, r3
 800914e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800915c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009160:	b29b      	uxth	r3, r3
 8009162:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4413      	add	r3, r2
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009172:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009178:	2b00      	cmp	r3, #0
 800917a:	d01b      	beq.n	80091b4 <USB_DeactivateEndpoint+0x324>
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	b29b      	uxth	r3, r3
 800918a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800918e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009192:	853b      	strh	r3, [r7, #40]	; 0x28
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	441a      	add	r2, r3
 800919e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	441a      	add	r2, r3
 80091d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009202:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	441a      	add	r2, r3
 800920e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800921c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009220:	b29b      	uxth	r3, r3
 8009222:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	b29b      	uxth	r3, r3
 8009232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923a:	847b      	strh	r3, [r7, #34]	; 0x22
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	441a      	add	r2, r3
 8009246:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800924c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009258:	b29b      	uxth	r3, r3
 800925a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3734      	adds	r7, #52	; 0x34
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b0c2      	sub	sp, #264	; 0x108
 800926e:	af00      	add	r7, sp, #0
 8009270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009278:	6018      	str	r0, [r3, #0]
 800927a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800927e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009282:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	785b      	ldrb	r3, [r3, #1]
 8009290:	2b01      	cmp	r3, #1
 8009292:	f040 867b 	bne.w	8009f8c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800929a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	699a      	ldr	r2, [r3, #24]
 80092a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d908      	bls.n	80092c4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80092b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80092c2:	e007      	b.n	80092d4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80092c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80092d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	7b1b      	ldrb	r3, [r3, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d13a      	bne.n	800935a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80092e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6959      	ldr	r1, [r3, #20]
 80092f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	88da      	ldrh	r2, [r3, #6]
 80092fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009300:	b29b      	uxth	r3, r3
 8009302:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009306:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800930a:	6800      	ldr	r0, [r0, #0]
 800930c:	f001 fc11 	bl	800ab32 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009314:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009320:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800932a:	b29b      	uxth	r3, r3
 800932c:	461a      	mov	r2, r3
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	4413      	add	r3, r2
 8009332:	613b      	str	r3, [r7, #16]
 8009334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	011a      	lsls	r2, r3, #4
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	4413      	add	r3, r2
 8009346:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009350:	b29a      	uxth	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	801a      	strh	r2, [r3, #0]
 8009356:	f000 bde3 	b.w	8009f20 <USB_EPStartXfer+0xcb6>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800935a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	78db      	ldrb	r3, [r3, #3]
 8009366:	2b02      	cmp	r3, #2
 8009368:	f040 843a 	bne.w	8009be0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800936c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6a1a      	ldr	r2, [r3, #32]
 8009378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800937c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	429a      	cmp	r2, r3
 8009386:	f240 83b7 	bls.w	8009af8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800938a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800938e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	881b      	ldrh	r3, [r3, #0]
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80093b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	441a      	add	r2, r3
 80093ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80093d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80093de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80093e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6a1a      	ldr	r2, [r3, #32]
 80093f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093f6:	1ad2      	subs	r2, r2, r3
 80093f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	881b      	ldrh	r3, [r3, #0]
 8009420:	b29b      	uxth	r3, r3
 8009422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009426:	2b00      	cmp	r3, #0
 8009428:	f000 81b3 	beq.w	8009792 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800942c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009430:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	633b      	str	r3, [r7, #48]	; 0x30
 8009438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800943c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	785b      	ldrb	r3, [r3, #1]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d16d      	bne.n	8009524 <USB_EPStartXfer+0x2ba>
 8009448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	62bb      	str	r3, [r7, #40]	; 0x28
 8009454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009458:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009462:	b29b      	uxth	r3, r3
 8009464:	461a      	mov	r2, r3
 8009466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009468:	4413      	add	r3, r2
 800946a:	62bb      	str	r3, [r7, #40]	; 0x28
 800946c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	011a      	lsls	r2, r3, #4
 800947a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947c:	4413      	add	r3, r2
 800947e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
 8009484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009488:	2b00      	cmp	r3, #0
 800948a:	d112      	bne.n	80094b2 <USB_EPStartXfer+0x248>
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	b29b      	uxth	r3, r3
 8009492:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009496:	b29a      	uxth	r2, r3
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	801a      	strh	r2, [r3, #0]
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	801a      	strh	r2, [r3, #0]
 80094b0:	e05d      	b.n	800956e <USB_EPStartXfer+0x304>
 80094b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b6:	2b3e      	cmp	r3, #62	; 0x3e
 80094b8:	d817      	bhi.n	80094ea <USB_EPStartXfer+0x280>
 80094ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094be:	085b      	lsrs	r3, r3, #1
 80094c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d004      	beq.n	80094da <USB_EPStartXfer+0x270>
 80094d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80094d4:	3301      	adds	r3, #1
 80094d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80094de:	b29b      	uxth	r3, r3
 80094e0:	029b      	lsls	r3, r3, #10
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	801a      	strh	r2, [r3, #0]
 80094e8:	e041      	b.n	800956e <USB_EPStartXfer+0x304>
 80094ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ee:	095b      	lsrs	r3, r3, #5
 80094f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f8:	f003 031f 	and.w	r3, r3, #31
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d104      	bne.n	800950a <USB_EPStartXfer+0x2a0>
 8009500:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009504:	3b01      	subs	r3, #1
 8009506:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800950a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800950e:	b29b      	uxth	r3, r3
 8009510:	029b      	lsls	r3, r3, #10
 8009512:	b29b      	uxth	r3, r3
 8009514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800951c:	b29a      	uxth	r2, r3
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	801a      	strh	r2, [r3, #0]
 8009522:	e024      	b.n	800956e <USB_EPStartXfer+0x304>
 8009524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	785b      	ldrb	r3, [r3, #1]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d11c      	bne.n	800956e <USB_EPStartXfer+0x304>
 8009534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009542:	b29b      	uxth	r3, r3
 8009544:	461a      	mov	r2, r3
 8009546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009548:	4413      	add	r3, r2
 800954a:	633b      	str	r3, [r7, #48]	; 0x30
 800954c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	011a      	lsls	r2, r3, #4
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	4413      	add	r3, r2
 800955e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009568:	b29a      	uxth	r2, r3
 800956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800956e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	895b      	ldrh	r3, [r3, #10]
 800957a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800957e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6959      	ldr	r1, [r3, #20]
 800958a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800958e:	b29b      	uxth	r3, r3
 8009590:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009594:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009598:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800959c:	6800      	ldr	r0, [r0, #0]
 800959e:	f001 fac8 	bl	800ab32 <USB_WritePMA>
            ep->xfer_buff += len;
 80095a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	695a      	ldr	r2, [r3, #20]
 80095ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b2:	441a      	add	r2, r3
 80095b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80095c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	6a1a      	ldr	r2, [r3, #32]
 80095cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d90f      	bls.n	80095fc <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80095dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6a1a      	ldr	r2, [r3, #32]
 80095e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ec:	1ad2      	subs	r2, r2, r3
 80095ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	621a      	str	r2, [r3, #32]
 80095fa:	e00e      	b.n	800961a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80095fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800960c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2200      	movs	r2, #0
 8009618:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800961a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800961e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	785b      	ldrb	r3, [r3, #1]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d16d      	bne.n	8009706 <USB_EPStartXfer+0x49c>
 800962a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800962e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	61bb      	str	r3, [r7, #24]
 8009636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800963a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009644:	b29b      	uxth	r3, r3
 8009646:	461a      	mov	r2, r3
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	4413      	add	r3, r2
 800964c:	61bb      	str	r3, [r7, #24]
 800964e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	011a      	lsls	r2, r3, #4
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	4413      	add	r3, r2
 8009660:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009664:	617b      	str	r3, [r7, #20]
 8009666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800966a:	2b00      	cmp	r3, #0
 800966c:	d112      	bne.n	8009694 <USB_EPStartXfer+0x42a>
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009678:	b29a      	uxth	r2, r3
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	801a      	strh	r2, [r3, #0]
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	881b      	ldrh	r3, [r3, #0]
 8009682:	b29b      	uxth	r3, r3
 8009684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800968c:	b29a      	uxth	r2, r3
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	801a      	strh	r2, [r3, #0]
 8009692:	e063      	b.n	800975c <USB_EPStartXfer+0x4f2>
 8009694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009698:	2b3e      	cmp	r3, #62	; 0x3e
 800969a:	d817      	bhi.n	80096cc <USB_EPStartXfer+0x462>
 800969c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a0:	085b      	lsrs	r3, r3, #1
 80096a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80096a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d004      	beq.n	80096bc <USB_EPStartXfer+0x452>
 80096b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096b6:	3301      	adds	r3, #1
 80096b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80096bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	029b      	lsls	r3, r3, #10
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	801a      	strh	r2, [r3, #0]
 80096ca:	e047      	b.n	800975c <USB_EPStartXfer+0x4f2>
 80096cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096d0:	095b      	lsrs	r3, r3, #5
 80096d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80096d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096da:	f003 031f 	and.w	r3, r3, #31
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d104      	bne.n	80096ec <USB_EPStartXfer+0x482>
 80096e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096e6:	3b01      	subs	r3, #1
 80096e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80096ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	029b      	lsls	r3, r3, #10
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096fe:	b29a      	uxth	r2, r3
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	801a      	strh	r2, [r3, #0]
 8009704:	e02a      	b.n	800975c <USB_EPStartXfer+0x4f2>
 8009706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	785b      	ldrb	r3, [r3, #1]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d122      	bne.n	800975c <USB_EPStartXfer+0x4f2>
 8009716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800971a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	623b      	str	r3, [r7, #32]
 8009722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009730:	b29b      	uxth	r3, r3
 8009732:	461a      	mov	r2, r3
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	4413      	add	r3, r2
 8009738:	623b      	str	r3, [r7, #32]
 800973a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800973e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	011a      	lsls	r2, r3, #4
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	4413      	add	r3, r2
 800974c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009750:	61fb      	str	r3, [r7, #28]
 8009752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009756:	b29a      	uxth	r2, r3
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800975c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	891b      	ldrh	r3, [r3, #8]
 8009768:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800976c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6959      	ldr	r1, [r3, #20]
 8009778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800977c:	b29b      	uxth	r3, r3
 800977e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009782:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009786:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800978a:	6800      	ldr	r0, [r0, #0]
 800978c:	f001 f9d1 	bl	800ab32 <USB_WritePMA>
 8009790:	e3c6      	b.n	8009f20 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	785b      	ldrb	r3, [r3, #1]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d16d      	bne.n	800987e <USB_EPStartXfer+0x614>
 80097a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80097ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097bc:	b29b      	uxth	r3, r3
 80097be:	461a      	mov	r2, r3
 80097c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097c2:	4413      	add	r3, r2
 80097c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80097c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	011a      	lsls	r2, r3, #4
 80097d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097d6:	4413      	add	r3, r2
 80097d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097dc:	647b      	str	r3, [r7, #68]	; 0x44
 80097de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d112      	bne.n	800980c <USB_EPStartXfer+0x5a2>
 80097e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097f4:	801a      	strh	r2, [r3, #0]
 80097f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009804:	b29a      	uxth	r2, r3
 8009806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009808:	801a      	strh	r2, [r3, #0]
 800980a:	e063      	b.n	80098d4 <USB_EPStartXfer+0x66a>
 800980c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009810:	2b3e      	cmp	r3, #62	; 0x3e
 8009812:	d817      	bhi.n	8009844 <USB_EPStartXfer+0x5da>
 8009814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009818:	085b      	lsrs	r3, r3, #1
 800981a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800981e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d004      	beq.n	8009834 <USB_EPStartXfer+0x5ca>
 800982a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800982e:	3301      	adds	r3, #1
 8009830:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009834:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009838:	b29b      	uxth	r3, r3
 800983a:	029b      	lsls	r3, r3, #10
 800983c:	b29a      	uxth	r2, r3
 800983e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009840:	801a      	strh	r2, [r3, #0]
 8009842:	e047      	b.n	80098d4 <USB_EPStartXfer+0x66a>
 8009844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009848:	095b      	lsrs	r3, r3, #5
 800984a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800984e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009852:	f003 031f 	and.w	r3, r3, #31
 8009856:	2b00      	cmp	r3, #0
 8009858:	d104      	bne.n	8009864 <USB_EPStartXfer+0x5fa>
 800985a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800985e:	3b01      	subs	r3, #1
 8009860:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009864:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009868:	b29b      	uxth	r3, r3
 800986a:	029b      	lsls	r3, r3, #10
 800986c:	b29b      	uxth	r3, r3
 800986e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009876:	b29a      	uxth	r2, r3
 8009878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800987a:	801a      	strh	r2, [r3, #0]
 800987c:	e02a      	b.n	80098d4 <USB_EPStartXfer+0x66a>
 800987e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	785b      	ldrb	r3, [r3, #1]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d122      	bne.n	80098d4 <USB_EPStartXfer+0x66a>
 800988e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009892:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	653b      	str	r3, [r7, #80]	; 0x50
 800989a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	461a      	mov	r2, r3
 80098ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098ae:	4413      	add	r3, r2
 80098b0:	653b      	str	r3, [r7, #80]	; 0x50
 80098b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	011a      	lsls	r2, r3, #4
 80098c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098c2:	4413      	add	r3, r2
 80098c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80098d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	891b      	ldrh	r3, [r3, #8]
 80098e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6959      	ldr	r1, [r3, #20]
 80098f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80098fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80098fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009902:	6800      	ldr	r0, [r0, #0]
 8009904:	f001 f915 	bl	800ab32 <USB_WritePMA>
            ep->xfer_buff += len;
 8009908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800990c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	695a      	ldr	r2, [r3, #20]
 8009914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009918:	441a      	add	r2, r3
 800991a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800992a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6a1a      	ldr	r2, [r3, #32]
 8009932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	429a      	cmp	r2, r3
 8009940:	d90f      	bls.n	8009962 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8009942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6a1a      	ldr	r2, [r3, #32]
 800994e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009952:	1ad2      	subs	r2, r2, r3
 8009954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	621a      	str	r2, [r3, #32]
 8009960:	e00e      	b.n	8009980 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8009962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6a1b      	ldr	r3, [r3, #32]
 800996e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2200      	movs	r2, #0
 800997e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	643b      	str	r3, [r7, #64]	; 0x40
 800998c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	785b      	ldrb	r3, [r3, #1]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d16d      	bne.n	8009a78 <USB_EPStartXfer+0x80e>
 800999c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80099a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	461a      	mov	r2, r3
 80099ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099bc:	4413      	add	r3, r2
 80099be:	63bb      	str	r3, [r7, #56]	; 0x38
 80099c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	011a      	lsls	r2, r3, #4
 80099ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d0:	4413      	add	r3, r2
 80099d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099d6:	637b      	str	r3, [r7, #52]	; 0x34
 80099d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d112      	bne.n	8009a06 <USB_EPStartXfer+0x79c>
 80099e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ee:	801a      	strh	r2, [r3, #0]
 80099f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a02:	801a      	strh	r2, [r3, #0]
 8009a04:	e05d      	b.n	8009ac2 <USB_EPStartXfer+0x858>
 8009a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a0a:	2b3e      	cmp	r3, #62	; 0x3e
 8009a0c:	d817      	bhi.n	8009a3e <USB_EPStartXfer+0x7d4>
 8009a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a12:	085b      	lsrs	r3, r3, #1
 8009a14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d004      	beq.n	8009a2e <USB_EPStartXfer+0x7c4>
 8009a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a28:	3301      	adds	r3, #1
 8009a2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	029b      	lsls	r3, r3, #10
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3a:	801a      	strh	r2, [r3, #0]
 8009a3c:	e041      	b.n	8009ac2 <USB_EPStartXfer+0x858>
 8009a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a42:	095b      	lsrs	r3, r3, #5
 8009a44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a4c:	f003 031f 	and.w	r3, r3, #31
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d104      	bne.n	8009a5e <USB_EPStartXfer+0x7f4>
 8009a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	029b      	lsls	r3, r3, #10
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a74:	801a      	strh	r2, [r3, #0]
 8009a76:	e024      	b.n	8009ac2 <USB_EPStartXfer+0x858>
 8009a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	785b      	ldrb	r3, [r3, #1]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d11c      	bne.n	8009ac2 <USB_EPStartXfer+0x858>
 8009a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	461a      	mov	r2, r3
 8009a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a9c:	4413      	add	r3, r2
 8009a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8009aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	011a      	lsls	r2, r3, #4
 8009aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	895b      	ldrh	r3, [r3, #10]
 8009ace:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6959      	ldr	r1, [r3, #20]
 8009ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ae8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009aec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009af0:	6800      	ldr	r0, [r0, #0]
 8009af2:	f001 f81e 	bl	800ab32 <USB_WritePMA>
 8009af6:	e213      	b.n	8009f20 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6a1b      	ldr	r3, [r3, #32]
 8009b04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4413      	add	r3, r2
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b2e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	441a      	add	r2, r3
 8009b4c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	461a      	mov	r2, r3
 8009b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b84:	4413      	add	r3, r2
 8009b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	011a      	lsls	r2, r3, #4
 8009b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b98:	4413      	add	r3, r2
 8009b9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ba8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	891b      	ldrh	r3, [r3, #8]
 8009bb6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6959      	ldr	r1, [r3, #20]
 8009bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009bd0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009bd4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009bd8:	6800      	ldr	r0, [r0, #0]
 8009bda:	f000 ffaa 	bl	800ab32 <USB_WritePMA>
 8009bde:	e19f      	b.n	8009f20 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	6a1a      	ldr	r2, [r3, #32]
 8009bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bf0:	1ad2      	subs	r2, r2, r3
 8009bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 80bc 	beq.w	8009d9e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	673b      	str	r3, [r7, #112]	; 0x70
 8009c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	785b      	ldrb	r3, [r3, #1]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d16d      	bne.n	8009d1e <USB_EPStartXfer+0xab4>
 8009c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	461a      	mov	r2, r3
 8009c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c62:	4413      	add	r3, r2
 8009c64:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	011a      	lsls	r2, r3, #4
 8009c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c76:	4413      	add	r3, r2
 8009c78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8009c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d112      	bne.n	8009cac <USB_EPStartXfer+0xa42>
 8009c86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c94:	801a      	strh	r2, [r3, #0]
 8009c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ca8:	801a      	strh	r2, [r3, #0]
 8009caa:	e05d      	b.n	8009d68 <USB_EPStartXfer+0xafe>
 8009cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb0:	2b3e      	cmp	r3, #62	; 0x3e
 8009cb2:	d817      	bhi.n	8009ce4 <USB_EPStartXfer+0xa7a>
 8009cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb8:	085b      	lsrs	r3, r3, #1
 8009cba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d004      	beq.n	8009cd4 <USB_EPStartXfer+0xa6a>
 8009cca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009cce:	3301      	adds	r3, #1
 8009cd0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009cd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	029b      	lsls	r3, r3, #10
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ce0:	801a      	strh	r2, [r3, #0]
 8009ce2:	e041      	b.n	8009d68 <USB_EPStartXfer+0xafe>
 8009ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ce8:	095b      	lsrs	r3, r3, #5
 8009cea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cf2:	f003 031f 	and.w	r3, r3, #31
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d104      	bne.n	8009d04 <USB_EPStartXfer+0xa9a>
 8009cfa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009d04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	029b      	lsls	r3, r3, #10
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d1a:	801a      	strh	r2, [r3, #0]
 8009d1c:	e024      	b.n	8009d68 <USB_EPStartXfer+0xafe>
 8009d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	785b      	ldrb	r3, [r3, #1]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d11c      	bne.n	8009d68 <USB_EPStartXfer+0xafe>
 8009d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	461a      	mov	r2, r3
 8009d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d42:	4413      	add	r3, r2
 8009d44:	673b      	str	r3, [r7, #112]	; 0x70
 8009d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	011a      	lsls	r2, r3, #4
 8009d54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d56:	4413      	add	r3, r2
 8009d58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	895b      	ldrh	r3, [r3, #10]
 8009d74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6959      	ldr	r1, [r3, #20]
 8009d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009d8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009d92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009d96:	6800      	ldr	r0, [r0, #0]
 8009d98:	f000 fecb 	bl	800ab32 <USB_WritePMA>
 8009d9c:	e0c0      	b.n	8009f20 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	785b      	ldrb	r3, [r3, #1]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d16d      	bne.n	8009e8a <USB_EPStartXfer+0xc20>
 8009dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009db2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	461a      	mov	r2, r3
 8009dcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009dce:	4413      	add	r3, r2
 8009dd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	011a      	lsls	r2, r3, #4
 8009de0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009de2:	4413      	add	r3, r2
 8009de4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009de8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d112      	bne.n	8009e18 <USB_EPStartXfer+0xbae>
 8009df2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e00:	801a      	strh	r2, [r3, #0]
 8009e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e04:	881b      	ldrh	r3, [r3, #0]
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e14:	801a      	strh	r2, [r3, #0]
 8009e16:	e069      	b.n	8009eec <USB_EPStartXfer+0xc82>
 8009e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e1c:	2b3e      	cmp	r3, #62	; 0x3e
 8009e1e:	d817      	bhi.n	8009e50 <USB_EPStartXfer+0xbe6>
 8009e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e24:	085b      	lsrs	r3, r3, #1
 8009e26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d004      	beq.n	8009e40 <USB_EPStartXfer+0xbd6>
 8009e36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	029b      	lsls	r3, r3, #10
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e4c:	801a      	strh	r2, [r3, #0]
 8009e4e:	e04d      	b.n	8009eec <USB_EPStartXfer+0xc82>
 8009e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e54:	095b      	lsrs	r3, r3, #5
 8009e56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e5e:	f003 031f 	and.w	r3, r3, #31
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d104      	bne.n	8009e70 <USB_EPStartXfer+0xc06>
 8009e66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	029b      	lsls	r3, r3, #10
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e86:	801a      	strh	r2, [r3, #0]
 8009e88:	e030      	b.n	8009eec <USB_EPStartXfer+0xc82>
 8009e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	785b      	ldrb	r3, [r3, #1]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d128      	bne.n	8009eec <USB_EPStartXfer+0xc82>
 8009e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	461a      	mov	r2, r3
 8009eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	011a      	lsls	r2, r3, #4
 8009ed2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009eea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	891b      	ldrh	r3, [r3, #8]
 8009ef8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	6959      	ldr	r1, [r3, #20]
 8009f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009f12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009f16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009f1a:	6800      	ldr	r0, [r0, #0]
 8009f1c:	f000 fe09 	bl	800ab32 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	881b      	ldrh	r3, [r3, #0]
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f46:	817b      	strh	r3, [r7, #10]
 8009f48:	897b      	ldrh	r3, [r7, #10]
 8009f4a:	f083 0310 	eor.w	r3, r3, #16
 8009f4e:	817b      	strh	r3, [r7, #10]
 8009f50:	897b      	ldrh	r3, [r7, #10]
 8009f52:	f083 0320 	eor.w	r3, r3, #32
 8009f56:	817b      	strh	r3, [r7, #10]
 8009f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	441a      	add	r2, r3
 8009f72:	897b      	ldrh	r3, [r7, #10]
 8009f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	8013      	strh	r3, [r2, #0]
 8009f88:	f000 bc9f 	b.w	800a8ca <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	7b1b      	ldrb	r3, [r3, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f040 80ae 	bne.w	800a0fa <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	699a      	ldr	r2, [r3, #24]
 8009faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d917      	bls.n	8009fea <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8009fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	699a      	ldr	r2, [r3, #24]
 8009fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fda:	1ad2      	subs	r2, r2, r3
 8009fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	619a      	str	r2, [r3, #24]
 8009fe8:	e00e      	b.n	800a008 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8009fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2200      	movs	r2, #0
 800a006:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a00c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a01a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a024:	b29b      	uxth	r3, r3
 800a026:	461a      	mov	r2, r3
 800a028:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a02c:	4413      	add	r3, r2
 800a02e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	011a      	lsls	r2, r3, #4
 800a040:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a044:	4413      	add	r3, r2
 800a046:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a04a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a052:	2b00      	cmp	r3, #0
 800a054:	d116      	bne.n	800a084 <USB_EPStartXfer+0xe1a>
 800a056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a05a:	881b      	ldrh	r3, [r3, #0]
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a062:	b29a      	uxth	r2, r3
 800a064:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a068:	801a      	strh	r2, [r3, #0]
 800a06a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	b29b      	uxth	r3, r3
 800a072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a080:	801a      	strh	r2, [r3, #0]
 800a082:	e3e8      	b.n	800a856 <USB_EPStartXfer+0x15ec>
 800a084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a088:	2b3e      	cmp	r3, #62	; 0x3e
 800a08a:	d818      	bhi.n	800a0be <USB_EPStartXfer+0xe54>
 800a08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a090:	085b      	lsrs	r3, r3, #1
 800a092:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a09a:	f003 0301 	and.w	r3, r3, #1
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d004      	beq.n	800a0ac <USB_EPStartXfer+0xe42>
 800a0a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	029b      	lsls	r3, r3, #10
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0ba:	801a      	strh	r2, [r3, #0]
 800a0bc:	e3cb      	b.n	800a856 <USB_EPStartXfer+0x15ec>
 800a0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c2:	095b      	lsrs	r3, r3, #5
 800a0c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0cc:	f003 031f 	and.w	r3, r3, #31
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d104      	bne.n	800a0de <USB_EPStartXfer+0xe74>
 800a0d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	029b      	lsls	r3, r3, #10
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0f6:	801a      	strh	r2, [r3, #0]
 800a0f8:	e3ad      	b.n	800a856 <USB_EPStartXfer+0x15ec>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	78db      	ldrb	r3, [r3, #3]
 800a106:	2b02      	cmp	r3, #2
 800a108:	f040 8200 	bne.w	800a50c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a10c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	785b      	ldrb	r3, [r3, #1]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f040 8091 	bne.w	800a240 <USB_EPStartXfer+0xfd6>
 800a11e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a12c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a130:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	461a      	mov	r2, r3
 800a13e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a142:	4413      	add	r3, r2
 800a144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a14c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	011a      	lsls	r2, r3, #4
 800a156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a15a:	4413      	add	r3, r2
 800a15c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d116      	bne.n	800a1a2 <USB_EPStartXfer+0xf38>
 800a174:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a180:	b29a      	uxth	r2, r3
 800a182:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a186:	801a      	strh	r2, [r3, #0]
 800a188:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a18c:	881b      	ldrh	r3, [r3, #0]
 800a18e:	b29b      	uxth	r3, r3
 800a190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a198:	b29a      	uxth	r2, r3
 800a19a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a19e:	801a      	strh	r2, [r3, #0]
 800a1a0:	e083      	b.n	800a2aa <USB_EPStartXfer+0x1040>
 800a1a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	2b3e      	cmp	r3, #62	; 0x3e
 800a1b0:	d820      	bhi.n	800a1f4 <USB_EPStartXfer+0xf8a>
 800a1b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	085b      	lsrs	r3, r3, #1
 800a1c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a1c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	f003 0301 	and.w	r3, r3, #1
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d004      	beq.n	800a1e2 <USB_EPStartXfer+0xf78>
 800a1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1dc:	3301      	adds	r3, #1
 800a1de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	029b      	lsls	r3, r3, #10
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a1f0:	801a      	strh	r2, [r3, #0]
 800a1f2:	e05a      	b.n	800a2aa <USB_EPStartXfer+0x1040>
 800a1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	095b      	lsrs	r3, r3, #5
 800a202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	f003 031f 	and.w	r3, r3, #31
 800a216:	2b00      	cmp	r3, #0
 800a218:	d104      	bne.n	800a224 <USB_EPStartXfer+0xfba>
 800a21a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a21e:	3b01      	subs	r3, #1
 800a220:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a228:	b29b      	uxth	r3, r3
 800a22a:	029b      	lsls	r3, r3, #10
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a236:	b29a      	uxth	r2, r3
 800a238:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a23c:	801a      	strh	r2, [r3, #0]
 800a23e:	e034      	b.n	800a2aa <USB_EPStartXfer+0x1040>
 800a240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	785b      	ldrb	r3, [r3, #1]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d12c      	bne.n	800a2aa <USB_EPStartXfer+0x1040>
 800a250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a254:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	461a      	mov	r2, r3
 800a270:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a274:	4413      	add	r3, r2
 800a276:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	011a      	lsls	r2, r3, #4
 800a288:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a28c:	4413      	add	r3, r2
 800a28e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a2a8:	801a      	strh	r2, [r3, #0]
 800a2aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a2b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	785b      	ldrb	r3, [r3, #1]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f040 8091 	bne.w	800a3ec <USB_EPStartXfer+0x1182>
 800a2ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	011a      	lsls	r2, r3, #4
 800a302:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a306:	4413      	add	r3, r2
 800a308:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a30c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d116      	bne.n	800a34e <USB_EPStartXfer+0x10e4>
 800a320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a324:	881b      	ldrh	r3, [r3, #0]
 800a326:	b29b      	uxth	r3, r3
 800a328:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a332:	801a      	strh	r2, [r3, #0]
 800a334:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a338:	881b      	ldrh	r3, [r3, #0]
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a344:	b29a      	uxth	r2, r3
 800a346:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a34a:	801a      	strh	r2, [r3, #0]
 800a34c:	e07c      	b.n	800a448 <USB_EPStartXfer+0x11de>
 800a34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	2b3e      	cmp	r3, #62	; 0x3e
 800a35c:	d820      	bhi.n	800a3a0 <USB_EPStartXfer+0x1136>
 800a35e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	085b      	lsrs	r3, r3, #1
 800a36c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	2b00      	cmp	r3, #0
 800a382:	d004      	beq.n	800a38e <USB_EPStartXfer+0x1124>
 800a384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a388:	3301      	adds	r3, #1
 800a38a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a38e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a392:	b29b      	uxth	r3, r3
 800a394:	029b      	lsls	r3, r3, #10
 800a396:	b29a      	uxth	r2, r3
 800a398:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a39c:	801a      	strh	r2, [r3, #0]
 800a39e:	e053      	b.n	800a448 <USB_EPStartXfer+0x11de>
 800a3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	095b      	lsrs	r3, r3, #5
 800a3ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	f003 031f 	and.w	r3, r3, #31
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d104      	bne.n	800a3d0 <USB_EPStartXfer+0x1166>
 800a3c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	029b      	lsls	r3, r3, #10
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3e8:	801a      	strh	r2, [r3, #0]
 800a3ea:	e02d      	b.n	800a448 <USB_EPStartXfer+0x11de>
 800a3ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	785b      	ldrb	r3, [r3, #1]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d125      	bne.n	800a448 <USB_EPStartXfer+0x11de>
 800a3fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	461a      	mov	r2, r3
 800a40e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a412:	4413      	add	r3, r2
 800a414:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a41c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	011a      	lsls	r2, r3, #4
 800a426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a42a:	4413      	add	r3, r2
 800a42c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a430:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	b29a      	uxth	r2, r3
 800a442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a446:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a44c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	69db      	ldr	r3, [r3, #28]
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 81fe 	beq.w	800a856 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a45e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	4413      	add	r3, r2
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a47a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a47e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a482:	2b00      	cmp	r3, #0
 800a484:	d005      	beq.n	800a492 <USB_EPStartXfer+0x1228>
 800a486:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d10d      	bne.n	800a4ae <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a492:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f040 81db 	bne.w	800a856 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a4a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f040 81d4 	bne.w	800a856 <USB_EPStartXfer+0x15ec>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a4ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	4413      	add	r3, r2
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4d4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a4d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	441a      	add	r2, r3
 800a4f2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a4f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a502:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a506:	b29b      	uxth	r3, r3
 800a508:	8013      	strh	r3, [r2, #0]
 800a50a:	e1a4      	b.n	800a856 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	78db      	ldrb	r3, [r3, #3]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	f040 819a 	bne.w	800a852 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a51e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	699a      	ldr	r2, [r3, #24]
 800a52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	429a      	cmp	r2, r3
 800a538:	d917      	bls.n	800a56a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800a53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a53e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a54e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	699a      	ldr	r2, [r3, #24]
 800a556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a55a:	1ad2      	subs	r2, r2, r3
 800a55c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	619a      	str	r2, [r3, #24]
 800a568:	e00e      	b.n	800a588 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800a56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a56e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a57a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a57e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2200      	movs	r2, #0
 800a586:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a58c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	785b      	ldrb	r3, [r3, #1]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d178      	bne.n	800a68a <USB_EPStartXfer+0x1420>
 800a598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a59c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a5bc:	4413      	add	r3, r2
 800a5be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a5c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	011a      	lsls	r2, r3, #4
 800a5d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a5da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d116      	bne.n	800a614 <USB_EPStartXfer+0x13aa>
 800a5e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5ea:	881b      	ldrh	r3, [r3, #0]
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5f8:	801a      	strh	r2, [r3, #0]
 800a5fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5fe:	881b      	ldrh	r3, [r3, #0]
 800a600:	b29b      	uxth	r3, r3
 800a602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a610:	801a      	strh	r2, [r3, #0]
 800a612:	e06b      	b.n	800a6ec <USB_EPStartXfer+0x1482>
 800a614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a618:	2b3e      	cmp	r3, #62	; 0x3e
 800a61a:	d818      	bhi.n	800a64e <USB_EPStartXfer+0x13e4>
 800a61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a620:	085b      	lsrs	r3, r3, #1
 800a622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d004      	beq.n	800a63c <USB_EPStartXfer+0x13d2>
 800a632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a636:	3301      	adds	r3, #1
 800a638:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a63c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a640:	b29b      	uxth	r3, r3
 800a642:	029b      	lsls	r3, r3, #10
 800a644:	b29a      	uxth	r2, r3
 800a646:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a64a:	801a      	strh	r2, [r3, #0]
 800a64c:	e04e      	b.n	800a6ec <USB_EPStartXfer+0x1482>
 800a64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a652:	095b      	lsrs	r3, r3, #5
 800a654:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a65c:	f003 031f 	and.w	r3, r3, #31
 800a660:	2b00      	cmp	r3, #0
 800a662:	d104      	bne.n	800a66e <USB_EPStartXfer+0x1404>
 800a664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a668:	3b01      	subs	r3, #1
 800a66a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a66e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a672:	b29b      	uxth	r3, r3
 800a674:	029b      	lsls	r3, r3, #10
 800a676:	b29b      	uxth	r3, r3
 800a678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a67c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a680:	b29a      	uxth	r2, r3
 800a682:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a686:	801a      	strh	r2, [r3, #0]
 800a688:	e030      	b.n	800a6ec <USB_EPStartXfer+0x1482>
 800a68a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	785b      	ldrb	r3, [r3, #1]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d128      	bne.n	800a6ec <USB_EPStartXfer+0x1482>
 800a69a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a69e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a6a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6be:	4413      	add	r3, r2
 800a6c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	011a      	lsls	r2, r3, #4
 800a6d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a6dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a6ea:	801a      	strh	r2, [r3, #0]
 800a6ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a6fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	785b      	ldrb	r3, [r3, #1]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d178      	bne.n	800a7fc <USB_EPStartXfer+0x1592>
 800a70a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a70e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a71c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a726:	b29b      	uxth	r3, r3
 800a728:	461a      	mov	r2, r3
 800a72a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a72e:	4413      	add	r3, r2
 800a730:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	011a      	lsls	r2, r3, #4
 800a742:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a746:	4413      	add	r3, r2
 800a748:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a74c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a754:	2b00      	cmp	r3, #0
 800a756:	d116      	bne.n	800a786 <USB_EPStartXfer+0x151c>
 800a758:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	b29b      	uxth	r3, r3
 800a760:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a764:	b29a      	uxth	r2, r3
 800a766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a76a:	801a      	strh	r2, [r3, #0]
 800a76c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	b29b      	uxth	r3, r3
 800a774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a782:	801a      	strh	r2, [r3, #0]
 800a784:	e067      	b.n	800a856 <USB_EPStartXfer+0x15ec>
 800a786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a78a:	2b3e      	cmp	r3, #62	; 0x3e
 800a78c:	d818      	bhi.n	800a7c0 <USB_EPStartXfer+0x1556>
 800a78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a792:	085b      	lsrs	r3, r3, #1
 800a794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d004      	beq.n	800a7ae <USB_EPStartXfer+0x1544>
 800a7a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a7ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	029b      	lsls	r3, r3, #10
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a7bc:	801a      	strh	r2, [r3, #0]
 800a7be:	e04a      	b.n	800a856 <USB_EPStartXfer+0x15ec>
 800a7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7c4:	095b      	lsrs	r3, r3, #5
 800a7c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ce:	f003 031f 	and.w	r3, r3, #31
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d104      	bne.n	800a7e0 <USB_EPStartXfer+0x1576>
 800a7d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a7e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	029b      	lsls	r3, r3, #10
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a7f8:	801a      	strh	r2, [r3, #0]
 800a7fa:	e02c      	b.n	800a856 <USB_EPStartXfer+0x15ec>
 800a7fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	785b      	ldrb	r3, [r3, #1]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d124      	bne.n	800a856 <USB_EPStartXfer+0x15ec>
 800a80c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	461a      	mov	r2, r3
 800a81e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a822:	4413      	add	r3, r2
 800a824:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a82c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	011a      	lsls	r2, r3, #4
 800a836:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a83a:	4413      	add	r3, r2
 800a83c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a840:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a848:	b29a      	uxth	r2, r3
 800a84a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a84e:	801a      	strh	r2, [r3, #0]
 800a850:	e001      	b.n	800a856 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e03a      	b.n	800a8cc <USB_EPStartXfer+0x1662>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a85a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4413      	add	r3, r2
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	b29b      	uxth	r3, r3
 800a874:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a87c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a880:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a884:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a888:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a88c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a890:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a894:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	441a      	add	r2, r3
 800a8b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a8b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b085      	sub	sp, #20
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	785b      	ldrb	r3, [r3, #1]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d020      	beq.n	800a92a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8fe:	81bb      	strh	r3, [r7, #12]
 800a900:	89bb      	ldrh	r3, [r7, #12]
 800a902:	f083 0310 	eor.w	r3, r3, #16
 800a906:	81bb      	strh	r3, [r7, #12]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	441a      	add	r2, r3
 800a912:	89bb      	ldrh	r3, [r7, #12]
 800a914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a91c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a924:	b29b      	uxth	r3, r3
 800a926:	8013      	strh	r3, [r2, #0]
 800a928:	e01f      	b.n	800a96a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	881b      	ldrh	r3, [r3, #0]
 800a936:	b29b      	uxth	r3, r3
 800a938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a93c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a940:	81fb      	strh	r3, [r7, #14]
 800a942:	89fb      	ldrh	r3, [r7, #14]
 800a944:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a948:	81fb      	strh	r3, [r7, #14]
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	441a      	add	r2, r3
 800a954:	89fb      	ldrh	r3, [r7, #14]
 800a956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a95a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a95e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a966:	b29b      	uxth	r3, r3
 800a968:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3714      	adds	r7, #20
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a978:	b480      	push	{r7}
 800a97a:	b087      	sub	sp, #28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	7b1b      	ldrb	r3, [r3, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	f040 809d 	bne.w	800aac6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	785b      	ldrb	r3, [r3, #1]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d04c      	beq.n	800aa2e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4413      	add	r3, r2
 800a99e:	881b      	ldrh	r3, [r3, #0]
 800a9a0:	823b      	strh	r3, [r7, #16]
 800a9a2:	8a3b      	ldrh	r3, [r7, #16]
 800a9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d01b      	beq.n	800a9e4 <USB_EPClearStall+0x6c>
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	4413      	add	r3, r2
 800a9b6:	881b      	ldrh	r3, [r3, #0]
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9c2:	81fb      	strh	r3, [r7, #14]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	441a      	add	r2, r3
 800a9ce:	89fb      	ldrh	r3, [r7, #14]
 800a9d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	78db      	ldrb	r3, [r3, #3]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d06c      	beq.n	800aac6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa02:	81bb      	strh	r3, [r7, #12]
 800aa04:	89bb      	ldrh	r3, [r7, #12]
 800aa06:	f083 0320 	eor.w	r3, r3, #32
 800aa0a:	81bb      	strh	r3, [r7, #12]
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	441a      	add	r2, r3
 800aa16:	89bb      	ldrh	r3, [r7, #12]
 800aa18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	8013      	strh	r3, [r2, #0]
 800aa2c:	e04b      	b.n	800aac6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	881b      	ldrh	r3, [r3, #0]
 800aa3a:	82fb      	strh	r3, [r7, #22]
 800aa3c:	8afb      	ldrh	r3, [r7, #22]
 800aa3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d01b      	beq.n	800aa7e <USB_EPClearStall+0x106>
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4413      	add	r3, r2
 800aa50:	881b      	ldrh	r3, [r3, #0]
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa5c:	82bb      	strh	r3, [r7, #20]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	441a      	add	r2, r3
 800aa68:	8abb      	ldrh	r3, [r7, #20]
 800aa6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4413      	add	r3, r2
 800aa88:	881b      	ldrh	r3, [r3, #0]
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa94:	827b      	strh	r3, [r7, #18]
 800aa96:	8a7b      	ldrh	r3, [r7, #18]
 800aa98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa9c:	827b      	strh	r3, [r7, #18]
 800aa9e:	8a7b      	ldrh	r3, [r7, #18]
 800aaa0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aaa4:	827b      	strh	r3, [r7, #18]
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	441a      	add	r2, r3
 800aab0:	8a7b      	ldrh	r3, [r7, #18]
 800aab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aabe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	371c      	adds	r7, #28
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	460b      	mov	r3, r1
 800aade:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800aae0:	78fb      	ldrb	r3, [r7, #3]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d103      	bne.n	800aaee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2280      	movs	r2, #128	; 0x80
 800aaea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b085      	sub	sp, #20
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ab24:	68fb      	ldr	r3, [r7, #12]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ab32:	b480      	push	{r7}
 800ab34:	b08d      	sub	sp, #52	; 0x34
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	60f8      	str	r0, [r7, #12]
 800ab3a:	60b9      	str	r1, [r7, #8]
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	461a      	mov	r2, r3
 800ab40:	460b      	mov	r3, r1
 800ab42:	80fb      	strh	r3, [r7, #6]
 800ab44:	4613      	mov	r3, r2
 800ab46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ab48:	88bb      	ldrh	r3, [r7, #4]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	085b      	lsrs	r3, r3, #1
 800ab4e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ab58:	88fb      	ldrh	r3, [r7, #6]
 800ab5a:	005a      	lsls	r2, r3, #1
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab64:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab6a:	e01e      	b.n	800abaa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab74:	3301      	adds	r3, #1
 800ab76:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ab78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	021b      	lsls	r3, r3, #8
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	461a      	mov	r2, r3
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab90:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ab92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab94:	3302      	adds	r3, #2
 800ab96:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800ab98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9a:	3302      	adds	r3, #2
 800ab9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba0:	3301      	adds	r3, #1
 800aba2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800aba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba6:	3b01      	subs	r3, #1
 800aba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1dd      	bne.n	800ab6c <USB_WritePMA+0x3a>
  }
}
 800abb0:	bf00      	nop
 800abb2:	bf00      	nop
 800abb4:	3734      	adds	r7, #52	; 0x34
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800abbe:	b480      	push	{r7}
 800abc0:	b08b      	sub	sp, #44	; 0x2c
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	60f8      	str	r0, [r7, #12]
 800abc6:	60b9      	str	r1, [r7, #8]
 800abc8:	4611      	mov	r1, r2
 800abca:	461a      	mov	r2, r3
 800abcc:	460b      	mov	r3, r1
 800abce:	80fb      	strh	r3, [r7, #6]
 800abd0:	4613      	mov	r3, r2
 800abd2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800abd4:	88bb      	ldrh	r3, [r7, #4]
 800abd6:	085b      	lsrs	r3, r3, #1
 800abd8:	b29b      	uxth	r3, r3
 800abda:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800abe4:	88fb      	ldrh	r3, [r7, #6]
 800abe6:	005a      	lsls	r2, r3, #1
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abf0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	627b      	str	r3, [r7, #36]	; 0x24
 800abf6:	e01b      	b.n	800ac30 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800abf8:	6a3b      	ldr	r3, [r7, #32]
 800abfa:	881b      	ldrh	r3, [r3, #0]
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ac00:	6a3b      	ldr	r3, [r7, #32]
 800ac02:	3302      	adds	r3, #2
 800ac04:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	b2da      	uxtb	r2, r3
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	3301      	adds	r3, #1
 800ac12:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	0a1b      	lsrs	r3, r3, #8
 800ac18:	b2da      	uxtb	r2, r3
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	3301      	adds	r3, #1
 800ac22:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	3302      	adds	r3, #2
 800ac28:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1e0      	bne.n	800abf8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800ac36:	88bb      	ldrh	r3, [r7, #4]
 800ac38:	f003 0301 	and.w	r3, r3, #1
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d007      	beq.n	800ac52 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800ac42:	6a3b      	ldr	r3, [r7, #32]
 800ac44:	881b      	ldrh	r3, [r3, #0]
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	701a      	strb	r2, [r3, #0]
  }
}
 800ac52:	bf00      	nop
 800ac54:	372c      	adds	r7, #44	; 0x2c
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	460b      	mov	r3, r1
 800ac68:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	7c1b      	ldrb	r3, [r3, #16]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d115      	bne.n	800aca2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac7a:	2202      	movs	r2, #2
 800ac7c:	2181      	movs	r1, #129	; 0x81
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f001 ff73 	bl	800cb6a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2201      	movs	r2, #1
 800ac88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac8e:	2202      	movs	r2, #2
 800ac90:	2101      	movs	r1, #1
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f001 ff69 	bl	800cb6a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800aca0:	e012      	b.n	800acc8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aca2:	2340      	movs	r3, #64	; 0x40
 800aca4:	2202      	movs	r2, #2
 800aca6:	2181      	movs	r1, #129	; 0x81
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f001 ff5e 	bl	800cb6a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800acb4:	2340      	movs	r3, #64	; 0x40
 800acb6:	2202      	movs	r2, #2
 800acb8:	2101      	movs	r1, #1
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f001 ff55 	bl	800cb6a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800acc8:	2308      	movs	r3, #8
 800acca:	2203      	movs	r2, #3
 800accc:	2182      	movs	r1, #130	; 0x82
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f001 ff4b 	bl	800cb6a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800acda:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800acde:	f002 f86d 	bl	800cdbc <USBD_static_malloc>
 800ace2:	4602      	mov	r2, r0
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d102      	bne.n	800acfa <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800acf4:	2301      	movs	r3, #1
 800acf6:	73fb      	strb	r3, [r7, #15]
 800acf8:	e026      	b.n	800ad48 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad00:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	7c1b      	ldrb	r3, [r3, #16]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d109      	bne.n	800ad38 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad2e:	2101      	movs	r1, #1
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f002 f80c 	bl	800cd4e <USBD_LL_PrepareReceive>
 800ad36:	e007      	b.n	800ad48 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad3e:	2340      	movs	r3, #64	; 0x40
 800ad40:	2101      	movs	r1, #1
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f002 f803 	bl	800cd4e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ad48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b084      	sub	sp, #16
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ad62:	2181      	movs	r1, #129	; 0x81
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f001 ff26 	bl	800cbb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ad70:	2101      	movs	r1, #1
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f001 ff1f 	bl	800cbb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ad80:	2182      	movs	r1, #130	; 0x82
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f001 ff17 	bl	800cbb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00e      	beq.n	800adb6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ada8:	4618      	mov	r0, r3
 800adaa:	f002 f815 	bl	800cdd8 <USBD_static_free>
    pdev->pClassData = NULL;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800add2:	2300      	movs	r3, #0
 800add4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800add6:	2300      	movs	r3, #0
 800add8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d039      	beq.n	800ae5e <USBD_CDC_Setup+0x9e>
 800adea:	2b20      	cmp	r3, #32
 800adec:	d17f      	bne.n	800aeee <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	88db      	ldrh	r3, [r3, #6]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d029      	beq.n	800ae4a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	b25b      	sxtb	r3, r3
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	da11      	bge.n	800ae24 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800ae0c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	88d2      	ldrh	r2, [r2, #6]
 800ae12:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ae14:	6939      	ldr	r1, [r7, #16]
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	88db      	ldrh	r3, [r3, #6]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f001 fa14 	bl	800c24a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800ae22:	e06b      	b.n	800aefc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	785a      	ldrb	r2, [r3, #1]
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	88db      	ldrh	r3, [r3, #6]
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ae3a:	6939      	ldr	r1, [r7, #16]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	88db      	ldrh	r3, [r3, #6]
 800ae40:	461a      	mov	r2, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f001 fa2f 	bl	800c2a6 <USBD_CtlPrepareRx>
      break;
 800ae48:	e058      	b.n	800aefc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	683a      	ldr	r2, [r7, #0]
 800ae54:	7850      	ldrb	r0, [r2, #1]
 800ae56:	2200      	movs	r2, #0
 800ae58:	6839      	ldr	r1, [r7, #0]
 800ae5a:	4798      	blx	r3
      break;
 800ae5c:	e04e      	b.n	800aefc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	785b      	ldrb	r3, [r3, #1]
 800ae62:	2b0b      	cmp	r3, #11
 800ae64:	d02e      	beq.n	800aec4 <USBD_CDC_Setup+0x104>
 800ae66:	2b0b      	cmp	r3, #11
 800ae68:	dc38      	bgt.n	800aedc <USBD_CDC_Setup+0x11c>
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d002      	beq.n	800ae74 <USBD_CDC_Setup+0xb4>
 800ae6e:	2b0a      	cmp	r3, #10
 800ae70:	d014      	beq.n	800ae9c <USBD_CDC_Setup+0xdc>
 800ae72:	e033      	b.n	800aedc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	d107      	bne.n	800ae8e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ae7e:	f107 030c 	add.w	r3, r7, #12
 800ae82:	2202      	movs	r2, #2
 800ae84:	4619      	mov	r1, r3
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f001 f9df 	bl	800c24a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae8c:	e02e      	b.n	800aeec <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f001 f96f 	bl	800c174 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae96:	2302      	movs	r3, #2
 800ae98:	75fb      	strb	r3, [r7, #23]
          break;
 800ae9a:	e027      	b.n	800aeec <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d107      	bne.n	800aeb6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800aea6:	f107 030f 	add.w	r3, r7, #15
 800aeaa:	2201      	movs	r2, #1
 800aeac:	4619      	mov	r1, r3
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f001 f9cb 	bl	800c24a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aeb4:	e01a      	b.n	800aeec <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f001 f95b 	bl	800c174 <USBD_CtlError>
            ret = USBD_FAIL;
 800aebe:	2302      	movs	r3, #2
 800aec0:	75fb      	strb	r3, [r7, #23]
          break;
 800aec2:	e013      	b.n	800aeec <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeca:	2b03      	cmp	r3, #3
 800aecc:	d00d      	beq.n	800aeea <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f001 f94f 	bl	800c174 <USBD_CtlError>
            ret = USBD_FAIL;
 800aed6:	2302      	movs	r3, #2
 800aed8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aeda:	e006      	b.n	800aeea <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f001 f948 	bl	800c174 <USBD_CtlError>
          ret = USBD_FAIL;
 800aee4:	2302      	movs	r3, #2
 800aee6:	75fb      	strb	r3, [r7, #23]
          break;
 800aee8:	e000      	b.n	800aeec <USBD_CDC_Setup+0x12c>
          break;
 800aeea:	bf00      	nop
      }
      break;
 800aeec:	e006      	b.n	800aefc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f001 f93f 	bl	800c174 <USBD_CtlError>
      ret = USBD_FAIL;
 800aef6:	2302      	movs	r3, #2
 800aef8:	75fb      	strb	r3, [r7, #23]
      break;
 800aefa:	bf00      	nop
  }

  return ret;
 800aefc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3718      	adds	r7, #24
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b084      	sub	sp, #16
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	460b      	mov	r3, r1
 800af10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af18:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af20:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d03a      	beq.n	800afa2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800af2c:	78fa      	ldrb	r2, [r7, #3]
 800af2e:	6879      	ldr	r1, [r7, #4]
 800af30:	4613      	mov	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	440b      	add	r3, r1
 800af3a:	331c      	adds	r3, #28
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d029      	beq.n	800af96 <USBD_CDC_DataIn+0x90>
 800af42:	78fa      	ldrb	r2, [r7, #3]
 800af44:	6879      	ldr	r1, [r7, #4]
 800af46:	4613      	mov	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	440b      	add	r3, r1
 800af50:	331c      	adds	r3, #28
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	78f9      	ldrb	r1, [r7, #3]
 800af56:	68b8      	ldr	r0, [r7, #8]
 800af58:	460b      	mov	r3, r1
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	440b      	add	r3, r1
 800af5e:	00db      	lsls	r3, r3, #3
 800af60:	4403      	add	r3, r0
 800af62:	3338      	adds	r3, #56	; 0x38
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	fbb2 f1f3 	udiv	r1, r2, r3
 800af6a:	fb01 f303 	mul.w	r3, r1, r3
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	2b00      	cmp	r3, #0
 800af72:	d110      	bne.n	800af96 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800af74:	78fa      	ldrb	r2, [r7, #3]
 800af76:	6879      	ldr	r1, [r7, #4]
 800af78:	4613      	mov	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	440b      	add	r3, r1
 800af82:	331c      	adds	r3, #28
 800af84:	2200      	movs	r2, #0
 800af86:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af88:	78f9      	ldrb	r1, [r7, #3]
 800af8a:	2300      	movs	r3, #0
 800af8c:	2200      	movs	r2, #0
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f001 feba 	bl	800cd08 <USBD_LL_Transmit>
 800af94:	e003      	b.n	800af9e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800af9e:	2300      	movs	r3, #0
 800afa0:	e000      	b.n	800afa4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800afa2:	2302      	movs	r3, #2
  }
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	460b      	mov	r3, r1
 800afb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800afc0:	78fb      	ldrb	r3, [r7, #3]
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f001 fee5 	bl	800cd94 <USBD_LL_GetRxDataSize>
 800afca:	4602      	mov	r2, r0
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00d      	beq.n	800aff8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aff0:	4611      	mov	r1, r2
 800aff2:	4798      	blx	r3

    return USBD_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	e000      	b.n	800affa <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800aff8:	2302      	movs	r3, #2
  }
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b084      	sub	sp, #16
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b010:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d015      	beq.n	800b048 <USBD_CDC_EP0_RxReady+0x46>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b022:	2bff      	cmp	r3, #255	; 0xff
 800b024:	d010      	beq.n	800b048 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b034:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b03c:	b292      	uxth	r2, r2
 800b03e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	22ff      	movs	r2, #255	; 0xff
 800b044:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
	...

0800b054 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2243      	movs	r2, #67	; 0x43
 800b060:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b062:	4b03      	ldr	r3, [pc, #12]	; (800b070 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b064:	4618      	mov	r0, r3
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr
 800b070:	200000d4 	.word	0x200000d4

0800b074 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2243      	movs	r2, #67	; 0x43
 800b080:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b082:	4b03      	ldr	r3, [pc, #12]	; (800b090 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b084:	4618      	mov	r0, r3
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr
 800b090:	20000090 	.word	0x20000090

0800b094 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2243      	movs	r2, #67	; 0x43
 800b0a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b0a2:	4b03      	ldr	r3, [pc, #12]	; (800b0b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	20000118 	.word	0x20000118

0800b0b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	220a      	movs	r2, #10
 800b0c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b0c2:	4b03      	ldr	r3, [pc, #12]	; (800b0d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr
 800b0d0:	2000004c 	.word	0x2000004c

0800b0d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b0de:	2302      	movs	r3, #2
 800b0e0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d005      	beq.n	800b0f4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	683a      	ldr	r2, [r7, #0]
 800b0ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3714      	adds	r7, #20
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b102:	b480      	push	{r7}
 800b104:	b087      	sub	sp, #28
 800b106:	af00      	add	r7, sp, #0
 800b108:	60f8      	str	r0, [r7, #12]
 800b10a:	60b9      	str	r1, [r7, #8]
 800b10c:	4613      	mov	r3, r2
 800b10e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b116:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	68ba      	ldr	r2, [r7, #8]
 800b11c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b120:	88fa      	ldrh	r2, [r7, #6]
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	371c      	adds	r7, #28
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr

0800b136 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b136:	b480      	push	{r7}
 800b138:	b085      	sub	sp, #20
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b146:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	683a      	ldr	r2, [r7, #0]
 800b14c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3714      	adds	r7, #20
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b084      	sub	sp, #16
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b16c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b174:	2b00      	cmp	r3, #0
 800b176:	d01c      	beq.n	800b1b2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d115      	bne.n	800b1ae <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2201      	movs	r2, #1
 800b186:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	2181      	movs	r1, #129	; 0x81
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f001 fdaf 	bl	800cd08 <USBD_LL_Transmit>

      return USBD_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	e002      	b.n	800b1b4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e000      	b.n	800b1b4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b1b2:	2302      	movs	r3, #2
  }
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3710      	adds	r7, #16
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ca:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d017      	beq.n	800b206 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	7c1b      	ldrb	r3, [r3, #16]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d109      	bne.n	800b1f2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f001 fdaf 	bl	800cd4e <USBD_LL_PrepareReceive>
 800b1f0:	e007      	b.n	800b202 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1f8:	2340      	movs	r3, #64	; 0x40
 800b1fa:	2101      	movs	r1, #1
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f001 fda6 	bl	800cd4e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b202:	2300      	movs	r3, #0
 800b204:	e000      	b.n	800b208 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b206:	2302      	movs	r3, #2
  }
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	4613      	mov	r3, r2
 800b21c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d101      	bne.n	800b228 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b224:	2302      	movs	r3, #2
 800b226:	e01a      	b.n	800b25e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d003      	beq.n	800b23a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2200      	movs	r2, #0
 800b236:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d003      	beq.n	800b248 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	79fa      	ldrb	r2, [r7, #7]
 800b254:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f001 fc12 	bl	800ca80 <USBD_LL_Init>

  return USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b266:	b480      	push	{r7}
 800b268:	b085      	sub	sp, #20
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d006      	beq.n	800b288 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	73fb      	strb	r3, [r7, #15]
 800b286:	e001      	b.n	800b28c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b288:	2302      	movs	r3, #2
 800b28a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr

0800b29a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b082      	sub	sp, #8
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f001 fc46 	bl	800cb34 <USBD_LL_Start>

  return USBD_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b2b2:	b480      	push	{r7}
 800b2b4:	b083      	sub	sp, #12
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00c      	beq.n	800b2fc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	78fa      	ldrb	r2, [r7, #3]
 800b2ec:	4611      	mov	r1, r2
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	4798      	blx	r3
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d101      	bne.n	800b2fc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b082      	sub	sp, #8
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	460b      	mov	r3, r1
 800b310:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	78fa      	ldrb	r2, [r7, #3]
 800b31c:	4611      	mov	r1, r2
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	4798      	blx	r3

  return USBD_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3708      	adds	r7, #8
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b33c:	6839      	ldr	r1, [r7, #0]
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 fedb 	bl	800c0fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b352:	461a      	mov	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b360:	f003 031f 	and.w	r3, r3, #31
 800b364:	2b02      	cmp	r3, #2
 800b366:	d016      	beq.n	800b396 <USBD_LL_SetupStage+0x6a>
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d81c      	bhi.n	800b3a6 <USBD_LL_SetupStage+0x7a>
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <USBD_LL_SetupStage+0x4a>
 800b370:	2b01      	cmp	r3, #1
 800b372:	d008      	beq.n	800b386 <USBD_LL_SetupStage+0x5a>
 800b374:	e017      	b.n	800b3a6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f9ce 	bl	800b720 <USBD_StdDevReq>
      break;
 800b384:	e01a      	b.n	800b3bc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b38c:	4619      	mov	r1, r3
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 fa30 	bl	800b7f4 <USBD_StdItfReq>
      break;
 800b394:	e012      	b.n	800b3bc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fa70 	bl	800b884 <USBD_StdEPReq>
      break;
 800b3a4:	e00a      	b.n	800b3bc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b3ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f001 fc1d 	bl	800cbf4 <USBD_LL_StallEP>
      break;
 800b3ba:	bf00      	nop
  }

  return USBD_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b086      	sub	sp, #24
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	60f8      	str	r0, [r7, #12]
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	607a      	str	r2, [r7, #4]
 800b3d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b3d4:	7afb      	ldrb	r3, [r7, #11]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d14b      	bne.n	800b472 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b3e0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3e8:	2b03      	cmp	r3, #3
 800b3ea:	d134      	bne.n	800b456 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	68da      	ldr	r2, [r3, #12]
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d919      	bls.n	800b42c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	68da      	ldr	r2, [r3, #12]
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	1ad2      	subs	r2, r2, r3
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	68da      	ldr	r2, [r3, #12]
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b40e:	429a      	cmp	r2, r3
 800b410:	d203      	bcs.n	800b41a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b416:	b29b      	uxth	r3, r3
 800b418:	e002      	b.n	800b420 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b41e:	b29b      	uxth	r3, r3
 800b420:	461a      	mov	r2, r3
 800b422:	6879      	ldr	r1, [r7, #4]
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f000 ff5c 	bl	800c2e2 <USBD_CtlContinueRx>
 800b42a:	e038      	b.n	800b49e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00a      	beq.n	800b44e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d105      	bne.n	800b44e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f000 ff59 	bl	800c306 <USBD_CtlSendStatus>
 800b454:	e023      	b.n	800b49e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b45c:	2b05      	cmp	r3, #5
 800b45e:	d11e      	bne.n	800b49e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b468:	2100      	movs	r1, #0
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f001 fbc2 	bl	800cbf4 <USBD_LL_StallEP>
 800b470:	e015      	b.n	800b49e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b478:	699b      	ldr	r3, [r3, #24]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00d      	beq.n	800b49a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b484:	2b03      	cmp	r3, #3
 800b486:	d108      	bne.n	800b49a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	7afa      	ldrb	r2, [r7, #11]
 800b492:	4611      	mov	r1, r2
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	4798      	blx	r3
 800b498:	e001      	b.n	800b49e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b49a:	2302      	movs	r3, #2
 800b49c:	e000      	b.n	800b4a0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	607a      	str	r2, [r7, #4]
 800b4b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b4b6:	7afb      	ldrb	r3, [r7, #11]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d17f      	bne.n	800b5bc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3314      	adds	r3, #20
 800b4c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d15c      	bne.n	800b586 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	68da      	ldr	r2, [r3, #12]
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d915      	bls.n	800b504 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	68da      	ldr	r2, [r3, #12]
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	691b      	ldr	r3, [r3, #16]
 800b4e0:	1ad2      	subs	r2, r2, r3
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	6879      	ldr	r1, [r7, #4]
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f000 fec6 	bl	800c282 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f001 fc26 	bl	800cd4e <USBD_LL_PrepareReceive>
 800b502:	e04e      	b.n	800b5a2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	697a      	ldr	r2, [r7, #20]
 800b50a:	6912      	ldr	r2, [r2, #16]
 800b50c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b510:	fb01 f202 	mul.w	r2, r1, r2
 800b514:	1a9b      	subs	r3, r3, r2
 800b516:	2b00      	cmp	r3, #0
 800b518:	d11c      	bne.n	800b554 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	689a      	ldr	r2, [r3, #8]
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b522:	429a      	cmp	r2, r3
 800b524:	d316      	bcc.n	800b554 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	689a      	ldr	r2, [r3, #8]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b530:	429a      	cmp	r2, r3
 800b532:	d20f      	bcs.n	800b554 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b534:	2200      	movs	r2, #0
 800b536:	2100      	movs	r1, #0
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f000 fea2 	bl	800c282 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2200      	movs	r2, #0
 800b542:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b546:	2300      	movs	r3, #0
 800b548:	2200      	movs	r2, #0
 800b54a:	2100      	movs	r1, #0
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f001 fbfe 	bl	800cd4e <USBD_LL_PrepareReceive>
 800b552:	e026      	b.n	800b5a2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00a      	beq.n	800b576 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b566:	2b03      	cmp	r3, #3
 800b568:	d105      	bne.n	800b576 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b576:	2180      	movs	r1, #128	; 0x80
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f001 fb3b 	bl	800cbf4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f000 fed4 	bl	800c32c <USBD_CtlReceiveStatus>
 800b584:	e00d      	b.n	800b5a2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b58c:	2b04      	cmp	r3, #4
 800b58e:	d004      	beq.n	800b59a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b596:	2b00      	cmp	r3, #0
 800b598:	d103      	bne.n	800b5a2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b59a:	2180      	movs	r1, #128	; 0x80
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f001 fb29 	bl	800cbf4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d11d      	bne.n	800b5e8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f7ff fe80 	bl	800b2b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b5ba:	e015      	b.n	800b5e8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00d      	beq.n	800b5e4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	d108      	bne.n	800b5e4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5d8:	695b      	ldr	r3, [r3, #20]
 800b5da:	7afa      	ldrb	r2, [r7, #11]
 800b5dc:	4611      	mov	r1, r2
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	4798      	blx	r3
 800b5e2:	e001      	b.n	800b5e8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b5e4:	2302      	movs	r3, #2
 800b5e6:	e000      	b.n	800b5ea <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3718      	adds	r7, #24
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b082      	sub	sp, #8
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5fa:	2340      	movs	r3, #64	; 0x40
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	2100      	movs	r1, #0
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f001 fab2 	bl	800cb6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2201      	movs	r2, #1
 800b60a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2240      	movs	r2, #64	; 0x40
 800b612:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b616:	2340      	movs	r3, #64	; 0x40
 800b618:	2200      	movs	r2, #0
 800b61a:	2180      	movs	r1, #128	; 0x80
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f001 faa4 	bl	800cb6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2240      	movs	r2, #64	; 0x40
 800b62c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b652:	2b00      	cmp	r3, #0
 800b654:	d009      	beq.n	800b66a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	6852      	ldr	r2, [r2, #4]
 800b662:	b2d2      	uxtb	r2, r2
 800b664:	4611      	mov	r1, r2
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	4798      	blx	r3
  }

  return USBD_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	460b      	mov	r3, r1
 800b67e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	78fa      	ldrb	r2, [r7, #3]
 800b684:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2204      	movs	r2, #4
 800b6ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6cc:	2b04      	cmp	r3, #4
 800b6ce:	d105      	bne.n	800b6dc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b082      	sub	sp, #8
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6f8:	2b03      	cmp	r3, #3
 800b6fa:	d10b      	bne.n	800b714 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b702:	69db      	ldr	r3, [r3, #28]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d005      	beq.n	800b714 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b70e:	69db      	ldr	r3, [r3, #28]
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
	...

0800b720 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b736:	2b40      	cmp	r3, #64	; 0x40
 800b738:	d005      	beq.n	800b746 <USBD_StdDevReq+0x26>
 800b73a:	2b40      	cmp	r3, #64	; 0x40
 800b73c:	d84f      	bhi.n	800b7de <USBD_StdDevReq+0xbe>
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d009      	beq.n	800b756 <USBD_StdDevReq+0x36>
 800b742:	2b20      	cmp	r3, #32
 800b744:	d14b      	bne.n	800b7de <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	6839      	ldr	r1, [r7, #0]
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	4798      	blx	r3
      break;
 800b754:	e048      	b.n	800b7e8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	785b      	ldrb	r3, [r3, #1]
 800b75a:	2b09      	cmp	r3, #9
 800b75c:	d839      	bhi.n	800b7d2 <USBD_StdDevReq+0xb2>
 800b75e:	a201      	add	r2, pc, #4	; (adr r2, 800b764 <USBD_StdDevReq+0x44>)
 800b760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b764:	0800b7b5 	.word	0x0800b7b5
 800b768:	0800b7c9 	.word	0x0800b7c9
 800b76c:	0800b7d3 	.word	0x0800b7d3
 800b770:	0800b7bf 	.word	0x0800b7bf
 800b774:	0800b7d3 	.word	0x0800b7d3
 800b778:	0800b797 	.word	0x0800b797
 800b77c:	0800b78d 	.word	0x0800b78d
 800b780:	0800b7d3 	.word	0x0800b7d3
 800b784:	0800b7ab 	.word	0x0800b7ab
 800b788:	0800b7a1 	.word	0x0800b7a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b78c:	6839      	ldr	r1, [r7, #0]
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f9dc 	bl	800bb4c <USBD_GetDescriptor>
          break;
 800b794:	e022      	b.n	800b7dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fb3f 	bl	800be1c <USBD_SetAddress>
          break;
 800b79e:	e01d      	b.n	800b7dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 fb7e 	bl	800bea4 <USBD_SetConfig>
          break;
 800b7a8:	e018      	b.n	800b7dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b7aa:	6839      	ldr	r1, [r7, #0]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fc07 	bl	800bfc0 <USBD_GetConfig>
          break;
 800b7b2:	e013      	b.n	800b7dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b7b4:	6839      	ldr	r1, [r7, #0]
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 fc37 	bl	800c02a <USBD_GetStatus>
          break;
 800b7bc:	e00e      	b.n	800b7dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b7be:	6839      	ldr	r1, [r7, #0]
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 fc65 	bl	800c090 <USBD_SetFeature>
          break;
 800b7c6:	e009      	b.n	800b7dc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fc74 	bl	800c0b8 <USBD_ClrFeature>
          break;
 800b7d0:	e004      	b.n	800b7dc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fccd 	bl	800c174 <USBD_CtlError>
          break;
 800b7da:	bf00      	nop
      }
      break;
 800b7dc:	e004      	b.n	800b7e8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fcc7 	bl	800c174 <USBD_CtlError>
      break;
 800b7e6:	bf00      	nop
  }

  return ret;
 800b7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop

0800b7f4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7fe:	2300      	movs	r3, #0
 800b800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b80a:	2b40      	cmp	r3, #64	; 0x40
 800b80c:	d005      	beq.n	800b81a <USBD_StdItfReq+0x26>
 800b80e:	2b40      	cmp	r3, #64	; 0x40
 800b810:	d82e      	bhi.n	800b870 <USBD_StdItfReq+0x7c>
 800b812:	2b00      	cmp	r3, #0
 800b814:	d001      	beq.n	800b81a <USBD_StdItfReq+0x26>
 800b816:	2b20      	cmp	r3, #32
 800b818:	d12a      	bne.n	800b870 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b820:	3b01      	subs	r3, #1
 800b822:	2b02      	cmp	r3, #2
 800b824:	d81d      	bhi.n	800b862 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	889b      	ldrh	r3, [r3, #4]
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d813      	bhi.n	800b858 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	4798      	blx	r3
 800b83e:	4603      	mov	r3, r0
 800b840:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	88db      	ldrh	r3, [r3, #6]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d110      	bne.n	800b86c <USBD_StdItfReq+0x78>
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10d      	bne.n	800b86c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fd58 	bl	800c306 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b856:	e009      	b.n	800b86c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fc8a 	bl	800c174 <USBD_CtlError>
          break;
 800b860:	e004      	b.n	800b86c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fc85 	bl	800c174 <USBD_CtlError>
          break;
 800b86a:	e000      	b.n	800b86e <USBD_StdItfReq+0x7a>
          break;
 800b86c:	bf00      	nop
      }
      break;
 800b86e:	e004      	b.n	800b87a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b870:	6839      	ldr	r1, [r7, #0]
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fc7e 	bl	800c174 <USBD_CtlError>
      break;
 800b878:	bf00      	nop
  }

  return USBD_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b88e:	2300      	movs	r3, #0
 800b890:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	889b      	ldrh	r3, [r3, #4]
 800b896:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8a0:	2b40      	cmp	r3, #64	; 0x40
 800b8a2:	d007      	beq.n	800b8b4 <USBD_StdEPReq+0x30>
 800b8a4:	2b40      	cmp	r3, #64	; 0x40
 800b8a6:	f200 8146 	bhi.w	800bb36 <USBD_StdEPReq+0x2b2>
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00a      	beq.n	800b8c4 <USBD_StdEPReq+0x40>
 800b8ae:	2b20      	cmp	r3, #32
 800b8b0:	f040 8141 	bne.w	800bb36 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	6839      	ldr	r1, [r7, #0]
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	4798      	blx	r3
      break;
 800b8c2:	e13d      	b.n	800bb40 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8cc:	2b20      	cmp	r3, #32
 800b8ce:	d10a      	bne.n	800b8e6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	4798      	blx	r3
 800b8de:	4603      	mov	r3, r0
 800b8e0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b8e2:	7bfb      	ldrb	r3, [r7, #15]
 800b8e4:	e12d      	b.n	800bb42 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	785b      	ldrb	r3, [r3, #1]
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d007      	beq.n	800b8fe <USBD_StdEPReq+0x7a>
 800b8ee:	2b03      	cmp	r3, #3
 800b8f0:	f300 811b 	bgt.w	800bb2a <USBD_StdEPReq+0x2a6>
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d072      	beq.n	800b9de <USBD_StdEPReq+0x15a>
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d03a      	beq.n	800b972 <USBD_StdEPReq+0xee>
 800b8fc:	e115      	b.n	800bb2a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b904:	2b02      	cmp	r3, #2
 800b906:	d002      	beq.n	800b90e <USBD_StdEPReq+0x8a>
 800b908:	2b03      	cmp	r3, #3
 800b90a:	d015      	beq.n	800b938 <USBD_StdEPReq+0xb4>
 800b90c:	e02b      	b.n	800b966 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b90e:	7bbb      	ldrb	r3, [r7, #14]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00c      	beq.n	800b92e <USBD_StdEPReq+0xaa>
 800b914:	7bbb      	ldrb	r3, [r7, #14]
 800b916:	2b80      	cmp	r3, #128	; 0x80
 800b918:	d009      	beq.n	800b92e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b91a:	7bbb      	ldrb	r3, [r7, #14]
 800b91c:	4619      	mov	r1, r3
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f001 f968 	bl	800cbf4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b924:	2180      	movs	r1, #128	; 0x80
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f001 f964 	bl	800cbf4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b92c:	e020      	b.n	800b970 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b92e:	6839      	ldr	r1, [r7, #0]
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fc1f 	bl	800c174 <USBD_CtlError>
              break;
 800b936:	e01b      	b.n	800b970 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	885b      	ldrh	r3, [r3, #2]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d10e      	bne.n	800b95e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b940:	7bbb      	ldrb	r3, [r7, #14]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00b      	beq.n	800b95e <USBD_StdEPReq+0xda>
 800b946:	7bbb      	ldrb	r3, [r7, #14]
 800b948:	2b80      	cmp	r3, #128	; 0x80
 800b94a:	d008      	beq.n	800b95e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	88db      	ldrh	r3, [r3, #6]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d104      	bne.n	800b95e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b954:	7bbb      	ldrb	r3, [r7, #14]
 800b956:	4619      	mov	r1, r3
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f001 f94b 	bl	800cbf4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fcd1 	bl	800c306 <USBD_CtlSendStatus>

              break;
 800b964:	e004      	b.n	800b970 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b966:	6839      	ldr	r1, [r7, #0]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 fc03 	bl	800c174 <USBD_CtlError>
              break;
 800b96e:	bf00      	nop
          }
          break;
 800b970:	e0e0      	b.n	800bb34 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b978:	2b02      	cmp	r3, #2
 800b97a:	d002      	beq.n	800b982 <USBD_StdEPReq+0xfe>
 800b97c:	2b03      	cmp	r3, #3
 800b97e:	d015      	beq.n	800b9ac <USBD_StdEPReq+0x128>
 800b980:	e026      	b.n	800b9d0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b982:	7bbb      	ldrb	r3, [r7, #14]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00c      	beq.n	800b9a2 <USBD_StdEPReq+0x11e>
 800b988:	7bbb      	ldrb	r3, [r7, #14]
 800b98a:	2b80      	cmp	r3, #128	; 0x80
 800b98c:	d009      	beq.n	800b9a2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b98e:	7bbb      	ldrb	r3, [r7, #14]
 800b990:	4619      	mov	r1, r3
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f001 f92e 	bl	800cbf4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b998:	2180      	movs	r1, #128	; 0x80
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f001 f92a 	bl	800cbf4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9a0:	e01c      	b.n	800b9dc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b9a2:	6839      	ldr	r1, [r7, #0]
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 fbe5 	bl	800c174 <USBD_CtlError>
              break;
 800b9aa:	e017      	b.n	800b9dc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	885b      	ldrh	r3, [r3, #2]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d112      	bne.n	800b9da <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b9b4:	7bbb      	ldrb	r3, [r7, #14]
 800b9b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d004      	beq.n	800b9c8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b9be:	7bbb      	ldrb	r3, [r7, #14]
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f001 f935 	bl	800cc32 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fc9c 	bl	800c306 <USBD_CtlSendStatus>
              }
              break;
 800b9ce:	e004      	b.n	800b9da <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b9d0:	6839      	ldr	r1, [r7, #0]
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 fbce 	bl	800c174 <USBD_CtlError>
              break;
 800b9d8:	e000      	b.n	800b9dc <USBD_StdEPReq+0x158>
              break;
 800b9da:	bf00      	nop
          }
          break;
 800b9dc:	e0aa      	b.n	800bb34 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d002      	beq.n	800b9ee <USBD_StdEPReq+0x16a>
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d032      	beq.n	800ba52 <USBD_StdEPReq+0x1ce>
 800b9ec:	e097      	b.n	800bb1e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9ee:	7bbb      	ldrb	r3, [r7, #14]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d007      	beq.n	800ba04 <USBD_StdEPReq+0x180>
 800b9f4:	7bbb      	ldrb	r3, [r7, #14]
 800b9f6:	2b80      	cmp	r3, #128	; 0x80
 800b9f8:	d004      	beq.n	800ba04 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fbb9 	bl	800c174 <USBD_CtlError>
                break;
 800ba02:	e091      	b.n	800bb28 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	da0b      	bge.n	800ba24 <USBD_StdEPReq+0x1a0>
 800ba0c:	7bbb      	ldrb	r3, [r7, #14]
 800ba0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba12:	4613      	mov	r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	4413      	add	r3, r2
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	3310      	adds	r3, #16
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	4413      	add	r3, r2
 800ba20:	3304      	adds	r3, #4
 800ba22:	e00b      	b.n	800ba3c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
 800ba26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4413      	add	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	4413      	add	r3, r2
 800ba3a:	3304      	adds	r3, #4
 800ba3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	2200      	movs	r2, #0
 800ba42:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	2202      	movs	r2, #2
 800ba48:	4619      	mov	r1, r3
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fbfd 	bl	800c24a <USBD_CtlSendData>
              break;
 800ba50:	e06a      	b.n	800bb28 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	da11      	bge.n	800ba7e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba5a:	7bbb      	ldrb	r3, [r7, #14]
 800ba5c:	f003 020f 	and.w	r2, r3, #15
 800ba60:	6879      	ldr	r1, [r7, #4]
 800ba62:	4613      	mov	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4413      	add	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	440b      	add	r3, r1
 800ba6c:	3318      	adds	r3, #24
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d117      	bne.n	800baa4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ba74:	6839      	ldr	r1, [r7, #0]
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 fb7c 	bl	800c174 <USBD_CtlError>
                  break;
 800ba7c:	e054      	b.n	800bb28 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba7e:	7bbb      	ldrb	r3, [r7, #14]
 800ba80:	f003 020f 	and.w	r2, r3, #15
 800ba84:	6879      	ldr	r1, [r7, #4]
 800ba86:	4613      	mov	r3, r2
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	4413      	add	r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	440b      	add	r3, r1
 800ba90:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d104      	bne.n	800baa4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ba9a:	6839      	ldr	r1, [r7, #0]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fb69 	bl	800c174 <USBD_CtlError>
                  break;
 800baa2:	e041      	b.n	800bb28 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	da0b      	bge.n	800bac4 <USBD_StdEPReq+0x240>
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bab2:	4613      	mov	r3, r2
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	4413      	add	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	3310      	adds	r3, #16
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	4413      	add	r3, r2
 800bac0:	3304      	adds	r3, #4
 800bac2:	e00b      	b.n	800badc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bac4:	7bbb      	ldrb	r3, [r7, #14]
 800bac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baca:	4613      	mov	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4413      	add	r3, r2
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	4413      	add	r3, r2
 800bada:	3304      	adds	r3, #4
 800badc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bade:	7bbb      	ldrb	r3, [r7, #14]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d002      	beq.n	800baea <USBD_StdEPReq+0x266>
 800bae4:	7bbb      	ldrb	r3, [r7, #14]
 800bae6:	2b80      	cmp	r3, #128	; 0x80
 800bae8:	d103      	bne.n	800baf2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	2200      	movs	r2, #0
 800baee:	601a      	str	r2, [r3, #0]
 800baf0:	e00e      	b.n	800bb10 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800baf2:	7bbb      	ldrb	r3, [r7, #14]
 800baf4:	4619      	mov	r1, r3
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f001 f8ba 	bl	800cc70 <USBD_LL_IsStallEP>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d003      	beq.n	800bb0a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	2201      	movs	r2, #1
 800bb06:	601a      	str	r2, [r3, #0]
 800bb08:	e002      	b.n	800bb10 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	2202      	movs	r2, #2
 800bb14:	4619      	mov	r1, r3
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 fb97 	bl	800c24a <USBD_CtlSendData>
              break;
 800bb1c:	e004      	b.n	800bb28 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 fb27 	bl	800c174 <USBD_CtlError>
              break;
 800bb26:	bf00      	nop
          }
          break;
 800bb28:	e004      	b.n	800bb34 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fb21 	bl	800c174 <USBD_CtlError>
          break;
 800bb32:	bf00      	nop
      }
      break;
 800bb34:	e004      	b.n	800bb40 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fb1b 	bl	800c174 <USBD_CtlError>
      break;
 800bb3e:	bf00      	nop
  }

  return ret;
 800bb40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
	...

0800bb4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb56:	2300      	movs	r3, #0
 800bb58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	885b      	ldrh	r3, [r3, #2]
 800bb66:	0a1b      	lsrs	r3, r3, #8
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	2b06      	cmp	r3, #6
 800bb6e:	f200 8128 	bhi.w	800bdc2 <USBD_GetDescriptor+0x276>
 800bb72:	a201      	add	r2, pc, #4	; (adr r2, 800bb78 <USBD_GetDescriptor+0x2c>)
 800bb74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb78:	0800bb95 	.word	0x0800bb95
 800bb7c:	0800bbad 	.word	0x0800bbad
 800bb80:	0800bbed 	.word	0x0800bbed
 800bb84:	0800bdc3 	.word	0x0800bdc3
 800bb88:	0800bdc3 	.word	0x0800bdc3
 800bb8c:	0800bd63 	.word	0x0800bd63
 800bb90:	0800bd8f 	.word	0x0800bd8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	7c12      	ldrb	r2, [r2, #16]
 800bba0:	f107 0108 	add.w	r1, r7, #8
 800bba4:	4610      	mov	r0, r2
 800bba6:	4798      	blx	r3
 800bba8:	60f8      	str	r0, [r7, #12]
      break;
 800bbaa:	e112      	b.n	800bdd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	7c1b      	ldrb	r3, [r3, #16]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d10d      	bne.n	800bbd0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbbc:	f107 0208 	add.w	r2, r7, #8
 800bbc0:	4610      	mov	r0, r2
 800bbc2:	4798      	blx	r3
 800bbc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	2202      	movs	r2, #2
 800bbcc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bbce:	e100      	b.n	800bdd2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd8:	f107 0208 	add.w	r2, r7, #8
 800bbdc:	4610      	mov	r0, r2
 800bbde:	4798      	blx	r3
 800bbe0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	2202      	movs	r2, #2
 800bbe8:	701a      	strb	r2, [r3, #0]
      break;
 800bbea:	e0f2      	b.n	800bdd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	885b      	ldrh	r3, [r3, #2]
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	2b05      	cmp	r3, #5
 800bbf4:	f200 80ac 	bhi.w	800bd50 <USBD_GetDescriptor+0x204>
 800bbf8:	a201      	add	r2, pc, #4	; (adr r2, 800bc00 <USBD_GetDescriptor+0xb4>)
 800bbfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfe:	bf00      	nop
 800bc00:	0800bc19 	.word	0x0800bc19
 800bc04:	0800bc4d 	.word	0x0800bc4d
 800bc08:	0800bc81 	.word	0x0800bc81
 800bc0c:	0800bcb5 	.word	0x0800bcb5
 800bc10:	0800bce9 	.word	0x0800bce9
 800bc14:	0800bd1d 	.word	0x0800bd1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00b      	beq.n	800bc3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	7c12      	ldrb	r2, [r2, #16]
 800bc30:	f107 0108 	add.w	r1, r7, #8
 800bc34:	4610      	mov	r0, r2
 800bc36:	4798      	blx	r3
 800bc38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc3a:	e091      	b.n	800bd60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 fa98 	bl	800c174 <USBD_CtlError>
            err++;
 800bc44:	7afb      	ldrb	r3, [r7, #11]
 800bc46:	3301      	adds	r3, #1
 800bc48:	72fb      	strb	r3, [r7, #11]
          break;
 800bc4a:	e089      	b.n	800bd60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d00b      	beq.n	800bc70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	7c12      	ldrb	r2, [r2, #16]
 800bc64:	f107 0108 	add.w	r1, r7, #8
 800bc68:	4610      	mov	r0, r2
 800bc6a:	4798      	blx	r3
 800bc6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc6e:	e077      	b.n	800bd60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 fa7e 	bl	800c174 <USBD_CtlError>
            err++;
 800bc78:	7afb      	ldrb	r3, [r7, #11]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	72fb      	strb	r3, [r7, #11]
          break;
 800bc7e:	e06f      	b.n	800bd60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d00b      	beq.n	800bca4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	7c12      	ldrb	r2, [r2, #16]
 800bc98:	f107 0108 	add.w	r1, r7, #8
 800bc9c:	4610      	mov	r0, r2
 800bc9e:	4798      	blx	r3
 800bca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bca2:	e05d      	b.n	800bd60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fa64 	bl	800c174 <USBD_CtlError>
            err++;
 800bcac:	7afb      	ldrb	r3, [r7, #11]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	72fb      	strb	r3, [r7, #11]
          break;
 800bcb2:	e055      	b.n	800bd60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00b      	beq.n	800bcd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcc6:	691b      	ldr	r3, [r3, #16]
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	7c12      	ldrb	r2, [r2, #16]
 800bccc:	f107 0108 	add.w	r1, r7, #8
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	4798      	blx	r3
 800bcd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcd6:	e043      	b.n	800bd60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fa4a 	bl	800c174 <USBD_CtlError>
            err++;
 800bce0:	7afb      	ldrb	r3, [r7, #11]
 800bce2:	3301      	adds	r3, #1
 800bce4:	72fb      	strb	r3, [r7, #11]
          break;
 800bce6:	e03b      	b.n	800bd60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcee:	695b      	ldr	r3, [r3, #20]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00b      	beq.n	800bd0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcfa:	695b      	ldr	r3, [r3, #20]
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	7c12      	ldrb	r2, [r2, #16]
 800bd00:	f107 0108 	add.w	r1, r7, #8
 800bd04:	4610      	mov	r0, r2
 800bd06:	4798      	blx	r3
 800bd08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd0a:	e029      	b.n	800bd60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fa30 	bl	800c174 <USBD_CtlError>
            err++;
 800bd14:	7afb      	ldrb	r3, [r7, #11]
 800bd16:	3301      	adds	r3, #1
 800bd18:	72fb      	strb	r3, [r7, #11]
          break;
 800bd1a:	e021      	b.n	800bd60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd22:	699b      	ldr	r3, [r3, #24]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00b      	beq.n	800bd40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	7c12      	ldrb	r2, [r2, #16]
 800bd34:	f107 0108 	add.w	r1, r7, #8
 800bd38:	4610      	mov	r0, r2
 800bd3a:	4798      	blx	r3
 800bd3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd3e:	e00f      	b.n	800bd60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 fa16 	bl	800c174 <USBD_CtlError>
            err++;
 800bd48:	7afb      	ldrb	r3, [r7, #11]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd4e:	e007      	b.n	800bd60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bd50:	6839      	ldr	r1, [r7, #0]
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 fa0e 	bl	800c174 <USBD_CtlError>
          err++;
 800bd58:	7afb      	ldrb	r3, [r7, #11]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bd5e:	e038      	b.n	800bdd2 <USBD_GetDescriptor+0x286>
 800bd60:	e037      	b.n	800bdd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	7c1b      	ldrb	r3, [r3, #16]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d109      	bne.n	800bd7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd72:	f107 0208 	add.w	r2, r7, #8
 800bd76:	4610      	mov	r0, r2
 800bd78:	4798      	blx	r3
 800bd7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd7c:	e029      	b.n	800bdd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd7e:	6839      	ldr	r1, [r7, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 f9f7 	bl	800c174 <USBD_CtlError>
        err++;
 800bd86:	7afb      	ldrb	r3, [r7, #11]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	72fb      	strb	r3, [r7, #11]
      break;
 800bd8c:	e021      	b.n	800bdd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	7c1b      	ldrb	r3, [r3, #16]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d10d      	bne.n	800bdb2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd9e:	f107 0208 	add.w	r2, r7, #8
 800bda2:	4610      	mov	r0, r2
 800bda4:	4798      	blx	r3
 800bda6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	2207      	movs	r2, #7
 800bdae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdb0:	e00f      	b.n	800bdd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bdb2:	6839      	ldr	r1, [r7, #0]
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 f9dd 	bl	800c174 <USBD_CtlError>
        err++;
 800bdba:	7afb      	ldrb	r3, [r7, #11]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	72fb      	strb	r3, [r7, #11]
      break;
 800bdc0:	e007      	b.n	800bdd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bdc2:	6839      	ldr	r1, [r7, #0]
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f000 f9d5 	bl	800c174 <USBD_CtlError>
      err++;
 800bdca:	7afb      	ldrb	r3, [r7, #11]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	72fb      	strb	r3, [r7, #11]
      break;
 800bdd0:	bf00      	nop
  }

  if (err != 0U)
 800bdd2:	7afb      	ldrb	r3, [r7, #11]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d11c      	bne.n	800be12 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bdd8:	893b      	ldrh	r3, [r7, #8]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d011      	beq.n	800be02 <USBD_GetDescriptor+0x2b6>
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	88db      	ldrh	r3, [r3, #6]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00d      	beq.n	800be02 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	88da      	ldrh	r2, [r3, #6]
 800bdea:	893b      	ldrh	r3, [r7, #8]
 800bdec:	4293      	cmp	r3, r2
 800bdee:	bf28      	it	cs
 800bdf0:	4613      	movcs	r3, r2
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bdf6:	893b      	ldrh	r3, [r7, #8]
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	68f9      	ldr	r1, [r7, #12]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 fa24 	bl	800c24a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	88db      	ldrh	r3, [r3, #6]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d104      	bne.n	800be14 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fa7b 	bl	800c306 <USBD_CtlSendStatus>
 800be10:	e000      	b.n	800be14 <USBD_GetDescriptor+0x2c8>
    return;
 800be12:	bf00      	nop
    }
  }
}
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop

0800be1c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	889b      	ldrh	r3, [r3, #4]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d130      	bne.n	800be90 <USBD_SetAddress+0x74>
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	88db      	ldrh	r3, [r3, #6]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d12c      	bne.n	800be90 <USBD_SetAddress+0x74>
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	885b      	ldrh	r3, [r3, #2]
 800be3a:	2b7f      	cmp	r3, #127	; 0x7f
 800be3c:	d828      	bhi.n	800be90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	885b      	ldrh	r3, [r3, #2]
 800be42:	b2db      	uxtb	r3, r3
 800be44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be50:	2b03      	cmp	r3, #3
 800be52:	d104      	bne.n	800be5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f98c 	bl	800c174 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be5c:	e01d      	b.n	800be9a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	7bfa      	ldrb	r2, [r7, #15]
 800be62:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be66:	7bfb      	ldrb	r3, [r7, #15]
 800be68:	4619      	mov	r1, r3
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 ff2d 	bl	800ccca <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fa48 	bl	800c306 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be76:	7bfb      	ldrb	r3, [r7, #15]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d004      	beq.n	800be86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2202      	movs	r2, #2
 800be80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be84:	e009      	b.n	800be9a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2201      	movs	r2, #1
 800be8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be8e:	e004      	b.n	800be9a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be90:	6839      	ldr	r1, [r7, #0]
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 f96e 	bl	800c174 <USBD_CtlError>
  }
}
 800be98:	bf00      	nop
 800be9a:	bf00      	nop
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
	...

0800bea4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	885b      	ldrh	r3, [r3, #2]
 800beb2:	b2da      	uxtb	r2, r3
 800beb4:	4b41      	ldr	r3, [pc, #260]	; (800bfbc <USBD_SetConfig+0x118>)
 800beb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800beb8:	4b40      	ldr	r3, [pc, #256]	; (800bfbc <USBD_SetConfig+0x118>)
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d904      	bls.n	800beca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f956 	bl	800c174 <USBD_CtlError>
 800bec8:	e075      	b.n	800bfb6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bed0:	2b02      	cmp	r3, #2
 800bed2:	d002      	beq.n	800beda <USBD_SetConfig+0x36>
 800bed4:	2b03      	cmp	r3, #3
 800bed6:	d023      	beq.n	800bf20 <USBD_SetConfig+0x7c>
 800bed8:	e062      	b.n	800bfa0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800beda:	4b38      	ldr	r3, [pc, #224]	; (800bfbc <USBD_SetConfig+0x118>)
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d01a      	beq.n	800bf18 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bee2:	4b36      	ldr	r3, [pc, #216]	; (800bfbc <USBD_SetConfig+0x118>)
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	461a      	mov	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2203      	movs	r2, #3
 800bef0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bef4:	4b31      	ldr	r3, [pc, #196]	; (800bfbc <USBD_SetConfig+0x118>)
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	4619      	mov	r1, r3
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7ff f9e4 	bl	800b2c8 <USBD_SetClassConfig>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	d104      	bne.n	800bf10 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bf06:	6839      	ldr	r1, [r7, #0]
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 f933 	bl	800c174 <USBD_CtlError>
            return;
 800bf0e:	e052      	b.n	800bfb6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 f9f8 	bl	800c306 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bf16:	e04e      	b.n	800bfb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 f9f4 	bl	800c306 <USBD_CtlSendStatus>
        break;
 800bf1e:	e04a      	b.n	800bfb6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bf20:	4b26      	ldr	r3, [pc, #152]	; (800bfbc <USBD_SetConfig+0x118>)
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d112      	bne.n	800bf4e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bf30:	4b22      	ldr	r3, [pc, #136]	; (800bfbc <USBD_SetConfig+0x118>)
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	461a      	mov	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bf3a:	4b20      	ldr	r3, [pc, #128]	; (800bfbc <USBD_SetConfig+0x118>)
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f7ff f9e0 	bl	800b306 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f9dd 	bl	800c306 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bf4c:	e033      	b.n	800bfb6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bf4e:	4b1b      	ldr	r3, [pc, #108]	; (800bfbc <USBD_SetConfig+0x118>)
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	461a      	mov	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d01d      	beq.n	800bf98 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7ff f9ce 	bl	800b306 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bf6a:	4b14      	ldr	r3, [pc, #80]	; (800bfbc <USBD_SetConfig+0x118>)
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bf74:	4b11      	ldr	r3, [pc, #68]	; (800bfbc <USBD_SetConfig+0x118>)
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	4619      	mov	r1, r3
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f7ff f9a4 	bl	800b2c8 <USBD_SetClassConfig>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d104      	bne.n	800bf90 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 f8f3 	bl	800c174 <USBD_CtlError>
            return;
 800bf8e:	e012      	b.n	800bfb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 f9b8 	bl	800c306 <USBD_CtlSendStatus>
        break;
 800bf96:	e00e      	b.n	800bfb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 f9b4 	bl	800c306 <USBD_CtlSendStatus>
        break;
 800bf9e:	e00a      	b.n	800bfb6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f8e6 	bl	800c174 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bfa8:	4b04      	ldr	r3, [pc, #16]	; (800bfbc <USBD_SetConfig+0x118>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	4619      	mov	r1, r3
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7ff f9a9 	bl	800b306 <USBD_ClrClassConfig>
        break;
 800bfb4:	bf00      	nop
    }
  }
}
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	20000228 	.word	0x20000228

0800bfc0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	88db      	ldrh	r3, [r3, #6]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d004      	beq.n	800bfdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 f8cd 	bl	800c174 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bfda:	e022      	b.n	800c022 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	dc02      	bgt.n	800bfec <USBD_GetConfig+0x2c>
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	dc03      	bgt.n	800bff2 <USBD_GetConfig+0x32>
 800bfea:	e015      	b.n	800c018 <USBD_GetConfig+0x58>
 800bfec:	2b03      	cmp	r3, #3
 800bfee:	d00b      	beq.n	800c008 <USBD_GetConfig+0x48>
 800bff0:	e012      	b.n	800c018 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	3308      	adds	r3, #8
 800bffc:	2201      	movs	r2, #1
 800bffe:	4619      	mov	r1, r3
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 f922 	bl	800c24a <USBD_CtlSendData>
        break;
 800c006:	e00c      	b.n	800c022 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	3304      	adds	r3, #4
 800c00c:	2201      	movs	r2, #1
 800c00e:	4619      	mov	r1, r3
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f91a 	bl	800c24a <USBD_CtlSendData>
        break;
 800c016:	e004      	b.n	800c022 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 f8aa 	bl	800c174 <USBD_CtlError>
        break;
 800c020:	bf00      	nop
}
 800c022:	bf00      	nop
 800c024:	3708      	adds	r7, #8
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b082      	sub	sp, #8
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
 800c032:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c03a:	3b01      	subs	r3, #1
 800c03c:	2b02      	cmp	r3, #2
 800c03e:	d81e      	bhi.n	800c07e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	88db      	ldrh	r3, [r3, #6]
 800c044:	2b02      	cmp	r3, #2
 800c046:	d004      	beq.n	800c052 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f892 	bl	800c174 <USBD_CtlError>
        break;
 800c050:	e01a      	b.n	800c088 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2201      	movs	r2, #1
 800c056:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d005      	beq.n	800c06e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	f043 0202 	orr.w	r2, r3, #2
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	330c      	adds	r3, #12
 800c072:	2202      	movs	r2, #2
 800c074:	4619      	mov	r1, r3
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f8e7 	bl	800c24a <USBD_CtlSendData>
      break;
 800c07c:	e004      	b.n	800c088 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c07e:	6839      	ldr	r1, [r7, #0]
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 f877 	bl	800c174 <USBD_CtlError>
      break;
 800c086:	bf00      	nop
  }
}
 800c088:	bf00      	nop
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	885b      	ldrh	r3, [r3, #2]
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d106      	bne.n	800c0b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 f92b 	bl	800c306 <USBD_CtlSendStatus>
  }
}
 800c0b0:	bf00      	nop
 800c0b2:	3708      	adds	r7, #8
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d80b      	bhi.n	800c0e6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	885b      	ldrh	r3, [r3, #2]
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d10c      	bne.n	800c0f0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 f911 	bl	800c306 <USBD_CtlSendStatus>
      }
      break;
 800c0e4:	e004      	b.n	800c0f0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 f843 	bl	800c174 <USBD_CtlError>
      break;
 800c0ee:	e000      	b.n	800c0f2 <USBD_ClrFeature+0x3a>
      break;
 800c0f0:	bf00      	nop
  }
}
 800c0f2:	bf00      	nop
 800c0f4:	3708      	adds	r7, #8
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c0fa:	b480      	push	{r7}
 800c0fc:	b083      	sub	sp, #12
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	781a      	ldrb	r2, [r3, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	785a      	ldrb	r2, [r3, #1]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	3302      	adds	r3, #2
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	3303      	adds	r3, #3
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	b29b      	uxth	r3, r3
 800c124:	021b      	lsls	r3, r3, #8
 800c126:	b29b      	uxth	r3, r3
 800c128:	4413      	add	r3, r2
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	3304      	adds	r3, #4
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	b29a      	uxth	r2, r3
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	3305      	adds	r3, #5
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	b29b      	uxth	r3, r3
 800c140:	021b      	lsls	r3, r3, #8
 800c142:	b29b      	uxth	r3, r3
 800c144:	4413      	add	r3, r2
 800c146:	b29a      	uxth	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	3306      	adds	r3, #6
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	b29a      	uxth	r2, r3
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	3307      	adds	r3, #7
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	021b      	lsls	r3, r3, #8
 800c15e:	b29b      	uxth	r3, r3
 800c160:	4413      	add	r3, r2
 800c162:	b29a      	uxth	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	80da      	strh	r2, [r3, #6]

}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c17e:	2180      	movs	r1, #128	; 0x80
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fd37 	bl	800cbf4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c186:	2100      	movs	r1, #0
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fd33 	bl	800cbf4 <USBD_LL_StallEP>
}
 800c18e:	bf00      	nop
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b086      	sub	sp, #24
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	60f8      	str	r0, [r7, #12]
 800c19e:	60b9      	str	r1, [r7, #8]
 800c1a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d032      	beq.n	800c212 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f000 f834 	bl	800c21a <USBD_GetLen>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	005b      	lsls	r3, r3, #1
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c1c0:	7dfb      	ldrb	r3, [r7, #23]
 800c1c2:	1c5a      	adds	r2, r3, #1
 800c1c4:	75fa      	strb	r2, [r7, #23]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	7812      	ldrb	r2, [r2, #0]
 800c1d0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c1d2:	7dfb      	ldrb	r3, [r7, #23]
 800c1d4:	1c5a      	adds	r2, r3, #1
 800c1d6:	75fa      	strb	r2, [r7, #23]
 800c1d8:	461a      	mov	r2, r3
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	4413      	add	r3, r2
 800c1de:	2203      	movs	r2, #3
 800c1e0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c1e2:	e012      	b.n	800c20a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	1c5a      	adds	r2, r3, #1
 800c1e8:	60fa      	str	r2, [r7, #12]
 800c1ea:	7dfa      	ldrb	r2, [r7, #23]
 800c1ec:	1c51      	adds	r1, r2, #1
 800c1ee:	75f9      	strb	r1, [r7, #23]
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	440a      	add	r2, r1
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c1fa:	7dfb      	ldrb	r3, [r7, #23]
 800c1fc:	1c5a      	adds	r2, r3, #1
 800c1fe:	75fa      	strb	r2, [r7, #23]
 800c200:	461a      	mov	r2, r3
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	4413      	add	r3, r2
 800c206:	2200      	movs	r2, #0
 800c208:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1e8      	bne.n	800c1e4 <USBD_GetString+0x4e>
    }
  }
}
 800c212:	bf00      	nop
 800c214:	3718      	adds	r7, #24
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}

0800c21a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c21a:	b480      	push	{r7}
 800c21c:	b085      	sub	sp, #20
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c222:	2300      	movs	r3, #0
 800c224:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c226:	e005      	b.n	800c234 <USBD_GetLen+0x1a>
  {
    len++;
 800c228:	7bfb      	ldrb	r3, [r7, #15]
 800c22a:	3301      	adds	r3, #1
 800c22c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	3301      	adds	r3, #1
 800c232:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d1f5      	bne.n	800c228 <USBD_GetLen+0xe>
  }

  return len;
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3714      	adds	r7, #20
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b084      	sub	sp, #16
 800c24e:	af00      	add	r7, sp, #0
 800c250:	60f8      	str	r0, [r7, #12]
 800c252:	60b9      	str	r1, [r7, #8]
 800c254:	4613      	mov	r3, r2
 800c256:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2202      	movs	r2, #2
 800c25c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c260:	88fa      	ldrh	r2, [r7, #6]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c266:	88fa      	ldrh	r2, [r7, #6]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c26c:	88fb      	ldrh	r3, [r7, #6]
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	2100      	movs	r1, #0
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f000 fd48 	bl	800cd08 <USBD_LL_Transmit>

  return USBD_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c282:	b580      	push	{r7, lr}
 800c284:	b084      	sub	sp, #16
 800c286:	af00      	add	r7, sp, #0
 800c288:	60f8      	str	r0, [r7, #12]
 800c28a:	60b9      	str	r1, [r7, #8]
 800c28c:	4613      	mov	r3, r2
 800c28e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c290:	88fb      	ldrh	r3, [r7, #6]
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	2100      	movs	r1, #0
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f000 fd36 	bl	800cd08 <USBD_LL_Transmit>

  return USBD_OK;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b084      	sub	sp, #16
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	60f8      	str	r0, [r7, #12]
 800c2ae:	60b9      	str	r1, [r7, #8]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2203      	movs	r2, #3
 800c2b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c2bc:	88fa      	ldrh	r2, [r7, #6]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c2c4:	88fa      	ldrh	r2, [r7, #6]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2cc:	88fb      	ldrh	r3, [r7, #6]
 800c2ce:	68ba      	ldr	r2, [r7, #8]
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	f000 fd3b 	bl	800cd4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b084      	sub	sp, #16
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	60f8      	str	r0, [r7, #12]
 800c2ea:	60b9      	str	r1, [r7, #8]
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2f0:	88fb      	ldrh	r3, [r7, #6]
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f000 fd29 	bl	800cd4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c306:	b580      	push	{r7, lr}
 800c308:	b082      	sub	sp, #8
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2204      	movs	r2, #4
 800c312:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c316:	2300      	movs	r3, #0
 800c318:	2200      	movs	r2, #0
 800c31a:	2100      	movs	r1, #0
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fcf3 	bl	800cd08 <USBD_LL_Transmit>

  return USBD_OK;
 800c322:	2300      	movs	r3, #0
}
 800c324:	4618      	mov	r0, r3
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2205      	movs	r2, #5
 800c338:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c33c:	2300      	movs	r3, #0
 800c33e:	2200      	movs	r2, #0
 800c340:	2100      	movs	r1, #0
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fd03 	bl	800cd4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
	...

0800c354 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c358:	2200      	movs	r2, #0
 800c35a:	4912      	ldr	r1, [pc, #72]	; (800c3a4 <MX_USB_DEVICE_Init+0x50>)
 800c35c:	4812      	ldr	r0, [pc, #72]	; (800c3a8 <MX_USB_DEVICE_Init+0x54>)
 800c35e:	f7fe ff57 	bl	800b210 <USBD_Init>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d001      	beq.n	800c36c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c368:	f7f4 f9b2 	bl	80006d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c36c:	490f      	ldr	r1, [pc, #60]	; (800c3ac <MX_USB_DEVICE_Init+0x58>)
 800c36e:	480e      	ldr	r0, [pc, #56]	; (800c3a8 <MX_USB_DEVICE_Init+0x54>)
 800c370:	f7fe ff79 	bl	800b266 <USBD_RegisterClass>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d001      	beq.n	800c37e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c37a:	f7f4 f9a9 	bl	80006d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c37e:	490c      	ldr	r1, [pc, #48]	; (800c3b0 <MX_USB_DEVICE_Init+0x5c>)
 800c380:	4809      	ldr	r0, [pc, #36]	; (800c3a8 <MX_USB_DEVICE_Init+0x54>)
 800c382:	f7fe fea7 	bl	800b0d4 <USBD_CDC_RegisterInterface>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d001      	beq.n	800c390 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c38c:	f7f4 f9a0 	bl	80006d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c390:	4805      	ldr	r0, [pc, #20]	; (800c3a8 <MX_USB_DEVICE_Init+0x54>)
 800c392:	f7fe ff82 	bl	800b29a <USBD_Start>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d001      	beq.n	800c3a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c39c:	f7f4 f998 	bl	80006d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c3a0:	bf00      	nop
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	20000174 	.word	0x20000174
 800c3a8:	2000022c 	.word	0x2000022c
 800c3ac:	20000058 	.word	0x20000058
 800c3b0:	20000164 	.word	0x20000164

0800c3b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	4905      	ldr	r1, [pc, #20]	; (800c3d0 <CDC_Init_FS+0x1c>)
 800c3bc:	4805      	ldr	r0, [pc, #20]	; (800c3d4 <CDC_Init_FS+0x20>)
 800c3be:	f7fe fea0 	bl	800b102 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c3c2:	4905      	ldr	r1, [pc, #20]	; (800c3d8 <CDC_Init_FS+0x24>)
 800c3c4:	4803      	ldr	r0, [pc, #12]	; (800c3d4 <CDC_Init_FS+0x20>)
 800c3c6:	f7fe feb6 	bl	800b136 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c3ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	20000934 	.word	0x20000934
 800c3d4:	2000022c 	.word	0x2000022c
 800c3d8:	20000534 	.word	0x20000534

0800c3dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c3e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	6039      	str	r1, [r7, #0]
 800c3f6:	71fb      	strb	r3, [r7, #7]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c3fc:	79fb      	ldrb	r3, [r7, #7]
 800c3fe:	2b23      	cmp	r3, #35	; 0x23
 800c400:	f200 80a2 	bhi.w	800c548 <CDC_Control_FS+0x15c>
 800c404:	a201      	add	r2, pc, #4	; (adr r2, 800c40c <CDC_Control_FS+0x20>)
 800c406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c40a:	bf00      	nop
 800c40c:	0800c549 	.word	0x0800c549
 800c410:	0800c549 	.word	0x0800c549
 800c414:	0800c549 	.word	0x0800c549
 800c418:	0800c549 	.word	0x0800c549
 800c41c:	0800c549 	.word	0x0800c549
 800c420:	0800c549 	.word	0x0800c549
 800c424:	0800c549 	.word	0x0800c549
 800c428:	0800c549 	.word	0x0800c549
 800c42c:	0800c549 	.word	0x0800c549
 800c430:	0800c549 	.word	0x0800c549
 800c434:	0800c549 	.word	0x0800c549
 800c438:	0800c549 	.word	0x0800c549
 800c43c:	0800c549 	.word	0x0800c549
 800c440:	0800c549 	.word	0x0800c549
 800c444:	0800c549 	.word	0x0800c549
 800c448:	0800c549 	.word	0x0800c549
 800c44c:	0800c549 	.word	0x0800c549
 800c450:	0800c549 	.word	0x0800c549
 800c454:	0800c549 	.word	0x0800c549
 800c458:	0800c549 	.word	0x0800c549
 800c45c:	0800c549 	.word	0x0800c549
 800c460:	0800c549 	.word	0x0800c549
 800c464:	0800c549 	.word	0x0800c549
 800c468:	0800c549 	.word	0x0800c549
 800c46c:	0800c549 	.word	0x0800c549
 800c470:	0800c549 	.word	0x0800c549
 800c474:	0800c549 	.word	0x0800c549
 800c478:	0800c549 	.word	0x0800c549
 800c47c:	0800c549 	.word	0x0800c549
 800c480:	0800c549 	.word	0x0800c549
 800c484:	0800c549 	.word	0x0800c549
 800c488:	0800c549 	.word	0x0800c549
 800c48c:	0800c49d 	.word	0x0800c49d
 800c490:	0800c4eb 	.word	0x0800c4eb
 800c494:	0800c549 	.word	0x0800c549
 800c498:	0800c549 	.word	0x0800c549
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    {

    	HAL_GPIO_WritePin(GPIOB,LED_GREEN_Pin,GPIO_PIN_SET);
 800c49c:	2201      	movs	r2, #1
 800c49e:	2120      	movs	r1, #32
 800c4a0:	482c      	ldr	r0, [pc, #176]	; (800c554 <CDC_Control_FS+0x168>)
 800c4a2:	f7f9 f839 	bl	8005518 <HAL_GPIO_WritePin>
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	021b      	lsls	r3, r3, #8
 800c4b4:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	3302      	adds	r3, #2
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800c4be:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	3303      	adds	r3, #3
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	061b      	lsls	r3, r3, #24
 800c4c8:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	4b22      	ldr	r3, [pc, #136]	; (800c558 <CDC_Control_FS+0x16c>)
 800c4ce:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	791a      	ldrb	r2, [r3, #4]
 800c4d4:	4b20      	ldr	r3, [pc, #128]	; (800c558 <CDC_Control_FS+0x16c>)
 800c4d6:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	795a      	ldrb	r2, [r3, #5]
 800c4dc:	4b1e      	ldr	r3, [pc, #120]	; (800c558 <CDC_Control_FS+0x16c>)
 800c4de:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	799a      	ldrb	r2, [r3, #6]
 800c4e4:	4b1c      	ldr	r3, [pc, #112]	; (800c558 <CDC_Control_FS+0x16c>)
 800c4e6:	719a      	strb	r2, [r3, #6]
    }
    break;
 800c4e8:	e02f      	b.n	800c54a <CDC_Control_FS+0x15e>

    case CDC_GET_LINE_CODING:
    {


    	HAL_GPIO_WritePin(GPIOB,LED_GREEN_Pin,GPIO_PIN_SET);
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	2120      	movs	r1, #32
 800c4ee:	4819      	ldr	r0, [pc, #100]	; (800c554 <CDC_Control_FS+0x168>)
 800c4f0:	f7f9 f812 	bl	8005518 <HAL_GPIO_WritePin>
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800c4f4:	4b18      	ldr	r3, [pc, #96]	; (800c558 <CDC_Control_FS+0x16c>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	b2da      	uxtb	r2, r3
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800c4fe:	4b16      	ldr	r3, [pc, #88]	; (800c558 <CDC_Control_FS+0x16c>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	0a1a      	lsrs	r2, r3, #8
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	3301      	adds	r3, #1
 800c508:	b2d2      	uxtb	r2, r2
 800c50a:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800c50c:	4b12      	ldr	r3, [pc, #72]	; (800c558 <CDC_Control_FS+0x16c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	0c1a      	lsrs	r2, r3, #16
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	3302      	adds	r3, #2
 800c516:	b2d2      	uxtb	r2, r2
 800c518:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800c51a:	4b0f      	ldr	r3, [pc, #60]	; (800c558 <CDC_Control_FS+0x16c>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	0e1a      	lsrs	r2, r3, #24
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	3303      	adds	r3, #3
 800c524:	b2d2      	uxtb	r2, r2
 800c526:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	3304      	adds	r3, #4
 800c52c:	4a0a      	ldr	r2, [pc, #40]	; (800c558 <CDC_Control_FS+0x16c>)
 800c52e:	7912      	ldrb	r2, [r2, #4]
 800c530:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	3305      	adds	r3, #5
 800c536:	4a08      	ldr	r2, [pc, #32]	; (800c558 <CDC_Control_FS+0x16c>)
 800c538:	7952      	ldrb	r2, [r2, #5]
 800c53a:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	3306      	adds	r3, #6
 800c540:	4a05      	ldr	r2, [pc, #20]	; (800c558 <CDC_Control_FS+0x16c>)
 800c542:	7992      	ldrb	r2, [r2, #6]
 800c544:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c546:	e000      	b.n	800c54a <CDC_Control_FS+0x15e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c548:	bf00      	nop
  }

  return (USBD_OK);
 800c54a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3708      	adds	r7, #8
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	48000400 	.word	0x48000400
 800c558:	2000015c 	.word	0x2000015c

0800c55c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c566:	6879      	ldr	r1, [r7, #4]
 800c568:	482a      	ldr	r0, [pc, #168]	; (800c614 <CDC_Receive_FS+0xb8>)
 800c56a:	f7fe fde4 	bl	800b136 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c56e:	4829      	ldr	r0, [pc, #164]	; (800c614 <CDC_Receive_FS+0xb8>)
 800c570:	f7fe fe24 	bl	800b1bc <USBD_CDC_ReceivePacket>
  //COBS decode
  for(int i=0;i<*Len;i++)
 800c574:	2300      	movs	r3, #0
 800c576:	60fb      	str	r3, [r7, #12]
 800c578:	e042      	b.n	800c600 <CDC_Receive_FS+0xa4>
  {
    zero_count--;
 800c57a:	4b27      	ldr	r3, [pc, #156]	; (800c618 <CDC_Receive_FS+0xbc>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	3b01      	subs	r3, #1
 800c580:	b2da      	uxtb	r2, r3
 800c582:	4b25      	ldr	r3, [pc, #148]	; (800c618 <CDC_Receive_FS+0xbc>)
 800c584:	701a      	strb	r2, [r3, #0]

    if(Buf[i]==0x00){
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	4413      	add	r3, r2
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d114      	bne.n	800c5bc <CDC_Receive_FS+0x60>
      if(zero_count==0){
 800c592:	4b21      	ldr	r3, [pc, #132]	; (800c618 <CDC_Receive_FS+0xbc>)
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d109      	bne.n	800c5ae <CDC_Receive_FS+0x52>
        //last byte
        usb_process(DecodedData,data_index);
 800c59a:	4b20      	ldr	r3, [pc, #128]	; (800c61c <CDC_Receive_FS+0xc0>)
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	481f      	ldr	r0, [pc, #124]	; (800c620 <CDC_Receive_FS+0xc4>)
 800c5a2:	f7f3 fe4f 	bl	8000244 <usb_process>
        data_index=0;
 800c5a6:	4b1d      	ldr	r3, [pc, #116]	; (800c61c <CDC_Receive_FS+0xc0>)
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	701a      	strb	r2, [r3, #0]
 800c5ac:	e025      	b.n	800c5fa <CDC_Receive_FS+0x9e>
      }else{
        //error
        //reset
        data_index=0;
 800c5ae:	4b1b      	ldr	r3, [pc, #108]	; (800c61c <CDC_Receive_FS+0xc0>)
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	701a      	strb	r2, [r3, #0]
        zero_count=0;
 800c5b4:	4b18      	ldr	r3, [pc, #96]	; (800c618 <CDC_Receive_FS+0xbc>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	701a      	strb	r2, [r3, #0]
 800c5ba:	e01e      	b.n	800c5fa <CDC_Receive_FS+0x9e>
      }
      
    }else{
      if(zero_count==0){
 800c5bc:	4b16      	ldr	r3, [pc, #88]	; (800c618 <CDC_Receive_FS+0xbc>)
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10c      	bne.n	800c5de <CDC_Receive_FS+0x82>
    	DecodedData[data_index]=0x00;
 800c5c4:	4b15      	ldr	r3, [pc, #84]	; (800c61c <CDC_Receive_FS+0xc0>)
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	4b15      	ldr	r3, [pc, #84]	; (800c620 <CDC_Receive_FS+0xc4>)
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	5499      	strb	r1, [r3, r2]
        zero_count=Buf[i];
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	781a      	ldrb	r2, [r3, #0]
 800c5d8:	4b0f      	ldr	r3, [pc, #60]	; (800c618 <CDC_Receive_FS+0xbc>)
 800c5da:	701a      	strb	r2, [r3, #0]
 800c5dc:	e007      	b.n	800c5ee <CDC_Receive_FS+0x92>
      }else{
    	DecodedData[data_index]=Buf[i];
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	4a0d      	ldr	r2, [pc, #52]	; (800c61c <CDC_Receive_FS+0xc0>)
 800c5e6:	7812      	ldrb	r2, [r2, #0]
 800c5e8:	7819      	ldrb	r1, [r3, #0]
 800c5ea:	4b0d      	ldr	r3, [pc, #52]	; (800c620 <CDC_Receive_FS+0xc4>)
 800c5ec:	5499      	strb	r1, [r3, r2]
      }
      data_index++;
 800c5ee:	4b0b      	ldr	r3, [pc, #44]	; (800c61c <CDC_Receive_FS+0xc0>)
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	b2da      	uxtb	r2, r3
 800c5f6:	4b09      	ldr	r3, [pc, #36]	; (800c61c <CDC_Receive_FS+0xc0>)
 800c5f8:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<*Len;i++)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	60fb      	str	r3, [r7, #12]
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	429a      	cmp	r2, r3
 800c608:	d8b7      	bhi.n	800c57a <CDC_Receive_FS+0x1e>
    }
    
    
  }
  
  return (USBD_OK);
 800c60a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3710      	adds	r7, #16
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	2000022c 	.word	0x2000022c
 800c618:	20000531 	.word	0x20000531
 800c61c:	20000530 	.word	0x20000530
 800c620:	200004f0 	.word	0x200004f0

0800c624 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	460b      	mov	r3, r1
 800c62e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c630:	2300      	movs	r3, #0
 800c632:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c634:	4b11      	ldr	r3, [pc, #68]	; (800c67c <CDC_Transmit_FS+0x58>)
 800c636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c63a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c642:	2b00      	cmp	r3, #0
 800c644:	d004      	beq.n	800c650 <CDC_Transmit_FS+0x2c>
    led_on(red);
 800c646:	2003      	movs	r0, #3
 800c648:	f7f3 fef2 	bl	8000430 <led_on>
    return USBD_BUSY;
 800c64c:	2301      	movs	r3, #1
 800c64e:	e011      	b.n	800c674 <CDC_Transmit_FS+0x50>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c650:	887b      	ldrh	r3, [r7, #2]
 800c652:	461a      	mov	r2, r3
 800c654:	6879      	ldr	r1, [r7, #4]
 800c656:	4809      	ldr	r0, [pc, #36]	; (800c67c <CDC_Transmit_FS+0x58>)
 800c658:	f7fe fd53 	bl	800b102 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c65c:	4807      	ldr	r0, [pc, #28]	; (800c67c <CDC_Transmit_FS+0x58>)
 800c65e:	f7fe fd7e 	bl	800b15e <USBD_CDC_TransmitPacket>
 800c662:	4603      	mov	r3, r0
 800c664:	73fb      	strb	r3, [r7, #15]
  if(result !=USBD_OK)led_on(red);
 800c666:	7bfb      	ldrb	r3, [r7, #15]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d002      	beq.n	800c672 <CDC_Transmit_FS+0x4e>
 800c66c:	2003      	movs	r0, #3
 800c66e:	f7f3 fedf 	bl	8000430 <led_on>
  /* USER CODE END 7 */
  return result;
 800c672:	7bfb      	ldrb	r3, [r7, #15]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	2000022c 	.word	0x2000022c

0800c680 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	4603      	mov	r3, r0
 800c688:	6039      	str	r1, [r7, #0]
 800c68a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	2212      	movs	r2, #18
 800c690:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c692:	4b03      	ldr	r3, [pc, #12]	; (800c6a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c694:	4618      	mov	r0, r3
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr
 800c6a0:	20000190 	.word	0x20000190

0800c6a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	6039      	str	r1, [r7, #0]
 800c6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2204      	movs	r2, #4
 800c6b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c6b6:	4b03      	ldr	r3, [pc, #12]	; (800c6c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr
 800c6c4:	200001a4 	.word	0x200001a4

0800c6c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	6039      	str	r1, [r7, #0]
 800c6d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6d4:	79fb      	ldrb	r3, [r7, #7]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d105      	bne.n	800c6e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6da:	683a      	ldr	r2, [r7, #0]
 800c6dc:	4907      	ldr	r1, [pc, #28]	; (800c6fc <USBD_FS_ProductStrDescriptor+0x34>)
 800c6de:	4808      	ldr	r0, [pc, #32]	; (800c700 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6e0:	f7ff fd59 	bl	800c196 <USBD_GetString>
 800c6e4:	e004      	b.n	800c6f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	4904      	ldr	r1, [pc, #16]	; (800c6fc <USBD_FS_ProductStrDescriptor+0x34>)
 800c6ea:	4805      	ldr	r0, [pc, #20]	; (800c700 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6ec:	f7ff fd53 	bl	800c196 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6f0:	4b02      	ldr	r3, [pc, #8]	; (800c6fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	20000d34 	.word	0x20000d34
 800c700:	0800cf60 	.word	0x0800cf60

0800c704 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	4603      	mov	r3, r0
 800c70c:	6039      	str	r1, [r7, #0]
 800c70e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c710:	683a      	ldr	r2, [r7, #0]
 800c712:	4904      	ldr	r1, [pc, #16]	; (800c724 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c714:	4804      	ldr	r0, [pc, #16]	; (800c728 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c716:	f7ff fd3e 	bl	800c196 <USBD_GetString>
  return USBD_StrDesc;
 800c71a:	4b02      	ldr	r3, [pc, #8]	; (800c724 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	20000d34 	.word	0x20000d34
 800c728:	0800cf78 	.word	0x0800cf78

0800c72c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	4603      	mov	r3, r0
 800c734:	6039      	str	r1, [r7, #0]
 800c736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	221a      	movs	r2, #26
 800c73c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c73e:	f000 f843 	bl	800c7c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c742:	4b02      	ldr	r3, [pc, #8]	; (800c74c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c744:	4618      	mov	r0, r3
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	200001a8 	.word	0x200001a8

0800c750 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	4603      	mov	r3, r0
 800c758:	6039      	str	r1, [r7, #0]
 800c75a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c75c:	79fb      	ldrb	r3, [r7, #7]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d105      	bne.n	800c76e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c762:	683a      	ldr	r2, [r7, #0]
 800c764:	4907      	ldr	r1, [pc, #28]	; (800c784 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c766:	4808      	ldr	r0, [pc, #32]	; (800c788 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c768:	f7ff fd15 	bl	800c196 <USBD_GetString>
 800c76c:	e004      	b.n	800c778 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c76e:	683a      	ldr	r2, [r7, #0]
 800c770:	4904      	ldr	r1, [pc, #16]	; (800c784 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c772:	4805      	ldr	r0, [pc, #20]	; (800c788 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c774:	f7ff fd0f 	bl	800c196 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c778:	4b02      	ldr	r3, [pc, #8]	; (800c784 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	20000d34 	.word	0x20000d34
 800c788:	0800cf8c 	.word	0x0800cf8c

0800c78c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	4603      	mov	r3, r0
 800c794:	6039      	str	r1, [r7, #0]
 800c796:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c798:	79fb      	ldrb	r3, [r7, #7]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d105      	bne.n	800c7aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c79e:	683a      	ldr	r2, [r7, #0]
 800c7a0:	4907      	ldr	r1, [pc, #28]	; (800c7c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7a2:	4808      	ldr	r0, [pc, #32]	; (800c7c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7a4:	f7ff fcf7 	bl	800c196 <USBD_GetString>
 800c7a8:	e004      	b.n	800c7b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7aa:	683a      	ldr	r2, [r7, #0]
 800c7ac:	4904      	ldr	r1, [pc, #16]	; (800c7c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7ae:	4805      	ldr	r0, [pc, #20]	; (800c7c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7b0:	f7ff fcf1 	bl	800c196 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7b4:	4b02      	ldr	r3, [pc, #8]	; (800c7c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	20000d34 	.word	0x20000d34
 800c7c4:	0800cf98 	.word	0x0800cf98

0800c7c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c7ce:	4b0f      	ldr	r3, [pc, #60]	; (800c80c <Get_SerialNum+0x44>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c7d4:	4b0e      	ldr	r3, [pc, #56]	; (800c810 <Get_SerialNum+0x48>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c7da:	4b0e      	ldr	r3, [pc, #56]	; (800c814 <Get_SerialNum+0x4c>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d009      	beq.n	800c802 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c7ee:	2208      	movs	r2, #8
 800c7f0:	4909      	ldr	r1, [pc, #36]	; (800c818 <Get_SerialNum+0x50>)
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f000 f814 	bl	800c820 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c7f8:	2204      	movs	r2, #4
 800c7fa:	4908      	ldr	r1, [pc, #32]	; (800c81c <Get_SerialNum+0x54>)
 800c7fc:	68b8      	ldr	r0, [r7, #8]
 800c7fe:	f000 f80f 	bl	800c820 <IntToUnicode>
  }
}
 800c802:	bf00      	nop
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	1ffff7ac 	.word	0x1ffff7ac
 800c810:	1ffff7b0 	.word	0x1ffff7b0
 800c814:	1ffff7b4 	.word	0x1ffff7b4
 800c818:	200001aa 	.word	0x200001aa
 800c81c:	200001ba 	.word	0x200001ba

0800c820 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c820:	b480      	push	{r7}
 800c822:	b087      	sub	sp, #28
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	4613      	mov	r3, r2
 800c82c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c82e:	2300      	movs	r3, #0
 800c830:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c832:	2300      	movs	r3, #0
 800c834:	75fb      	strb	r3, [r7, #23]
 800c836:	e027      	b.n	800c888 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	0f1b      	lsrs	r3, r3, #28
 800c83c:	2b09      	cmp	r3, #9
 800c83e:	d80b      	bhi.n	800c858 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	0f1b      	lsrs	r3, r3, #28
 800c844:	b2da      	uxtb	r2, r3
 800c846:	7dfb      	ldrb	r3, [r7, #23]
 800c848:	005b      	lsls	r3, r3, #1
 800c84a:	4619      	mov	r1, r3
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	440b      	add	r3, r1
 800c850:	3230      	adds	r2, #48	; 0x30
 800c852:	b2d2      	uxtb	r2, r2
 800c854:	701a      	strb	r2, [r3, #0]
 800c856:	e00a      	b.n	800c86e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	0f1b      	lsrs	r3, r3, #28
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	7dfb      	ldrb	r3, [r7, #23]
 800c860:	005b      	lsls	r3, r3, #1
 800c862:	4619      	mov	r1, r3
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	440b      	add	r3, r1
 800c868:	3237      	adds	r2, #55	; 0x37
 800c86a:	b2d2      	uxtb	r2, r2
 800c86c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	011b      	lsls	r3, r3, #4
 800c872:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c874:	7dfb      	ldrb	r3, [r7, #23]
 800c876:	005b      	lsls	r3, r3, #1
 800c878:	3301      	adds	r3, #1
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	4413      	add	r3, r2
 800c87e:	2200      	movs	r2, #0
 800c880:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c882:	7dfb      	ldrb	r3, [r7, #23]
 800c884:	3301      	adds	r3, #1
 800c886:	75fb      	strb	r3, [r7, #23]
 800c888:	7dfa      	ldrb	r2, [r7, #23]
 800c88a:	79fb      	ldrb	r3, [r7, #7]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d3d3      	bcc.n	800c838 <IntToUnicode+0x18>
  }
}
 800c890:	bf00      	nop
 800c892:	bf00      	nop
 800c894:	371c      	adds	r7, #28
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
	...

0800c8a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b08a      	sub	sp, #40	; 0x28
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8a8:	f107 0314 	add.w	r3, r7, #20
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	601a      	str	r2, [r3, #0]
 800c8b0:	605a      	str	r2, [r3, #4]
 800c8b2:	609a      	str	r2, [r3, #8]
 800c8b4:	60da      	str	r2, [r3, #12]
 800c8b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a1f      	ldr	r2, [pc, #124]	; (800c93c <HAL_PCD_MspInit+0x9c>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d137      	bne.n	800c932 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c8c2:	4b1f      	ldr	r3, [pc, #124]	; (800c940 <HAL_PCD_MspInit+0xa0>)
 800c8c4:	695b      	ldr	r3, [r3, #20]
 800c8c6:	4a1e      	ldr	r2, [pc, #120]	; (800c940 <HAL_PCD_MspInit+0xa0>)
 800c8c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8cc:	6153      	str	r3, [r2, #20]
 800c8ce:	4b1c      	ldr	r3, [pc, #112]	; (800c940 <HAL_PCD_MspInit+0xa0>)
 800c8d0:	695b      	ldr	r3, [r3, #20]
 800c8d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8d6:	613b      	str	r3, [r7, #16]
 800c8d8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c8da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c8de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c8e8:	2303      	movs	r3, #3
 800c8ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800c8ec:	230e      	movs	r3, #14
 800c8ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8f0:	f107 0314 	add.w	r3, r7, #20
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c8fa:	f7f8 fc93 	bl	8005224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c8fe:	4b10      	ldr	r3, [pc, #64]	; (800c940 <HAL_PCD_MspInit+0xa0>)
 800c900:	69db      	ldr	r3, [r3, #28]
 800c902:	4a0f      	ldr	r2, [pc, #60]	; (800c940 <HAL_PCD_MspInit+0xa0>)
 800c904:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c908:	61d3      	str	r3, [r2, #28]
 800c90a:	4b0d      	ldr	r3, [pc, #52]	; (800c940 <HAL_PCD_MspInit+0xa0>)
 800c90c:	69db      	ldr	r3, [r3, #28]
 800c90e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 800c916:	4b0b      	ldr	r3, [pc, #44]	; (800c944 <HAL_PCD_MspInit+0xa4>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a0a      	ldr	r2, [pc, #40]	; (800c944 <HAL_PCD_MspInit+0xa4>)
 800c91c:	f043 0320 	orr.w	r3, r3, #32
 800c920:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 800c922:	2200      	movs	r2, #0
 800c924:	2101      	movs	r1, #1
 800c926:	204b      	movs	r0, #75	; 0x4b
 800c928:	f7f8 fc45 	bl	80051b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c92c:	204b      	movs	r0, #75	; 0x4b
 800c92e:	f7f8 fc5e 	bl	80051ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c932:	bf00      	nop
 800c934:	3728      	adds	r7, #40	; 0x28
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	40005c00 	.word	0x40005c00
 800c940:	40021000 	.word	0x40021000
 800c944:	40010000 	.word	0x40010000

0800c948 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c95c:	4619      	mov	r1, r3
 800c95e:	4610      	mov	r0, r2
 800c960:	f7fe fce4 	bl	800b32c <USBD_LL_SetupStage>
}
 800c964:	bf00      	nop
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	460b      	mov	r3, r1
 800c976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c97e:	78fa      	ldrb	r2, [r7, #3]
 800c980:	6879      	ldr	r1, [r7, #4]
 800c982:	4613      	mov	r3, r2
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	4413      	add	r3, r2
 800c988:	00db      	lsls	r3, r3, #3
 800c98a:	440b      	add	r3, r1
 800c98c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	78fb      	ldrb	r3, [r7, #3]
 800c994:	4619      	mov	r1, r3
 800c996:	f7fe fd16 	bl	800b3c6 <USBD_LL_DataOutStage>
}
 800c99a:	bf00      	nop
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c9b4:	78fa      	ldrb	r2, [r7, #3]
 800c9b6:	6879      	ldr	r1, [r7, #4]
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4413      	add	r3, r2
 800c9be:	00db      	lsls	r3, r3, #3
 800c9c0:	440b      	add	r3, r1
 800c9c2:	333c      	adds	r3, #60	; 0x3c
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	78fb      	ldrb	r3, [r7, #3]
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	f7fe fd6d 	bl	800b4a8 <USBD_LL_DataInStage>
}
 800c9ce:	bf00      	nop
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b082      	sub	sp, #8
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fe fe80 	bl	800b6ea <USBD_LL_SOF>
}
 800c9ea:	bf00      	nop
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b084      	sub	sp, #16
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	d001      	beq.n	800ca0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ca06:	f7f3 fe63 	bl	80006d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ca10:	7bfa      	ldrb	r2, [r7, #15]
 800ca12:	4611      	mov	r1, r2
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7fe fe2d 	bl	800b674 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fe fde6 	bl	800b5f2 <USBD_LL_Reset>
}
 800ca26:	bf00      	nop
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
	...

0800ca30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fe fe28 	bl	800b694 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	699b      	ldr	r3, [r3, #24]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d005      	beq.n	800ca58 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca4c:	4b04      	ldr	r3, [pc, #16]	; (800ca60 <HAL_PCD_SuspendCallback+0x30>)
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	4a03      	ldr	r2, [pc, #12]	; (800ca60 <HAL_PCD_SuspendCallback+0x30>)
 800ca52:	f043 0306 	orr.w	r3, r3, #6
 800ca56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca58:	bf00      	nop
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	e000ed00 	.word	0xe000ed00

0800ca64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fe fe23 	bl	800b6be <USBD_LL_Resume>
}
 800ca78:	bf00      	nop
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ca88:	4a28      	ldr	r2, [pc, #160]	; (800cb2c <USBD_LL_Init+0xac>)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4a26      	ldr	r2, [pc, #152]	; (800cb2c <USBD_LL_Init+0xac>)
 800ca94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ca98:	4b24      	ldr	r3, [pc, #144]	; (800cb2c <USBD_LL_Init+0xac>)
 800ca9a:	4a25      	ldr	r2, [pc, #148]	; (800cb30 <USBD_LL_Init+0xb0>)
 800ca9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca9e:	4b23      	ldr	r3, [pc, #140]	; (800cb2c <USBD_LL_Init+0xac>)
 800caa0:	2208      	movs	r2, #8
 800caa2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800caa4:	4b21      	ldr	r3, [pc, #132]	; (800cb2c <USBD_LL_Init+0xac>)
 800caa6:	2202      	movs	r2, #2
 800caa8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800caaa:	4b20      	ldr	r3, [pc, #128]	; (800cb2c <USBD_LL_Init+0xac>)
 800caac:	2202      	movs	r2, #2
 800caae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cab0:	4b1e      	ldr	r3, [pc, #120]	; (800cb2c <USBD_LL_Init+0xac>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cab6:	4b1d      	ldr	r3, [pc, #116]	; (800cb2c <USBD_LL_Init+0xac>)
 800cab8:	2200      	movs	r2, #0
 800caba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cabc:	481b      	ldr	r0, [pc, #108]	; (800cb2c <USBD_LL_Init+0xac>)
 800cabe:	f7f8 fd5d 	bl	800557c <HAL_PCD_Init>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d001      	beq.n	800cacc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cac8:	f7f3 fe02 	bl	80006d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cad2:	2318      	movs	r3, #24
 800cad4:	2200      	movs	r2, #0
 800cad6:	2100      	movs	r1, #0
 800cad8:	f7fa f9f8 	bl	8006ecc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cae2:	2358      	movs	r3, #88	; 0x58
 800cae4:	2200      	movs	r2, #0
 800cae6:	2180      	movs	r1, #128	; 0x80
 800cae8:	f7fa f9f0 	bl	8006ecc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800caf2:	23c0      	movs	r3, #192	; 0xc0
 800caf4:	2200      	movs	r2, #0
 800caf6:	2181      	movs	r1, #129	; 0x81
 800caf8:	f7fa f9e8 	bl	8006ecc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cb02:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cb06:	2200      	movs	r2, #0
 800cb08:	2101      	movs	r1, #1
 800cb0a:	f7fa f9df 	bl	8006ecc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cb14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb18:	2200      	movs	r2, #0
 800cb1a:	2182      	movs	r1, #130	; 0x82
 800cb1c:	f7fa f9d6 	bl	8006ecc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	20000f34 	.word	0x20000f34
 800cb30:	40005c00 	.word	0x40005c00

0800cb34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb40:	2300      	movs	r3, #0
 800cb42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7f8 fdf4 	bl	8005738 <HAL_PCD_Start>
 800cb50:	4603      	mov	r3, r0
 800cb52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb54:	7bfb      	ldrb	r3, [r7, #15]
 800cb56:	4618      	mov	r0, r3
 800cb58:	f000 f964 	bl	800ce24 <USBD_Get_USB_Status>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb60:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b084      	sub	sp, #16
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
 800cb72:	4608      	mov	r0, r1
 800cb74:	4611      	mov	r1, r2
 800cb76:	461a      	mov	r2, r3
 800cb78:	4603      	mov	r3, r0
 800cb7a:	70fb      	strb	r3, [r7, #3]
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	70bb      	strb	r3, [r7, #2]
 800cb80:	4613      	mov	r3, r2
 800cb82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cb92:	78bb      	ldrb	r3, [r7, #2]
 800cb94:	883a      	ldrh	r2, [r7, #0]
 800cb96:	78f9      	ldrb	r1, [r7, #3]
 800cb98:	f7f8 ff10 	bl	80059bc <HAL_PCD_EP_Open>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 f93e 	bl	800ce24 <USBD_Get_USB_Status>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbac:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b084      	sub	sp, #16
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbd0:	78fa      	ldrb	r2, [r7, #3]
 800cbd2:	4611      	mov	r1, r2
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7f8 ff57 	bl	8005a88 <HAL_PCD_EP_Close>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbde:	7bfb      	ldrb	r3, [r7, #15]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f000 f91f 	bl	800ce24 <USBD_Get_USB_Status>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbea:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3710      	adds	r7, #16
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc00:	2300      	movs	r3, #0
 800cc02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc0e:	78fa      	ldrb	r2, [r7, #3]
 800cc10:	4611      	mov	r1, r2
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7f9 f818 	bl	8005c48 <HAL_PCD_EP_SetStall>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc1c:	7bfb      	ldrb	r3, [r7, #15]
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f000 f900 	bl	800ce24 <USBD_Get_USB_Status>
 800cc24:	4603      	mov	r3, r0
 800cc26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc28:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3710      	adds	r7, #16
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b084      	sub	sp, #16
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc42:	2300      	movs	r3, #0
 800cc44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc4c:	78fa      	ldrb	r2, [r7, #3]
 800cc4e:	4611      	mov	r1, r2
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7f9 f84b 	bl	8005cec <HAL_PCD_EP_ClrStall>
 800cc56:	4603      	mov	r3, r0
 800cc58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f000 f8e1 	bl	800ce24 <USBD_Get_USB_Status>
 800cc62:	4603      	mov	r3, r0
 800cc64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc66:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b085      	sub	sp, #20
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	da0c      	bge.n	800cca6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc8c:	78fb      	ldrb	r3, [r7, #3]
 800cc8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc92:	68f9      	ldr	r1, [r7, #12]
 800cc94:	1c5a      	adds	r2, r3, #1
 800cc96:	4613      	mov	r3, r2
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	4413      	add	r3, r2
 800cc9c:	00db      	lsls	r3, r3, #3
 800cc9e:	440b      	add	r3, r1
 800cca0:	3302      	adds	r3, #2
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	e00b      	b.n	800ccbe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cca6:	78fb      	ldrb	r3, [r7, #3]
 800cca8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccac:	68f9      	ldr	r1, [r7, #12]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	009b      	lsls	r3, r3, #2
 800ccb2:	4413      	add	r3, r2
 800ccb4:	00db      	lsls	r3, r3, #3
 800ccb6:	440b      	add	r3, r1
 800ccb8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ccbc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3714      	adds	r7, #20
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr

0800ccca <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b084      	sub	sp, #16
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cce4:	78fa      	ldrb	r2, [r7, #3]
 800cce6:	4611      	mov	r1, r2
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7f8 fe42 	bl	8005972 <HAL_PCD_SetAddress>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccf2:	7bfb      	ldrb	r3, [r7, #15]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f000 f895 	bl	800ce24 <USBD_Get_USB_Status>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3710      	adds	r7, #16
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	607a      	str	r2, [r7, #4]
 800cd12:	461a      	mov	r2, r3
 800cd14:	460b      	mov	r3, r1
 800cd16:	72fb      	strb	r3, [r7, #11]
 800cd18:	4613      	mov	r3, r2
 800cd1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd20:	2300      	movs	r3, #0
 800cd22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd2a:	893b      	ldrh	r3, [r7, #8]
 800cd2c:	7af9      	ldrb	r1, [r7, #11]
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	f7f8 ff47 	bl	8005bc2 <HAL_PCD_EP_Transmit>
 800cd34:	4603      	mov	r3, r0
 800cd36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd38:	7dfb      	ldrb	r3, [r7, #23]
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f000 f872 	bl	800ce24 <USBD_Get_USB_Status>
 800cd40:	4603      	mov	r3, r0
 800cd42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd44:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3718      	adds	r7, #24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}

0800cd4e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b086      	sub	sp, #24
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	60f8      	str	r0, [r7, #12]
 800cd56:	607a      	str	r2, [r7, #4]
 800cd58:	461a      	mov	r2, r3
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	72fb      	strb	r3, [r7, #11]
 800cd5e:	4613      	mov	r3, r2
 800cd60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd62:	2300      	movs	r3, #0
 800cd64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd66:	2300      	movs	r3, #0
 800cd68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd70:	893b      	ldrh	r3, [r7, #8]
 800cd72:	7af9      	ldrb	r1, [r7, #11]
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	f7f8 fecf 	bl	8005b18 <HAL_PCD_EP_Receive>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd7e:	7dfb      	ldrb	r3, [r7, #23]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f000 f84f 	bl	800ce24 <USBD_Get_USB_Status>
 800cd86:	4603      	mov	r3, r0
 800cd88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd8a:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3718      	adds	r7, #24
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cda6:	78fa      	ldrb	r2, [r7, #3]
 800cda8:	4611      	mov	r1, r2
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7f8 fef1 	bl	8005b92 <HAL_PCD_EP_GetRxCount>
 800cdb0:	4603      	mov	r3, r0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
	...

0800cdbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cdc4:	4b03      	ldr	r3, [pc, #12]	; (800cdd4 <USBD_static_malloc+0x18>)
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	370c      	adds	r7, #12
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	20001220 	.word	0x20001220

0800cdd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b083      	sub	sp, #12
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]

}
 800cde0:	bf00      	nop
 800cde2:	370c      	adds	r7, #12
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800cdf8:	78fb      	ldrb	r3, [r7, #3]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d107      	bne.n	800ce0e <HAL_PCDEx_SetConnectionState+0x22>
  {
	/* Configure Low connection state. */
	 HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_SET);
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ce04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ce08:	f7f8 fb86 	bl	8005518 <HAL_GPIO_WritePin>
  {
	/* Configure High connection state. */
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_RESET);
  }
  /* USER CODE END 6 */
}
 800ce0c:	e006      	b.n	800ce1c <HAL_PCDEx_SetConnectionState+0x30>
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_RESET);
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ce14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ce18:	f7f8 fb7e 	bl	8005518 <HAL_GPIO_WritePin>
}
 800ce1c:	bf00      	nop
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce32:	79fb      	ldrb	r3, [r7, #7]
 800ce34:	2b03      	cmp	r3, #3
 800ce36:	d817      	bhi.n	800ce68 <USBD_Get_USB_Status+0x44>
 800ce38:	a201      	add	r2, pc, #4	; (adr r2, 800ce40 <USBD_Get_USB_Status+0x1c>)
 800ce3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3e:	bf00      	nop
 800ce40:	0800ce51 	.word	0x0800ce51
 800ce44:	0800ce57 	.word	0x0800ce57
 800ce48:	0800ce5d 	.word	0x0800ce5d
 800ce4c:	0800ce63 	.word	0x0800ce63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce50:	2300      	movs	r3, #0
 800ce52:	73fb      	strb	r3, [r7, #15]
    break;
 800ce54:	e00b      	b.n	800ce6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce56:	2302      	movs	r3, #2
 800ce58:	73fb      	strb	r3, [r7, #15]
    break;
 800ce5a:	e008      	b.n	800ce6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce60:	e005      	b.n	800ce6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce62:	2302      	movs	r3, #2
 800ce64:	73fb      	strb	r3, [r7, #15]
    break;
 800ce66:	e002      	b.n	800ce6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce68:	2302      	movs	r3, #2
 800ce6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce6c:	bf00      	nop
  }
  return usb_status;
 800ce6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <__libc_init_array>:
 800ce7c:	b570      	push	{r4, r5, r6, lr}
 800ce7e:	4d0d      	ldr	r5, [pc, #52]	; (800ceb4 <__libc_init_array+0x38>)
 800ce80:	4c0d      	ldr	r4, [pc, #52]	; (800ceb8 <__libc_init_array+0x3c>)
 800ce82:	1b64      	subs	r4, r4, r5
 800ce84:	10a4      	asrs	r4, r4, #2
 800ce86:	2600      	movs	r6, #0
 800ce88:	42a6      	cmp	r6, r4
 800ce8a:	d109      	bne.n	800cea0 <__libc_init_array+0x24>
 800ce8c:	4d0b      	ldr	r5, [pc, #44]	; (800cebc <__libc_init_array+0x40>)
 800ce8e:	4c0c      	ldr	r4, [pc, #48]	; (800cec0 <__libc_init_array+0x44>)
 800ce90:	f000 f848 	bl	800cf24 <_init>
 800ce94:	1b64      	subs	r4, r4, r5
 800ce96:	10a4      	asrs	r4, r4, #2
 800ce98:	2600      	movs	r6, #0
 800ce9a:	42a6      	cmp	r6, r4
 800ce9c:	d105      	bne.n	800ceaa <__libc_init_array+0x2e>
 800ce9e:	bd70      	pop	{r4, r5, r6, pc}
 800cea0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cea4:	4798      	blx	r3
 800cea6:	3601      	adds	r6, #1
 800cea8:	e7ee      	b.n	800ce88 <__libc_init_array+0xc>
 800ceaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceae:	4798      	blx	r3
 800ceb0:	3601      	adds	r6, #1
 800ceb2:	e7f2      	b.n	800ce9a <__libc_init_array+0x1e>
 800ceb4:	0800cfec 	.word	0x0800cfec
 800ceb8:	0800cfec 	.word	0x0800cfec
 800cebc:	0800cfec 	.word	0x0800cfec
 800cec0:	0800cff0 	.word	0x0800cff0

0800cec4 <memcpy>:
 800cec4:	440a      	add	r2, r1
 800cec6:	4291      	cmp	r1, r2
 800cec8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cecc:	d100      	bne.n	800ced0 <memcpy+0xc>
 800cece:	4770      	bx	lr
 800ced0:	b510      	push	{r4, lr}
 800ced2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ced6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ceda:	4291      	cmp	r1, r2
 800cedc:	d1f9      	bne.n	800ced2 <memcpy+0xe>
 800cede:	bd10      	pop	{r4, pc}

0800cee0 <memmove>:
 800cee0:	4288      	cmp	r0, r1
 800cee2:	b510      	push	{r4, lr}
 800cee4:	eb01 0402 	add.w	r4, r1, r2
 800cee8:	d902      	bls.n	800cef0 <memmove+0x10>
 800ceea:	4284      	cmp	r4, r0
 800ceec:	4623      	mov	r3, r4
 800ceee:	d807      	bhi.n	800cf00 <memmove+0x20>
 800cef0:	1e43      	subs	r3, r0, #1
 800cef2:	42a1      	cmp	r1, r4
 800cef4:	d008      	beq.n	800cf08 <memmove+0x28>
 800cef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cefa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cefe:	e7f8      	b.n	800cef2 <memmove+0x12>
 800cf00:	4402      	add	r2, r0
 800cf02:	4601      	mov	r1, r0
 800cf04:	428a      	cmp	r2, r1
 800cf06:	d100      	bne.n	800cf0a <memmove+0x2a>
 800cf08:	bd10      	pop	{r4, pc}
 800cf0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf12:	e7f7      	b.n	800cf04 <memmove+0x24>

0800cf14 <memset>:
 800cf14:	4402      	add	r2, r0
 800cf16:	4603      	mov	r3, r0
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d100      	bne.n	800cf1e <memset+0xa>
 800cf1c:	4770      	bx	lr
 800cf1e:	f803 1b01 	strb.w	r1, [r3], #1
 800cf22:	e7f9      	b.n	800cf18 <memset+0x4>

0800cf24 <_init>:
 800cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf26:	bf00      	nop
 800cf28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf2a:	bc08      	pop	{r3}
 800cf2c:	469e      	mov	lr, r3
 800cf2e:	4770      	bx	lr

0800cf30 <_fini>:
 800cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf32:	bf00      	nop
 800cf34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf36:	bc08      	pop	{r3}
 800cf38:	469e      	mov	lr, r3
 800cf3a:	4770      	bx	lr
